
MicroSD - SPI - FatFs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a370  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af0  0800a430  0800a430  0000b430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af20  0800af20  0000c068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800af20  0800af20  0000c068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800af20  0800af20  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af20  0800af20  0000bf20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af24  0800af24  0000bf24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800af28  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  20000068  0800af90  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b8  0800af90  0000c7b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efeb  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8d  00000000  00000000  0001b07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  0001db08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3e  00000000  00000000  0001e858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014877  00000000  00000000  0001f296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001425a  00000000  00000000  00033b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e84f  00000000  00000000  00047d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b65b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d4  00000000  00000000  000b65fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000b9dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a418 	.word	0x0800a418

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800a418 	.word	0x0800a418

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int fd, unsigned char *buf, int len) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d002      	beq.n	8000270 <_write+0x18>
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	2b02      	cmp	r3, #2
 800026e:	d106      	bne.n	800027e <_write+0x26>
    HAL_UART_Transmit(&huart2, buf, len, 999);  // Print to the UART
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	b29a      	uxth	r2, r3
 8000274:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <_write+0x30>)
 8000276:	68b9      	ldr	r1, [r7, #8]
 8000278:	4804      	ldr	r0, [pc, #16]	@ (800028c <_write+0x34>)
 800027a:	f003 fdaf 	bl	8003ddc <HAL_UART_Transmit>
  }
  return len;
 800027e:	687b      	ldr	r3, [r7, #4]
}
 8000280:	0018      	movs	r0, r3
 8000282:	46bd      	mov	sp, r7
 8000284:	b004      	add	sp, #16
 8000286:	bd80      	pop	{r7, pc}
 8000288:	000003e7 	.word	0x000003e7
 800028c:	20000170 	.word	0x20000170

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f001 fa8c 	bl	80017b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f81a 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f8ec 	bl	8000478 <MX_GPIO_Init>
  MX_DMA_Init();
 80002a0:	f000 f8cc 	bl	800043c <MX_DMA_Init>
  MX_SPI1_Init();
 80002a4:	f000 f85c 	bl	8000360 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80002a8:	f000 f898 	bl	80003dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  sd_mount();
 80002ac:	f000 fa4c 	bl	8000748 <sd_mount>
  sd_list_files();
 80002b0:	f000 fc4a 	bl	8000b48 <sd_list_files>
  sd_write_file("HOLA.CSV", "Row,Data\n1,1\n2,2\n3,3\n");
 80002b4:	4a04      	ldr	r2, [pc, #16]	@ (80002c8 <main+0x38>)
 80002b6:	4b05      	ldr	r3, [pc, #20]	@ (80002cc <main+0x3c>)
 80002b8:	0011      	movs	r1, r2
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 fb32 	bl	8000924 <sd_write_file>
  sd_unmount();
 80002c0:	f000 fb0a 	bl	80008d8 <sd_unmount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c4:	46c0      	nop			@ (mov r8, r8)
 80002c6:	e7fd      	b.n	80002c4 <main+0x34>
 80002c8:	0800a430 	.word	0x0800a430
 80002cc:	0800a448 	.word	0x0800a448

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b091      	sub	sp, #68	@ 0x44
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	2410      	movs	r4, #16
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	0018      	movs	r0, r3
 80002dc:	2330      	movs	r3, #48	@ 0x30
 80002de:	001a      	movs	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	f009 f9fb 	bl	80096dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e6:	003b      	movs	r3, r7
 80002e8:	0018      	movs	r0, r3
 80002ea:	2310      	movs	r3, #16
 80002ec:	001a      	movs	r2, r3
 80002ee:	2100      	movs	r1, #0
 80002f0:	f009 f9f4 	bl	80096dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f4:	0021      	movs	r1, r4
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2201      	movs	r2, #1
 80002fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2201      	movs	r2, #1
 8000300:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2202      	movs	r2, #2
 8000306:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2280      	movs	r2, #128	@ 0x80
 800030c:	0252      	lsls	r2, r2, #9
 800030e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2280      	movs	r2, #128	@ 0x80
 8000314:	0312      	lsls	r2, r2, #12
 8000316:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	187b      	adds	r3, r7, r1
 8000320:	0018      	movs	r0, r3
 8000322:	f001 fead 	bl	8002080 <HAL_RCC_OscConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800032a:	f000 f8ed 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	003b      	movs	r3, r7
 8000330:	2207      	movs	r2, #7
 8000332:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	003b      	movs	r3, r7
 8000336:	2202      	movs	r2, #2
 8000338:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	003b      	movs	r3, r7
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000340:	003b      	movs	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000346:	003b      	movs	r3, r7
 8000348:	2101      	movs	r1, #1
 800034a:	0018      	movs	r0, r3
 800034c:	f002 f9b2 	bl	80026b4 <HAL_RCC_ClockConfig>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000354:	f000 f8d8 	bl	8000508 <Error_Handler>
  }
}
 8000358:	46c0      	nop			@ (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b011      	add	sp, #68	@ 0x44
 800035e:	bd90      	pop	{r4, r7, pc}

08000360 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000364:	4b1b      	ldr	r3, [pc, #108]	@ (80003d4 <MX_SPI1_Init+0x74>)
 8000366:	4a1c      	ldr	r2, [pc, #112]	@ (80003d8 <MX_SPI1_Init+0x78>)
 8000368:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800036a:	4b1a      	ldr	r3, [pc, #104]	@ (80003d4 <MX_SPI1_Init+0x74>)
 800036c:	2282      	movs	r2, #130	@ 0x82
 800036e:	0052      	lsls	r2, r2, #1
 8000370:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000372:	4b18      	ldr	r3, [pc, #96]	@ (80003d4 <MX_SPI1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000378:	4b16      	ldr	r3, [pc, #88]	@ (80003d4 <MX_SPI1_Init+0x74>)
 800037a:	22e0      	movs	r2, #224	@ 0xe0
 800037c:	00d2      	lsls	r2, r2, #3
 800037e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000380:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <MX_SPI1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000386:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <MX_SPI1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800038c:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <MX_SPI1_Init+0x74>)
 800038e:	2280      	movs	r2, #128	@ 0x80
 8000390:	0092      	lsls	r2, r2, #2
 8000392:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000394:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <MX_SPI1_Init+0x74>)
 8000396:	2218      	movs	r2, #24
 8000398:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800039a:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <MX_SPI1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <MX_SPI1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a6:	4b0b      	ldr	r3, [pc, #44]	@ (80003d4 <MX_SPI1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003ac:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <MX_SPI1_Init+0x74>)
 80003ae:	2207      	movs	r2, #7
 80003b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003b2:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <MX_SPI1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003b8:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <MX_SPI1_Init+0x74>)
 80003ba:	2208      	movs	r2, #8
 80003bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003be:	4b05      	ldr	r3, [pc, #20]	@ (80003d4 <MX_SPI1_Init+0x74>)
 80003c0:	0018      	movs	r0, r3
 80003c2:	f002 fabb 	bl	800293c <HAL_SPI_Init>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003ca:	f000 f89d 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ce:	46c0      	nop			@ (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000084 	.word	0x20000084
 80003d8:	40013000 	.word	0x40013000

080003dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e0:	4b14      	ldr	r3, [pc, #80]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 80003e2:	4a15      	ldr	r2, [pc, #84]	@ (8000438 <MX_USART2_UART_Init+0x5c>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003e6:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 80003e8:	22e1      	movs	r2, #225	@ 0xe1
 80003ea:	0252      	lsls	r2, r2, #9
 80003ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b0b      	ldr	r3, [pc, #44]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b09      	ldr	r3, [pc, #36]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000412:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000418:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 800041a:	2200      	movs	r2, #0
 800041c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800041e:	4b05      	ldr	r3, [pc, #20]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 8000420:	0018      	movs	r0, r3
 8000422:	f003 fc87 	bl	8003d34 <HAL_UART_Init>
 8000426:	1e03      	subs	r3, r0, #0
 8000428:	d001      	beq.n	800042e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800042a:	f000 f86d 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800042e:	46c0      	nop			@ (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000170 	.word	0x20000170
 8000438:	40004400 	.word	0x40004400

0800043c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000442:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <MX_DMA_Init+0x38>)
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	4b0b      	ldr	r3, [pc, #44]	@ (8000474 <MX_DMA_Init+0x38>)
 8000448:	2101      	movs	r1, #1
 800044a:	430a      	orrs	r2, r1
 800044c:	615a      	str	r2, [r3, #20]
 800044e:	4b09      	ldr	r3, [pc, #36]	@ (8000474 <MX_DMA_Init+0x38>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	2201      	movs	r2, #1
 8000454:	4013      	ands	r3, r2
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2100      	movs	r1, #0
 800045e:	200a      	movs	r0, #10
 8000460:	f001 fab6 	bl	80019d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000464:	200a      	movs	r0, #10
 8000466:	f001 fac8 	bl	80019fa <HAL_NVIC_EnableIRQ>

}
 800046a:	46c0      	nop			@ (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	40021000 	.word	0x40021000

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b590      	push	{r4, r7, lr}
 800047a:	b089      	sub	sp, #36	@ 0x24
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	240c      	movs	r4, #12
 8000480:	193b      	adds	r3, r7, r4
 8000482:	0018      	movs	r0, r3
 8000484:	2314      	movs	r3, #20
 8000486:	001a      	movs	r2, r3
 8000488:	2100      	movs	r1, #0
 800048a:	f009 f927 	bl	80096dc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048e:	4b1d      	ldr	r3, [pc, #116]	@ (8000504 <MX_GPIO_Init+0x8c>)
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	4b1c      	ldr	r3, [pc, #112]	@ (8000504 <MX_GPIO_Init+0x8c>)
 8000494:	2180      	movs	r1, #128	@ 0x80
 8000496:	03c9      	lsls	r1, r1, #15
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	4b19      	ldr	r3, [pc, #100]	@ (8000504 <MX_GPIO_Init+0x8c>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	2380      	movs	r3, #128	@ 0x80
 80004a2:	03db      	lsls	r3, r3, #15
 80004a4:	4013      	ands	r3, r2
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b16      	ldr	r3, [pc, #88]	@ (8000504 <MX_GPIO_Init+0x8c>)
 80004ac:	695a      	ldr	r2, [r3, #20]
 80004ae:	4b15      	ldr	r3, [pc, #84]	@ (8000504 <MX_GPIO_Init+0x8c>)
 80004b0:	2180      	movs	r1, #128	@ 0x80
 80004b2:	0289      	lsls	r1, r1, #10
 80004b4:	430a      	orrs	r2, r1
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	4b12      	ldr	r3, [pc, #72]	@ (8000504 <MX_GPIO_Init+0x8c>)
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	2380      	movs	r3, #128	@ 0x80
 80004be:	029b      	lsls	r3, r3, #10
 80004c0:	4013      	ands	r3, r2
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80004c6:	2390      	movs	r3, #144	@ 0x90
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	2201      	movs	r2, #1
 80004cc:	2110      	movs	r1, #16
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 fdb8 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80004d4:	0021      	movs	r1, r4
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2210      	movs	r2, #16
 80004da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2201      	movs	r2, #1
 80004e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2203      	movs	r2, #3
 80004ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80004ee:	187a      	adds	r2, r7, r1
 80004f0:	2390      	movs	r3, #144	@ 0x90
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	0011      	movs	r1, r2
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 fc34 	bl	8001d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b009      	add	sp, #36	@ 0x24
 8000502:	bd90      	pop	{r4, r7, pc}
 8000504:	40021000 	.word	0x40021000

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	46c0      	nop			@ (mov r8, r8)
 8000512:	e7fd      	b.n	8000510 <Error_Handler+0x8>

08000514 <SD_disk_status>:
#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"


DSTATUS SD_disk_status(BYTE drv) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	0002      	movs	r2, r0
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	701a      	strb	r2, [r3, #0]
    if (drv != 0)
 8000520:	1dfb      	adds	r3, r7, #7
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SD_disk_status+0x18>
        return STA_NOINIT;
 8000528:	2301      	movs	r3, #1
 800052a:	e000      	b.n	800052e <SD_disk_status+0x1a>
    return 0;
 800052c:	2300      	movs	r3, #0
}
 800052e:	0018      	movs	r0, r3
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}

08000536 <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	0002      	movs	r2, r0
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	701a      	strb	r2, [r3, #0]
    if (drv != 0)
 8000542:	1dfb      	adds	r3, r7, #7
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SD_disk_initialize+0x18>
        return STA_NOINIT;
 800054a:	2301      	movs	r3, #1
 800054c:	e005      	b.n	800055a <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 800054e:	f000 fc35 	bl	8000dbc <SD_SPI_Init>
 8000552:	0003      	movs	r3, r0
 8000554:	1e5a      	subs	r2, r3, #1
 8000556:	4193      	sbcs	r3, r2
 8000558:	b2db      	uxtb	r3, r3
}
 800055a:	0018      	movs	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	60b9      	str	r1, [r7, #8]
 800056c:	607a      	str	r2, [r7, #4]
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	210f      	movs	r1, #15
 8000572:	187b      	adds	r3, r7, r1
 8000574:	1c02      	adds	r2, r0, #0
 8000576:	701a      	strb	r2, [r3, #0]
    if (pdrv != 0 || count == 0)
 8000578:	187b      	adds	r3, r7, r1
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d102      	bne.n	8000586 <SD_disk_read+0x22>
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d101      	bne.n	800058a <SD_disk_read+0x26>
        return RES_PARERR;
 8000586:	2304      	movs	r3, #4
 8000588:	e00f      	b.n	80005aa <SD_disk_read+0x46>
    if (!card_initialized) return RES_NOTRDY;
 800058a:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <SD_disk_read+0x50>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d101      	bne.n	8000596 <SD_disk_read+0x32>
 8000592:	2303      	movs	r3, #3
 8000594:	e009      	b.n	80005aa <SD_disk_read+0x46>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	6879      	ldr	r1, [r7, #4]
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	0018      	movs	r0, r3
 800059e:	f000 fd3f 	bl	8001020 <SD_ReadBlocks>
 80005a2:	0003      	movs	r3, r0
 80005a4:	1e5a      	subs	r2, r3, #1
 80005a6:	4193      	sbcs	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
}
 80005aa:	0018      	movs	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b004      	add	sp, #16
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	20000435 	.word	0x20000435

080005b8 <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  BYTE *buff, DWORD sector, UINT count) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	210f      	movs	r1, #15
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	1c02      	adds	r2, r0, #0
 80005ca:	701a      	strb	r2, [r3, #0]
    if (pdrv || !count) return RES_PARERR;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <SD_disk_write+0x22>
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <SD_disk_write+0x26>
 80005da:	2304      	movs	r3, #4
 80005dc:	e00f      	b.n	80005fe <SD_disk_write+0x46>
    if (!card_initialized) return RES_NOTRDY;
 80005de:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <SD_disk_write+0x50>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d101      	bne.n	80005ea <SD_disk_write+0x32>
 80005e6:	2303      	movs	r3, #3
 80005e8:	e009      	b.n	80005fe <SD_disk_write+0x46>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fe07 	bl	8001204 <SD_WriteBlocks>
 80005f6:	0003      	movs	r3, r0
 80005f8:	1e5a      	subs	r2, r3, #1
 80005fa:	4193      	sbcs	r3, r2
 80005fc:	b2db      	uxtb	r3, r3
}
 80005fe:	0018      	movs	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	b004      	add	sp, #16
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	20000435 	.word	0x20000435

0800060c <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	603a      	str	r2, [r7, #0]
 8000614:	1dfb      	adds	r3, r7, #7
 8000616:	1c02      	adds	r2, r0, #0
 8000618:	701a      	strb	r2, [r3, #0]
 800061a:	1dbb      	adds	r3, r7, #6
 800061c:	1c0a      	adds	r2, r1, #0
 800061e:	701a      	strb	r2, [r3, #0]
    if (pdrv != 0)
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SD_disk_ioctl+0x20>
        return RES_PARERR;
 8000628:	2304      	movs	r3, #4
 800062a:	e020      	b.n	800066e <SD_disk_ioctl+0x62>

    switch (cmd) {
 800062c:	1dbb      	adds	r3, r7, #6
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b03      	cmp	r3, #3
 8000632:	d016      	beq.n	8000662 <SD_disk_ioctl+0x56>
 8000634:	dc1a      	bgt.n	800066c <SD_disk_ioctl+0x60>
 8000636:	2b02      	cmp	r3, #2
 8000638:	d007      	beq.n	800064a <SD_disk_ioctl+0x3e>
 800063a:	dc17      	bgt.n	800066c <SD_disk_ioctl+0x60>
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <SD_disk_ioctl+0x3a>
 8000640:	2b01      	cmp	r3, #1
 8000642:	d008      	beq.n	8000656 <SD_disk_ioctl+0x4a>
 8000644:	e012      	b.n	800066c <SD_disk_ioctl+0x60>
    case CTRL_SYNC:
        return RES_OK;
 8000646:	2300      	movs	r3, #0
 8000648:	e011      	b.n	800066e <SD_disk_ioctl+0x62>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2280      	movs	r2, #128	@ 0x80
 800064e:	0092      	lsls	r2, r2, #2
 8000650:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 8000652:	2300      	movs	r3, #0
 8000654:	e00b      	b.n	800066e <SD_disk_ioctl+0x62>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2280      	movs	r2, #128	@ 0x80
 800065a:	0252      	lsls	r2, r2, #9
 800065c:	601a      	str	r2, [r3, #0]
        return RES_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	e005      	b.n	800066e <SD_disk_ioctl+0x62>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	2201      	movs	r2, #1
 8000666:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8000668:	2300      	movs	r3, #0
 800066a:	e000      	b.n	800066e <SD_disk_ioctl+0x62>
    default:
        return RES_PARERR;
 800066c:	2304      	movs	r3, #4
    }
}
 800066e:	0018      	movs	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	b002      	add	sp, #8
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <sd_format>:
#include "ffconf.h"

char sd_path[4];
FATFS fs;

int sd_format(void) {
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
	// Pre-mount required for legacy FatFS
	f_mount(&fs, sd_path, 0);
 800067e:	4910      	ldr	r1, [pc, #64]	@ (80006c0 <sd_format+0x48>)
 8000680:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <sd_format+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	0018      	movs	r0, r3
 8000686:	f006 fefb 	bl	8007480 <f_mount>

	FRESULT res;
	res = f_mkfs(sd_path, 1, 0);
 800068a:	1dfc      	adds	r4, r7, #7
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <sd_format+0x48>)
 800068e:	2200      	movs	r2, #0
 8000690:	2101      	movs	r1, #1
 8000692:	0018      	movs	r0, r3
 8000694:	f007 ff2c 	bl	80084f0 <f_mkfs>
 8000698:	0003      	movs	r3, r0
 800069a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) {
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d006      	beq.n	80006b2 <sd_format+0x3a>
		printf("Format failed: f_mkfs returned %d\r\n", res);
 80006a4:	1dfb      	adds	r3, r7, #7
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <sd_format+0x50>)
 80006aa:	0011      	movs	r1, r2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f008 fe83 	bl	80093b8 <iprintf>
	}
		return res;
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	781b      	ldrb	r3, [r3, #0]
}
 80006b6:	0018      	movs	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b003      	add	sp, #12
 80006bc:	bd90      	pop	{r4, r7, pc}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	200001f8 	.word	0x200001f8
 80006c4:	200001fc 	.word	0x200001fc
 80006c8:	0800a454 	.word	0x0800a454

080006cc <sd_get_space_kb>:

int sd_get_space_kb(void) {
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
	FATFS *pfs;
	DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
	FRESULT res = f_getfree(sd_path, &fre_clust, &pfs);
 80006d2:	251f      	movs	r5, #31
 80006d4:	197c      	adds	r4, r7, r5
 80006d6:	2308      	movs	r3, #8
 80006d8:	18fa      	adds	r2, r7, r3
 80006da:	1d39      	adds	r1, r7, #4
 80006dc:	4b17      	ldr	r3, [pc, #92]	@ (800073c <sd_get_space_kb+0x70>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f007 fe22 	bl	8008328 <f_getfree>
 80006e4:	0003      	movs	r3, r0
 80006e6:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 80006e8:	197b      	adds	r3, r7, r5
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d002      	beq.n	80006f6 <sd_get_space_kb+0x2a>
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	e01d      	b.n	8000732 <sd_get_space_kb+0x66>

	tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	2385      	movs	r3, #133	@ 0x85
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	58d3      	ldr	r3, [r2, r3]
 80006fe:	3b02      	subs	r3, #2
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	490f      	ldr	r1, [pc, #60]	@ (8000740 <sd_get_space_kb+0x74>)
 8000704:	5c52      	ldrb	r2, [r2, r1]
 8000706:	4353      	muls	r3, r2
 8000708:	61bb      	str	r3, [r7, #24]
	fre_sect = fre_clust * pfs->csize;
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	4a0c      	ldr	r2, [pc, #48]	@ (8000740 <sd_get_space_kb+0x74>)
 800070e:	5c9b      	ldrb	r3, [r3, r2]
 8000710:	001a      	movs	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4353      	muls	r3, r2
 8000716:	617b      	str	r3, [r7, #20]
	total_kb = tot_sect / 2;
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	085b      	lsrs	r3, r3, #1
 800071c:	613b      	str	r3, [r7, #16]
	free_kb = fre_sect / 2;
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	085b      	lsrs	r3, r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
	printf("💾 Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb);
 8000724:	68fa      	ldr	r2, [r7, #12]
 8000726:	6939      	ldr	r1, [r7, #16]
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <sd_get_space_kb+0x78>)
 800072a:	0018      	movs	r0, r3
 800072c:	f008 fe44 	bl	80093b8 <iprintf>
	return FR_OK;
 8000730:	2300      	movs	r3, #0
}
 8000732:	0018      	movs	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	b008      	add	sp, #32
 8000738:	bdb0      	pop	{r4, r5, r7, pc}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	200001f8 	.word	0x200001f8
 8000740:	00000202 	.word	0x00000202
 8000744:	0800a478 	.word	0x0800a478

08000748 <sd_mount>:

int sd_mount(void) {
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
	FRESULT res;
	extern uint8_t sd_is_sdhc(void);

	printf("Linking SD driver...\r\n");
 800074e:	4b4f      	ldr	r3, [pc, #316]	@ (800088c <sd_mount+0x144>)
 8000750:	0018      	movs	r0, r3
 8000752:	f008 fe97 	bl	8009484 <puts>
	if (FATFS_LinkDriver(&SD_Driver, sd_path) != 0) {
 8000756:	4a4e      	ldr	r2, [pc, #312]	@ (8000890 <sd_mount+0x148>)
 8000758:	4b4e      	ldr	r3, [pc, #312]	@ (8000894 <sd_mount+0x14c>)
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f008 fbf5 	bl	8008f4c <FATFS_LinkDriver>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d005      	beq.n	8000772 <sd_mount+0x2a>
		printf("FATFS_LinkDriver failed\n");
 8000766:	4b4c      	ldr	r3, [pc, #304]	@ (8000898 <sd_mount+0x150>)
 8000768:	0018      	movs	r0, r3
 800076a:	f008 fe8b 	bl	8009484 <puts>
		return FR_DISK_ERR;
 800076e:	2301      	movs	r3, #1
 8000770:	e088      	b.n	8000884 <sd_mount+0x13c>
	}

	printf("Initializing disk...\r\n");
 8000772:	4b4a      	ldr	r3, [pc, #296]	@ (800089c <sd_mount+0x154>)
 8000774:	0018      	movs	r0, r3
 8000776:	f008 fe85 	bl	8009484 <puts>
	DSTATUS stat = disk_initialize(0);
 800077a:	1dfc      	adds	r4, r7, #7
 800077c:	2000      	movs	r0, #0
 800077e:	f003 ff65 	bl	800464c <disk_initialize>
 8000782:	0003      	movs	r3, r0
 8000784:	7023      	strb	r3, [r4, #0]
	if (stat != 0) {
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d00c      	beq.n	80007a8 <sd_mount+0x60>
		printf("disk_initialize failed: 0x%02X\n", stat);
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781a      	ldrb	r2, [r3, #0]
 8000792:	4b43      	ldr	r3, [pc, #268]	@ (80008a0 <sd_mount+0x158>)
 8000794:	0011      	movs	r1, r2
 8000796:	0018      	movs	r0, r3
 8000798:	f008 fe0e 	bl	80093b8 <iprintf>
		printf("FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n");
 800079c:	4b41      	ldr	r3, [pc, #260]	@ (80008a4 <sd_mount+0x15c>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f008 fe70 	bl	8009484 <puts>
		return FR_NOT_READY;
 80007a4:	2303      	movs	r3, #3
 80007a6:	e06d      	b.n	8000884 <sd_mount+0x13c>
	}

	printf("Attempting mount at %s...\r\n", sd_path);
 80007a8:	4a39      	ldr	r2, [pc, #228]	@ (8000890 <sd_mount+0x148>)
 80007aa:	4b3f      	ldr	r3, [pc, #252]	@ (80008a8 <sd_mount+0x160>)
 80007ac:	0011      	movs	r1, r2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f008 fe02 	bl	80093b8 <iprintf>
	res = f_mount(&fs, sd_path, 1);
 80007b4:	1dbc      	adds	r4, r7, #6
 80007b6:	4936      	ldr	r1, [pc, #216]	@ (8000890 <sd_mount+0x148>)
 80007b8:	4b3c      	ldr	r3, [pc, #240]	@ (80008ac <sd_mount+0x164>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	0018      	movs	r0, r3
 80007be:	f006 fe5f 	bl	8007480 <f_mount>
 80007c2:	0003      	movs	r3, r0
 80007c4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 80007c6:	1dbb      	adds	r3, r7, #6
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d115      	bne.n	80007fa <sd_mount+0xb2>
	{
		printf("SD card mounted successfully at %s\r\n", sd_path);
 80007ce:	4a30      	ldr	r2, [pc, #192]	@ (8000890 <sd_mount+0x148>)
 80007d0:	4b37      	ldr	r3, [pc, #220]	@ (80008b0 <sd_mount+0x168>)
 80007d2:	0011      	movs	r1, r2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f008 fdef 	bl	80093b8 <iprintf>
		printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 80007da:	f000 fae5 	bl	8000da8 <sd_is_sdhc>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <sd_mount+0x9e>
 80007e2:	4b34      	ldr	r3, [pc, #208]	@ (80008b4 <sd_mount+0x16c>)
 80007e4:	e000      	b.n	80007e8 <sd_mount+0xa0>
 80007e6:	4b34      	ldr	r3, [pc, #208]	@ (80008b8 <sd_mount+0x170>)
 80007e8:	4a34      	ldr	r2, [pc, #208]	@ (80008bc <sd_mount+0x174>)
 80007ea:	0019      	movs	r1, r3
 80007ec:	0010      	movs	r0, r2
 80007ee:	f008 fde3 	bl	80093b8 <iprintf>

		// Capacity and free space reporting
		sd_get_space_kb();
 80007f2:	f7ff ff6b 	bl	80006cc <sd_get_space_kb>
		return FR_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e044      	b.n	8000884 <sd_mount+0x13c>
	}

//	 Handle no filesystem by creating one
	if (res == FR_NO_FILESYSTEM)
 80007fa:	1dbb      	adds	r3, r7, #6
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b0d      	cmp	r3, #13
 8000800:	d137      	bne.n	8000872 <sd_mount+0x12a>
	{
		printf("No filesystem found on SD card. Attempting format...\r\nThis will create 32MB Partition (Most Probably)\r\n");
 8000802:	4b2f      	ldr	r3, [pc, #188]	@ (80008c0 <sd_mount+0x178>)
 8000804:	0018      	movs	r0, r3
 8000806:	f008 fe3d 	bl	8009484 <puts>
		printf("If you need the full sized SD card, use the computer to format into FAT32\r\n");
 800080a:	4b2e      	ldr	r3, [pc, #184]	@ (80008c4 <sd_mount+0x17c>)
 800080c:	0018      	movs	r0, r3
 800080e:	f008 fe39 	bl	8009484 <puts>
		sd_format();
 8000812:	f7ff ff31 	bl	8000678 <sd_format>

		printf("Retrying mount after format...\r\n");
 8000816:	4b2c      	ldr	r3, [pc, #176]	@ (80008c8 <sd_mount+0x180>)
 8000818:	0018      	movs	r0, r3
 800081a:	f008 fe33 	bl	8009484 <puts>
		res = f_mount(&fs, sd_path, 1);
 800081e:	1dbc      	adds	r4, r7, #6
 8000820:	491b      	ldr	r1, [pc, #108]	@ (8000890 <sd_mount+0x148>)
 8000822:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <sd_mount+0x164>)
 8000824:	2201      	movs	r2, #1
 8000826:	0018      	movs	r0, r3
 8000828:	f006 fe2a 	bl	8007480 <f_mount>
 800082c:	0003      	movs	r3, r0
 800082e:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8000830:	1dbb      	adds	r3, r7, #6
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d112      	bne.n	800085e <sd_mount+0x116>
			printf("SD card formatted and mounted successfully.\r\n");
 8000838:	4b24      	ldr	r3, [pc, #144]	@ (80008cc <sd_mount+0x184>)
 800083a:	0018      	movs	r0, r3
 800083c:	f008 fe22 	bl	8009484 <puts>
			printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 8000840:	f000 fab2 	bl	8000da8 <sd_is_sdhc>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <sd_mount+0x104>
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <sd_mount+0x16c>)
 800084a:	e000      	b.n	800084e <sd_mount+0x106>
 800084c:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <sd_mount+0x170>)
 800084e:	4a1b      	ldr	r2, [pc, #108]	@ (80008bc <sd_mount+0x174>)
 8000850:	0019      	movs	r1, r3
 8000852:	0010      	movs	r0, r2
 8000854:	f008 fdb0 	bl	80093b8 <iprintf>

			// Report capacity after format
			sd_get_space_kb();
 8000858:	f7ff ff38 	bl	80006cc <sd_get_space_kb>
 800085c:	e006      	b.n	800086c <sd_mount+0x124>
		}
		else {
			printf("Mount failed even after format: %d\r\n", res);
 800085e:	1dbb      	adds	r3, r7, #6
 8000860:	781a      	ldrb	r2, [r3, #0]
 8000862:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <sd_mount+0x188>)
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f008 fda6 	bl	80093b8 <iprintf>
		}
		return res;
 800086c:	1dbb      	adds	r3, r7, #6
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	e008      	b.n	8000884 <sd_mount+0x13c>
	}

	// Any other mount error
	printf("Mount failed with code: %d\r\n", res);
 8000872:	1dbb      	adds	r3, r7, #6
 8000874:	781a      	ldrb	r2, [r3, #0]
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <sd_mount+0x18c>)
 8000878:	0011      	movs	r1, r2
 800087a:	0018      	movs	r0, r3
 800087c:	f008 fd9c 	bl	80093b8 <iprintf>
	return res;
 8000880:	1dbb      	adds	r3, r7, #6
 8000882:	781b      	ldrb	r3, [r3, #0]
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	b003      	add	sp, #12
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	0800a49c 	.word	0x0800a49c
 8000890:	200001f8 	.word	0x200001f8
 8000894:	0800a920 	.word	0x0800a920
 8000898:	0800a4b4 	.word	0x0800a4b4
 800089c:	0800a4cc 	.word	0x0800a4cc
 80008a0:	0800a4e4 	.word	0x0800a4e4
 80008a4:	0800a504 	.word	0x0800a504
 80008a8:	0800a53c 	.word	0x0800a53c
 80008ac:	200001fc 	.word	0x200001fc
 80008b0:	0800a558 	.word	0x0800a558
 80008b4:	0800a580 	.word	0x0800a580
 80008b8:	0800a58c 	.word	0x0800a58c
 80008bc:	0800a594 	.word	0x0800a594
 80008c0:	0800a5a4 	.word	0x0800a5a4
 80008c4:	0800a60c 	.word	0x0800a60c
 80008c8:	0800a658 	.word	0x0800a658
 80008cc:	0800a678 	.word	0x0800a678
 80008d0:	0800a6a8 	.word	0x0800a6a8
 80008d4:	0800a6d0 	.word	0x0800a6d0

080008d8 <sd_unmount>:


int sd_unmount(void) {
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
	FRESULT res = f_mount(NULL, sd_path, 1);
 80008de:	1dfc      	adds	r4, r7, #7
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <sd_unmount+0x3c>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	0019      	movs	r1, r3
 80008e6:	2000      	movs	r0, #0
 80008e8:	f006 fdca 	bl	8007480 <f_mount>
 80008ec:	0003      	movs	r3, r0
 80008ee:	7023      	strb	r3, [r4, #0]
	printf("SD card unmounted: %s\r\n", (res == FR_OK) ? "OK" : "Failed");
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d101      	bne.n	80008fc <sd_unmount+0x24>
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <sd_unmount+0x40>)
 80008fa:	e000      	b.n	80008fe <sd_unmount+0x26>
 80008fc:	4b07      	ldr	r3, [pc, #28]	@ (800091c <sd_unmount+0x44>)
 80008fe:	4a08      	ldr	r2, [pc, #32]	@ (8000920 <sd_unmount+0x48>)
 8000900:	0019      	movs	r1, r3
 8000902:	0010      	movs	r0, r2
 8000904:	f008 fd58 	bl	80093b8 <iprintf>
	return res;
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	781b      	ldrb	r3, [r3, #0]
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	b003      	add	sp, #12
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	200001f8 	.word	0x200001f8
 8000918:	0800a6f0 	.word	0x0800a6f0
 800091c:	0800a6f4 	.word	0x0800a6f4
 8000920:	0800a6fc 	.word	0x0800a6fc

08000924 <sd_write_file>:

int sd_write_file(const char *filename, const char *text) {
 8000924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000926:	4c23      	ldr	r4, [pc, #140]	@ (80009b4 <sd_write_file+0x90>)
 8000928:	44a5      	add	sp, r4
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
	FIL file;
	UINT bw;
	FRESULT res = f_open(&file, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8000930:	4d21      	ldr	r5, [pc, #132]	@ (80009b8 <sd_write_file+0x94>)
 8000932:	197c      	adds	r4, r7, r5
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	2310      	movs	r3, #16
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	220a      	movs	r2, #10
 800093c:	0018      	movs	r0, r3
 800093e:	f006 fdef 	bl	8007520 <f_open>
 8000942:	0003      	movs	r3, r0
 8000944:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8000946:	197b      	adds	r3, r7, r5
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <sd_write_file+0x30>
 800094e:	197b      	adds	r3, r7, r5
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	e028      	b.n	80009a6 <sd_write_file+0x82>

	res = f_write(&file, text, strlen(text), &bw);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	0018      	movs	r0, r3
 8000958:	f7ff fbe0 	bl	800011c <strlen>
 800095c:	0002      	movs	r2, r0
 800095e:	4d16      	ldr	r5, [pc, #88]	@ (80009b8 <sd_write_file+0x94>)
 8000960:	197c      	adds	r4, r7, r5
 8000962:	230c      	movs	r3, #12
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	6839      	ldr	r1, [r7, #0]
 8000968:	2610      	movs	r6, #16
 800096a:	19b8      	adds	r0, r7, r6
 800096c:	f007 f880 	bl	8007a70 <f_write>
 8000970:	0003      	movs	r3, r0
 8000972:	7023      	strb	r3, [r4, #0]
	f_close(&file);
 8000974:	19bb      	adds	r3, r7, r6
 8000976:	0018      	movs	r0, r3
 8000978:	f007 fb38 	bl	8007fec <f_close>
	printf("Write %u bytes to %s\r\n", bw, filename);
 800097c:	68f9      	ldr	r1, [r7, #12]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <sd_write_file+0x98>)
 8000982:	0018      	movs	r0, r3
 8000984:	f008 fd18 	bl	80093b8 <iprintf>
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
 8000988:	197b      	adds	r3, r7, r5
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d107      	bne.n	80009a0 <sd_write_file+0x7c>
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff fbc2 	bl	800011c <strlen>
 8000998:	0002      	movs	r2, r0
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	429a      	cmp	r2, r3
 800099e:	d001      	beq.n	80009a4 <sd_write_file+0x80>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e000      	b.n	80009a6 <sd_write_file+0x82>
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	0018      	movs	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	2391      	movs	r3, #145	@ 0x91
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	449d      	add	sp, r3
 80009b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	fffffdbc 	.word	0xfffffdbc
 80009b8:	0000023f 	.word	0x0000023f
 80009bc:	0800a714 	.word	0x0800a714

080009c0 <sd_list_directory_recursive>:
	FRESULT res = f_mkdir(path);
	printf("Create directory %s: %s\r\n", path, (res == FR_OK ? "OK" : "Failed"));
	return res;
}

void sd_list_directory_recursive(const char *path, int depth) {
 80009c0:	b5b0      	push	{r4, r5, r7, lr}
 80009c2:	4c57      	ldr	r4, [pc, #348]	@ (8000b20 <sd_list_directory_recursive+0x160>)
 80009c4:	44a5      	add	sp, r4
 80009c6:	af02      	add	r7, sp, #8
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
	DIR dir;
	FILINFO fno;
	char lfn[256];
	fno.lfname = lfn;
 80009cc:	4b55      	ldr	r3, [pc, #340]	@ (8000b24 <sd_list_directory_recursive+0x164>)
 80009ce:	21f6      	movs	r1, #246	@ 0xf6
 80009d0:	0089      	lsls	r1, r1, #2
 80009d2:	185b      	adds	r3, r3, r1
 80009d4:	19db      	adds	r3, r3, r7
 80009d6:	2288      	movs	r2, #136	@ 0x88
 80009d8:	18ba      	adds	r2, r7, r2
 80009da:	619a      	str	r2, [r3, #24]
	fno.lfsize = sizeof(lfn);
 80009dc:	4b51      	ldr	r3, [pc, #324]	@ (8000b24 <sd_list_directory_recursive+0x164>)
 80009de:	185b      	adds	r3, r3, r1
 80009e0:	19db      	adds	r3, r3, r7
 80009e2:	2280      	movs	r2, #128	@ 0x80
 80009e4:	0052      	lsls	r2, r2, #1
 80009e6:	61da      	str	r2, [r3, #28]
	FRESULT res = f_opendir(&dir, path);
 80009e8:	4d4f      	ldr	r5, [pc, #316]	@ (8000b28 <sd_list_directory_recursive+0x168>)
 80009ea:	197c      	adds	r4, r7, r5
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	23d4      	movs	r3, #212	@ 0xd4
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f007 fb30 	bl	800805c <f_opendir>
 80009fc:	0003      	movs	r3, r0
 80009fe:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) {
 8000a00:	197b      	adds	r3, r7, r5
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d007      	beq.n	8000a18 <sd_list_directory_recursive+0x58>
		printf("%*s[ERR] Cannot open: %s\r\n", depth * 2, "", path);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	0059      	lsls	r1, r3, #1
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a47      	ldr	r2, [pc, #284]	@ (8000b2c <sd_list_directory_recursive+0x16c>)
 8000a10:	4847      	ldr	r0, [pc, #284]	@ (8000b30 <sd_list_directory_recursive+0x170>)
 8000a12:	f008 fcd1 	bl	80093b8 <iprintf>
 8000a16:	e07e      	b.n	8000b16 <sd_list_directory_recursive+0x156>
		return;
	}

	while (1) {
		res = f_readdir(&dir, &fno);
 8000a18:	4d43      	ldr	r5, [pc, #268]	@ (8000b28 <sd_list_directory_recursive+0x168>)
 8000a1a:	197c      	adds	r4, r7, r5
 8000a1c:	23c4      	movs	r3, #196	@ 0xc4
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	18fa      	adds	r2, r7, r3
 8000a22:	23d4      	movs	r3, #212	@ 0xd4
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f007 fc06 	bl	800823c <f_readdir>
 8000a30:	0003      	movs	r3, r0
 8000a32:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK || fno.fname[0] == 0) break;
 8000a34:	197b      	adds	r3, r7, r5
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d166      	bne.n	8000b0a <sd_list_directory_recursive+0x14a>
 8000a3c:	4b39      	ldr	r3, [pc, #228]	@ (8000b24 <sd_list_directory_recursive+0x164>)
 8000a3e:	22f6      	movs	r2, #246	@ 0xf6
 8000a40:	0092      	lsls	r2, r2, #2
 8000a42:	189b      	adds	r3, r3, r2
 8000a44:	19db      	adds	r3, r3, r7
 8000a46:	7a5b      	ldrb	r3, [r3, #9]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d05e      	beq.n	8000b0a <sd_list_directory_recursive+0x14a>

		const char *name = (*fno.lfname) ? fno.lfname : fno.fname;
 8000a4c:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <sd_list_directory_recursive+0x164>)
 8000a4e:	189b      	adds	r3, r3, r2
 8000a50:	19db      	adds	r3, r3, r7
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d004      	beq.n	8000a64 <sd_list_directory_recursive+0xa4>
 8000a5a:	4b32      	ldr	r3, [pc, #200]	@ (8000b24 <sd_list_directory_recursive+0x164>)
 8000a5c:	189b      	adds	r3, r3, r2
 8000a5e:	19db      	adds	r3, r3, r7
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	e003      	b.n	8000a6c <sd_list_directory_recursive+0xac>
 8000a64:	23c4      	movs	r3, #196	@ 0xc4
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	3309      	adds	r3, #9
 8000a6c:	21f4      	movs	r1, #244	@ 0xf4
 8000a6e:	0089      	lsls	r1, r1, #2
 8000a70:	187a      	adds	r2, r7, r1
 8000a72:	6013      	str	r3, [r2, #0]

		if (fno.fattrib & AM_DIR) {
 8000a74:	4b2b      	ldr	r3, [pc, #172]	@ (8000b24 <sd_list_directory_recursive+0x164>)
 8000a76:	22f6      	movs	r2, #246	@ 0xf6
 8000a78:	0092      	lsls	r2, r2, #2
 8000a7a:	189b      	adds	r3, r3, r2
 8000a7c:	19db      	adds	r3, r3, r7
 8000a7e:	7a1b      	ldrb	r3, [r3, #8]
 8000a80:	001a      	movs	r2, r3
 8000a82:	2310      	movs	r3, #16
 8000a84:	4013      	ands	r3, r2
 8000a86:	d02d      	beq.n	8000ae4 <sd_list_directory_recursive+0x124>
			if (strcmp(name, ".") && strcmp(name, "..")) {
 8000a88:	4a2a      	ldr	r2, [pc, #168]	@ (8000b34 <sd_list_directory_recursive+0x174>)
 8000a8a:	000c      	movs	r4, r1
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	0011      	movs	r1, r2
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff fb38 	bl	8000108 <strcmp>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d0bd      	beq.n	8000a18 <sd_list_directory_recursive+0x58>
 8000a9c:	4a26      	ldr	r2, [pc, #152]	@ (8000b38 <sd_list_directory_recursive+0x178>)
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff fb2f 	bl	8000108 <strcmp>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d0b4      	beq.n	8000a18 <sd_list_directory_recursive+0x58>
				printf("%*s📁 %s\r\n", depth * 2, "", name);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	0059      	lsls	r1, r3, #1
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b2c <sd_list_directory_recursive+0x16c>)
 8000ab8:	4820      	ldr	r0, [pc, #128]	@ (8000b3c <sd_list_directory_recursive+0x17c>)
 8000aba:	f008 fc7d 	bl	80093b8 <iprintf>
				char newpath[128];
				snprintf(newpath, sizeof(newpath), "%s/%s", path, name);
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8000b40 <sd_list_directory_recursive+0x180>)
 8000ac2:	2508      	movs	r5, #8
 8000ac4:	1978      	adds	r0, r7, r5
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	000b      	movs	r3, r1
 8000ace:	2180      	movs	r1, #128	@ 0x80
 8000ad0:	f008 fce2 	bl	8009498 <sniprintf>
				sd_list_directory_recursive(newpath, depth + 1);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	197b      	adds	r3, r7, r5
 8000ada:	0011      	movs	r1, r2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff ff6f 	bl	80009c0 <sd_list_directory_recursive>
 8000ae2:	e799      	b.n	8000a18 <sd_list_directory_recursive+0x58>
			}
		} else {
			printf("%*s📄 %s (%lu bytes)\r\n", depth * 2, "", name, (unsigned long)fno.fsize);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	0059      	lsls	r1, r3, #1
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <sd_list_directory_recursive+0x164>)
 8000aea:	22f6      	movs	r2, #246	@ 0xf6
 8000aec:	0092      	lsls	r2, r2, #2
 8000aee:	189b      	adds	r3, r3, r2
 8000af0:	19db      	adds	r3, r3, r7
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	22f4      	movs	r2, #244	@ 0xf4
 8000af6:	0092      	lsls	r2, r2, #2
 8000af8:	18ba      	adds	r2, r7, r2
 8000afa:	6814      	ldr	r4, [r2, #0]
 8000afc:	4a0b      	ldr	r2, [pc, #44]	@ (8000b2c <sd_list_directory_recursive+0x16c>)
 8000afe:	4811      	ldr	r0, [pc, #68]	@ (8000b44 <sd_list_directory_recursive+0x184>)
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	0023      	movs	r3, r4
 8000b04:	f008 fc58 	bl	80093b8 <iprintf>
	while (1) {
 8000b08:	e786      	b.n	8000a18 <sd_list_directory_recursive+0x58>
		}
	}
	f_closedir(&dir);
 8000b0a:	23d4      	movs	r3, #212	@ 0xd4
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	0018      	movs	r0, r3
 8000b12:	f007 fb61 	bl	80081d8 <f_closedir>
}
 8000b16:	46bd      	mov	sp, r7
 8000b18:	23f6      	movs	r3, #246	@ 0xf6
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	449d      	add	sp, r3
 8000b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b20:	fffffc20 	.word	0xfffffc20
 8000b24:	fffffdb0 	.word	0xfffffdb0
 8000b28:	000003d7 	.word	0x000003d7
 8000b2c:	0800a850 	.word	0x0800a850
 8000b30:	0800a854 	.word	0x0800a854
 8000b34:	0800a870 	.word	0x0800a870
 8000b38:	0800a874 	.word	0x0800a874
 8000b3c:	0800a878 	.word	0x0800a878
 8000b40:	0800a888 	.word	0x0800a888
 8000b44:	0800a890 	.word	0x0800a890

08000b48 <sd_list_files>:

void sd_list_files(void) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	printf("📂 Files on SD Card:\r\n");
 8000b4c:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <sd_list_files+0x24>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f008 fc98 	bl	8009484 <puts>
	sd_list_directory_recursive(sd_path, 0);
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <sd_list_files+0x28>)
 8000b56:	2100      	movs	r1, #0
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff ff31 	bl	80009c0 <sd_list_directory_recursive>
	printf("\r\n\r\n");
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <sd_list_files+0x2c>)
 8000b60:	0018      	movs	r0, r3
 8000b62:	f008 fc8f 	bl	8009484 <puts>
}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	0800a8ac 	.word	0x0800a8ac
 8000b70:	200001f8 	.word	0x200001f8
 8000b74:	0800a8c4 	.word	0x0800a8c4

08000b78 <HAL_SPI_TxCpltCallback>:

#if USE_DMA
volatile int dma_tx_done = 0;
volatile int dma_rx_done = 0;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	if (hspi == &SD_SPI_HANDLE) dma_tx_done = 1;
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <HAL_SPI_TxCpltCallback+0x20>)
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d102      	bne.n	8000b8e <HAL_SPI_TxCpltCallback+0x16>
 8000b88:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <HAL_SPI_TxCpltCallback+0x24>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	20000084 	.word	0x20000084
 8000b9c:	2000042c 	.word	0x2000042c

08000ba0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) dma_rx_done = 1;
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <HAL_SPI_TxRxCpltCallback+0x20>)
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d102      	bne.n	8000bb6 <HAL_SPI_TxRxCpltCallback+0x16>
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <HAL_SPI_TxRxCpltCallback+0x24>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	601a      	str	r2, [r3, #0]
}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	20000084 	.word	0x20000084
 8000bc4:	20000430 	.word	0x20000430

08000bc8 <SD_TransmitByte>:
#endif

static void SD_TransmitByte(uint8_t data) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	0002      	movs	r2, r0
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	425b      	negs	r3, r3
 8000bd8:	1df9      	adds	r1, r7, #7
 8000bda:	4804      	ldr	r0, [pc, #16]	@ (8000bec <SD_TransmitByte+0x24>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f001 ff65 	bl	8002aac <HAL_SPI_Transmit>
}
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	20000084 	.word	0x20000084

08000bf0 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	22ff      	movs	r2, #255	@ 0xff
 8000bfa:	701a      	strb	r2, [r3, #0]
 8000bfc:	1dbb      	adds	r3, r7, #6
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 8000c02:	1dba      	adds	r2, r7, #6
 8000c04:	1df9      	adds	r1, r7, #7
 8000c06:	4806      	ldr	r0, [pc, #24]	@ (8000c20 <SD_ReceiveByte+0x30>)
 8000c08:	2301      	movs	r3, #1
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2301      	movs	r3, #1
 8000c10:	f002 f8ac 	bl	8002d6c <HAL_SPI_TransmitReceive>
    return data;
 8000c14:	1dbb      	adds	r3, r7, #6
 8000c16:	781b      	ldrb	r3, [r3, #0]
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000084 	.word	0x20000084

08000c24 <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	000a      	movs	r2, r1
 8000c2e:	1cbb      	adds	r3, r7, #2
 8000c30:	801a      	strh	r2, [r3, #0]
#if USE_DMA
    dma_tx_done = 0;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <SD_TransmitBuffer+0x38>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
 8000c38:	1cbb      	adds	r3, r7, #2
 8000c3a:	881a      	ldrh	r2, [r3, #0]
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <SD_TransmitBuffer+0x3c>)
 8000c40:	0018      	movs	r0, r3
 8000c42:	f002 fa75 	bl	8003130 <HAL_SPI_Transmit_DMA>
    while (!dma_tx_done);
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	4b04      	ldr	r3, [pc, #16]	@ (8000c5c <SD_TransmitBuffer+0x38>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0fb      	beq.n	8000c48 <SD_TransmitBuffer+0x24>
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
#endif
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b002      	add	sp, #8
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	2000042c 	.word	0x2000042c
 8000c60:	20000084 	.word	0x20000084

08000c64 <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	000a      	movs	r2, r1
 8000c6e:	1cbb      	adds	r3, r7, #2
 8000c70:	801a      	strh	r2, [r3, #0]
#if USE_DMA
	static uint8_t tx_dummy[512];
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	e007      	b.n	8000c88 <SD_ReceiveBuffer+0x24>
 8000c78:	4a10      	ldr	r2, [pc, #64]	@ (8000cbc <SD_ReceiveBuffer+0x58>)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	22ff      	movs	r2, #255	@ 0xff
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	3301      	adds	r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	1cbb      	adds	r3, r7, #2
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	dbf2      	blt.n	8000c78 <SD_ReceiveBuffer+0x14>
    dma_rx_done = 0;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <SD_ReceiveBuffer+0x5c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_dummy, buffer, len);
 8000c98:	1cbb      	adds	r3, r7, #2
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4907      	ldr	r1, [pc, #28]	@ (8000cbc <SD_ReceiveBuffer+0x58>)
 8000ca0:	4808      	ldr	r0, [pc, #32]	@ (8000cc4 <SD_ReceiveBuffer+0x60>)
 8000ca2:	f002 fb47 	bl	8003334 <HAL_SPI_TransmitReceive_DMA>
    while (!dma_rx_done);
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <SD_ReceiveBuffer+0x5c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d0fb      	beq.n	8000ca8 <SD_ReceiveBuffer+0x44>
#else
    for (uint16_t i = 0; i < len; i++) {
        buffer[i] = SD_ReceiveByte();
    }
#endif
}
 8000cb0:	46c0      	nop			@ (mov r8, r8)
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b004      	add	sp, #16
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	20000438 	.word	0x20000438
 8000cc0:	20000430 	.word	0x20000430
 8000cc4:	20000084 	.word	0x20000084

08000cc8 <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 8000cce:	f000 fdc9 	bl	8001864 <HAL_GetTick>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	33f5      	adds	r3, #245	@ 0xf5
 8000cd6:	33ff      	adds	r3, #255	@ 0xff
 8000cd8:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 8000cda:	1cfc      	adds	r4, r7, #3
 8000cdc:	f7ff ff88 	bl	8000bf0 <SD_ReceiveByte>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	7023      	strb	r3, [r4, #0]
        if (resp == 0xFF) return SD_OK;
 8000ce4:	1cfb      	adds	r3, r7, #3
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2bff      	cmp	r3, #255	@ 0xff
 8000cea:	d101      	bne.n	8000cf0 <SD_WaitReady+0x28>
 8000cec:	2300      	movs	r3, #0
 8000cee:	e006      	b.n	8000cfe <SD_WaitReady+0x36>
    } while (HAL_GetTick() < timeout);
 8000cf0:	f000 fdb8 	bl	8001864 <HAL_GetTick>
 8000cf4:	0002      	movs	r2, r0
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d8ee      	bhi.n	8000cda <SD_WaitReady+0x12>
    return SD_ERROR;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b003      	add	sp, #12
 8000d04:	bd90      	pop	{r4, r7, pc}

08000d06 <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8000d06:	b5b0      	push	{r4, r5, r7, lr}
 8000d08:	b084      	sub	sp, #16
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	0011      	movs	r1, r2
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	1c02      	adds	r2, r0, #0
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	1dbb      	adds	r3, r7, #6
 8000d18:	1c0a      	adds	r2, r1, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
    uint8_t response, retry = 0xFF;
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	22ff      	movs	r2, #255	@ 0xff
 8000d22:	701a      	strb	r2, [r3, #0]

    SD_WaitReady();
 8000d24:	f7ff ffd0 	bl	8000cc8 <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2240      	movs	r2, #64	@ 0x40
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff ff48 	bl	8000bc8 <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	0e1b      	lsrs	r3, r3, #24
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff ff42 	bl	8000bc8 <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	0c1b      	lsrs	r3, r3, #16
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff ff3c 	bl	8000bc8 <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	0018      	movs	r0, r3
 8000d58:	f7ff ff36 	bl	8000bc8 <SD_TransmitByte>
    SD_TransmitByte(arg);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	0018      	movs	r0, r3
 8000d62:	f7ff ff31 	bl	8000bc8 <SD_TransmitByte>
    SD_TransmitByte(crc);
 8000d66:	1dbb      	adds	r3, r7, #6
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff ff2c 	bl	8000bc8 <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 8000d70:	250e      	movs	r5, #14
 8000d72:	197c      	adds	r4, r7, r5
 8000d74:	f7ff ff3c 	bl	8000bf0 <SD_ReceiveByte>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	7023      	strb	r3, [r4, #0]
    } while ((response & 0x80) && --retry);
 8000d7c:	197b      	adds	r3, r7, r5
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	da09      	bge.n	8000d9a <SD_SendCommand+0x94>
 8000d86:	210f      	movs	r1, #15
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	187a      	adds	r2, r7, r1
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	3a01      	subs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1ea      	bne.n	8000d70 <SD_SendCommand+0x6a>

    return response;
 8000d9a:	230e      	movs	r3, #14
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	781b      	ldrb	r3, [r3, #0]
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b004      	add	sp, #16
 8000da6:	bdb0      	pop	{r4, r5, r7, pc}

08000da8 <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    return sdhc;
 8000dac:	4b02      	ldr	r3, [pc, #8]	@ (8000db8 <sd_is_sdhc+0x10>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	20000434 	.word	0x20000434

08000dbc <SD_SPI_Init>:
uint8_t card_initialized = 0;

SD_Status SD_SPI_Init(void) {
 8000dbc:	b5b0      	push	{r4, r5, r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 8000dc2:	2390      	movs	r3, #144	@ 0x90
 8000dc4:	05db      	lsls	r3, r3, #23
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2110      	movs	r1, #16
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f001 f93a 	bl	8002044 <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	e008      	b.n	8000dec <SD_SPI_Init+0x30>
 8000dda:	20ff      	movs	r0, #255	@ 0xff
 8000ddc:	f7ff fef4 	bl	8000bc8 <SD_TransmitByte>
 8000de0:	210f      	movs	r1, #15
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	781a      	ldrb	r2, [r3, #0]
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	3201      	adds	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
 8000dec:	230f      	movs	r3, #15
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b09      	cmp	r3, #9
 8000df4:	d9f1      	bls.n	8000dda <SD_SPI_Init+0x1e>

    SD_CS_LOW();
 8000df6:	2390      	movs	r3, #144	@ 0x90
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 f920 	bl	8002044 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 8000e04:	250e      	movs	r5, #14
 8000e06:	197c      	adds	r4, r7, r5
 8000e08:	2295      	movs	r2, #149	@ 0x95
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff ff7a 	bl	8000d06 <SD_SendCommand>
 8000e12:	0003      	movs	r3, r0
 8000e14:	7023      	strb	r3, [r4, #0]
    SD_CS_HIGH();
 8000e16:	2390      	movs	r3, #144	@ 0x90
 8000e18:	05db      	lsls	r3, r3, #23
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2110      	movs	r1, #16
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f001 f910 	bl	8002044 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8000e24:	20ff      	movs	r0, #255	@ 0xff
 8000e26:	f7ff fecf 	bl	8000bc8 <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 8000e2a:	197b      	adds	r3, r7, r5
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d001      	beq.n	8000e36 <SD_SPI_Init+0x7a>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e0ec      	b.n	8001010 <SD_SPI_Init+0x254>

    SD_CS_LOW();
 8000e36:	2390      	movs	r3, #144	@ 0x90
 8000e38:	05db      	lsls	r3, r3, #23
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f001 f900 	bl	8002044 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 8000e44:	230e      	movs	r3, #14
 8000e46:	18fc      	adds	r4, r7, r3
 8000e48:	23d5      	movs	r3, #213	@ 0xd5
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2287      	movs	r2, #135	@ 0x87
 8000e4e:	0019      	movs	r1, r3
 8000e50:	2008      	movs	r0, #8
 8000e52:	f7ff ff58 	bl	8000d06 <SD_SendCommand>
 8000e56:	0003      	movs	r3, r0
 8000e58:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
 8000e62:	e00d      	b.n	8000e80 <SD_SPI_Init+0xc4>
 8000e64:	250f      	movs	r5, #15
 8000e66:	197b      	adds	r3, r7, r5
 8000e68:	781c      	ldrb	r4, [r3, #0]
 8000e6a:	f7ff fec1 	bl	8000bf0 <SD_ReceiveByte>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	001a      	movs	r2, r3
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	551a      	strb	r2, [r3, r4]
 8000e76:	197b      	adds	r3, r7, r5
 8000e78:	781a      	ldrb	r2, [r3, #0]
 8000e7a:	197b      	adds	r3, r7, r5
 8000e7c:	3201      	adds	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	230f      	movs	r3, #15
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d9ec      	bls.n	8000e64 <SD_SPI_Init+0xa8>
    SD_CS_HIGH();
 8000e8a:	2390      	movs	r3, #144	@ 0x90
 8000e8c:	05db      	lsls	r3, r3, #23
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2110      	movs	r1, #16
 8000e92:	0018      	movs	r0, r3
 8000e94:	f001 f8d6 	bl	8002044 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8000e98:	20ff      	movs	r0, #255	@ 0xff
 8000e9a:	f7ff fe95 	bl	8000bc8 <SD_TransmitByte>

    sdhc = 0;
 8000e9e:	4b5e      	ldr	r3, [pc, #376]	@ (8001018 <SD_SPI_Init+0x25c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 8000ea4:	f000 fcde 	bl	8001864 <HAL_GetTick>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	22fa      	movs	r2, #250	@ 0xfa
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	4694      	mov	ip, r2
 8000eb0:	4463      	add	r3, ip
 8000eb2:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8000eb4:	230e      	movs	r3, #14
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d000      	beq.n	8000ec0 <SD_SPI_Init+0x104>
 8000ebe:	e072      	b.n	8000fa6 <SD_SPI_Init+0x1ea>
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	789b      	ldrb	r3, [r3, #2]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d16e      	bne.n	8000fa6 <SD_SPI_Init+0x1ea>
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	78db      	ldrb	r3, [r3, #3]
 8000ecc:	2baa      	cmp	r3, #170	@ 0xaa
 8000ece:	d16a      	bne.n	8000fa6 <SD_SPI_Init+0x1ea>
        do {
            SD_CS_LOW();
 8000ed0:	2390      	movs	r3, #144	@ 0x90
 8000ed2:	05db      	lsls	r3, r3, #23
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 f8b3 	bl	8002044 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8000ede:	22ff      	movs	r2, #255	@ 0xff
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2037      	movs	r0, #55	@ 0x37
 8000ee4:	f7ff ff0f 	bl	8000d06 <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 8000ee8:	250e      	movs	r5, #14
 8000eea:	197c      	adds	r4, r7, r5
 8000eec:	2380      	movs	r3, #128	@ 0x80
 8000eee:	05db      	lsls	r3, r3, #23
 8000ef0:	22ff      	movs	r2, #255	@ 0xff
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	2029      	movs	r0, #41	@ 0x29
 8000ef6:	f7ff ff06 	bl	8000d06 <SD_SendCommand>
 8000efa:	0003      	movs	r3, r0
 8000efc:	7023      	strb	r3, [r4, #0]
            SD_CS_HIGH();
 8000efe:	2390      	movs	r3, #144	@ 0x90
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	2201      	movs	r2, #1
 8000f04:	2110      	movs	r1, #16
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 f89c 	bl	8002044 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8000f0c:	20ff      	movs	r0, #255	@ 0xff
 8000f0e:	f7ff fe5b 	bl	8000bc8 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8000f12:	197b      	adds	r3, r7, r5
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d005      	beq.n	8000f26 <SD_SPI_Init+0x16a>
 8000f1a:	f000 fca3 	bl	8001864 <HAL_GetTick>
 8000f1e:	0002      	movs	r2, r0
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d8d4      	bhi.n	8000ed0 <SD_SPI_Init+0x114>

        if (response != 0x00) return SD_ERROR;
 8000f26:	230e      	movs	r3, #14
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SD_SPI_Init+0x178>
 8000f30:	2301      	movs	r3, #1
 8000f32:	e06d      	b.n	8001010 <SD_SPI_Init+0x254>

        SD_CS_LOW();
 8000f34:	2390      	movs	r3, #144	@ 0x90
 8000f36:	05db      	lsls	r3, r3, #23
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f001 f881 	bl	8002044 <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 8000f42:	230e      	movs	r3, #14
 8000f44:	18fc      	adds	r4, r7, r3
 8000f46:	22ff      	movs	r2, #255	@ 0xff
 8000f48:	2100      	movs	r1, #0
 8000f4a:	203a      	movs	r0, #58	@ 0x3a
 8000f4c:	f7ff fedb 	bl	8000d06 <SD_SendCommand>
 8000f50:	0003      	movs	r3, r0
 8000f52:	7023      	strb	r3, [r4, #0]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 8000f54:	230f      	movs	r3, #15
 8000f56:	18fb      	adds	r3, r7, r3
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e00d      	b.n	8000f7a <SD_SPI_Init+0x1be>
 8000f5e:	250f      	movs	r5, #15
 8000f60:	197b      	adds	r3, r7, r5
 8000f62:	781c      	ldrb	r4, [r3, #0]
 8000f64:	f7ff fe44 	bl	8000bf0 <SD_ReceiveByte>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	003b      	movs	r3, r7
 8000f6e:	551a      	strb	r2, [r3, r4]
 8000f70:	197b      	adds	r3, r7, r5
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	197b      	adds	r3, r7, r5
 8000f76:	3201      	adds	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	230f      	movs	r3, #15
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d9ec      	bls.n	8000f5e <SD_SPI_Init+0x1a2>
        SD_CS_HIGH();
 8000f84:	2390      	movs	r3, #144	@ 0x90
 8000f86:	05db      	lsls	r3, r3, #23
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f001 f859 	bl	8002044 <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 8000f92:	003b      	movs	r3, r7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	001a      	movs	r2, r3
 8000f98:	2340      	movs	r3, #64	@ 0x40
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d033      	beq.n	8001006 <SD_SPI_Init+0x24a>
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <SD_SPI_Init+0x25c>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8000fa4:	e02f      	b.n	8001006 <SD_SPI_Init+0x24a>
    } else {
        do {
            SD_CS_LOW();
 8000fa6:	2390      	movs	r3, #144	@ 0x90
 8000fa8:	05db      	lsls	r3, r3, #23
 8000faa:	2200      	movs	r2, #0
 8000fac:	2110      	movs	r1, #16
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f001 f848 	bl	8002044 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8000fb4:	22ff      	movs	r2, #255	@ 0xff
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2037      	movs	r0, #55	@ 0x37
 8000fba:	f7ff fea4 	bl	8000d06 <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 8000fbe:	250e      	movs	r5, #14
 8000fc0:	197c      	adds	r4, r7, r5
 8000fc2:	22ff      	movs	r2, #255	@ 0xff
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2029      	movs	r0, #41	@ 0x29
 8000fc8:	f7ff fe9d 	bl	8000d06 <SD_SendCommand>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	7023      	strb	r3, [r4, #0]
            SD_CS_HIGH();
 8000fd0:	2390      	movs	r3, #144	@ 0x90
 8000fd2:	05db      	lsls	r3, r3, #23
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f001 f833 	bl	8002044 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8000fde:	20ff      	movs	r0, #255	@ 0xff
 8000fe0:	f7ff fdf2 	bl	8000bc8 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8000fe4:	197b      	adds	r3, r7, r5
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <SD_SPI_Init+0x23c>
 8000fec:	f000 fc3a 	bl	8001864 <HAL_GetTick>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d8d6      	bhi.n	8000fa6 <SD_SPI_Init+0x1ea>
        if (response != 0x00) return SD_ERROR;
 8000ff8:	230e      	movs	r3, #14
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <SD_SPI_Init+0x24c>
 8001002:	2301      	movs	r3, #1
 8001004:	e004      	b.n	8001010 <SD_SPI_Init+0x254>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001006:	46c0      	nop			@ (mov r8, r8)
    }

    card_initialized = 1;
 8001008:	4b04      	ldr	r3, [pc, #16]	@ (800101c <SD_SPI_Init+0x260>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	0018      	movs	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	b004      	add	sp, #16
 8001016:	bdb0      	pop	{r4, r5, r7, pc}
 8001018:	20000434 	.word	0x20000434
 800101c:	20000435 	.word	0x20000435

08001020 <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <SD_ReadBlocks+0x16>
 8001032:	2301      	movs	r3, #1
 8001034:	e064      	b.n	8001100 <SD_ReadBlocks+0xe0>
    if (!sdhc) sector *= 512;
 8001036:	4b34      	ldr	r3, [pc, #208]	@ (8001108 <SD_ReadBlocks+0xe8>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <SD_ReadBlocks+0x24>
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	025b      	lsls	r3, r3, #9
 8001042:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d153      	bne.n	80010f2 <SD_ReadBlocks+0xd2>
        SD_CS_LOW();
 800104a:	2390      	movs	r3, #144	@ 0x90
 800104c:	05db      	lsls	r3, r3, #23
 800104e:	2200      	movs	r2, #0
 8001050:	2110      	movs	r1, #16
 8001052:	0018      	movs	r0, r3
 8001054:	f000 fff6 	bl	8002044 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	22ff      	movs	r2, #255	@ 0xff
 800105c:	0019      	movs	r1, r3
 800105e:	2011      	movs	r0, #17
 8001060:	f7ff fe51 	bl	8000d06 <SD_SendCommand>
 8001064:	1e03      	subs	r3, r0, #0
 8001066:	d008      	beq.n	800107a <SD_ReadBlocks+0x5a>
            SD_CS_HIGH();
 8001068:	2390      	movs	r3, #144	@ 0x90
 800106a:	05db      	lsls	r3, r3, #23
 800106c:	2201      	movs	r2, #1
 800106e:	2110      	movs	r1, #16
 8001070:	0018      	movs	r0, r3
 8001072:	f000 ffe7 	bl	8002044 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e042      	b.n	8001100 <SD_ReadBlocks+0xe0>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 800107a:	f000 fbf3 	bl	8001864 <HAL_GetTick>
 800107e:	0003      	movs	r3, r0
 8001080:	33c8      	adds	r3, #200	@ 0xc8
 8001082:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 8001084:	2513      	movs	r5, #19
 8001086:	197c      	adds	r4, r7, r5
 8001088:	f7ff fdb2 	bl	8000bf0 <SD_ReceiveByte>
 800108c:	0003      	movs	r3, r0
 800108e:	7023      	strb	r3, [r4, #0]
            if (token == 0xFE) break;
 8001090:	197b      	adds	r3, r7, r5
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2bfe      	cmp	r3, #254	@ 0xfe
 8001096:	d006      	beq.n	80010a6 <SD_ReadBlocks+0x86>
        } while (HAL_GetTick() < timeout);
 8001098:	f000 fbe4 	bl	8001864 <HAL_GetTick>
 800109c:	0002      	movs	r2, r0
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d8ef      	bhi.n	8001084 <SD_ReadBlocks+0x64>
 80010a4:	e000      	b.n	80010a8 <SD_ReadBlocks+0x88>
            if (token == 0xFE) break;
 80010a6:	46c0      	nop			@ (mov r8, r8)
        if (token != 0xFE) {
 80010a8:	2313      	movs	r3, #19
 80010aa:	18fb      	adds	r3, r7, r3
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80010b0:	d008      	beq.n	80010c4 <SD_ReadBlocks+0xa4>
            SD_CS_HIGH();
 80010b2:	2390      	movs	r3, #144	@ 0x90
 80010b4:	05db      	lsls	r3, r3, #23
 80010b6:	2201      	movs	r2, #1
 80010b8:	2110      	movs	r1, #16
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 ffc2 	bl	8002044 <HAL_GPIO_WritePin>
            return SD_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e01d      	b.n	8001100 <SD_ReadBlocks+0xe0>
        }

        SD_ReceiveBuffer(buff, 512);
 80010c4:	2380      	movs	r3, #128	@ 0x80
 80010c6:	009a      	lsls	r2, r3, #2
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	0011      	movs	r1, r2
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff fdc9 	bl	8000c64 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 80010d2:	f7ff fd8d 	bl	8000bf0 <SD_ReceiveByte>
        SD_ReceiveByte();
 80010d6:	f7ff fd8b 	bl	8000bf0 <SD_ReceiveByte>
        SD_CS_HIGH();
 80010da:	2390      	movs	r3, #144	@ 0x90
 80010dc:	05db      	lsls	r3, r3, #23
 80010de:	2201      	movs	r2, #1
 80010e0:	2110      	movs	r1, #16
 80010e2:	0018      	movs	r0, r3
 80010e4:	f000 ffae 	bl	8002044 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 80010e8:	20ff      	movs	r0, #255	@ 0xff
 80010ea:	f7ff fd6d 	bl	8000bc8 <SD_TransmitByte>
        return SD_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e006      	b.n	8001100 <SD_ReadBlocks+0xe0>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	0018      	movs	r0, r3
 80010fa:	f000 f807 	bl	800110c <SD_ReadMultiBlocks>
 80010fe:	0003      	movs	r3, r0
    }
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b006      	add	sp, #24
 8001106:	bdb0      	pop	{r4, r5, r7, pc}
 8001108:	20000434 	.word	0x20000434

0800110c <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 800110c:	b5b0      	push	{r4, r5, r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <SD_ReadMultiBlocks+0x16>
 800111e:	2301      	movs	r3, #1
 8001120:	e069      	b.n	80011f6 <SD_ReadMultiBlocks+0xea>
    if (!sdhc) sector *= 512;
 8001122:	4b37      	ldr	r3, [pc, #220]	@ (8001200 <SD_ReadMultiBlocks+0xf4>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <SD_ReadMultiBlocks+0x24>
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	025b      	lsls	r3, r3, #9
 800112e:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8001130:	2390      	movs	r3, #144	@ 0x90
 8001132:	05db      	lsls	r3, r3, #23
 8001134:	2200      	movs	r2, #0
 8001136:	2110      	movs	r1, #16
 8001138:	0018      	movs	r0, r3
 800113a:	f000 ff83 	bl	8002044 <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	22ff      	movs	r2, #255	@ 0xff
 8001142:	0019      	movs	r1, r3
 8001144:	2012      	movs	r0, #18
 8001146:	f7ff fdde 	bl	8000d06 <SD_SendCommand>
 800114a:	1e03      	subs	r3, r0, #0
 800114c:	d03e      	beq.n	80011cc <SD_ReadMultiBlocks+0xc0>
        SD_CS_HIGH();
 800114e:	2390      	movs	r3, #144	@ 0x90
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	2201      	movs	r2, #1
 8001154:	2110      	movs	r1, #16
 8001156:	0018      	movs	r0, r3
 8001158:	f000 ff74 	bl	8002044 <HAL_GPIO_WritePin>
        return SD_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e04a      	b.n	80011f6 <SD_ReadMultiBlocks+0xea>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001160:	f000 fb80 	bl	8001864 <HAL_GetTick>
 8001164:	0003      	movs	r3, r0
 8001166:	33c8      	adds	r3, #200	@ 0xc8
 8001168:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 800116a:	2513      	movs	r5, #19
 800116c:	197c      	adds	r4, r7, r5
 800116e:	f7ff fd3f 	bl	8000bf0 <SD_ReceiveByte>
 8001172:	0003      	movs	r3, r0
 8001174:	7023      	strb	r3, [r4, #0]
            if (token == 0xFE) break;
 8001176:	197b      	adds	r3, r7, r5
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2bfe      	cmp	r3, #254	@ 0xfe
 800117c:	d006      	beq.n	800118c <SD_ReadMultiBlocks+0x80>
        } while (HAL_GetTick() < timeout);
 800117e:	f000 fb71 	bl	8001864 <HAL_GetTick>
 8001182:	0002      	movs	r2, r0
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	4293      	cmp	r3, r2
 8001188:	d8ef      	bhi.n	800116a <SD_ReadMultiBlocks+0x5e>
 800118a:	e000      	b.n	800118e <SD_ReadMultiBlocks+0x82>
            if (token == 0xFE) break;
 800118c:	46c0      	nop			@ (mov r8, r8)

        if (token != 0xFE) {
 800118e:	2313      	movs	r3, #19
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2bfe      	cmp	r3, #254	@ 0xfe
 8001196:	d008      	beq.n	80011aa <SD_ReadMultiBlocks+0x9e>
            SD_CS_HIGH();
 8001198:	2390      	movs	r3, #144	@ 0x90
 800119a:	05db      	lsls	r3, r3, #23
 800119c:	2201      	movs	r2, #1
 800119e:	2110      	movs	r1, #16
 80011a0:	0018      	movs	r0, r3
 80011a2:	f000 ff4f 	bl	8002044 <HAL_GPIO_WritePin>
            return SD_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e025      	b.n	80011f6 <SD_ReadMultiBlocks+0xea>
        }

        SD_ReceiveBuffer(buff, 512);
 80011aa:	2380      	movs	r3, #128	@ 0x80
 80011ac:	009a      	lsls	r2, r3, #2
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	0011      	movs	r1, r2
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff fd56 	bl	8000c64 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 80011b8:	f7ff fd1a 	bl	8000bf0 <SD_ReceiveByte>
        SD_ReceiveByte();
 80011bc:	f7ff fd18 	bl	8000bf0 <SD_ReceiveByte>

        buff += 512;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2280      	movs	r2, #128	@ 0x80
 80011c4:	0092      	lsls	r2, r2, #2
 80011c6:	4694      	mov	ip, r2
 80011c8:	4463      	add	r3, ip
 80011ca:	60fb      	str	r3, [r7, #12]
    while (count--) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	1e5a      	subs	r2, r3, #1
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1c4      	bne.n	8001160 <SD_ReadMultiBlocks+0x54>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 80011d6:	22ff      	movs	r2, #255	@ 0xff
 80011d8:	2100      	movs	r1, #0
 80011da:	200c      	movs	r0, #12
 80011dc:	f7ff fd93 	bl	8000d06 <SD_SendCommand>
    SD_CS_HIGH();
 80011e0:	2390      	movs	r3, #144	@ 0x90
 80011e2:	05db      	lsls	r3, r3, #23
 80011e4:	2201      	movs	r2, #1
 80011e6:	2110      	movs	r1, #16
 80011e8:	0018      	movs	r0, r3
 80011ea:	f000 ff2b 	bl	8002044 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 80011ee:	20ff      	movs	r0, #255	@ 0xff
 80011f0:	f7ff fcea 	bl	8000bc8 <SD_TransmitByte>

    return SD_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b006      	add	sp, #24
 80011fc:	bdb0      	pop	{r4, r5, r7, pc}
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	20000434 	.word	0x20000434

08001204 <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8001204:	b5b0      	push	{r4, r5, r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <SD_WriteBlocks+0x16>
 8001216:	2301      	movs	r3, #1
 8001218:	e05e      	b.n	80012d8 <SD_WriteBlocks+0xd4>
    if (!sdhc) sector *= 512;
 800121a:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <SD_WriteBlocks+0xdc>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <SD_WriteBlocks+0x24>
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	025b      	lsls	r3, r3, #9
 8001226:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d14d      	bne.n	80012ca <SD_WriteBlocks+0xc6>
        SD_CS_LOW();
 800122e:	2390      	movs	r3, #144	@ 0x90
 8001230:	05db      	lsls	r3, r3, #23
 8001232:	2200      	movs	r2, #0
 8001234:	2110      	movs	r1, #16
 8001236:	0018      	movs	r0, r3
 8001238:	f000 ff04 	bl	8002044 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	22ff      	movs	r2, #255	@ 0xff
 8001240:	0019      	movs	r1, r3
 8001242:	2018      	movs	r0, #24
 8001244:	f7ff fd5f 	bl	8000d06 <SD_SendCommand>
 8001248:	1e03      	subs	r3, r0, #0
 800124a:	d008      	beq.n	800125e <SD_WriteBlocks+0x5a>
            SD_CS_HIGH();
 800124c:	2390      	movs	r3, #144	@ 0x90
 800124e:	05db      	lsls	r3, r3, #23
 8001250:	2201      	movs	r2, #1
 8001252:	2110      	movs	r1, #16
 8001254:	0018      	movs	r0, r3
 8001256:	f000 fef5 	bl	8002044 <HAL_GPIO_WritePin>
            return SD_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e03c      	b.n	80012d8 <SD_WriteBlocks+0xd4>
        }

        SD_TransmitByte(0xFE);
 800125e:	20fe      	movs	r0, #254	@ 0xfe
 8001260:	f7ff fcb2 	bl	8000bc8 <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 8001264:	2380      	movs	r3, #128	@ 0x80
 8001266:	009a      	lsls	r2, r3, #2
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	0011      	movs	r1, r2
 800126c:	0018      	movs	r0, r3
 800126e:	f7ff fcd9 	bl	8000c24 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 8001272:	20ff      	movs	r0, #255	@ 0xff
 8001274:	f7ff fca8 	bl	8000bc8 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8001278:	20ff      	movs	r0, #255	@ 0xff
 800127a:	f7ff fca5 	bl	8000bc8 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 800127e:	2517      	movs	r5, #23
 8001280:	197c      	adds	r4, r7, r5
 8001282:	f7ff fcb5 	bl	8000bf0 <SD_ReceiveByte>
 8001286:	0003      	movs	r3, r0
 8001288:	7023      	strb	r3, [r4, #0]
        if ((resp & 0x1F) != 0x05) {
 800128a:	197b      	adds	r3, r7, r5
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	221f      	movs	r2, #31
 8001290:	4013      	ands	r3, r2
 8001292:	2b05      	cmp	r3, #5
 8001294:	d008      	beq.n	80012a8 <SD_WriteBlocks+0xa4>
            SD_CS_HIGH();
 8001296:	2390      	movs	r3, #144	@ 0x90
 8001298:	05db      	lsls	r3, r3, #23
 800129a:	2201      	movs	r2, #1
 800129c:	2110      	movs	r1, #16
 800129e:	0018      	movs	r0, r3
 80012a0:	f000 fed0 	bl	8002044 <HAL_GPIO_WritePin>
            return SD_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e017      	b.n	80012d8 <SD_WriteBlocks+0xd4>
        }

        while (SD_ReceiveByte() == 0);
 80012a8:	46c0      	nop			@ (mov r8, r8)
 80012aa:	f7ff fca1 	bl	8000bf0 <SD_ReceiveByte>
 80012ae:	1e03      	subs	r3, r0, #0
 80012b0:	d0fb      	beq.n	80012aa <SD_WriteBlocks+0xa6>
        SD_CS_HIGH();
 80012b2:	2390      	movs	r3, #144	@ 0x90
 80012b4:	05db      	lsls	r3, r3, #23
 80012b6:	2201      	movs	r2, #1
 80012b8:	2110      	movs	r1, #16
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fec2 	bl	8002044 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 80012c0:	20ff      	movs	r0, #255	@ 0xff
 80012c2:	f7ff fc81 	bl	8000bc8 <SD_TransmitByte>

        return SD_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e006      	b.n	80012d8 <SD_WriteBlocks+0xd4>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f000 f807 	bl	80012e4 <SD_WriteMultiBlocks>
 80012d6:	0003      	movs	r3, r0
    }
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b006      	add	sp, #24
 80012de:	bdb0      	pop	{r4, r5, r7, pc}
 80012e0:	20000434 	.word	0x20000434

080012e4 <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 80012e4:	b5b0      	push	{r4, r5, r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <SD_WriteMultiBlocks+0x16>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e066      	b.n	80013c8 <SD_WriteMultiBlocks+0xe4>
    if (!sdhc) sector *= 512;
 80012fa:	4b35      	ldr	r3, [pc, #212]	@ (80013d0 <SD_WriteMultiBlocks+0xec>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <SD_WriteMultiBlocks+0x24>
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	025b      	lsls	r3, r3, #9
 8001306:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8001308:	2390      	movs	r3, #144	@ 0x90
 800130a:	05db      	lsls	r3, r3, #23
 800130c:	2200      	movs	r2, #0
 800130e:	2110      	movs	r1, #16
 8001310:	0018      	movs	r0, r3
 8001312:	f000 fe97 	bl	8002044 <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	22ff      	movs	r2, #255	@ 0xff
 800131a:	0019      	movs	r1, r3
 800131c:	2019      	movs	r0, #25
 800131e:	f7ff fcf2 	bl	8000d06 <SD_SendCommand>
 8001322:	1e03      	subs	r3, r0, #0
 8001324:	d038      	beq.n	8001398 <SD_WriteMultiBlocks+0xb4>
        SD_CS_HIGH();
 8001326:	2390      	movs	r3, #144	@ 0x90
 8001328:	05db      	lsls	r3, r3, #23
 800132a:	2201      	movs	r2, #1
 800132c:	2110      	movs	r1, #16
 800132e:	0018      	movs	r0, r3
 8001330:	f000 fe88 	bl	8002044 <HAL_GPIO_WritePin>
        return SD_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e047      	b.n	80013c8 <SD_WriteMultiBlocks+0xe4>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 8001338:	20fc      	movs	r0, #252	@ 0xfc
 800133a:	f7ff fc45 	bl	8000bc8 <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 800133e:	2380      	movs	r3, #128	@ 0x80
 8001340:	009a      	lsls	r2, r3, #2
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	0011      	movs	r1, r2
 8001346:	0018      	movs	r0, r3
 8001348:	f7ff fc6c 	bl	8000c24 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 800134c:	20ff      	movs	r0, #255	@ 0xff
 800134e:	f7ff fc3b 	bl	8000bc8 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8001352:	20ff      	movs	r0, #255	@ 0xff
 8001354:	f7ff fc38 	bl	8000bc8 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8001358:	2517      	movs	r5, #23
 800135a:	197c      	adds	r4, r7, r5
 800135c:	f7ff fc48 	bl	8000bf0 <SD_ReceiveByte>
 8001360:	0003      	movs	r3, r0
 8001362:	7023      	strb	r3, [r4, #0]
        if ((resp & 0x1F) != 0x05) {
 8001364:	197b      	adds	r3, r7, r5
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	221f      	movs	r2, #31
 800136a:	4013      	ands	r3, r2
 800136c:	2b05      	cmp	r3, #5
 800136e:	d008      	beq.n	8001382 <SD_WriteMultiBlocks+0x9e>
            SD_CS_HIGH();
 8001370:	2390      	movs	r3, #144	@ 0x90
 8001372:	05db      	lsls	r3, r3, #23
 8001374:	2201      	movs	r2, #1
 8001376:	2110      	movs	r1, #16
 8001378:	0018      	movs	r0, r3
 800137a:	f000 fe63 	bl	8002044 <HAL_GPIO_WritePin>
            return SD_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e022      	b.n	80013c8 <SD_WriteMultiBlocks+0xe4>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	f7ff fc34 	bl	8000bf0 <SD_ReceiveByte>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d0fb      	beq.n	8001384 <SD_WriteMultiBlocks+0xa0>
        buff += 512;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2280      	movs	r2, #128	@ 0x80
 8001390:	0092      	lsls	r2, r2, #2
 8001392:	4694      	mov	ip, r2
 8001394:	4463      	add	r3, ip
 8001396:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	1e5a      	subs	r2, r3, #1
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1ca      	bne.n	8001338 <SD_WriteMultiBlocks+0x54>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 80013a2:	20fd      	movs	r0, #253	@ 0xfd
 80013a4:	f7ff fc10 	bl	8000bc8 <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 80013a8:	46c0      	nop			@ (mov r8, r8)
 80013aa:	f7ff fc21 	bl	8000bf0 <SD_ReceiveByte>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d0fb      	beq.n	80013aa <SD_WriteMultiBlocks+0xc6>

    SD_CS_HIGH();
 80013b2:	2390      	movs	r3, #144	@ 0x90
 80013b4:	05db      	lsls	r3, r3, #23
 80013b6:	2201      	movs	r2, #1
 80013b8:	2110      	movs	r1, #16
 80013ba:	0018      	movs	r0, r3
 80013bc:	f000 fe42 	bl	8002044 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 80013c0:	20ff      	movs	r0, #255	@ 0xff
 80013c2:	f7ff fc01 	bl	8000bc8 <SD_TransmitByte>

    return SD_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b006      	add	sp, #24
 80013ce:	bdb0      	pop	{r4, r5, r7, pc}
 80013d0:	20000434 	.word	0x20000434

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <HAL_MspInit+0x44>)
 80013dc:	699a      	ldr	r2, [r3, #24]
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <HAL_MspInit+0x44>)
 80013e0:	2101      	movs	r1, #1
 80013e2:	430a      	orrs	r2, r1
 80013e4:	619a      	str	r2, [r3, #24]
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <HAL_MspInit+0x44>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	2201      	movs	r2, #1
 80013ec:	4013      	ands	r3, r2
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_MspInit+0x44>)
 80013f4:	69da      	ldr	r2, [r3, #28]
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <HAL_MspInit+0x44>)
 80013f8:	2180      	movs	r1, #128	@ 0x80
 80013fa:	0549      	lsls	r1, r1, #21
 80013fc:	430a      	orrs	r2, r1
 80013fe:	61da      	str	r2, [r3, #28]
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <HAL_MspInit+0x44>)
 8001402:	69da      	ldr	r2, [r3, #28]
 8001404:	2380      	movs	r3, #128	@ 0x80
 8001406:	055b      	lsls	r3, r3, #21
 8001408:	4013      	ands	r3, r2
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	40021000 	.word	0x40021000

0800141c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b08b      	sub	sp, #44	@ 0x2c
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	2414      	movs	r4, #20
 8001426:	193b      	adds	r3, r7, r4
 8001428:	0018      	movs	r0, r3
 800142a:	2314      	movs	r3, #20
 800142c:	001a      	movs	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	f008 f954 	bl	80096dc <memset>
  if(hspi->Instance==SPI1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a43      	ldr	r2, [pc, #268]	@ (8001548 <HAL_SPI_MspInit+0x12c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d000      	beq.n	8001440 <HAL_SPI_MspInit+0x24>
 800143e:	e07e      	b.n	800153e <HAL_SPI_MspInit+0x122>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001440:	4b42      	ldr	r3, [pc, #264]	@ (800154c <HAL_SPI_MspInit+0x130>)
 8001442:	699a      	ldr	r2, [r3, #24]
 8001444:	4b41      	ldr	r3, [pc, #260]	@ (800154c <HAL_SPI_MspInit+0x130>)
 8001446:	2180      	movs	r1, #128	@ 0x80
 8001448:	0149      	lsls	r1, r1, #5
 800144a:	430a      	orrs	r2, r1
 800144c:	619a      	str	r2, [r3, #24]
 800144e:	4b3f      	ldr	r3, [pc, #252]	@ (800154c <HAL_SPI_MspInit+0x130>)
 8001450:	699a      	ldr	r2, [r3, #24]
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	015b      	lsls	r3, r3, #5
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b3b      	ldr	r3, [pc, #236]	@ (800154c <HAL_SPI_MspInit+0x130>)
 800145e:	695a      	ldr	r2, [r3, #20]
 8001460:	4b3a      	ldr	r3, [pc, #232]	@ (800154c <HAL_SPI_MspInit+0x130>)
 8001462:	2180      	movs	r1, #128	@ 0x80
 8001464:	0289      	lsls	r1, r1, #10
 8001466:	430a      	orrs	r2, r1
 8001468:	615a      	str	r2, [r3, #20]
 800146a:	4b38      	ldr	r3, [pc, #224]	@ (800154c <HAL_SPI_MspInit+0x130>)
 800146c:	695a      	ldr	r2, [r3, #20]
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	029b      	lsls	r3, r3, #10
 8001472:	4013      	ands	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001478:	0021      	movs	r1, r4
 800147a:	187b      	adds	r3, r7, r1
 800147c:	22e0      	movs	r2, #224	@ 0xe0
 800147e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	187b      	adds	r3, r7, r1
 8001482:	2202      	movs	r2, #2
 8001484:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	187b      	adds	r3, r7, r1
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148c:	187b      	adds	r3, r7, r1
 800148e:	2203      	movs	r2, #3
 8001490:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001492:	187b      	adds	r3, r7, r1
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	187a      	adds	r2, r7, r1
 800149a:	2390      	movs	r3, #144	@ 0x90
 800149c:	05db      	lsls	r3, r3, #23
 800149e:	0011      	movs	r1, r2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 fc5f 	bl	8001d64 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80014a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001550 <HAL_SPI_MspInit+0x134>)
 80014a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001554 <HAL_SPI_MspInit+0x138>)
 80014aa:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ac:	4b28      	ldr	r3, [pc, #160]	@ (8001550 <HAL_SPI_MspInit+0x134>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b2:	4b27      	ldr	r3, [pc, #156]	@ (8001550 <HAL_SPI_MspInit+0x134>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014b8:	4b25      	ldr	r3, [pc, #148]	@ (8001550 <HAL_SPI_MspInit+0x134>)
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014be:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <HAL_SPI_MspInit+0x134>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c4:	4b22      	ldr	r3, [pc, #136]	@ (8001550 <HAL_SPI_MspInit+0x134>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80014ca:	4b21      	ldr	r3, [pc, #132]	@ (8001550 <HAL_SPI_MspInit+0x134>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <HAL_SPI_MspInit+0x134>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80014d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <HAL_SPI_MspInit+0x134>)
 80014d8:	0018      	movs	r0, r3
 80014da:	f000 faab 	bl	8001a34 <HAL_DMA_Init>
 80014de:	1e03      	subs	r3, r0, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80014e2:	f7ff f811 	bl	8000508 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a19      	ldr	r2, [pc, #100]	@ (8001550 <HAL_SPI_MspInit+0x134>)
 80014ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80014ec:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <HAL_SPI_MspInit+0x134>)
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80014f2:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <HAL_SPI_MspInit+0x13c>)
 80014f4:	4a19      	ldr	r2, [pc, #100]	@ (800155c <HAL_SPI_MspInit+0x140>)
 80014f6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014f8:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <HAL_SPI_MspInit+0x13c>)
 80014fa:	2210      	movs	r2, #16
 80014fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fe:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <HAL_SPI_MspInit+0x13c>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001504:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <HAL_SPI_MspInit+0x13c>)
 8001506:	2280      	movs	r2, #128	@ 0x80
 8001508:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800150a:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <HAL_SPI_MspInit+0x13c>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <HAL_SPI_MspInit+0x13c>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <HAL_SPI_MspInit+0x13c>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <HAL_SPI_MspInit+0x13c>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001522:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <HAL_SPI_MspInit+0x13c>)
 8001524:	0018      	movs	r0, r3
 8001526:	f000 fa85 	bl	8001a34 <HAL_DMA_Init>
 800152a:	1e03      	subs	r3, r0, #0
 800152c:	d001      	beq.n	8001532 <HAL_SPI_MspInit+0x116>
    {
      Error_Handler();
 800152e:	f7fe ffeb 	bl	8000508 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <HAL_SPI_MspInit+0x13c>)
 8001536:	655a      	str	r2, [r3, #84]	@ 0x54
 8001538:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <HAL_SPI_MspInit+0x13c>)
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b00b      	add	sp, #44	@ 0x2c
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	40013000 	.word	0x40013000
 800154c:	40021000 	.word	0x40021000
 8001550:	200000e8 	.word	0x200000e8
 8001554:	4002001c 	.word	0x4002001c
 8001558:	2000012c 	.word	0x2000012c
 800155c:	40020030 	.word	0x40020030

08001560 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b08b      	sub	sp, #44	@ 0x2c
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	2414      	movs	r4, #20
 800156a:	193b      	adds	r3, r7, r4
 800156c:	0018      	movs	r0, r3
 800156e:	2314      	movs	r3, #20
 8001570:	001a      	movs	r2, r3
 8001572:	2100      	movs	r1, #0
 8001574:	f008 f8b2 	bl	80096dc <memset>
  if(huart->Instance==USART2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a1c      	ldr	r2, [pc, #112]	@ (80015f0 <HAL_UART_MspInit+0x90>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d132      	bne.n	80015e8 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001582:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <HAL_UART_MspInit+0x94>)
 8001584:	69da      	ldr	r2, [r3, #28]
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_UART_MspInit+0x94>)
 8001588:	2180      	movs	r1, #128	@ 0x80
 800158a:	0289      	lsls	r1, r1, #10
 800158c:	430a      	orrs	r2, r1
 800158e:	61da      	str	r2, [r3, #28]
 8001590:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <HAL_UART_MspInit+0x94>)
 8001592:	69da      	ldr	r2, [r3, #28]
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	029b      	lsls	r3, r3, #10
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <HAL_UART_MspInit+0x94>)
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <HAL_UART_MspInit+0x94>)
 80015a4:	2180      	movs	r1, #128	@ 0x80
 80015a6:	0289      	lsls	r1, r1, #10
 80015a8:	430a      	orrs	r2, r1
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HAL_UART_MspInit+0x94>)
 80015ae:	695a      	ldr	r2, [r3, #20]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	029b      	lsls	r3, r3, #10
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ba:	0021      	movs	r1, r4
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	2202      	movs	r2, #2
 80015c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2203      	movs	r2, #3
 80015d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	2201      	movs	r2, #1
 80015d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	187a      	adds	r2, r7, r1
 80015dc:	2390      	movs	r3, #144	@ 0x90
 80015de:	05db      	lsls	r3, r3, #23
 80015e0:	0011      	movs	r1, r2
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 fbbe 	bl	8001d64 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80015e8:	46c0      	nop			@ (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b00b      	add	sp, #44	@ 0x2c
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	40004400 	.word	0x40004400
 80015f4:	40021000 	.word	0x40021000

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015fc:	46c0      	nop			@ (mov r8, r8)
 80015fe:	e7fd      	b.n	80015fc <NMI_Handler+0x4>

08001600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001604:	46c0      	nop			@ (mov r8, r8)
 8001606:	e7fd      	b.n	8001604 <HardFault_Handler+0x4>

08001608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800160c:	46c0      	nop			@ (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f000 f90e 	bl	8001840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001624:	46c0      	nop			@ (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001632:	0018      	movs	r0, r3
 8001634:	f000 faac 	bl	8001b90 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001638:	4b04      	ldr	r3, [pc, #16]	@ (800164c <DMA1_Channel2_3_IRQHandler+0x20>)
 800163a:	0018      	movs	r0, r3
 800163c:	f000 faa8 	bl	8001b90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001640:	46c0      	nop			@ (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	200000e8 	.word	0x200000e8
 800164c:	2000012c 	.word	0x2000012c

08001650 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e00a      	b.n	8001678 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001662:	e000      	b.n	8001666 <_read+0x16>
 8001664:	bf00      	nop
 8001666:	0001      	movs	r1, r0
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	60ba      	str	r2, [r7, #8]
 800166e:	b2ca      	uxtb	r2, r1
 8001670:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	dbf0      	blt.n	8001662 <_read+0x12>
  }

  return len;
 8001680:	687b      	ldr	r3, [r7, #4]
}
 8001682:	0018      	movs	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	b006      	add	sp, #24
 8001688:	bd80      	pop	{r7, pc}

0800168a <_close>:
  }
  return len;
}

int _close(int file)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001692:	2301      	movs	r3, #1
 8001694:	425b      	negs	r3, r3
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}

0800169e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2280      	movs	r2, #128	@ 0x80
 80016ac:	0192      	lsls	r2, r2, #6
 80016ae:	605a      	str	r2, [r3, #4]
  return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b002      	add	sp, #8
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_isatty>:

int _isatty(int file)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	0018      	movs	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	b004      	add	sp, #16
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	@ (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	18d3      	adds	r3, r2, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f008 f84a 	bl	80097ac <__errno>
 8001718:	0003      	movs	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	2301      	movs	r3, #1
 8001720:	425b      	negs	r3, r3
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	18d2      	adds	r2, r2, r3
 8001732:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <_sbrk+0x64>)
 8001734:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	0018      	movs	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	b006      	add	sp, #24
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20002000 	.word	0x20002000
 8001744:	00000400 	.word	0x00000400
 8001748:	20000638 	.word	0x20000638
 800174c:	200007b8 	.word	0x200007b8

08001750 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001754:	46c0      	nop			@ (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800175c:	480d      	ldr	r0, [pc, #52]	@ (8001794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800175e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001760:	f7ff fff6 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001764:	480c      	ldr	r0, [pc, #48]	@ (8001798 <LoopForever+0x6>)
  ldr r1, =_edata
 8001766:	490d      	ldr	r1, [pc, #52]	@ (800179c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001768:	4a0d      	ldr	r2, [pc, #52]	@ (80017a0 <LoopForever+0xe>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800177c:	4c0a      	ldr	r4, [pc, #40]	@ (80017a8 <LoopForever+0x16>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800178a:	f008 f815 	bl	80097b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178e:	f7fe fd7f 	bl	8000290 <main>

08001792 <LoopForever>:

LoopForever:
    b LoopForever
 8001792:	e7fe      	b.n	8001792 <LoopForever>
  ldr   r0, =_estack
 8001794:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80017a0:	0800af28 	.word	0x0800af28
  ldr r2, =_sbss
 80017a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80017a8:	200007b8 	.word	0x200007b8

080017ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC1_COMP_IRQHandler>
	...

080017b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <HAL_Init+0x24>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_Init+0x24>)
 80017ba:	2110      	movs	r1, #16
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80017c0:	2003      	movs	r0, #3
 80017c2:	f000 f809 	bl	80017d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c6:	f7ff fe05 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	40022000 	.word	0x40022000

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e0:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <HAL_InitTick+0x5c>)
 80017e2:	681c      	ldr	r4, [r3, #0]
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <HAL_InitTick+0x60>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	0019      	movs	r1, r3
 80017ea:	23fa      	movs	r3, #250	@ 0xfa
 80017ec:	0098      	lsls	r0, r3, #2
 80017ee:	f7fe fca7 	bl	8000140 <__udivsi3>
 80017f2:	0003      	movs	r3, r0
 80017f4:	0019      	movs	r1, r3
 80017f6:	0020      	movs	r0, r4
 80017f8:	f7fe fca2 	bl	8000140 <__udivsi3>
 80017fc:	0003      	movs	r3, r0
 80017fe:	0018      	movs	r0, r3
 8001800:	f000 f90b 	bl	8001a1a <HAL_SYSTICK_Config>
 8001804:	1e03      	subs	r3, r0, #0
 8001806:	d001      	beq.n	800180c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e00f      	b.n	800182c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b03      	cmp	r3, #3
 8001810:	d80b      	bhi.n	800182a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	2301      	movs	r3, #1
 8001816:	425b      	negs	r3, r3
 8001818:	2200      	movs	r2, #0
 800181a:	0018      	movs	r0, r3
 800181c:	f000 f8d8 	bl	80019d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_InitTick+0x64>)
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b003      	add	sp, #12
 8001832:	bd90      	pop	{r4, r7, pc}
 8001834:	20000000 	.word	0x20000000
 8001838:	20000008 	.word	0x20000008
 800183c:	20000004 	.word	0x20000004

08001840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b05      	ldr	r3, [pc, #20]	@ (800185c <HAL_IncTick+0x1c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	001a      	movs	r2, r3
 800184a:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <HAL_IncTick+0x20>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	18d2      	adds	r2, r2, r3
 8001850:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <HAL_IncTick+0x20>)
 8001852:	601a      	str	r2, [r3, #0]
}
 8001854:	46c0      	nop			@ (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			@ (mov r8, r8)
 800185c:	20000008 	.word	0x20000008
 8001860:	2000063c 	.word	0x2000063c

08001864 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b02      	ldr	r3, [pc, #8]	@ (8001874 <HAL_GetTick+0x10>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	0018      	movs	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	2000063c 	.word	0x2000063c

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	0002      	movs	r2, r0
 8001880:	1dfb      	adds	r3, r7, #7
 8001882:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001884:	1dfb      	adds	r3, r7, #7
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b7f      	cmp	r3, #127	@ 0x7f
 800188a:	d809      	bhi.n	80018a0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188c:	1dfb      	adds	r3, r7, #7
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	001a      	movs	r2, r3
 8001892:	231f      	movs	r3, #31
 8001894:	401a      	ands	r2, r3
 8001896:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <__NVIC_EnableIRQ+0x30>)
 8001898:	2101      	movs	r1, #1
 800189a:	4091      	lsls	r1, r2
 800189c:	000a      	movs	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
  }
}
 80018a0:	46c0      	nop			@ (mov r8, r8)
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b002      	add	sp, #8
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	0002      	movs	r2, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b7f      	cmp	r3, #127	@ 0x7f
 80018c0:	d828      	bhi.n	8001914 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001980 <__NVIC_SetPriority+0xd4>)
 80018c4:	1dfb      	adds	r3, r7, #7
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	33c0      	adds	r3, #192	@ 0xc0
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	589b      	ldr	r3, [r3, r2]
 80018d2:	1dfa      	adds	r2, r7, #7
 80018d4:	7812      	ldrb	r2, [r2, #0]
 80018d6:	0011      	movs	r1, r2
 80018d8:	2203      	movs	r2, #3
 80018da:	400a      	ands	r2, r1
 80018dc:	00d2      	lsls	r2, r2, #3
 80018de:	21ff      	movs	r1, #255	@ 0xff
 80018e0:	4091      	lsls	r1, r2
 80018e2:	000a      	movs	r2, r1
 80018e4:	43d2      	mvns	r2, r2
 80018e6:	401a      	ands	r2, r3
 80018e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	019b      	lsls	r3, r3, #6
 80018ee:	22ff      	movs	r2, #255	@ 0xff
 80018f0:	401a      	ands	r2, r3
 80018f2:	1dfb      	adds	r3, r7, #7
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	0018      	movs	r0, r3
 80018f8:	2303      	movs	r3, #3
 80018fa:	4003      	ands	r3, r0
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001900:	481f      	ldr	r0, [pc, #124]	@ (8001980 <__NVIC_SetPriority+0xd4>)
 8001902:	1dfb      	adds	r3, r7, #7
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b25b      	sxtb	r3, r3
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	430a      	orrs	r2, r1
 800190c:	33c0      	adds	r3, #192	@ 0xc0
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001912:	e031      	b.n	8001978 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001914:	4a1b      	ldr	r2, [pc, #108]	@ (8001984 <__NVIC_SetPriority+0xd8>)
 8001916:	1dfb      	adds	r3, r7, #7
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	0019      	movs	r1, r3
 800191c:	230f      	movs	r3, #15
 800191e:	400b      	ands	r3, r1
 8001920:	3b08      	subs	r3, #8
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	3306      	adds	r3, #6
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	18d3      	adds	r3, r2, r3
 800192a:	3304      	adds	r3, #4
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	1dfa      	adds	r2, r7, #7
 8001930:	7812      	ldrb	r2, [r2, #0]
 8001932:	0011      	movs	r1, r2
 8001934:	2203      	movs	r2, #3
 8001936:	400a      	ands	r2, r1
 8001938:	00d2      	lsls	r2, r2, #3
 800193a:	21ff      	movs	r1, #255	@ 0xff
 800193c:	4091      	lsls	r1, r2
 800193e:	000a      	movs	r2, r1
 8001940:	43d2      	mvns	r2, r2
 8001942:	401a      	ands	r2, r3
 8001944:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	019b      	lsls	r3, r3, #6
 800194a:	22ff      	movs	r2, #255	@ 0xff
 800194c:	401a      	ands	r2, r3
 800194e:	1dfb      	adds	r3, r7, #7
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	0018      	movs	r0, r3
 8001954:	2303      	movs	r3, #3
 8001956:	4003      	ands	r3, r0
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800195c:	4809      	ldr	r0, [pc, #36]	@ (8001984 <__NVIC_SetPriority+0xd8>)
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	001c      	movs	r4, r3
 8001964:	230f      	movs	r3, #15
 8001966:	4023      	ands	r3, r4
 8001968:	3b08      	subs	r3, #8
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	430a      	orrs	r2, r1
 800196e:	3306      	adds	r3, #6
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	18c3      	adds	r3, r0, r3
 8001974:	3304      	adds	r3, #4
 8001976:	601a      	str	r2, [r3, #0]
}
 8001978:	46c0      	nop			@ (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b003      	add	sp, #12
 800197e:	bd90      	pop	{r4, r7, pc}
 8001980:	e000e100 	.word	0xe000e100
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	1e5a      	subs	r2, r3, #1
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	045b      	lsls	r3, r3, #17
 8001998:	429a      	cmp	r2, r3
 800199a:	d301      	bcc.n	80019a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199c:	2301      	movs	r3, #1
 800199e:	e010      	b.n	80019c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a0:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <SysTick_Config+0x44>)
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	3a01      	subs	r2, #1
 80019a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a8:	2301      	movs	r3, #1
 80019aa:	425b      	negs	r3, r3
 80019ac:	2103      	movs	r1, #3
 80019ae:	0018      	movs	r0, r3
 80019b0:	f7ff ff7c 	bl	80018ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b4:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <SysTick_Config+0x44>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ba:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <SysTick_Config+0x44>)
 80019bc:	2207      	movs	r2, #7
 80019be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	0018      	movs	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b002      	add	sp, #8
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	210f      	movs	r1, #15
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	1c02      	adds	r2, r0, #0
 80019e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	0011      	movs	r1, r2
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff ff5d 	bl	80018ac <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b004      	add	sp, #16
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	0002      	movs	r2, r0
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a06:	1dfb      	adds	r3, r7, #7
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff ff33 	bl	8001878 <__NVIC_EnableIRQ>
}
 8001a12:	46c0      	nop			@ (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff ffaf 	bl	8001988 <SysTick_Config>
 8001a2a:	0003      	movs	r3, r0
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b002      	add	sp, #8
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e036      	b.n	8001ab8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2221      	movs	r2, #33	@ 0x21
 8001a4e:	2102      	movs	r1, #2
 8001a50:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4a18      	ldr	r2, [pc, #96]	@ (8001ac0 <HAL_DMA_Init+0x8c>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 f946 	bl	8001d2c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2221      	movs	r2, #33	@ 0x21
 8001aaa:	2101      	movs	r1, #1
 8001aac:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b004      	add	sp, #16
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	ffffc00f 	.word	0xffffc00f

08001ac4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad2:	2317      	movs	r3, #23
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2220      	movs	r2, #32
 8001ade:	5c9b      	ldrb	r3, [r3, r2]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_DMA_Start_IT+0x24>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e04f      	b.n	8001b88 <HAL_DMA_Start_IT+0xc4>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2220      	movs	r2, #32
 8001aec:	2101      	movs	r1, #1
 8001aee:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2221      	movs	r2, #33	@ 0x21
 8001af4:	5c9b      	ldrb	r3, [r3, r2]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d13a      	bne.n	8001b72 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2221      	movs	r2, #33	@ 0x21
 8001b00:	2102      	movs	r1, #2
 8001b02:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2101      	movs	r1, #1
 8001b16:	438a      	bics	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	68b9      	ldr	r1, [r7, #8]
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f8d7 	bl	8001cd4 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	210e      	movs	r1, #14
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e00f      	b.n	8001b60 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	210a      	movs	r1, #10
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	438a      	bics	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e007      	b.n	8001b82 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2220      	movs	r2, #32
 8001b76:	2100      	movs	r1, #0
 8001b78:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b7a:	2317      	movs	r3, #23
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	2202      	movs	r2, #2
 8001b80:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001b82:	2317      	movs	r3, #23
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	781b      	ldrb	r3, [r3, #0]
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b006      	add	sp, #24
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	2204      	movs	r2, #4
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	0013      	movs	r3, r2
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d024      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x72>
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d020      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d107      	bne.n	8001bdc <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	438a      	bics	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be4:	2104      	movs	r1, #4
 8001be6:	4091      	lsls	r1, r2
 8001be8:	000a      	movs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <HAL_DMA_IRQHandler+0x66>
 8001bf4:	e06a      	b.n	8001ccc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	0010      	movs	r0, r2
 8001bfe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c00:	e064      	b.n	8001ccc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	2202      	movs	r2, #2
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	0013      	movs	r3, r2
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d02b      	beq.n	8001c6a <HAL_DMA_IRQHandler+0xda>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2202      	movs	r2, #2
 8001c16:	4013      	ands	r3, r2
 8001c18:	d027      	beq.n	8001c6a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2220      	movs	r2, #32
 8001c22:	4013      	ands	r3, r2
 8001c24:	d10b      	bne.n	8001c3e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	210a      	movs	r1, #10
 8001c32:	438a      	bics	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2221      	movs	r2, #33	@ 0x21
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c46:	2102      	movs	r1, #2
 8001c48:	4091      	lsls	r1, r2
 8001c4a:	000a      	movs	r2, r1
 8001c4c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2220      	movs	r2, #32
 8001c52:	2100      	movs	r1, #0
 8001c54:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d036      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	0010      	movs	r0, r2
 8001c66:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c68:	e030      	b.n	8001ccc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	2208      	movs	r2, #8
 8001c70:	409a      	lsls	r2, r3
 8001c72:	0013      	movs	r3, r2
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4013      	ands	r3, r2
 8001c78:	d028      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x13c>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d024      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	210e      	movs	r1, #14
 8001c8e:	438a      	bics	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	4091      	lsls	r1, r2
 8001c9e:	000a      	movs	r2, r1
 8001ca0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2221      	movs	r2, #33	@ 0x21
 8001cac:	2101      	movs	r1, #1
 8001cae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	0010      	movs	r0, r2
 8001cc8:	4798      	blx	r3
    }
  }
}
 8001cca:	e7ff      	b.n	8001ccc <HAL_DMA_IRQHandler+0x13c>
 8001ccc:	46c0      	nop			@ (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b004      	add	sp, #16
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cea:	2101      	movs	r1, #1
 8001cec:	4091      	lsls	r1, r2
 8001cee:	000a      	movs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b10      	cmp	r3, #16
 8001d00:	d108      	bne.n	8001d14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d12:	e007      	b.n	8001d24 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	60da      	str	r2, [r3, #12]
}
 8001d24:	46c0      	nop			@ (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b004      	add	sp, #16
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a08      	ldr	r2, [pc, #32]	@ (8001d5c <DMA_CalcBaseAndBitshift+0x30>)
 8001d3a:	4694      	mov	ip, r2
 8001d3c:	4463      	add	r3, ip
 8001d3e:	2114      	movs	r1, #20
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7fe f9fd 	bl	8000140 <__udivsi3>
 8001d46:	0003      	movs	r3, r0
 8001d48:	009a      	lsls	r2, r3, #2
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a03      	ldr	r2, [pc, #12]	@ (8001d60 <DMA_CalcBaseAndBitshift+0x34>)
 8001d52:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001d54:	46c0      	nop			@ (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	bffdfff8 	.word	0xbffdfff8
 8001d60:	40020000 	.word	0x40020000

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d72:	e14f      	b.n	8002014 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2101      	movs	r1, #1
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4091      	lsls	r1, r2
 8001d7e:	000a      	movs	r2, r1
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d100      	bne.n	8001d8c <HAL_GPIO_Init+0x28>
 8001d8a:	e140      	b.n	800200e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2203      	movs	r2, #3
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d005      	beq.n	8001da4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d130      	bne.n	8001e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	409a      	lsls	r2, r3
 8001db2:	0013      	movs	r3, r2
 8001db4:	43da      	mvns	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	0013      	movs	r3, r2
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dda:	2201      	movs	r2, #1
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
 8001de0:	0013      	movs	r3, r2
 8001de2:	43da      	mvns	r2, r3
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	2201      	movs	r2, #1
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d017      	beq.n	8001e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	0013      	movs	r3, r2
 8001e22:	43da      	mvns	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	409a      	lsls	r2, r3
 8001e34:	0013      	movs	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2203      	movs	r2, #3
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d123      	bne.n	8001e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	08da      	lsrs	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3208      	adds	r2, #8
 8001e56:	0092      	lsls	r2, r2, #2
 8001e58:	58d3      	ldr	r3, [r2, r3]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2207      	movs	r2, #7
 8001e60:	4013      	ands	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	220f      	movs	r2, #15
 8001e66:	409a      	lsls	r2, r3
 8001e68:	0013      	movs	r3, r2
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2107      	movs	r1, #7
 8001e7a:	400b      	ands	r3, r1
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	0013      	movs	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	08da      	lsrs	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3208      	adds	r2, #8
 8001e90:	0092      	lsls	r2, r2, #2
 8001e92:	6939      	ldr	r1, [r7, #16]
 8001e94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	23c0      	movs	r3, #192	@ 0xc0
 8001ed0:	029b      	lsls	r3, r3, #10
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d100      	bne.n	8001ed8 <HAL_GPIO_Init+0x174>
 8001ed6:	e09a      	b.n	800200e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed8:	4b54      	ldr	r3, [pc, #336]	@ (800202c <HAL_GPIO_Init+0x2c8>)
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	4b53      	ldr	r3, [pc, #332]	@ (800202c <HAL_GPIO_Init+0x2c8>)
 8001ede:	2101      	movs	r1, #1
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	619a      	str	r2, [r3, #24]
 8001ee4:	4b51      	ldr	r3, [pc, #324]	@ (800202c <HAL_GPIO_Init+0x2c8>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4013      	ands	r3, r2
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ef0:	4a4f      	ldr	r2, [pc, #316]	@ (8002030 <HAL_GPIO_Init+0x2cc>)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	589b      	ldr	r3, [r3, r2]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2203      	movs	r2, #3
 8001f02:	4013      	ands	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	220f      	movs	r2, #15
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	0013      	movs	r3, r2
 8001f0c:	43da      	mvns	r2, r3
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	2390      	movs	r3, #144	@ 0x90
 8001f18:	05db      	lsls	r3, r3, #23
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0x1e2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a44      	ldr	r2, [pc, #272]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_Init+0x1de>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a43      	ldr	r2, [pc, #268]	@ (8002038 <HAL_GPIO_Init+0x2d4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x1da>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a42      	ldr	r2, [pc, #264]	@ (800203c <HAL_GPIO_Init+0x2d8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_Init+0x1d6>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x1e4>
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	e004      	b.n	8001f48 <HAL_GPIO_Init+0x1e4>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e002      	b.n	8001f48 <HAL_GPIO_Init+0x1e4>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x1e4>
 8001f46:	2300      	movs	r3, #0
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	2103      	movs	r1, #3
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	0092      	lsls	r2, r2, #2
 8001f50:	4093      	lsls	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f58:	4935      	ldr	r1, [pc, #212]	@ (8002030 <HAL_GPIO_Init+0x2cc>)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f66:	4b36      	ldr	r3, [pc, #216]	@ (8002040 <HAL_GPIO_Init+0x2dc>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	035b      	lsls	r3, r3, #13
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002040 <HAL_GPIO_Init+0x2dc>)
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f90:	4b2b      	ldr	r3, [pc, #172]	@ (8002040 <HAL_GPIO_Init+0x2dc>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	2380      	movs	r3, #128	@ 0x80
 8001fa6:	039b      	lsls	r3, r3, #14
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fb4:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <HAL_GPIO_Init+0x2dc>)
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001fba:	4b21      	ldr	r3, [pc, #132]	@ (8002040 <HAL_GPIO_Init+0x2dc>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	2380      	movs	r3, #128	@ 0x80
 8001fd0:	029b      	lsls	r3, r3, #10
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fde:	4b18      	ldr	r3, [pc, #96]	@ (8002040 <HAL_GPIO_Init+0x2dc>)
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001fe4:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <HAL_GPIO_Init+0x2dc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	43da      	mvns	r2, r3
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	2380      	movs	r3, #128	@ 0x80
 8001ffa:	025b      	lsls	r3, r3, #9
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002008:	4b0d      	ldr	r3, [pc, #52]	@ (8002040 <HAL_GPIO_Init+0x2dc>)
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3301      	adds	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	40da      	lsrs	r2, r3
 800201c:	1e13      	subs	r3, r2, #0
 800201e:	d000      	beq.n	8002022 <HAL_GPIO_Init+0x2be>
 8002020:	e6a8      	b.n	8001d74 <HAL_GPIO_Init+0x10>
  } 
}
 8002022:	46c0      	nop			@ (mov r8, r8)
 8002024:	46c0      	nop			@ (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b006      	add	sp, #24
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	40010000 	.word	0x40010000
 8002034:	48000400 	.word	0x48000400
 8002038:	48000800 	.word	0x48000800
 800203c:	48000c00 	.word	0x48000c00
 8002040:	40010400 	.word	0x40010400

08002044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	0008      	movs	r0, r1
 800204e:	0011      	movs	r1, r2
 8002050:	1cbb      	adds	r3, r7, #2
 8002052:	1c02      	adds	r2, r0, #0
 8002054:	801a      	strh	r2, [r3, #0]
 8002056:	1c7b      	adds	r3, r7, #1
 8002058:	1c0a      	adds	r2, r1, #0
 800205a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800205c:	1c7b      	adds	r3, r7, #1
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d004      	beq.n	800206e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002064:	1cbb      	adds	r3, r7, #2
 8002066:	881a      	ldrh	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800206c:	e003      	b.n	8002076 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800206e:	1cbb      	adds	r3, r7, #2
 8002070:	881a      	ldrh	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b002      	add	sp, #8
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e301      	b.n	8002696 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2201      	movs	r2, #1
 8002098:	4013      	ands	r3, r2
 800209a:	d100      	bne.n	800209e <HAL_RCC_OscConfig+0x1e>
 800209c:	e08d      	b.n	80021ba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800209e:	4bc3      	ldr	r3, [pc, #780]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	220c      	movs	r2, #12
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d00e      	beq.n	80020c8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020aa:	4bc0      	ldr	r3, [pc, #768]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	220c      	movs	r2, #12
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d116      	bne.n	80020e4 <HAL_RCC_OscConfig+0x64>
 80020b6:	4bbd      	ldr	r3, [pc, #756]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	2380      	movs	r3, #128	@ 0x80
 80020bc:	025b      	lsls	r3, r3, #9
 80020be:	401a      	ands	r2, r3
 80020c0:	2380      	movs	r3, #128	@ 0x80
 80020c2:	025b      	lsls	r3, r3, #9
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d10d      	bne.n	80020e4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	4bb8      	ldr	r3, [pc, #736]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	029b      	lsls	r3, r3, #10
 80020d0:	4013      	ands	r3, r2
 80020d2:	d100      	bne.n	80020d6 <HAL_RCC_OscConfig+0x56>
 80020d4:	e070      	b.n	80021b8 <HAL_RCC_OscConfig+0x138>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d000      	beq.n	80020e0 <HAL_RCC_OscConfig+0x60>
 80020de:	e06b      	b.n	80021b8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e2d8      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_OscConfig+0x7c>
 80020ec:	4baf      	ldr	r3, [pc, #700]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4bae      	ldr	r3, [pc, #696]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80020f2:	2180      	movs	r1, #128	@ 0x80
 80020f4:	0249      	lsls	r1, r1, #9
 80020f6:	430a      	orrs	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e02f      	b.n	800215c <HAL_RCC_OscConfig+0xdc>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10c      	bne.n	800211e <HAL_RCC_OscConfig+0x9e>
 8002104:	4ba9      	ldr	r3, [pc, #676]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4ba8      	ldr	r3, [pc, #672]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800210a:	49a9      	ldr	r1, [pc, #676]	@ (80023b0 <HAL_RCC_OscConfig+0x330>)
 800210c:	400a      	ands	r2, r1
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	4ba6      	ldr	r3, [pc, #664]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4ba5      	ldr	r3, [pc, #660]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002116:	49a7      	ldr	r1, [pc, #668]	@ (80023b4 <HAL_RCC_OscConfig+0x334>)
 8002118:	400a      	ands	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	e01e      	b.n	800215c <HAL_RCC_OscConfig+0xdc>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b05      	cmp	r3, #5
 8002124:	d10e      	bne.n	8002144 <HAL_RCC_OscConfig+0xc4>
 8002126:	4ba1      	ldr	r3, [pc, #644]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4ba0      	ldr	r3, [pc, #640]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800212c:	2180      	movs	r1, #128	@ 0x80
 800212e:	02c9      	lsls	r1, r1, #11
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	4b9d      	ldr	r3, [pc, #628]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b9c      	ldr	r3, [pc, #624]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800213a:	2180      	movs	r1, #128	@ 0x80
 800213c:	0249      	lsls	r1, r1, #9
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0xdc>
 8002144:	4b99      	ldr	r3, [pc, #612]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b98      	ldr	r3, [pc, #608]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800214a:	4999      	ldr	r1, [pc, #612]	@ (80023b0 <HAL_RCC_OscConfig+0x330>)
 800214c:	400a      	ands	r2, r1
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	4b96      	ldr	r3, [pc, #600]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b95      	ldr	r3, [pc, #596]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002156:	4997      	ldr	r1, [pc, #604]	@ (80023b4 <HAL_RCC_OscConfig+0x334>)
 8002158:	400a      	ands	r2, r1
 800215a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d014      	beq.n	800218e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff fb7e 	bl	8001864 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216e:	f7ff fb79 	bl	8001864 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b64      	cmp	r3, #100	@ 0x64
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e28a      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002180:	4b8a      	ldr	r3, [pc, #552]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2380      	movs	r3, #128	@ 0x80
 8002186:	029b      	lsls	r3, r3, #10
 8002188:	4013      	ands	r3, r2
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0xee>
 800218c:	e015      	b.n	80021ba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7ff fb69 	bl	8001864 <HAL_GetTick>
 8002192:	0003      	movs	r3, r0
 8002194:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff fb64 	bl	8001864 <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	@ 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e275      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	4b80      	ldr	r3, [pc, #512]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	2380      	movs	r3, #128	@ 0x80
 80021b0:	029b      	lsls	r3, r3, #10
 80021b2:	4013      	ands	r3, r2
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x118>
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2202      	movs	r2, #2
 80021c0:	4013      	ands	r3, r2
 80021c2:	d100      	bne.n	80021c6 <HAL_RCC_OscConfig+0x146>
 80021c4:	e069      	b.n	800229a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021c6:	4b79      	ldr	r3, [pc, #484]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	220c      	movs	r2, #12
 80021cc:	4013      	ands	r3, r2
 80021ce:	d00b      	beq.n	80021e8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021d0:	4b76      	ldr	r3, [pc, #472]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	220c      	movs	r2, #12
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d11c      	bne.n	8002216 <HAL_RCC_OscConfig+0x196>
 80021dc:	4b73      	ldr	r3, [pc, #460]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	2380      	movs	r3, #128	@ 0x80
 80021e2:	025b      	lsls	r3, r3, #9
 80021e4:	4013      	ands	r3, r2
 80021e6:	d116      	bne.n	8002216 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e8:	4b70      	ldr	r3, [pc, #448]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2202      	movs	r2, #2
 80021ee:	4013      	ands	r3, r2
 80021f0:	d005      	beq.n	80021fe <HAL_RCC_OscConfig+0x17e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e24b      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fe:	4b6b      	ldr	r3, [pc, #428]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	22f8      	movs	r2, #248	@ 0xf8
 8002204:	4393      	bics	r3, r2
 8002206:	0019      	movs	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	00da      	lsls	r2, r3, #3
 800220e:	4b67      	ldr	r3, [pc, #412]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002214:	e041      	b.n	800229a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d024      	beq.n	8002268 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221e:	4b63      	ldr	r3, [pc, #396]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b62      	ldr	r3, [pc, #392]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002224:	2101      	movs	r1, #1
 8002226:	430a      	orrs	r2, r1
 8002228:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7ff fb1b 	bl	8001864 <HAL_GetTick>
 800222e:	0003      	movs	r3, r0
 8002230:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002234:	f7ff fb16 	bl	8001864 <HAL_GetTick>
 8002238:	0002      	movs	r2, r0
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e227      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	4b59      	ldr	r3, [pc, #356]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2202      	movs	r2, #2
 800224c:	4013      	ands	r3, r2
 800224e:	d0f1      	beq.n	8002234 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b56      	ldr	r3, [pc, #344]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	22f8      	movs	r2, #248	@ 0xf8
 8002256:	4393      	bics	r3, r2
 8002258:	0019      	movs	r1, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00da      	lsls	r2, r3, #3
 8002260:	4b52      	ldr	r3, [pc, #328]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002262:	430a      	orrs	r2, r1
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e018      	b.n	800229a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002268:	4b50      	ldr	r3, [pc, #320]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b4f      	ldr	r3, [pc, #316]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800226e:	2101      	movs	r1, #1
 8002270:	438a      	bics	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff faf6 	bl	8001864 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227e:	f7ff faf1 	bl	8001864 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e202      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002290:	4b46      	ldr	r3, [pc, #280]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2202      	movs	r2, #2
 8002296:	4013      	ands	r3, r2
 8002298:	d1f1      	bne.n	800227e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2208      	movs	r2, #8
 80022a0:	4013      	ands	r3, r2
 80022a2:	d036      	beq.n	8002312 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d019      	beq.n	80022e0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ac:	4b3f      	ldr	r3, [pc, #252]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80022ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022b0:	4b3e      	ldr	r3, [pc, #248]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80022b2:	2101      	movs	r1, #1
 80022b4:	430a      	orrs	r2, r1
 80022b6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b8:	f7ff fad4 	bl	8001864 <HAL_GetTick>
 80022bc:	0003      	movs	r3, r0
 80022be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c2:	f7ff facf 	bl	8001864 <HAL_GetTick>
 80022c6:	0002      	movs	r2, r0
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e1e0      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d4:	4b35      	ldr	r3, [pc, #212]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	2202      	movs	r2, #2
 80022da:	4013      	ands	r3, r2
 80022dc:	d0f1      	beq.n	80022c2 <HAL_RCC_OscConfig+0x242>
 80022de:	e018      	b.n	8002312 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e0:	4b32      	ldr	r3, [pc, #200]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80022e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022e4:	4b31      	ldr	r3, [pc, #196]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80022e6:	2101      	movs	r1, #1
 80022e8:	438a      	bics	r2, r1
 80022ea:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7ff faba 	bl	8001864 <HAL_GetTick>
 80022f0:	0003      	movs	r3, r0
 80022f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f6:	f7ff fab5 	bl	8001864 <HAL_GetTick>
 80022fa:	0002      	movs	r2, r0
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e1c6      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	4b28      	ldr	r3, [pc, #160]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	2202      	movs	r2, #2
 800230e:	4013      	ands	r3, r2
 8002310:	d1f1      	bne.n	80022f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2204      	movs	r2, #4
 8002318:	4013      	ands	r3, r2
 800231a:	d100      	bne.n	800231e <HAL_RCC_OscConfig+0x29e>
 800231c:	e0b4      	b.n	8002488 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231e:	201f      	movs	r0, #31
 8002320:	183b      	adds	r3, r7, r0
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002326:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	2380      	movs	r3, #128	@ 0x80
 800232c:	055b      	lsls	r3, r3, #21
 800232e:	4013      	ands	r3, r2
 8002330:	d110      	bne.n	8002354 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002338:	2180      	movs	r1, #128	@ 0x80
 800233a:	0549      	lsls	r1, r1, #21
 800233c:	430a      	orrs	r2, r1
 800233e:	61da      	str	r2, [r3, #28]
 8002340:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	2380      	movs	r3, #128	@ 0x80
 8002346:	055b      	lsls	r3, r3, #21
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800234e:	183b      	adds	r3, r7, r0
 8002350:	2201      	movs	r2, #1
 8002352:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	4b18      	ldr	r3, [pc, #96]	@ (80023b8 <HAL_RCC_OscConfig+0x338>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	2380      	movs	r3, #128	@ 0x80
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4013      	ands	r3, r2
 800235e:	d11a      	bne.n	8002396 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002360:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <HAL_RCC_OscConfig+0x338>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <HAL_RCC_OscConfig+0x338>)
 8002366:	2180      	movs	r1, #128	@ 0x80
 8002368:	0049      	lsls	r1, r1, #1
 800236a:	430a      	orrs	r2, r1
 800236c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236e:	f7ff fa79 	bl	8001864 <HAL_GetTick>
 8002372:	0003      	movs	r3, r0
 8002374:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002378:	f7ff fa74 	bl	8001864 <HAL_GetTick>
 800237c:	0002      	movs	r2, r0
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	@ 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e185      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <HAL_RCC_OscConfig+0x338>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	2380      	movs	r3, #128	@ 0x80
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4013      	ands	r3, r2
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d10e      	bne.n	80023bc <HAL_RCC_OscConfig+0x33c>
 800239e:	4b03      	ldr	r3, [pc, #12]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80023a0:	6a1a      	ldr	r2, [r3, #32]
 80023a2:	4b02      	ldr	r3, [pc, #8]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	430a      	orrs	r2, r1
 80023a8:	621a      	str	r2, [r3, #32]
 80023aa:	e035      	b.n	8002418 <HAL_RCC_OscConfig+0x398>
 80023ac:	40021000 	.word	0x40021000
 80023b0:	fffeffff 	.word	0xfffeffff
 80023b4:	fffbffff 	.word	0xfffbffff
 80023b8:	40007000 	.word	0x40007000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10c      	bne.n	80023de <HAL_RCC_OscConfig+0x35e>
 80023c4:	4bb6      	ldr	r3, [pc, #728]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80023c6:	6a1a      	ldr	r2, [r3, #32]
 80023c8:	4bb5      	ldr	r3, [pc, #724]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80023ca:	2101      	movs	r1, #1
 80023cc:	438a      	bics	r2, r1
 80023ce:	621a      	str	r2, [r3, #32]
 80023d0:	4bb3      	ldr	r3, [pc, #716]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80023d2:	6a1a      	ldr	r2, [r3, #32]
 80023d4:	4bb2      	ldr	r3, [pc, #712]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80023d6:	2104      	movs	r1, #4
 80023d8:	438a      	bics	r2, r1
 80023da:	621a      	str	r2, [r3, #32]
 80023dc:	e01c      	b.n	8002418 <HAL_RCC_OscConfig+0x398>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x380>
 80023e6:	4bae      	ldr	r3, [pc, #696]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	4bad      	ldr	r3, [pc, #692]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80023ec:	2104      	movs	r1, #4
 80023ee:	430a      	orrs	r2, r1
 80023f0:	621a      	str	r2, [r3, #32]
 80023f2:	4bab      	ldr	r3, [pc, #684]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80023f4:	6a1a      	ldr	r2, [r3, #32]
 80023f6:	4baa      	ldr	r3, [pc, #680]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	621a      	str	r2, [r3, #32]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0x398>
 8002400:	4ba7      	ldr	r3, [pc, #668]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	4ba6      	ldr	r3, [pc, #664]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 8002406:	2101      	movs	r1, #1
 8002408:	438a      	bics	r2, r1
 800240a:	621a      	str	r2, [r3, #32]
 800240c:	4ba4      	ldr	r3, [pc, #656]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 800240e:	6a1a      	ldr	r2, [r3, #32]
 8002410:	4ba3      	ldr	r3, [pc, #652]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 8002412:	2104      	movs	r1, #4
 8002414:	438a      	bics	r2, r1
 8002416:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d014      	beq.n	800244a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002420:	f7ff fa20 	bl	8001864 <HAL_GetTick>
 8002424:	0003      	movs	r3, r0
 8002426:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	e009      	b.n	800243e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7ff fa1b 	bl	8001864 <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	4a9b      	ldr	r2, [pc, #620]	@ (80026a4 <HAL_RCC_OscConfig+0x624>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e12b      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243e:	4b98      	ldr	r3, [pc, #608]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	2202      	movs	r2, #2
 8002444:	4013      	ands	r3, r2
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x3aa>
 8002448:	e013      	b.n	8002472 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7ff fa0b 	bl	8001864 <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002452:	e009      	b.n	8002468 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	f7ff fa06 	bl	8001864 <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	4a91      	ldr	r2, [pc, #580]	@ (80026a4 <HAL_RCC_OscConfig+0x624>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e116      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	4b8d      	ldr	r3, [pc, #564]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	2202      	movs	r2, #2
 800246e:	4013      	ands	r3, r2
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002472:	231f      	movs	r3, #31
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d105      	bne.n	8002488 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247c:	4b88      	ldr	r3, [pc, #544]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	4b87      	ldr	r3, [pc, #540]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 8002482:	4989      	ldr	r1, [pc, #548]	@ (80026a8 <HAL_RCC_OscConfig+0x628>)
 8002484:	400a      	ands	r2, r1
 8002486:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2210      	movs	r2, #16
 800248e:	4013      	ands	r3, r2
 8002490:	d063      	beq.n	800255a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d12a      	bne.n	80024f0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800249a:	4b81      	ldr	r3, [pc, #516]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 800249c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800249e:	4b80      	ldr	r3, [pc, #512]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80024a0:	2104      	movs	r1, #4
 80024a2:	430a      	orrs	r2, r1
 80024a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80024a6:	4b7e      	ldr	r3, [pc, #504]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80024a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024aa:	4b7d      	ldr	r3, [pc, #500]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80024ac:	2101      	movs	r1, #1
 80024ae:	430a      	orrs	r2, r1
 80024b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b2:	f7ff f9d7 	bl	8001864 <HAL_GetTick>
 80024b6:	0003      	movs	r3, r0
 80024b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024bc:	f7ff f9d2 	bl	8001864 <HAL_GetTick>
 80024c0:	0002      	movs	r2, r0
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e0e3      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024ce:	4b74      	ldr	r3, [pc, #464]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80024d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d2:	2202      	movs	r2, #2
 80024d4:	4013      	ands	r3, r2
 80024d6:	d0f1      	beq.n	80024bc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024d8:	4b71      	ldr	r3, [pc, #452]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80024da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024dc:	22f8      	movs	r2, #248	@ 0xf8
 80024de:	4393      	bics	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	00da      	lsls	r2, r3, #3
 80024e8:	4b6d      	ldr	r3, [pc, #436]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80024ea:	430a      	orrs	r2, r1
 80024ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80024ee:	e034      	b.n	800255a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	3305      	adds	r3, #5
 80024f6:	d111      	bne.n	800251c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80024f8:	4b69      	ldr	r3, [pc, #420]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80024fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024fc:	4b68      	ldr	r3, [pc, #416]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80024fe:	2104      	movs	r1, #4
 8002500:	438a      	bics	r2, r1
 8002502:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002504:	4b66      	ldr	r3, [pc, #408]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 8002506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002508:	22f8      	movs	r2, #248	@ 0xf8
 800250a:	4393      	bics	r3, r2
 800250c:	0019      	movs	r1, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	00da      	lsls	r2, r3, #3
 8002514:	4b62      	ldr	r3, [pc, #392]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 8002516:	430a      	orrs	r2, r1
 8002518:	635a      	str	r2, [r3, #52]	@ 0x34
 800251a:	e01e      	b.n	800255a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800251c:	4b60      	ldr	r3, [pc, #384]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 800251e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002520:	4b5f      	ldr	r3, [pc, #380]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 8002522:	2104      	movs	r1, #4
 8002524:	430a      	orrs	r2, r1
 8002526:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002528:	4b5d      	ldr	r3, [pc, #372]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 800252a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800252c:	4b5c      	ldr	r3, [pc, #368]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 800252e:	2101      	movs	r1, #1
 8002530:	438a      	bics	r2, r1
 8002532:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002534:	f7ff f996 	bl	8001864 <HAL_GetTick>
 8002538:	0003      	movs	r3, r0
 800253a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800253e:	f7ff f991 	bl	8001864 <HAL_GetTick>
 8002542:	0002      	movs	r2, r0
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0a2      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002550:	4b53      	ldr	r3, [pc, #332]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 8002552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002554:	2202      	movs	r2, #2
 8002556:	4013      	ands	r3, r2
 8002558:	d1f1      	bne.n	800253e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d100      	bne.n	8002564 <HAL_RCC_OscConfig+0x4e4>
 8002562:	e097      	b.n	8002694 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002564:	4b4e      	ldr	r3, [pc, #312]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	220c      	movs	r2, #12
 800256a:	4013      	ands	r3, r2
 800256c:	2b08      	cmp	r3, #8
 800256e:	d100      	bne.n	8002572 <HAL_RCC_OscConfig+0x4f2>
 8002570:	e06b      	b.n	800264a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d14c      	bne.n	8002614 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257a:	4b49      	ldr	r3, [pc, #292]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b48      	ldr	r3, [pc, #288]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 8002580:	494a      	ldr	r1, [pc, #296]	@ (80026ac <HAL_RCC_OscConfig+0x62c>)
 8002582:	400a      	ands	r2, r1
 8002584:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7ff f96d 	bl	8001864 <HAL_GetTick>
 800258a:	0003      	movs	r3, r0
 800258c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002590:	f7ff f968 	bl	8001864 <HAL_GetTick>
 8002594:	0002      	movs	r2, r0
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e079      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a2:	4b3f      	ldr	r3, [pc, #252]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	2380      	movs	r3, #128	@ 0x80
 80025a8:	049b      	lsls	r3, r3, #18
 80025aa:	4013      	ands	r3, r2
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ae:	4b3c      	ldr	r3, [pc, #240]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b2:	220f      	movs	r2, #15
 80025b4:	4393      	bics	r3, r2
 80025b6:	0019      	movs	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025bc:	4b38      	ldr	r3, [pc, #224]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80025be:	430a      	orrs	r2, r1
 80025c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80025c2:	4b37      	ldr	r3, [pc, #220]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4a3a      	ldr	r2, [pc, #232]	@ (80026b0 <HAL_RCC_OscConfig+0x630>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	431a      	orrs	r2, r3
 80025d6:	4b32      	ldr	r3, [pc, #200]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80025d8:	430a      	orrs	r2, r1
 80025da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025dc:	4b30      	ldr	r3, [pc, #192]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b2f      	ldr	r3, [pc, #188]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80025e2:	2180      	movs	r1, #128	@ 0x80
 80025e4:	0449      	lsls	r1, r1, #17
 80025e6:	430a      	orrs	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7ff f93b 	bl	8001864 <HAL_GetTick>
 80025ee:	0003      	movs	r3, r0
 80025f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f4:	f7ff f936 	bl	8001864 <HAL_GetTick>
 80025f8:	0002      	movs	r2, r0
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e047      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002606:	4b26      	ldr	r3, [pc, #152]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	@ 0x80
 800260c:	049b      	lsls	r3, r3, #18
 800260e:	4013      	ands	r3, r2
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x574>
 8002612:	e03f      	b.n	8002694 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002614:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b21      	ldr	r3, [pc, #132]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 800261a:	4924      	ldr	r1, [pc, #144]	@ (80026ac <HAL_RCC_OscConfig+0x62c>)
 800261c:	400a      	ands	r2, r1
 800261e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7ff f920 	bl	8001864 <HAL_GetTick>
 8002624:	0003      	movs	r3, r0
 8002626:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262a:	f7ff f91b 	bl	8001864 <HAL_GetTick>
 800262e:	0002      	movs	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e02c      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263c:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	2380      	movs	r3, #128	@ 0x80
 8002642:	049b      	lsls	r3, r3, #18
 8002644:	4013      	ands	r3, r2
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x5aa>
 8002648:	e024      	b.n	8002694 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e01f      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002656:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800265c:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	2380      	movs	r3, #128	@ 0x80
 8002666:	025b      	lsls	r3, r3, #9
 8002668:	401a      	ands	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	429a      	cmp	r2, r3
 8002670:	d10e      	bne.n	8002690 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	220f      	movs	r2, #15
 8002676:	401a      	ands	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d107      	bne.n	8002690 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	23f0      	movs	r3, #240	@ 0xf0
 8002684:	039b      	lsls	r3, r3, #14
 8002686:	401a      	ands	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b008      	add	sp, #32
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	40021000 	.word	0x40021000
 80026a4:	00001388 	.word	0x00001388
 80026a8:	efffffff 	.word	0xefffffff
 80026ac:	feffffff 	.word	0xfeffffff
 80026b0:	ffc2ffff 	.word	0xffc2ffff

080026b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0b3      	b.n	8002830 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002838 <HAL_RCC_ClockConfig+0x184>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2201      	movs	r2, #1
 80026ce:	4013      	ands	r3, r2
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d911      	bls.n	80026fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b58      	ldr	r3, [pc, #352]	@ (8002838 <HAL_RCC_ClockConfig+0x184>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2201      	movs	r2, #1
 80026dc:	4393      	bics	r3, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	4b55      	ldr	r3, [pc, #340]	@ (8002838 <HAL_RCC_ClockConfig+0x184>)
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e8:	4b53      	ldr	r3, [pc, #332]	@ (8002838 <HAL_RCC_ClockConfig+0x184>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2201      	movs	r2, #1
 80026ee:	4013      	ands	r3, r2
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e09a      	b.n	8002830 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2202      	movs	r2, #2
 8002700:	4013      	ands	r3, r2
 8002702:	d015      	beq.n	8002730 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2204      	movs	r2, #4
 800270a:	4013      	ands	r3, r2
 800270c:	d006      	beq.n	800271c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800270e:	4b4b      	ldr	r3, [pc, #300]	@ (800283c <HAL_RCC_ClockConfig+0x188>)
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	4b4a      	ldr	r3, [pc, #296]	@ (800283c <HAL_RCC_ClockConfig+0x188>)
 8002714:	21e0      	movs	r1, #224	@ 0xe0
 8002716:	00c9      	lsls	r1, r1, #3
 8002718:	430a      	orrs	r2, r1
 800271a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800271c:	4b47      	ldr	r3, [pc, #284]	@ (800283c <HAL_RCC_ClockConfig+0x188>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	22f0      	movs	r2, #240	@ 0xf0
 8002722:	4393      	bics	r3, r2
 8002724:	0019      	movs	r1, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	4b44      	ldr	r3, [pc, #272]	@ (800283c <HAL_RCC_ClockConfig+0x188>)
 800272c:	430a      	orrs	r2, r1
 800272e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2201      	movs	r2, #1
 8002736:	4013      	ands	r3, r2
 8002738:	d040      	beq.n	80027bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b3e      	ldr	r3, [pc, #248]	@ (800283c <HAL_RCC_ClockConfig+0x188>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	2380      	movs	r3, #128	@ 0x80
 8002748:	029b      	lsls	r3, r3, #10
 800274a:	4013      	ands	r3, r2
 800274c:	d114      	bne.n	8002778 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e06e      	b.n	8002830 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275a:	4b38      	ldr	r3, [pc, #224]	@ (800283c <HAL_RCC_ClockConfig+0x188>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	2380      	movs	r3, #128	@ 0x80
 8002760:	049b      	lsls	r3, r3, #18
 8002762:	4013      	ands	r3, r2
 8002764:	d108      	bne.n	8002778 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e062      	b.n	8002830 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276a:	4b34      	ldr	r3, [pc, #208]	@ (800283c <HAL_RCC_ClockConfig+0x188>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2202      	movs	r2, #2
 8002770:	4013      	ands	r3, r2
 8002772:	d101      	bne.n	8002778 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e05b      	b.n	8002830 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002778:	4b30      	ldr	r3, [pc, #192]	@ (800283c <HAL_RCC_ClockConfig+0x188>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2203      	movs	r2, #3
 800277e:	4393      	bics	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	4b2d      	ldr	r3, [pc, #180]	@ (800283c <HAL_RCC_ClockConfig+0x188>)
 8002788:	430a      	orrs	r2, r1
 800278a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800278c:	f7ff f86a 	bl	8001864 <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002794:	e009      	b.n	80027aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002796:	f7ff f865 	bl	8001864 <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	4a27      	ldr	r2, [pc, #156]	@ (8002840 <HAL_RCC_ClockConfig+0x18c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e042      	b.n	8002830 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	4b24      	ldr	r3, [pc, #144]	@ (800283c <HAL_RCC_ClockConfig+0x188>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	220c      	movs	r2, #12
 80027b0:	401a      	ands	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d1ec      	bne.n	8002796 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002838 <HAL_RCC_ClockConfig+0x184>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2201      	movs	r2, #1
 80027c2:	4013      	ands	r3, r2
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d211      	bcs.n	80027ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <HAL_RCC_ClockConfig+0x184>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2201      	movs	r2, #1
 80027d0:	4393      	bics	r3, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <HAL_RCC_ClockConfig+0x184>)
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027dc:	4b16      	ldr	r3, [pc, #88]	@ (8002838 <HAL_RCC_ClockConfig+0x184>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2201      	movs	r2, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e020      	b.n	8002830 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2204      	movs	r2, #4
 80027f4:	4013      	ands	r3, r2
 80027f6:	d009      	beq.n	800280c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027f8:	4b10      	ldr	r3, [pc, #64]	@ (800283c <HAL_RCC_ClockConfig+0x188>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a11      	ldr	r2, [pc, #68]	@ (8002844 <HAL_RCC_ClockConfig+0x190>)
 80027fe:	4013      	ands	r3, r2
 8002800:	0019      	movs	r1, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	4b0d      	ldr	r3, [pc, #52]	@ (800283c <HAL_RCC_ClockConfig+0x188>)
 8002808:	430a      	orrs	r2, r1
 800280a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800280c:	f000 f820 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8002810:	0001      	movs	r1, r0
 8002812:	4b0a      	ldr	r3, [pc, #40]	@ (800283c <HAL_RCC_ClockConfig+0x188>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	091b      	lsrs	r3, r3, #4
 8002818:	220f      	movs	r2, #15
 800281a:	4013      	ands	r3, r2
 800281c:	4a0a      	ldr	r2, [pc, #40]	@ (8002848 <HAL_RCC_ClockConfig+0x194>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	000a      	movs	r2, r1
 8002822:	40da      	lsrs	r2, r3
 8002824:	4b09      	ldr	r3, [pc, #36]	@ (800284c <HAL_RCC_ClockConfig+0x198>)
 8002826:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002828:	2003      	movs	r0, #3
 800282a:	f7fe ffd5 	bl	80017d8 <HAL_InitTick>
  
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	b004      	add	sp, #16
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40022000 	.word	0x40022000
 800283c:	40021000 	.word	0x40021000
 8002840:	00001388 	.word	0x00001388
 8002844:	fffff8ff 	.word	0xfffff8ff
 8002848:	0800a934 	.word	0x0800a934
 800284c:	20000000 	.word	0x20000000

08002850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800286a:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x9c>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	220c      	movs	r2, #12
 8002874:	4013      	ands	r3, r2
 8002876:	2b04      	cmp	r3, #4
 8002878:	d002      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x30>
 800287a:	2b08      	cmp	r3, #8
 800287c:	d003      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x36>
 800287e:	e02c      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002880:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002882:	613b      	str	r3, [r7, #16]
      break;
 8002884:	e02c      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	0c9b      	lsrs	r3, r3, #18
 800288a:	220f      	movs	r2, #15
 800288c:	4013      	ands	r3, r2
 800288e:	4a19      	ldr	r2, [pc, #100]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002890:	5cd3      	ldrb	r3, [r2, r3]
 8002892:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002894:	4b15      	ldr	r3, [pc, #84]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	220f      	movs	r2, #15
 800289a:	4013      	ands	r3, r2
 800289c:	4a16      	ldr	r2, [pc, #88]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	2380      	movs	r3, #128	@ 0x80
 80028a6:	025b      	lsls	r3, r3, #9
 80028a8:	4013      	ands	r3, r2
 80028aa:	d009      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	4810      	ldr	r0, [pc, #64]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028b0:	f7fd fc46 	bl	8000140 <__udivsi3>
 80028b4:	0003      	movs	r3, r0
 80028b6:	001a      	movs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4353      	muls	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e009      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	000a      	movs	r2, r1
 80028c4:	0152      	lsls	r2, r2, #5
 80028c6:	1a52      	subs	r2, r2, r1
 80028c8:	0193      	lsls	r3, r2, #6
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	185b      	adds	r3, r3, r1
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	613b      	str	r3, [r7, #16]
      break;
 80028d8:	e002      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028da:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028dc:	613b      	str	r3, [r7, #16]
      break;
 80028de:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80028e0:	693b      	ldr	r3, [r7, #16]
}
 80028e2:	0018      	movs	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b006      	add	sp, #24
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	40021000 	.word	0x40021000
 80028f0:	007a1200 	.word	0x007a1200
 80028f4:	0800a94c 	.word	0x0800a94c
 80028f8:	0800a95c 	.word	0x0800a95c

080028fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002900:	4b02      	ldr	r3, [pc, #8]	@ (800290c <HAL_RCC_GetHCLKFreq+0x10>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	20000000 	.word	0x20000000

08002910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002914:	f7ff fff2 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002918:	0001      	movs	r1, r0
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_RCC_GetPCLK1Freq+0x24>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	2207      	movs	r2, #7
 8002922:	4013      	ands	r3, r2
 8002924:	4a04      	ldr	r2, [pc, #16]	@ (8002938 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002926:	5cd3      	ldrb	r3, [r2, r3]
 8002928:	40d9      	lsrs	r1, r3
 800292a:	000b      	movs	r3, r1
}    
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	40021000 	.word	0x40021000
 8002938:	0800a944 	.word	0x0800a944

0800293c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0a8      	b.n	8002aa0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	2382      	movs	r3, #130	@ 0x82
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	429a      	cmp	r2, r3
 8002960:	d009      	beq.n	8002976 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	61da      	str	r2, [r3, #28]
 8002968:	e005      	b.n	8002976 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	225d      	movs	r2, #93	@ 0x5d
 8002980:	5c9b      	ldrb	r3, [r3, r2]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d107      	bne.n	8002998 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	225c      	movs	r2, #92	@ 0x5c
 800298c:	2100      	movs	r1, #0
 800298e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	0018      	movs	r0, r3
 8002994:	f7fe fd42 	bl	800141c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	225d      	movs	r2, #93	@ 0x5d
 800299c:	2102      	movs	r1, #2
 800299e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2140      	movs	r1, #64	@ 0x40
 80029ac:	438a      	bics	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	23e0      	movs	r3, #224	@ 0xe0
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d902      	bls.n	80029c2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e002      	b.n	80029c8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029c2:	2380      	movs	r3, #128	@ 0x80
 80029c4:	015b      	lsls	r3, r3, #5
 80029c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	23f0      	movs	r3, #240	@ 0xf0
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d008      	beq.n	80029e6 <HAL_SPI_Init+0xaa>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	23e0      	movs	r3, #224	@ 0xe0
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	429a      	cmp	r2, r3
 80029de:	d002      	beq.n	80029e6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	2382      	movs	r3, #130	@ 0x82
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	401a      	ands	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	2384      	movs	r3, #132	@ 0x84
 80029f6:	021b      	lsls	r3, r3, #8
 80029f8:	400b      	ands	r3, r1
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2102      	movs	r1, #2
 8002a02:	400b      	ands	r3, r1
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	400b      	ands	r3, r1
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6999      	ldr	r1, [r3, #24]
 8002a14:	2380      	movs	r3, #128	@ 0x80
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	400b      	ands	r3, r1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	2138      	movs	r1, #56	@ 0x38
 8002a22:	400b      	ands	r3, r1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	2180      	movs	r1, #128	@ 0x80
 8002a2c:	400b      	ands	r3, r1
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	0011      	movs	r1, r2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a36:	2380      	movs	r3, #128	@ 0x80
 8002a38:	019b      	lsls	r3, r3, #6
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	2110      	movs	r1, #16
 8002a54:	400b      	ands	r3, r1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5c:	2108      	movs	r1, #8
 8002a5e:	400b      	ands	r3, r1
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68d9      	ldr	r1, [r3, #12]
 8002a66:	23f0      	movs	r3, #240	@ 0xf0
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	0011      	movs	r1, r2
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	2380      	movs	r3, #128	@ 0x80
 8002a74:	015b      	lsls	r3, r3, #5
 8002a76:	401a      	ands	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69da      	ldr	r2, [r3, #28]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4907      	ldr	r1, [pc, #28]	@ (8002aa8 <HAL_SPI_Init+0x16c>)
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	225d      	movs	r2, #93	@ 0x5d
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b004      	add	sp, #16
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	fffff7ff 	.word	0xfffff7ff

08002aac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	1dbb      	adds	r3, r7, #6
 8002aba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002abc:	231f      	movs	r3, #31
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	225c      	movs	r2, #92	@ 0x5c
 8002ac8:	5c9b      	ldrb	r3, [r3, r2]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_SPI_Transmit+0x26>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e147      	b.n	8002d62 <HAL_SPI_Transmit+0x2b6>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	225c      	movs	r2, #92	@ 0x5c
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ada:	f7fe fec3 	bl	8001864 <HAL_GetTick>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002ae2:	2316      	movs	r3, #22
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	1dba      	adds	r2, r7, #6
 8002ae8:	8812      	ldrh	r2, [r2, #0]
 8002aea:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	225d      	movs	r2, #93	@ 0x5d
 8002af0:	5c9b      	ldrb	r3, [r3, r2]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d004      	beq.n	8002b02 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002af8:	231f      	movs	r3, #31
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	2202      	movs	r2, #2
 8002afe:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b00:	e128      	b.n	8002d54 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_SPI_Transmit+0x64>
 8002b08:	1dbb      	adds	r3, r7, #6
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002b10:	231f      	movs	r3, #31
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2201      	movs	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b18:	e11c      	b.n	8002d54 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	225d      	movs	r2, #93	@ 0x5d
 8002b1e:	2103      	movs	r1, #3
 8002b20:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1dba      	adds	r2, r7, #6
 8002b32:	8812      	ldrh	r2, [r2, #0]
 8002b34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1dba      	adds	r2, r7, #6
 8002b3a:	8812      	ldrh	r2, [r2, #0]
 8002b3c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2244      	movs	r2, #68	@ 0x44
 8002b48:	2100      	movs	r1, #0
 8002b4a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2246      	movs	r2, #70	@ 0x46
 8002b50:	2100      	movs	r1, #0
 8002b52:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d110      	bne.n	8002b8e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2140      	movs	r1, #64	@ 0x40
 8002b78:	438a      	bics	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2180      	movs	r1, #128	@ 0x80
 8002b88:	01c9      	lsls	r1, r1, #7
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2240      	movs	r2, #64	@ 0x40
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b40      	cmp	r3, #64	@ 0x40
 8002b9a:	d007      	beq.n	8002bac <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2140      	movs	r1, #64	@ 0x40
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	23e0      	movs	r3, #224	@ 0xe0
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d952      	bls.n	8002c5e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d004      	beq.n	8002bca <HAL_SPI_Transmit+0x11e>
 8002bc0:	2316      	movs	r3, #22
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d143      	bne.n	8002c52 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bce:	881a      	ldrh	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bda:	1c9a      	adds	r2, r3, #2
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bee:	e030      	b.n	8002c52 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d112      	bne.n	8002c24 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c02:	881a      	ldrh	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0e:	1c9a      	adds	r2, r3, #2
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c22:	e016      	b.n	8002c52 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c24:	f7fe fe1e 	bl	8001864 <HAL_GetTick>
 8002c28:	0002      	movs	r2, r0
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d802      	bhi.n	8002c3a <HAL_SPI_Transmit+0x18e>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	d102      	bne.n	8002c40 <HAL_SPI_Transmit+0x194>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d108      	bne.n	8002c52 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002c40:	231f      	movs	r3, #31
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	2203      	movs	r2, #3
 8002c46:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	225d      	movs	r2, #93	@ 0x5d
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002c50:	e080      	b.n	8002d54 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1c9      	bne.n	8002bf0 <HAL_SPI_Transmit+0x144>
 8002c5c:	e053      	b.n	8002d06 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <HAL_SPI_Transmit+0x1c4>
 8002c66:	2316      	movs	r3, #22
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d145      	bne.n	8002cfc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	330c      	adds	r3, #12
 8002c7a:	7812      	ldrb	r2, [r2, #0]
 8002c7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002c96:	e031      	b.n	8002cfc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d113      	bne.n	8002cce <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	330c      	adds	r3, #12
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ccc:	e016      	b.n	8002cfc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cce:	f7fe fdc9 	bl	8001864 <HAL_GetTick>
 8002cd2:	0002      	movs	r2, r0
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d802      	bhi.n	8002ce4 <HAL_SPI_Transmit+0x238>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	d102      	bne.n	8002cea <HAL_SPI_Transmit+0x23e>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d108      	bne.n	8002cfc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002cea:	231f      	movs	r3, #31
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	2203      	movs	r2, #3
 8002cf0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	225d      	movs	r2, #93	@ 0x5d
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	5499      	strb	r1, [r3, r2]
          goto error;
 8002cfa:	e02b      	b.n	8002d54 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1c8      	bne.n	8002c98 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	6839      	ldr	r1, [r7, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 ffcb 	bl	8003ca8 <SPI_EndRxTxTransaction>
 8002d12:	1e03      	subs	r3, r0, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002d42:	231f      	movs	r3, #31
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e003      	b.n	8002d54 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	225d      	movs	r2, #93	@ 0x5d
 8002d50:	2101      	movs	r1, #1
 8002d52:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	225c      	movs	r2, #92	@ 0x5c
 8002d58:	2100      	movs	r1, #0
 8002d5a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002d5c:	231f      	movs	r3, #31
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	781b      	ldrb	r3, [r3, #0]
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b008      	add	sp, #32
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	@ 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	001a      	movs	r2, r3
 8002d7a:	1cbb      	adds	r3, r7, #2
 8002d7c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d82:	2323      	movs	r3, #35	@ 0x23
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	225c      	movs	r2, #92	@ 0x5c
 8002d8e:	5c9b      	ldrb	r3, [r3, r2]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_SPI_TransmitReceive+0x2c>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e1c4      	b.n	8003122 <HAL_SPI_TransmitReceive+0x3b6>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	225c      	movs	r2, #92	@ 0x5c
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002da0:	f7fe fd60 	bl	8001864 <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002da8:	201b      	movs	r0, #27
 8002daa:	183b      	adds	r3, r7, r0
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	215d      	movs	r1, #93	@ 0x5d
 8002db0:	5c52      	ldrb	r2, [r2, r1]
 8002db2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002dba:	2312      	movs	r3, #18
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	1cba      	adds	r2, r7, #2
 8002dc0:	8812      	ldrh	r2, [r2, #0]
 8002dc2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dc4:	183b      	adds	r3, r7, r0
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d011      	beq.n	8002df0 <HAL_SPI_TransmitReceive+0x84>
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	2382      	movs	r3, #130	@ 0x82
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d107      	bne.n	8002de6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d103      	bne.n	8002de6 <HAL_SPI_TransmitReceive+0x7a>
 8002dde:	183b      	adds	r3, r7, r0
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d004      	beq.n	8002df0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002de6:	2323      	movs	r3, #35	@ 0x23
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	2202      	movs	r2, #2
 8002dec:	701a      	strb	r2, [r3, #0]
    goto error;
 8002dee:	e191      	b.n	8003114 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d006      	beq.n	8002e04 <HAL_SPI_TransmitReceive+0x98>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_SPI_TransmitReceive+0x98>
 8002dfc:	1cbb      	adds	r3, r7, #2
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d104      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002e04:	2323      	movs	r3, #35	@ 0x23
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e0c:	e182      	b.n	8003114 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	225d      	movs	r2, #93	@ 0x5d
 8002e12:	5c9b      	ldrb	r3, [r3, r2]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d003      	beq.n	8002e22 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	225d      	movs	r2, #93	@ 0x5d
 8002e1e:	2105      	movs	r1, #5
 8002e20:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1cba      	adds	r2, r7, #2
 8002e32:	2146      	movs	r1, #70	@ 0x46
 8002e34:	8812      	ldrh	r2, [r2, #0]
 8002e36:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1cba      	adds	r2, r7, #2
 8002e3c:	2144      	movs	r1, #68	@ 0x44
 8002e3e:	8812      	ldrh	r2, [r2, #0]
 8002e40:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1cba      	adds	r2, r7, #2
 8002e4c:	8812      	ldrh	r2, [r2, #0]
 8002e4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1cba      	adds	r2, r7, #2
 8002e54:	8812      	ldrh	r2, [r2, #0]
 8002e56:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	23e0      	movs	r3, #224	@ 0xe0
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d908      	bls.n	8002e82 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	49ac      	ldr	r1, [pc, #688]	@ (800312c <HAL_SPI_TransmitReceive+0x3c0>)
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	e008      	b.n	8002e94 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2180      	movs	r1, #128	@ 0x80
 8002e8e:	0149      	lsls	r1, r1, #5
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2240      	movs	r2, #64	@ 0x40
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b40      	cmp	r3, #64	@ 0x40
 8002ea0:	d007      	beq.n	8002eb2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2140      	movs	r1, #64	@ 0x40
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	23e0      	movs	r3, #224	@ 0xe0
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d800      	bhi.n	8002ec0 <HAL_SPI_TransmitReceive+0x154>
 8002ebe:	e083      	b.n	8002fc8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_SPI_TransmitReceive+0x168>
 8002ec8:	2312      	movs	r3, #18
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d000      	beq.n	8002ed4 <HAL_SPI_TransmitReceive+0x168>
 8002ed2:	e06d      	b.n	8002fb0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed8:	881a      	ldrh	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee4:	1c9a      	adds	r2, r3, #2
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ef8:	e05a      	b.n	8002fb0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2202      	movs	r2, #2
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d11b      	bne.n	8002f40 <HAL_SPI_TransmitReceive+0x1d4>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d016      	beq.n	8002f40 <HAL_SPI_TransmitReceive+0x1d4>
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d113      	bne.n	8002f40 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	881a      	ldrh	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f28:	1c9a      	adds	r2, r3, #2
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2201      	movs	r2, #1
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d11c      	bne.n	8002f88 <HAL_SPI_TransmitReceive+0x21c>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2246      	movs	r2, #70	@ 0x46
 8002f52:	5a9b      	ldrh	r3, [r3, r2]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d016      	beq.n	8002f88 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	b292      	uxth	r2, r2
 8002f66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2246      	movs	r2, #70	@ 0x46
 8002f76:	5a9b      	ldrh	r3, [r3, r2]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b299      	uxth	r1, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2246      	movs	r2, #70	@ 0x46
 8002f82:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f84:	2301      	movs	r3, #1
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f88:	f7fe fc6c 	bl	8001864 <HAL_GetTick>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d80b      	bhi.n	8002fb0 <HAL_SPI_TransmitReceive+0x244>
 8002f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	d008      	beq.n	8002fb0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002f9e:	2323      	movs	r3, #35	@ 0x23
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	225d      	movs	r2, #93	@ 0x5d
 8002faa:	2101      	movs	r1, #1
 8002fac:	5499      	strb	r1, [r3, r2]
        goto error;
 8002fae:	e0b1      	b.n	8003114 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d19f      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x18e>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2246      	movs	r2, #70	@ 0x46
 8002fbe:	5a9b      	ldrh	r3, [r3, r2]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d199      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x18e>
 8002fc6:	e089      	b.n	80030dc <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_SPI_TransmitReceive+0x270>
 8002fd0:	2312      	movs	r3, #18
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d000      	beq.n	8002fdc <HAL_SPI_TransmitReceive+0x270>
 8002fda:	e074      	b.n	80030c6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003002:	e060      	b.n	80030c6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2202      	movs	r2, #2
 800300c:	4013      	ands	r3, r2
 800300e:	2b02      	cmp	r3, #2
 8003010:	d11c      	bne.n	800304c <HAL_SPI_TransmitReceive+0x2e0>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d017      	beq.n	800304c <HAL_SPI_TransmitReceive+0x2e0>
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301e:	2b01      	cmp	r3, #1
 8003020:	d114      	bne.n	800304c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	330c      	adds	r3, #12
 800302c:	7812      	ldrb	r2, [r2, #0]
 800302e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2201      	movs	r2, #1
 8003054:	4013      	ands	r3, r2
 8003056:	2b01      	cmp	r3, #1
 8003058:	d11e      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x32c>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2246      	movs	r2, #70	@ 0x46
 800305e:	5a9b      	ldrh	r3, [r3, r2]
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d018      	beq.n	8003098 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	330c      	adds	r3, #12
 800306c:	001a      	movs	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	7812      	ldrb	r2, [r2, #0]
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2246      	movs	r2, #70	@ 0x46
 8003086:	5a9b      	ldrh	r3, [r3, r2]
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b299      	uxth	r1, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2246      	movs	r2, #70	@ 0x46
 8003092:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003094:	2301      	movs	r3, #1
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003098:	f7fe fbe4 	bl	8001864 <HAL_GetTick>
 800309c:	0002      	movs	r2, r0
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d802      	bhi.n	80030ae <HAL_SPI_TransmitReceive+0x342>
 80030a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030aa:	3301      	adds	r3, #1
 80030ac:	d102      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x348>
 80030ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d108      	bne.n	80030c6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80030b4:	2323      	movs	r3, #35	@ 0x23
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	2203      	movs	r2, #3
 80030ba:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	225d      	movs	r2, #93	@ 0x5d
 80030c0:	2101      	movs	r1, #1
 80030c2:	5499      	strb	r1, [r3, r2]
        goto error;
 80030c4:	e026      	b.n	8003114 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d199      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x298>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2246      	movs	r2, #70	@ 0x46
 80030d4:	5a9b      	ldrh	r3, [r3, r2]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d193      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 fde0 	bl	8003ca8 <SPI_EndRxTxTransaction>
 80030e8:	1e03      	subs	r3, r0, #0
 80030ea:	d006      	beq.n	80030fa <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80030ec:	2323      	movs	r3, #35	@ 0x23
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003102:	2323      	movs	r3, #35	@ 0x23
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	e003      	b.n	8003114 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	225d      	movs	r2, #93	@ 0x5d
 8003110:	2101      	movs	r1, #1
 8003112:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	225c      	movs	r2, #92	@ 0x5c
 8003118:	2100      	movs	r1, #0
 800311a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800311c:	2323      	movs	r3, #35	@ 0x23
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	781b      	ldrb	r3, [r3, #0]
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b00a      	add	sp, #40	@ 0x28
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	ffffefff 	.word	0xffffefff

08003130 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	1dbb      	adds	r3, r7, #6
 800313c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800313e:	2317      	movs	r3, #23
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	225c      	movs	r2, #92	@ 0x5c
 800314a:	5c9b      	ldrb	r3, [r3, r2]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_SPI_Transmit_DMA+0x24>
 8003150:	2302      	movs	r3, #2
 8003152:	e0e3      	b.n	800331c <HAL_SPI_Transmit_DMA+0x1ec>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	225c      	movs	r2, #92	@ 0x5c
 8003158:	2101      	movs	r1, #1
 800315a:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	225d      	movs	r2, #93	@ 0x5d
 8003160:	5c9b      	ldrb	r3, [r3, r2]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d004      	beq.n	8003172 <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8003168:	2317      	movs	r3, #23
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	2202      	movs	r2, #2
 800316e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003170:	e0cd      	b.n	800330e <HAL_SPI_Transmit_DMA+0x1de>
  }

  if ((pData == NULL) || (Size == 0U))
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_SPI_Transmit_DMA+0x50>
 8003178:	1dbb      	adds	r3, r7, #6
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8003180:	2317      	movs	r3, #23
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
    goto error;
 8003188:	e0c1      	b.n	800330e <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	225d      	movs	r2, #93	@ 0x5d
 800318e:	2103      	movs	r1, #3
 8003190:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1dba      	adds	r2, r7, #6
 80031a2:	8812      	ldrh	r2, [r2, #0]
 80031a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1dba      	adds	r2, r7, #6
 80031aa:	8812      	ldrh	r2, [r2, #0]
 80031ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2244      	movs	r2, #68	@ 0x44
 80031c4:	2100      	movs	r1, #0
 80031c6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2246      	movs	r2, #70	@ 0x46
 80031cc:	2100      	movs	r1, #0
 80031ce:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	2380      	movs	r3, #128	@ 0x80
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	429a      	cmp	r2, r3
 80031da:	d110      	bne.n	80031fe <HAL_SPI_Transmit_DMA+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2140      	movs	r1, #64	@ 0x40
 80031e8:	438a      	bics	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2180      	movs	r1, #128	@ 0x80
 80031f8:	01c9      	lsls	r1, r1, #7
 80031fa:	430a      	orrs	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003202:	4a48      	ldr	r2, [pc, #288]	@ (8003324 <HAL_SPI_Transmit_DMA+0x1f4>)
 8003204:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320a:	4a47      	ldr	r2, [pc, #284]	@ (8003328 <HAL_SPI_Transmit_DMA+0x1f8>)
 800320c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003212:	4a46      	ldr	r2, [pc, #280]	@ (800332c <HAL_SPI_Transmit_DMA+0x1fc>)
 8003214:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321a:	2200      	movs	r2, #0
 800321c:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4941      	ldr	r1, [pc, #260]	@ (8003330 <HAL_SPI_Transmit_DMA+0x200>)
 800322a:	400a      	ands	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	23e0      	movs	r3, #224	@ 0xe0
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	429a      	cmp	r2, r3
 8003238:	d82f      	bhi.n	800329a <HAL_SPI_Transmit_DMA+0x16a>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	2380      	movs	r3, #128	@ 0x80
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	429a      	cmp	r2, r3
 8003246:	d128      	bne.n	800329a <HAL_SPI_Transmit_DMA+0x16a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800324c:	b29b      	uxth	r3, r3
 800324e:	001a      	movs	r2, r3
 8003250:	2301      	movs	r3, #1
 8003252:	4013      	ands	r3, r2
 8003254:	d10f      	bne.n	8003276 <HAL_SPI_Transmit_DMA+0x146>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4933      	ldr	r1, [pc, #204]	@ (8003330 <HAL_SPI_Transmit_DMA+0x200>)
 8003262:	400a      	ands	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326a:	b29b      	uxth	r3, r3
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003274:	e011      	b.n	800329a <HAL_SPI_Transmit_DMA+0x16a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2180      	movs	r1, #128	@ 0x80
 8003282:	01c9      	lsls	r1, r1, #7
 8003284:	430a      	orrs	r2, r1
 8003286:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800328c:	b29b      	uxth	r3, r3
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	b29b      	uxth	r3, r3
 8003292:	3301      	adds	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a2:	0019      	movs	r1, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	330c      	adds	r3, #12
 80032aa:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032b2:	f7fe fc07 	bl	8001ac4 <HAL_DMA_Start_IT>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032be:	2210      	movs	r2, #16
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80032c6:	2317      	movs	r3, #23
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]

    goto error;
 80032ce:	e01e      	b.n	800330e <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2240      	movs	r2, #64	@ 0x40
 80032d8:	4013      	ands	r3, r2
 80032da:	2b40      	cmp	r3, #64	@ 0x40
 80032dc:	d007      	beq.n	80032ee <HAL_SPI_Transmit_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2140      	movs	r1, #64	@ 0x40
 80032ea:	430a      	orrs	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2120      	movs	r1, #32
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2102      	movs	r1, #2
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	225c      	movs	r2, #92	@ 0x5c
 8003312:	2100      	movs	r1, #0
 8003314:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003316:	2317      	movs	r3, #23
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	781b      	ldrb	r3, [r3, #0]
}
 800331c:	0018      	movs	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	b006      	add	sp, #24
 8003322:	bd80      	pop	{r7, pc}
 8003324:	080038ef 	.word	0x080038ef
 8003328:	080036fd 	.word	0x080036fd
 800332c:	08003949 	.word	0x08003949
 8003330:	ffffbfff 	.word	0xffffbfff

08003334 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	001a      	movs	r2, r3
 8003342:	1cbb      	adds	r3, r7, #2
 8003344:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003346:	2317      	movs	r3, #23
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	225c      	movs	r2, #92	@ 0x5c
 8003352:	5c9b      	ldrb	r3, [r3, r2]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_SPI_TransmitReceive_DMA+0x28>
 8003358:	2302      	movs	r3, #2
 800335a:	e190      	b.n	800367e <HAL_SPI_TransmitReceive_DMA+0x34a>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	225c      	movs	r2, #92	@ 0x5c
 8003360:	2101      	movs	r1, #1
 8003362:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003364:	2016      	movs	r0, #22
 8003366:	183b      	adds	r3, r7, r0
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	215d      	movs	r1, #93	@ 0x5d
 800336c:	5c52      	ldrb	r2, [r2, r1]
 800336e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003376:	0001      	movs	r1, r0
 8003378:	187b      	adds	r3, r7, r1
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d011      	beq.n	80033a4 <HAL_SPI_TransmitReceive_DMA+0x70>
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	2382      	movs	r3, #130	@ 0x82
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	429a      	cmp	r2, r3
 8003388:	d107      	bne.n	800339a <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d103      	bne.n	800339a <HAL_SPI_TransmitReceive_DMA+0x66>
 8003392:	187b      	adds	r3, r7, r1
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b04      	cmp	r3, #4
 8003398:	d004      	beq.n	80033a4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800339a:	2317      	movs	r3, #23
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	2202      	movs	r2, #2
 80033a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80033a2:	e165      	b.n	8003670 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d006      	beq.n	80033b8 <HAL_SPI_TransmitReceive_DMA+0x84>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_SPI_TransmitReceive_DMA+0x84>
 80033b0:	1cbb      	adds	r3, r7, #2
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d104      	bne.n	80033c2 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 80033b8:	2317      	movs	r3, #23
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
    goto error;
 80033c0:	e156      	b.n	8003670 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	225d      	movs	r2, #93	@ 0x5d
 80033c6:	5c9b      	ldrb	r3, [r3, r2]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d003      	beq.n	80033d6 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	225d      	movs	r2, #93	@ 0x5d
 80033d2:	2105      	movs	r1, #5
 80033d4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1cba      	adds	r2, r7, #2
 80033e6:	8812      	ldrh	r2, [r2, #0]
 80033e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1cba      	adds	r2, r7, #2
 80033ee:	8812      	ldrh	r2, [r2, #0]
 80033f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1cba      	adds	r2, r7, #2
 80033fc:	2144      	movs	r1, #68	@ 0x44
 80033fe:	8812      	ldrh	r2, [r2, #0]
 8003400:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1cba      	adds	r2, r7, #2
 8003406:	2146      	movs	r1, #70	@ 0x46
 8003408:	8812      	ldrh	r2, [r2, #0]
 800340a:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	651a      	str	r2, [r3, #80]	@ 0x50
  }
#endif /* USE_SPI_CRC */

#if defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F051x8) || defined (STM32F058xx)
  /* Packing mode management is enabled by the DMA settings */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	23e0      	movs	r3, #224	@ 0xe0
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	429a      	cmp	r2, r3
 8003422:	d80b      	bhi.n	800343c <HAL_SPI_TransmitReceive_DMA+0x108>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	2380      	movs	r3, #128	@ 0x80
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	429a      	cmp	r2, r3
 8003430:	d104      	bne.n	800343c <HAL_SPI_TransmitReceive_DMA+0x108>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8003432:	2317      	movs	r3, #23
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
    goto error;
 800343a:	e119      	b.n	8003670 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }
#endif /* STM32F030x6 || STM32F030x8 || STM32F031x6 || STM32F038xx || STM32F051x8 || STM32F058xx */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4990      	ldr	r1, [pc, #576]	@ (8003688 <HAL_SPI_TransmitReceive_DMA+0x354>)
 8003448:	400a      	ands	r2, r1
 800344a:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	23e0      	movs	r3, #224	@ 0xe0
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	429a      	cmp	r2, r3
 8003456:	d908      	bls.n	800346a <HAL_SPI_TransmitReceive_DMA+0x136>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	498a      	ldr	r1, [pc, #552]	@ (800368c <HAL_SPI_TransmitReceive_DMA+0x358>)
 8003464:	400a      	ands	r2, r1
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	e074      	b.n	8003554 <HAL_SPI_TransmitReceive_DMA+0x220>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	0149      	lsls	r1, r1, #5
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	2380      	movs	r3, #128	@ 0x80
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	429a      	cmp	r2, r3
 8003488:	d127      	bne.n	80034da <HAL_SPI_TransmitReceive_DMA+0x1a6>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800348e:	001a      	movs	r2, r3
 8003490:	2301      	movs	r3, #1
 8003492:	4013      	ands	r3, r2
 8003494:	d10f      	bne.n	80034b6 <HAL_SPI_TransmitReceive_DMA+0x182>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	497b      	ldr	r1, [pc, #492]	@ (8003690 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 80034a2:	400a      	ands	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	085b      	lsrs	r3, r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034b4:	e011      	b.n	80034da <HAL_SPI_TransmitReceive_DMA+0x1a6>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2180      	movs	r1, #128	@ 0x80
 80034c2:	01c9      	lsls	r1, r1, #7
 80034c4:	430a      	orrs	r2, r1
 80034c6:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3301      	adds	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	2380      	movs	r3, #128	@ 0x80
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d135      	bne.n	8003554 <HAL_SPI_TransmitReceive_DMA+0x220>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4966      	ldr	r1, [pc, #408]	@ (800368c <HAL_SPI_TransmitReceive_DMA+0x358>)
 80034f4:	400a      	ands	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2246      	movs	r2, #70	@ 0x46
 80034fc:	5a9b      	ldrh	r3, [r3, r2]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	001a      	movs	r2, r3
 8003502:	2301      	movs	r3, #1
 8003504:	4013      	ands	r3, r2
 8003506:	d111      	bne.n	800352c <HAL_SPI_TransmitReceive_DMA+0x1f8>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4960      	ldr	r1, [pc, #384]	@ (8003694 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8003514:	400a      	ands	r2, r1
 8003516:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2246      	movs	r2, #70	@ 0x46
 800351c:	5a9b      	ldrh	r3, [r3, r2]
 800351e:	b29b      	uxth	r3, r3
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	b299      	uxth	r1, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2246      	movs	r2, #70	@ 0x46
 8003528:	5299      	strh	r1, [r3, r2]
 800352a:	e013      	b.n	8003554 <HAL_SPI_TransmitReceive_DMA+0x220>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2180      	movs	r1, #128	@ 0x80
 8003538:	0189      	lsls	r1, r1, #6
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2246      	movs	r2, #70	@ 0x46
 8003542:	5a9b      	ldrh	r3, [r3, r2]
 8003544:	b29b      	uxth	r3, r3
 8003546:	085b      	lsrs	r3, r3, #1
 8003548:	b29b      	uxth	r3, r3
 800354a:	3301      	adds	r3, #1
 800354c:	b299      	uxth	r1, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2246      	movs	r2, #70	@ 0x46
 8003552:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	225d      	movs	r2, #93	@ 0x5d
 8003558:	5c9b      	ldrb	r3, [r3, r2]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b04      	cmp	r3, #4
 800355e:	d108      	bne.n	8003572 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003564:	4a4c      	ldr	r2, [pc, #304]	@ (8003698 <HAL_SPI_TransmitReceive_DMA+0x364>)
 8003566:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356c:	4a4b      	ldr	r2, [pc, #300]	@ (800369c <HAL_SPI_TransmitReceive_DMA+0x368>)
 800356e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003570:	e007      	b.n	8003582 <HAL_SPI_TransmitReceive_DMA+0x24e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003576:	4a4a      	ldr	r2, [pc, #296]	@ (80036a0 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8003578:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357e:	4a49      	ldr	r2, [pc, #292]	@ (80036a4 <HAL_SPI_TransmitReceive_DMA+0x370>)
 8003580:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003586:	4a48      	ldr	r2, [pc, #288]	@ (80036a8 <HAL_SPI_TransmitReceive_DMA+0x374>)
 8003588:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358e:	2200      	movs	r2, #0
 8003590:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	0019      	movs	r1, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2246      	movs	r2, #70	@ 0x46
 80035a8:	5a9b      	ldrh	r3, [r3, r2]
 80035aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80035ac:	0022      	movs	r2, r4
 80035ae:	f7fe fa89 	bl	8001ac4 <HAL_DMA_Start_IT>
 80035b2:	1e03      	subs	r3, r0, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_SPI_TransmitReceive_DMA+0x298>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ba:	2210      	movs	r2, #16
 80035bc:	431a      	orrs	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80035c2:	2317      	movs	r3, #23
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]

    goto error;
 80035ca:	e051      	b.n	8003670 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2101      	movs	r1, #1
 80035d8:	430a      	orrs	r2, r1
 80035da:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e0:	2200      	movs	r2, #0
 80035e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e8:	2200      	movs	r2, #0
 80035ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f8:	2200      	movs	r2, #0
 80035fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003604:	0019      	movs	r1, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	330c      	adds	r3, #12
 800360c:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003612:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003614:	f7fe fa56 	bl	8001ac4 <HAL_DMA_Start_IT>
 8003618:	1e03      	subs	r3, r0, #0
 800361a:	d00a      	beq.n	8003632 <HAL_SPI_TransmitReceive_DMA+0x2fe>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003620:	2210      	movs	r2, #16
 8003622:	431a      	orrs	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003628:	2317      	movs	r3, #23
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]

    goto error;
 8003630:	e01e      	b.n	8003670 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2240      	movs	r2, #64	@ 0x40
 800363a:	4013      	ands	r3, r2
 800363c:	2b40      	cmp	r3, #64	@ 0x40
 800363e:	d007      	beq.n	8003650 <HAL_SPI_TransmitReceive_DMA+0x31c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2140      	movs	r1, #64	@ 0x40
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2120      	movs	r1, #32
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2102      	movs	r1, #2
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	225c      	movs	r2, #92	@ 0x5c
 8003674:	2100      	movs	r1, #0
 8003676:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003678:	2317      	movs	r3, #23
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	781b      	ldrb	r3, [r3, #0]
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b007      	add	sp, #28
 8003684:	bd90      	pop	{r4, r7, pc}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	ffff9fff 	.word	0xffff9fff
 800368c:	ffffefff 	.word	0xffffefff
 8003690:	ffffbfff 	.word	0xffffbfff
 8003694:	ffffdfff 	.word	0xffffdfff
 8003698:	0800390d 	.word	0x0800390d
 800369c:	080037a9 	.word	0x080037a9
 80036a0:	0800392b 	.word	0x0800392b
 80036a4:	08003859 	.word	0x08003859
 80036a8:	08003949 	.word	0x08003949

080036ac <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80036b4:	46c0      	nop			@ (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b002      	add	sp, #8
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80036c4:	46c0      	nop			@ (mov r8, r8)
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b002      	add	sp, #8
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80036d4:	46c0      	nop			@ (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b002      	add	sp, #8
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80036e4:	46c0      	nop			@ (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b002      	add	sp, #8
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80036f4:	46c0      	nop			@ (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b002      	add	sp, #8
 80036fa:	bd80      	pop	{r7, pc}

080036fc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800370a:	f7fe f8ab 	bl	8001864 <HAL_GetTick>
 800370e:	0003      	movs	r3, r0
 8003710:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2220      	movs	r2, #32
 800371a:	4013      	ands	r3, r2
 800371c:	2b20      	cmp	r3, #32
 800371e:	d03c      	beq.n	800379a <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2120      	movs	r1, #32
 800372c:	438a      	bics	r2, r1
 800372e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2102      	movs	r1, #2
 800373c:	438a      	bics	r2, r1
 800373e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2164      	movs	r1, #100	@ 0x64
 8003746:	0018      	movs	r0, r3
 8003748:	f000 faae 	bl	8003ca8 <SPI_EndRxTxTransaction>
 800374c:	1e03      	subs	r3, r0, #0
 800374e:	d005      	beq.n	800375c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003754:	2220      	movs	r2, #32
 8003756:	431a      	orrs	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2200      	movs	r2, #0
 800377e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	225d      	movs	r2, #93	@ 0x5d
 8003784:	2101      	movs	r1, #1
 8003786:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378c:	2b00      	cmp	r3, #0
 800378e:	d004      	beq.n	800379a <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	0018      	movs	r0, r3
 8003794:	f7ff ffaa 	bl	80036ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003798:	e003      	b.n	80037a2 <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	0018      	movs	r0, r3
 800379e:	f7fd f9eb 	bl	8000b78 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b006      	add	sp, #24
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037b6:	f7fe f855 	bl	8001864 <HAL_GetTick>
 80037ba:	0003      	movs	r3, r0
 80037bc:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2220      	movs	r2, #32
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d03e      	beq.n	800384a <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2120      	movs	r1, #32
 80037d8:	438a      	bics	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10e      	bne.n	8003802 <SPI_DMAReceiveCplt+0x5a>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	2382      	movs	r3, #130	@ 0x82
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d108      	bne.n	8003802 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2103      	movs	r1, #3
 80037fc:	438a      	bics	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	e007      	b.n	8003812 <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2101      	movs	r1, #1
 800380e:	438a      	bics	r2, r1
 8003810:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2164      	movs	r1, #100	@ 0x64
 8003818:	0018      	movs	r0, r3
 800381a:	f000 f9e7 	bl	8003bec <SPI_EndRxTransaction>
 800381e:	1e03      	subs	r3, r0, #0
 8003820:	d002      	beq.n	8003828 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2246      	movs	r2, #70	@ 0x46
 800382c:	2100      	movs	r1, #0
 800382e:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	225d      	movs	r2, #93	@ 0x5d
 8003834:	2101      	movs	r1, #1
 8003836:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383c:	2b00      	cmp	r3, #0
 800383e:	d004      	beq.n	800384a <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	0018      	movs	r0, r3
 8003844:	f7ff ff52 	bl	80036ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003848:	e003      	b.n	8003852 <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	0018      	movs	r0, r3
 800384e:	f7ff ff2d 	bl	80036ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003852:	46bd      	mov	sp, r7
 8003854:	b004      	add	sp, #16
 8003856:	bd80      	pop	{r7, pc}

08003858 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003866:	f7fd fffd 	bl	8001864 <HAL_GetTick>
 800386a:	0003      	movs	r3, r0
 800386c:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2220      	movs	r2, #32
 8003876:	4013      	ands	r3, r2
 8003878:	2b20      	cmp	r3, #32
 800387a:	d031      	beq.n	80038e0 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2120      	movs	r1, #32
 8003888:	438a      	bics	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2164      	movs	r1, #100	@ 0x64
 8003892:	0018      	movs	r0, r3
 8003894:	f000 fa08 	bl	8003ca8 <SPI_EndRxTxTransaction>
 8003898:	1e03      	subs	r3, r0, #0
 800389a:	d005      	beq.n	80038a8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a0:	2220      	movs	r2, #32
 80038a2:	431a      	orrs	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2103      	movs	r1, #3
 80038b4:	438a      	bics	r2, r1
 80038b6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2246      	movs	r2, #70	@ 0x46
 80038c2:	2100      	movs	r1, #0
 80038c4:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	225d      	movs	r2, #93	@ 0x5d
 80038ca:	2101      	movs	r1, #1
 80038cc:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	0018      	movs	r0, r3
 80038da:	f7ff ff07 	bl	80036ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80038de:	e003      	b.n	80038e8 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f7fd f95c 	bl	8000ba0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b004      	add	sp, #16
 80038ec:	bd80      	pop	{r7, pc}

080038ee <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	0018      	movs	r0, r3
 8003900:	f7ff fedc 	bl	80036bc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	b004      	add	sp, #16
 800390a:	bd80      	pop	{r7, pc}

0800390c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	0018      	movs	r0, r3
 800391e:	f7ff fed5 	bl	80036cc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003922:	46c0      	nop			@ (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b004      	add	sp, #16
 8003928:	bd80      	pop	{r7, pc}

0800392a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	0018      	movs	r0, r3
 800393c:	f7ff fece 	bl	80036dc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003940:	46c0      	nop			@ (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b004      	add	sp, #16
 8003946:	bd80      	pop	{r7, pc}

08003948 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003954:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2103      	movs	r1, #3
 8003962:	438a      	bics	r2, r1
 8003964:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396a:	2210      	movs	r2, #16
 800396c:	431a      	orrs	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	225d      	movs	r2, #93	@ 0x5d
 8003976:	2101      	movs	r1, #1
 8003978:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	0018      	movs	r0, r3
 800397e:	f7ff feb5 	bl	80036ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003982:	46c0      	nop			@ (mov r8, r8)
 8003984:	46bd      	mov	sp, r7
 8003986:	b004      	add	sp, #16
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	1dfb      	adds	r3, r7, #7
 800399a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800399c:	f7fd ff62 	bl	8001864 <HAL_GetTick>
 80039a0:	0002      	movs	r2, r0
 80039a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	18d3      	adds	r3, r2, r3
 80039aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039ac:	f7fd ff5a 	bl	8001864 <HAL_GetTick>
 80039b0:	0003      	movs	r3, r0
 80039b2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039b4:	4b3a      	ldr	r3, [pc, #232]	@ (8003aa0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	015b      	lsls	r3, r3, #5
 80039ba:	0d1b      	lsrs	r3, r3, #20
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	4353      	muls	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039c2:	e058      	b.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	3301      	adds	r3, #1
 80039c8:	d055      	beq.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039ca:	f7fd ff4b 	bl	8001864 <HAL_GetTick>
 80039ce:	0002      	movs	r2, r0
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d902      	bls.n	80039e0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d142      	bne.n	8003a66 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	21e0      	movs	r1, #224	@ 0xe0
 80039ec:	438a      	bics	r2, r1
 80039ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	2382      	movs	r3, #130	@ 0x82
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d113      	bne.n	8003a24 <SPI_WaitFlagStateUntilTimeout+0x98>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	2380      	movs	r3, #128	@ 0x80
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d005      	beq.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d107      	bne.n	8003a24 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2140      	movs	r1, #64	@ 0x40
 8003a20:	438a      	bics	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a28:	2380      	movs	r3, #128	@ 0x80
 8003a2a:	019b      	lsls	r3, r3, #6
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d110      	bne.n	8003a52 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	491a      	ldr	r1, [pc, #104]	@ (8003aa4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003a3c:	400a      	ands	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2180      	movs	r1, #128	@ 0x80
 8003a4c:	0189      	lsls	r1, r1, #6
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	225d      	movs	r2, #93	@ 0x5d
 8003a56:	2101      	movs	r1, #1
 8003a58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	225c      	movs	r2, #92	@ 0x5c
 8003a5e:	2100      	movs	r1, #0
 8003a60:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e017      	b.n	8003a96 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	425a      	negs	r2, r3
 8003a86:	4153      	adcs	r3, r2
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	001a      	movs	r2, r3
 8003a8c:	1dfb      	adds	r3, r7, #7
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d197      	bne.n	80039c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	0018      	movs	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b008      	add	sp, #32
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	20000000 	.word	0x20000000
 8003aa4:	ffffdfff 	.word	0xffffdfff

08003aa8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	@ 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ab6:	2317      	movs	r3, #23
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003abe:	f7fd fed1 	bl	8001864 <HAL_GetTick>
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	18d3      	adds	r3, r2, r3
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003ace:	f7fd fec9 	bl	8001864 <HAL_GetTick>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ade:	4b41      	ldr	r3, [pc, #260]	@ (8003be4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	0013      	movs	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	189b      	adds	r3, r3, r2
 8003ae8:	00da      	lsls	r2, r3, #3
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	0d1b      	lsrs	r3, r3, #20
 8003aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af0:	4353      	muls	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003af4:	e068      	b.n	8003bc8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	23c0      	movs	r3, #192	@ 0xc0
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d10a      	bne.n	8003b16 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d107      	bne.n	8003b16 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	2117      	movs	r1, #23
 8003b0e:	187b      	adds	r3, r7, r1
 8003b10:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b12:	187b      	adds	r3, r7, r1
 8003b14:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	d055      	beq.n	8003bc8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b1c:	f7fd fea2 	bl	8001864 <HAL_GetTick>
 8003b20:	0002      	movs	r2, r0
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d902      	bls.n	8003b32 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d142      	bne.n	8003bb8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	21e0      	movs	r1, #224	@ 0xe0
 8003b3e:	438a      	bics	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	2382      	movs	r3, #130	@ 0x82
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d113      	bne.n	8003b76 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d005      	beq.n	8003b66 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	2380      	movs	r3, #128	@ 0x80
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d107      	bne.n	8003b76 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2140      	movs	r1, #64	@ 0x40
 8003b72:	438a      	bics	r2, r1
 8003b74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b7a:	2380      	movs	r3, #128	@ 0x80
 8003b7c:	019b      	lsls	r3, r3, #6
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d110      	bne.n	8003ba4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4916      	ldr	r1, [pc, #88]	@ (8003be8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003b8e:	400a      	ands	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2180      	movs	r1, #128	@ 0x80
 8003b9e:	0189      	lsls	r1, r1, #6
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	225d      	movs	r2, #93	@ 0x5d
 8003ba8:	2101      	movs	r1, #1
 8003baa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	225c      	movs	r2, #92	@ 0x5c
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e010      	b.n	8003bda <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d18e      	bne.n	8003af6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	0018      	movs	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b00a      	add	sp, #40	@ 0x28
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			@ (mov r8, r8)
 8003be4:	20000000 	.word	0x20000000
 8003be8:	ffffdfff 	.word	0xffffdfff

08003bec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	2382      	movs	r3, #130	@ 0x82
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d113      	bne.n	8003c2c <SPI_EndRxTransaction+0x40>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	2380      	movs	r3, #128	@ 0x80
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d005      	beq.n	8003c1c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	2380      	movs	r3, #128	@ 0x80
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d107      	bne.n	8003c2c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2140      	movs	r1, #64	@ 0x40
 8003c28:	438a      	bics	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	0013      	movs	r3, r2
 8003c36:	2200      	movs	r2, #0
 8003c38:	2180      	movs	r1, #128	@ 0x80
 8003c3a:	f7ff fea7 	bl	800398c <SPI_WaitFlagStateUntilTimeout>
 8003c3e:	1e03      	subs	r3, r0, #0
 8003c40:	d007      	beq.n	8003c52 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c46:	2220      	movs	r2, #32
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e026      	b.n	8003ca0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	2382      	movs	r3, #130	@ 0x82
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d11f      	bne.n	8003c9e <SPI_EndRxTransaction+0xb2>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	2380      	movs	r3, #128	@ 0x80
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d005      	beq.n	8003c76 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	2380      	movs	r3, #128	@ 0x80
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d113      	bne.n	8003c9e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	23c0      	movs	r3, #192	@ 0xc0
 8003c7a:	00d9      	lsls	r1, r3, #3
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	0013      	movs	r3, r2
 8003c84:	2200      	movs	r2, #0
 8003c86:	f7ff ff0f 	bl	8003aa8 <SPI_WaitFifoStateUntilTimeout>
 8003c8a:	1e03      	subs	r3, r0, #0
 8003c8c:	d007      	beq.n	8003c9e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c92:	2220      	movs	r2, #32
 8003c94:	431a      	orrs	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e000      	b.n	8003ca0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b004      	add	sp, #16
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	23c0      	movs	r3, #192	@ 0xc0
 8003cb8:	0159      	lsls	r1, r3, #5
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	0013      	movs	r3, r2
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f7ff fef0 	bl	8003aa8 <SPI_WaitFifoStateUntilTimeout>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d007      	beq.n	8003cdc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e027      	b.n	8003d2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	0013      	movs	r3, r2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2180      	movs	r1, #128	@ 0x80
 8003cea:	f7ff fe4f 	bl	800398c <SPI_WaitFlagStateUntilTimeout>
 8003cee:	1e03      	subs	r3, r0, #0
 8003cf0:	d007      	beq.n	8003d02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e014      	b.n	8003d2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	23c0      	movs	r3, #192	@ 0xc0
 8003d06:	00d9      	lsls	r1, r3, #3
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	0013      	movs	r3, r2
 8003d10:	2200      	movs	r2, #0
 8003d12:	f7ff fec9 	bl	8003aa8 <SPI_WaitFifoStateUntilTimeout>
 8003d16:	1e03      	subs	r3, r0, #0
 8003d18:	d007      	beq.n	8003d2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1e:	2220      	movs	r2, #32
 8003d20:	431a      	orrs	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e000      	b.n	8003d2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b004      	add	sp, #16
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e044      	b.n	8003dd0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d107      	bne.n	8003d5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2278      	movs	r2, #120	@ 0x78
 8003d52:	2100      	movs	r1, #0
 8003d54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7fd fc01 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2224      	movs	r2, #36	@ 0x24
 8003d62:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2101      	movs	r1, #1
 8003d70:	438a      	bics	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f000 fa0c 	bl	800419c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	0018      	movs	r0, r3
 8003d88:	f000 f8c8 	bl	8003f1c <UART_SetConfig>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e01c      	b.n	8003dd0 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	490d      	ldr	r1, [pc, #52]	@ (8003dd8 <HAL_UART_Init+0xa4>)
 8003da2:	400a      	ands	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	212a      	movs	r1, #42	@ 0x2a
 8003db2:	438a      	bics	r2, r1
 8003db4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f000 fa9b 	bl	8004304 <UART_CheckIdleState>
 8003dce:	0003      	movs	r3, r0
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	ffffb7ff 	.word	0xffffb7ff

08003ddc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	@ 0x28
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	1dbb      	adds	r3, r7, #6
 8003dea:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d000      	beq.n	8003df6 <HAL_UART_Transmit+0x1a>
 8003df4:	e08c      	b.n	8003f10 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_UART_Transmit+0x28>
 8003dfc:	1dbb      	adds	r3, r7, #6
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e084      	b.n	8003f12 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	2380      	movs	r3, #128	@ 0x80
 8003e0e:	015b      	lsls	r3, r3, #5
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d109      	bne.n	8003e28 <HAL_UART_Transmit+0x4c>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	4013      	ands	r3, r2
 8003e22:	d001      	beq.n	8003e28 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e074      	b.n	8003f12 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2284      	movs	r2, #132	@ 0x84
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2221      	movs	r2, #33	@ 0x21
 8003e34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e36:	f7fd fd15 	bl	8001864 <HAL_GetTick>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1dba      	adds	r2, r7, #6
 8003e42:	2150      	movs	r1, #80	@ 0x50
 8003e44:	8812      	ldrh	r2, [r2, #0]
 8003e46:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1dba      	adds	r2, r7, #6
 8003e4c:	2152      	movs	r1, #82	@ 0x52
 8003e4e:	8812      	ldrh	r2, [r2, #0]
 8003e50:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	2380      	movs	r3, #128	@ 0x80
 8003e58:	015b      	lsls	r3, r3, #5
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d108      	bne.n	8003e70 <HAL_UART_Transmit+0x94>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	e003      	b.n	8003e78 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e78:	e02f      	b.n	8003eda <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	0013      	movs	r3, r2
 8003e84:	2200      	movs	r2, #0
 8003e86:	2180      	movs	r1, #128	@ 0x80
 8003e88:	f000 fae4 	bl	8004454 <UART_WaitOnFlagUntilTimeout>
 8003e8c:	1e03      	subs	r3, r0, #0
 8003e8e:	d004      	beq.n	8003e9a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e03b      	b.n	8003f12 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	881a      	ldrh	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	05d2      	lsls	r2, r2, #23
 8003eaa:	0dd2      	lsrs	r2, r2, #23
 8003eac:	b292      	uxth	r2, r2
 8003eae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	e007      	b.n	8003ec8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	781a      	ldrb	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2252      	movs	r2, #82	@ 0x52
 8003ecc:	5a9b      	ldrh	r3, [r3, r2]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b299      	uxth	r1, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2252      	movs	r2, #82	@ 0x52
 8003ed8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2252      	movs	r2, #82	@ 0x52
 8003ede:	5a9b      	ldrh	r3, [r3, r2]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1c9      	bne.n	8003e7a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	0013      	movs	r3, r2
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2140      	movs	r1, #64	@ 0x40
 8003ef4:	f000 faae 	bl	8004454 <UART_WaitOnFlagUntilTimeout>
 8003ef8:	1e03      	subs	r3, r0, #0
 8003efa:	d004      	beq.n	8003f06 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e005      	b.n	8003f12 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e000      	b.n	8003f12 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
  }
}
 8003f12:	0018      	movs	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b008      	add	sp, #32
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f24:	231e      	movs	r3, #30
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	2200      	movs	r2, #0
 8003f2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a8d      	ldr	r2, [pc, #564]	@ (8004180 <UART_SetConfig+0x264>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	0019      	movs	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	4a88      	ldr	r2, [pc, #544]	@ (8004184 <UART_SetConfig+0x268>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	0019      	movs	r1, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4a7f      	ldr	r2, [pc, #508]	@ (8004188 <UART_SetConfig+0x26c>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	0019      	movs	r1, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a7b      	ldr	r2, [pc, #492]	@ (800418c <UART_SetConfig+0x270>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d127      	bne.n	8003ff2 <UART_SetConfig+0xd6>
 8003fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8004190 <UART_SetConfig+0x274>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d00d      	beq.n	8003fca <UART_SetConfig+0xae>
 8003fae:	d81b      	bhi.n	8003fe8 <UART_SetConfig+0xcc>
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d014      	beq.n	8003fde <UART_SetConfig+0xc2>
 8003fb4:	d818      	bhi.n	8003fe8 <UART_SetConfig+0xcc>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <UART_SetConfig+0xa4>
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d00a      	beq.n	8003fd4 <UART_SetConfig+0xb8>
 8003fbe:	e013      	b.n	8003fe8 <UART_SetConfig+0xcc>
 8003fc0:	231f      	movs	r3, #31
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
 8003fc8:	e021      	b.n	800400e <UART_SetConfig+0xf2>
 8003fca:	231f      	movs	r3, #31
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	2202      	movs	r2, #2
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e01c      	b.n	800400e <UART_SetConfig+0xf2>
 8003fd4:	231f      	movs	r3, #31
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	2204      	movs	r2, #4
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	e017      	b.n	800400e <UART_SetConfig+0xf2>
 8003fde:	231f      	movs	r3, #31
 8003fe0:	18fb      	adds	r3, r7, r3
 8003fe2:	2208      	movs	r2, #8
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	e012      	b.n	800400e <UART_SetConfig+0xf2>
 8003fe8:	231f      	movs	r3, #31
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	2210      	movs	r2, #16
 8003fee:	701a      	strb	r2, [r3, #0]
 8003ff0:	e00d      	b.n	800400e <UART_SetConfig+0xf2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a67      	ldr	r2, [pc, #412]	@ (8004194 <UART_SetConfig+0x278>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d104      	bne.n	8004006 <UART_SetConfig+0xea>
 8003ffc:	231f      	movs	r3, #31
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	e003      	b.n	800400e <UART_SetConfig+0xf2>
 8004006:	231f      	movs	r3, #31
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	2210      	movs	r2, #16
 800400c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	2380      	movs	r3, #128	@ 0x80
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	429a      	cmp	r2, r3
 8004018:	d15c      	bne.n	80040d4 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800401a:	231f      	movs	r3, #31
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d015      	beq.n	8004050 <UART_SetConfig+0x134>
 8004024:	dc18      	bgt.n	8004058 <UART_SetConfig+0x13c>
 8004026:	2b04      	cmp	r3, #4
 8004028:	d00d      	beq.n	8004046 <UART_SetConfig+0x12a>
 800402a:	dc15      	bgt.n	8004058 <UART_SetConfig+0x13c>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <UART_SetConfig+0x11a>
 8004030:	2b02      	cmp	r3, #2
 8004032:	d005      	beq.n	8004040 <UART_SetConfig+0x124>
 8004034:	e010      	b.n	8004058 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004036:	f7fe fc6b 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 800403a:	0003      	movs	r3, r0
 800403c:	61bb      	str	r3, [r7, #24]
        break;
 800403e:	e012      	b.n	8004066 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004040:	4b55      	ldr	r3, [pc, #340]	@ (8004198 <UART_SetConfig+0x27c>)
 8004042:	61bb      	str	r3, [r7, #24]
        break;
 8004044:	e00f      	b.n	8004066 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004046:	f7fe fc03 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 800404a:	0003      	movs	r3, r0
 800404c:	61bb      	str	r3, [r7, #24]
        break;
 800404e:	e00a      	b.n	8004066 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004050:	2380      	movs	r3, #128	@ 0x80
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	61bb      	str	r3, [r7, #24]
        break;
 8004056:	e006      	b.n	8004066 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800405c:	231e      	movs	r3, #30
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	2201      	movs	r2, #1
 8004062:	701a      	strb	r2, [r3, #0]
        break;
 8004064:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d100      	bne.n	800406e <UART_SetConfig+0x152>
 800406c:	e07a      	b.n	8004164 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	005a      	lsls	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	18d2      	adds	r2, r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	0019      	movs	r1, r3
 8004080:	0010      	movs	r0, r2
 8004082:	f7fc f85d 	bl	8000140 <__udivsi3>
 8004086:	0003      	movs	r3, r0
 8004088:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b0f      	cmp	r3, #15
 800408e:	d91c      	bls.n	80040ca <UART_SetConfig+0x1ae>
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	2380      	movs	r3, #128	@ 0x80
 8004094:	025b      	lsls	r3, r3, #9
 8004096:	429a      	cmp	r2, r3
 8004098:	d217      	bcs.n	80040ca <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	b29a      	uxth	r2, r3
 800409e:	200e      	movs	r0, #14
 80040a0:	183b      	adds	r3, r7, r0
 80040a2:	210f      	movs	r1, #15
 80040a4:	438a      	bics	r2, r1
 80040a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	085b      	lsrs	r3, r3, #1
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2207      	movs	r2, #7
 80040b0:	4013      	ands	r3, r2
 80040b2:	b299      	uxth	r1, r3
 80040b4:	183b      	adds	r3, r7, r0
 80040b6:	183a      	adds	r2, r7, r0
 80040b8:	8812      	ldrh	r2, [r2, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	183a      	adds	r2, r7, r0
 80040c4:	8812      	ldrh	r2, [r2, #0]
 80040c6:	60da      	str	r2, [r3, #12]
 80040c8:	e04c      	b.n	8004164 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80040ca:	231e      	movs	r3, #30
 80040cc:	18fb      	adds	r3, r7, r3
 80040ce:	2201      	movs	r2, #1
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	e047      	b.n	8004164 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040d4:	231f      	movs	r3, #31
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d015      	beq.n	800410a <UART_SetConfig+0x1ee>
 80040de:	dc18      	bgt.n	8004112 <UART_SetConfig+0x1f6>
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d00d      	beq.n	8004100 <UART_SetConfig+0x1e4>
 80040e4:	dc15      	bgt.n	8004112 <UART_SetConfig+0x1f6>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <UART_SetConfig+0x1d4>
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d005      	beq.n	80040fa <UART_SetConfig+0x1de>
 80040ee:	e010      	b.n	8004112 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f0:	f7fe fc0e 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 80040f4:	0003      	movs	r3, r0
 80040f6:	61bb      	str	r3, [r7, #24]
        break;
 80040f8:	e012      	b.n	8004120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040fa:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <UART_SetConfig+0x27c>)
 80040fc:	61bb      	str	r3, [r7, #24]
        break;
 80040fe:	e00f      	b.n	8004120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004100:	f7fe fba6 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 8004104:	0003      	movs	r3, r0
 8004106:	61bb      	str	r3, [r7, #24]
        break;
 8004108:	e00a      	b.n	8004120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800410a:	2380      	movs	r3, #128	@ 0x80
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	61bb      	str	r3, [r7, #24]
        break;
 8004110:	e006      	b.n	8004120 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004116:	231e      	movs	r3, #30
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	2201      	movs	r2, #1
 800411c:	701a      	strb	r2, [r3, #0]
        break;
 800411e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d01e      	beq.n	8004164 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	085a      	lsrs	r2, r3, #1
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	18d2      	adds	r2, r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	0019      	movs	r1, r3
 8004136:	0010      	movs	r0, r2
 8004138:	f7fc f802 	bl	8000140 <__udivsi3>
 800413c:	0003      	movs	r3, r0
 800413e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b0f      	cmp	r3, #15
 8004144:	d90a      	bls.n	800415c <UART_SetConfig+0x240>
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	2380      	movs	r3, #128	@ 0x80
 800414a:	025b      	lsls	r3, r3, #9
 800414c:	429a      	cmp	r2, r3
 800414e:	d205      	bcs.n	800415c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	b29a      	uxth	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	e003      	b.n	8004164 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800415c:	231e      	movs	r3, #30
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	2201      	movs	r2, #1
 8004162:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004170:	231e      	movs	r3, #30
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	781b      	ldrb	r3, [r3, #0]
}
 8004176:	0018      	movs	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	b008      	add	sp, #32
 800417c:	bd80      	pop	{r7, pc}
 800417e:	46c0      	nop			@ (mov r8, r8)
 8004180:	ffff69f3 	.word	0xffff69f3
 8004184:	ffffcfff 	.word	0xffffcfff
 8004188:	fffff4ff 	.word	0xfffff4ff
 800418c:	40013800 	.word	0x40013800
 8004190:	40021000 	.word	0x40021000
 8004194:	40004400 	.word	0x40004400
 8004198:	007a1200 	.word	0x007a1200

0800419c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	2208      	movs	r2, #8
 80041aa:	4013      	ands	r3, r2
 80041ac:	d00b      	beq.n	80041c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	4a4a      	ldr	r2, [pc, #296]	@ (80042e0 <UART_AdvFeatureConfig+0x144>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	0019      	movs	r1, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	2201      	movs	r2, #1
 80041cc:	4013      	ands	r3, r2
 80041ce:	d00b      	beq.n	80041e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4a43      	ldr	r2, [pc, #268]	@ (80042e4 <UART_AdvFeatureConfig+0x148>)
 80041d8:	4013      	ands	r3, r2
 80041da:	0019      	movs	r1, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	2202      	movs	r2, #2
 80041ee:	4013      	ands	r3, r2
 80041f0:	d00b      	beq.n	800420a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	4a3b      	ldr	r2, [pc, #236]	@ (80042e8 <UART_AdvFeatureConfig+0x14c>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	0019      	movs	r1, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	2204      	movs	r2, #4
 8004210:	4013      	ands	r3, r2
 8004212:	d00b      	beq.n	800422c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4a34      	ldr	r2, [pc, #208]	@ (80042ec <UART_AdvFeatureConfig+0x150>)
 800421c:	4013      	ands	r3, r2
 800421e:	0019      	movs	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	2210      	movs	r2, #16
 8004232:	4013      	ands	r3, r2
 8004234:	d00b      	beq.n	800424e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4a2c      	ldr	r2, [pc, #176]	@ (80042f0 <UART_AdvFeatureConfig+0x154>)
 800423e:	4013      	ands	r3, r2
 8004240:	0019      	movs	r1, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	2220      	movs	r2, #32
 8004254:	4013      	ands	r3, r2
 8004256:	d00b      	beq.n	8004270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	4a25      	ldr	r2, [pc, #148]	@ (80042f4 <UART_AdvFeatureConfig+0x158>)
 8004260:	4013      	ands	r3, r2
 8004262:	0019      	movs	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004274:	2240      	movs	r2, #64	@ 0x40
 8004276:	4013      	ands	r3, r2
 8004278:	d01d      	beq.n	80042b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	4a1d      	ldr	r2, [pc, #116]	@ (80042f8 <UART_AdvFeatureConfig+0x15c>)
 8004282:	4013      	ands	r3, r2
 8004284:	0019      	movs	r1, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004296:	2380      	movs	r3, #128	@ 0x80
 8004298:	035b      	lsls	r3, r3, #13
 800429a:	429a      	cmp	r2, r3
 800429c:	d10b      	bne.n	80042b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4a15      	ldr	r2, [pc, #84]	@ (80042fc <UART_AdvFeatureConfig+0x160>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	0019      	movs	r1, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	2280      	movs	r2, #128	@ 0x80
 80042bc:	4013      	ands	r3, r2
 80042be:	d00b      	beq.n	80042d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	4a0e      	ldr	r2, [pc, #56]	@ (8004300 <UART_AdvFeatureConfig+0x164>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	0019      	movs	r1, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	605a      	str	r2, [r3, #4]
  }
}
 80042d8:	46c0      	nop			@ (mov r8, r8)
 80042da:	46bd      	mov	sp, r7
 80042dc:	b002      	add	sp, #8
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	ffff7fff 	.word	0xffff7fff
 80042e4:	fffdffff 	.word	0xfffdffff
 80042e8:	fffeffff 	.word	0xfffeffff
 80042ec:	fffbffff 	.word	0xfffbffff
 80042f0:	ffffefff 	.word	0xffffefff
 80042f4:	ffffdfff 	.word	0xffffdfff
 80042f8:	ffefffff 	.word	0xffefffff
 80042fc:	ff9fffff 	.word	0xff9fffff
 8004300:	fff7ffff 	.word	0xfff7ffff

08004304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b092      	sub	sp, #72	@ 0x48
 8004308:	af02      	add	r7, sp, #8
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2284      	movs	r2, #132	@ 0x84
 8004310:	2100      	movs	r1, #0
 8004312:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004314:	f7fd faa6 	bl	8001864 <HAL_GetTick>
 8004318:	0003      	movs	r3, r0
 800431a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2208      	movs	r2, #8
 8004324:	4013      	ands	r3, r2
 8004326:	2b08      	cmp	r3, #8
 8004328:	d12c      	bne.n	8004384 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800432a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800432c:	2280      	movs	r2, #128	@ 0x80
 800432e:	0391      	lsls	r1, r2, #14
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	4a46      	ldr	r2, [pc, #280]	@ (800444c <UART_CheckIdleState+0x148>)
 8004334:	9200      	str	r2, [sp, #0]
 8004336:	2200      	movs	r2, #0
 8004338:	f000 f88c 	bl	8004454 <UART_WaitOnFlagUntilTimeout>
 800433c:	1e03      	subs	r3, r0, #0
 800433e:	d021      	beq.n	8004384 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004340:	f3ef 8310 	mrs	r3, PRIMASK
 8004344:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004348:	63bb      	str	r3, [r7, #56]	@ 0x38
 800434a:	2301      	movs	r3, #1
 800434c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004350:	f383 8810 	msr	PRIMASK, r3
}
 8004354:	46c0      	nop			@ (mov r8, r8)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2180      	movs	r1, #128	@ 0x80
 8004362:	438a      	bics	r2, r1
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436c:	f383 8810 	msr	PRIMASK, r3
}
 8004370:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2278      	movs	r2, #120	@ 0x78
 800437c:	2100      	movs	r1, #0
 800437e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e05f      	b.n	8004444 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2204      	movs	r2, #4
 800438c:	4013      	ands	r3, r2
 800438e:	2b04      	cmp	r3, #4
 8004390:	d146      	bne.n	8004420 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004394:	2280      	movs	r2, #128	@ 0x80
 8004396:	03d1      	lsls	r1, r2, #15
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4a2c      	ldr	r2, [pc, #176]	@ (800444c <UART_CheckIdleState+0x148>)
 800439c:	9200      	str	r2, [sp, #0]
 800439e:	2200      	movs	r2, #0
 80043a0:	f000 f858 	bl	8004454 <UART_WaitOnFlagUntilTimeout>
 80043a4:	1e03      	subs	r3, r0, #0
 80043a6:	d03b      	beq.n	8004420 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a8:	f3ef 8310 	mrs	r3, PRIMASK
 80043ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80043ae:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80043b2:	2301      	movs	r3, #1
 80043b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f383 8810 	msr	PRIMASK, r3
}
 80043bc:	46c0      	nop			@ (mov r8, r8)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4921      	ldr	r1, [pc, #132]	@ (8004450 <UART_CheckIdleState+0x14c>)
 80043ca:	400a      	ands	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f383 8810 	msr	PRIMASK, r3
}
 80043d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043da:	f3ef 8310 	mrs	r3, PRIMASK
 80043de:	61bb      	str	r3, [r7, #24]
  return(result);
 80043e0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80043e4:	2301      	movs	r3, #1
 80043e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f383 8810 	msr	PRIMASK, r3
}
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2101      	movs	r1, #1
 80043fc:	438a      	bics	r2, r1
 80043fe:	609a      	str	r2, [r3, #8]
 8004400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004402:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	f383 8810 	msr	PRIMASK, r3
}
 800440a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2280      	movs	r2, #128	@ 0x80
 8004410:	2120      	movs	r1, #32
 8004412:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2278      	movs	r2, #120	@ 0x78
 8004418:	2100      	movs	r1, #0
 800441a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e011      	b.n	8004444 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2280      	movs	r2, #128	@ 0x80
 800442a:	2120      	movs	r1, #32
 800442c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2278      	movs	r2, #120	@ 0x78
 800443e:	2100      	movs	r1, #0
 8004440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	b010      	add	sp, #64	@ 0x40
 800444a:	bd80      	pop	{r7, pc}
 800444c:	01ffffff 	.word	0x01ffffff
 8004450:	fffffedf 	.word	0xfffffedf

08004454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	1dfb      	adds	r3, r7, #7
 8004462:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004464:	e051      	b.n	800450a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	3301      	adds	r3, #1
 800446a:	d04e      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446c:	f7fd f9fa 	bl	8001864 <HAL_GetTick>
 8004470:	0002      	movs	r2, r0
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	429a      	cmp	r2, r3
 800447a:	d302      	bcc.n	8004482 <UART_WaitOnFlagUntilTimeout+0x2e>
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e051      	b.n	800452a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2204      	movs	r2, #4
 800448e:	4013      	ands	r3, r2
 8004490:	d03b      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b80      	cmp	r3, #128	@ 0x80
 8004496:	d038      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b40      	cmp	r3, #64	@ 0x40
 800449c:	d035      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	2208      	movs	r2, #8
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d111      	bne.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2208      	movs	r2, #8
 80044b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	0018      	movs	r0, r3
 80044b8:	f000 f83c 	bl	8004534 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2284      	movs	r2, #132	@ 0x84
 80044c0:	2108      	movs	r1, #8
 80044c2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2278      	movs	r2, #120	@ 0x78
 80044c8:	2100      	movs	r1, #0
 80044ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e02c      	b.n	800452a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	2380      	movs	r3, #128	@ 0x80
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	401a      	ands	r2, r3
 80044dc:	2380      	movs	r3, #128	@ 0x80
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d112      	bne.n	800450a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2280      	movs	r2, #128	@ 0x80
 80044ea:	0112      	lsls	r2, r2, #4
 80044ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	0018      	movs	r0, r3
 80044f2:	f000 f81f 	bl	8004534 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2284      	movs	r2, #132	@ 0x84
 80044fa:	2120      	movs	r1, #32
 80044fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2278      	movs	r2, #120	@ 0x78
 8004502:	2100      	movs	r1, #0
 8004504:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e00f      	b.n	800452a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	425a      	negs	r2, r3
 800451a:	4153      	adcs	r3, r2
 800451c:	b2db      	uxtb	r3, r3
 800451e:	001a      	movs	r2, r3
 8004520:	1dfb      	adds	r3, r7, #7
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d09e      	beq.n	8004466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b004      	add	sp, #16
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08e      	sub	sp, #56	@ 0x38
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800453c:	f3ef 8310 	mrs	r3, PRIMASK
 8004540:	617b      	str	r3, [r7, #20]
  return(result);
 8004542:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004544:	637b      	str	r3, [r7, #52]	@ 0x34
 8004546:	2301      	movs	r3, #1
 8004548:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f383 8810 	msr	PRIMASK, r3
}
 8004550:	46c0      	nop			@ (mov r8, r8)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4926      	ldr	r1, [pc, #152]	@ (80045f8 <UART_EndRxTransfer+0xc4>)
 800455e:	400a      	ands	r2, r1
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004564:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f383 8810 	msr	PRIMASK, r3
}
 800456c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800456e:	f3ef 8310 	mrs	r3, PRIMASK
 8004572:	623b      	str	r3, [r7, #32]
  return(result);
 8004574:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004576:	633b      	str	r3, [r7, #48]	@ 0x30
 8004578:	2301      	movs	r3, #1
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	f383 8810 	msr	PRIMASK, r3
}
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2101      	movs	r1, #1
 8004590:	438a      	bics	r2, r1
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004596:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459a:	f383 8810 	msr	PRIMASK, r3
}
 800459e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d118      	bne.n	80045da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a8:	f3ef 8310 	mrs	r3, PRIMASK
 80045ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045b2:	2301      	movs	r3, #1
 80045b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f383 8810 	msr	PRIMASK, r3
}
 80045bc:	46c0      	nop			@ (mov r8, r8)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2110      	movs	r1, #16
 80045ca:	438a      	bics	r2, r1
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f383 8810 	msr	PRIMASK, r3
}
 80045d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2280      	movs	r2, #128	@ 0x80
 80045de:	2120      	movs	r1, #32
 80045e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045ee:	46c0      	nop			@ (mov r8, r8)
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b00e      	add	sp, #56	@ 0x38
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			@ (mov r8, r8)
 80045f8:	fffffedf 	.word	0xfffffedf

080045fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004600:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004602:	0018      	movs	r0, r3
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004608:	b5b0      	push	{r4, r5, r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	0002      	movs	r2, r0
 8004610:	1dfb      	adds	r3, r7, #7
 8004612:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004614:	1dfb      	adds	r3, r7, #7
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	4a0b      	ldr	r2, [pc, #44]	@ (8004648 <disk_status+0x40>)
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	18d3      	adds	r3, r2, r3
 800461e:	3304      	adds	r3, #4
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	1dfa      	adds	r2, r7, #7
 8004626:	7812      	ldrb	r2, [r2, #0]
 8004628:	4907      	ldr	r1, [pc, #28]	@ (8004648 <disk_status+0x40>)
 800462a:	188a      	adds	r2, r1, r2
 800462c:	7a12      	ldrb	r2, [r2, #8]
 800462e:	250f      	movs	r5, #15
 8004630:	197c      	adds	r4, r7, r5
 8004632:	0010      	movs	r0, r2
 8004634:	4798      	blx	r3
 8004636:	0003      	movs	r3, r0
 8004638:	7023      	strb	r3, [r4, #0]
  return stat;
 800463a:	197b      	adds	r3, r7, r5
 800463c:	781b      	ldrb	r3, [r3, #0]
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b004      	add	sp, #16
 8004644:	bdb0      	pop	{r4, r5, r7, pc}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	20000660 	.word	0x20000660

0800464c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800464c:	b590      	push	{r4, r7, lr}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	0002      	movs	r2, r0
 8004654:	1dfb      	adds	r3, r7, #7
 8004656:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8004658:	200f      	movs	r0, #15
 800465a:	183b      	adds	r3, r7, r0
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 8004660:	1dfb      	adds	r3, r7, #7
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	4a10      	ldr	r2, [pc, #64]	@ (80046a8 <disk_initialize+0x5c>)
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d116      	bne.n	800469a <disk_initialize+0x4e>
  { 
    disk.is_initialized[pdrv] = 1;
 800466c:	1dfb      	adds	r3, r7, #7
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	4a0d      	ldr	r2, [pc, #52]	@ (80046a8 <disk_initialize+0x5c>)
 8004672:	2101      	movs	r1, #1
 8004674:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004676:	1dfb      	adds	r3, r7, #7
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	4a0b      	ldr	r2, [pc, #44]	@ (80046a8 <disk_initialize+0x5c>)
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	18d3      	adds	r3, r2, r3
 8004680:	3304      	adds	r3, #4
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	1dfa      	adds	r2, r7, #7
 8004688:	7812      	ldrb	r2, [r2, #0]
 800468a:	4907      	ldr	r1, [pc, #28]	@ (80046a8 <disk_initialize+0x5c>)
 800468c:	188a      	adds	r2, r1, r2
 800468e:	7a12      	ldrb	r2, [r2, #8]
 8004690:	183c      	adds	r4, r7, r0
 8004692:	0010      	movs	r0, r2
 8004694:	4798      	blx	r3
 8004696:	0003      	movs	r3, r0
 8004698:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 800469a:	230f      	movs	r3, #15
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	781b      	ldrb	r3, [r3, #0]
}
 80046a0:	0018      	movs	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b005      	add	sp, #20
 80046a6:	bd90      	pop	{r4, r7, pc}
 80046a8:	20000660 	.word	0x20000660

080046ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80046ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	210f      	movs	r1, #15
 80046ba:	187b      	adds	r3, r7, r1
 80046bc:	1c02      	adds	r2, r0, #0
 80046be:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80046c0:	187b      	adds	r3, r7, r1
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	4a0c      	ldr	r2, [pc, #48]	@ (80046f8 <disk_read+0x4c>)
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	18d3      	adds	r3, r2, r3
 80046ca:	3304      	adds	r3, #4
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689d      	ldr	r5, [r3, #8]
 80046d0:	187b      	adds	r3, r7, r1
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	4a08      	ldr	r2, [pc, #32]	@ (80046f8 <disk_read+0x4c>)
 80046d6:	18d3      	adds	r3, r2, r3
 80046d8:	7a18      	ldrb	r0, [r3, #8]
 80046da:	2617      	movs	r6, #23
 80046dc:	19bc      	adds	r4, r7, r6
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	47a8      	blx	r5
 80046e6:	0003      	movs	r3, r0
 80046e8:	7023      	strb	r3, [r4, #0]
  return res;
 80046ea:	19bb      	adds	r3, r7, r6
 80046ec:	781b      	ldrb	r3, [r3, #0]
}
 80046ee:	0018      	movs	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b007      	add	sp, #28
 80046f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	20000660 	.word	0x20000660

080046fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80046fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	210f      	movs	r1, #15
 800470a:	187b      	adds	r3, r7, r1
 800470c:	1c02      	adds	r2, r0, #0
 800470e:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004710:	187b      	adds	r3, r7, r1
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	4a0c      	ldr	r2, [pc, #48]	@ (8004748 <disk_write+0x4c>)
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	18d3      	adds	r3, r2, r3
 800471a:	3304      	adds	r3, #4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68dd      	ldr	r5, [r3, #12]
 8004720:	187b      	adds	r3, r7, r1
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	4a08      	ldr	r2, [pc, #32]	@ (8004748 <disk_write+0x4c>)
 8004726:	18d3      	adds	r3, r2, r3
 8004728:	7a18      	ldrb	r0, [r3, #8]
 800472a:	2617      	movs	r6, #23
 800472c:	19bc      	adds	r4, r7, r6
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	68b9      	ldr	r1, [r7, #8]
 8004734:	47a8      	blx	r5
 8004736:	0003      	movs	r3, r0
 8004738:	7023      	strb	r3, [r4, #0]
  return res;
 800473a:	19bb      	adds	r3, r7, r6
 800473c:	781b      	ldrb	r3, [r3, #0]
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b007      	add	sp, #28
 8004744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	20000660 	.word	0x20000660

0800474c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800474c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	603a      	str	r2, [r7, #0]
 8004754:	1dfb      	adds	r3, r7, #7
 8004756:	1c02      	adds	r2, r0, #0
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	1dbb      	adds	r3, r7, #6
 800475c:	1c0a      	adds	r2, r1, #0
 800475e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004760:	1dfb      	adds	r3, r7, #7
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	4a0c      	ldr	r2, [pc, #48]	@ (8004798 <disk_ioctl+0x4c>)
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	18d3      	adds	r3, r2, r3
 800476a:	3304      	adds	r3, #4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	1dfa      	adds	r2, r7, #7
 8004772:	7812      	ldrb	r2, [r2, #0]
 8004774:	4908      	ldr	r1, [pc, #32]	@ (8004798 <disk_ioctl+0x4c>)
 8004776:	188a      	adds	r2, r1, r2
 8004778:	7a10      	ldrb	r0, [r2, #8]
 800477a:	260f      	movs	r6, #15
 800477c:	19bc      	adds	r4, r7, r6
 800477e:	683d      	ldr	r5, [r7, #0]
 8004780:	1dba      	adds	r2, r7, #6
 8004782:	7811      	ldrb	r1, [r2, #0]
 8004784:	002a      	movs	r2, r5
 8004786:	4798      	blx	r3
 8004788:	0003      	movs	r3, r0
 800478a:	7023      	strb	r3, [r4, #0]
  return res;
 800478c:	19bb      	adds	r3, r7, r6
 800478e:	781b      	ldrb	r3, [r3, #0]
}
 8004790:	0018      	movs	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	b005      	add	sp, #20
 8004796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004798:	20000660 	.word	0x20000660

0800479c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80047b0:	e007      	b.n	80047c2 <mem_cpy+0x26>
		*d++ = *s++;
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	1c53      	adds	r3, r2, #1
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	1c59      	adds	r1, r3, #1
 80047bc:	6179      	str	r1, [r7, #20]
 80047be:	7812      	ldrb	r2, [r2, #0]
 80047c0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	1e5a      	subs	r2, r3, #1
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1f2      	bne.n	80047b2 <mem_cpy+0x16>
}
 80047cc:	46c0      	nop			@ (mov r8, r8)
 80047ce:	46c0      	nop			@ (mov r8, r8)
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b006      	add	sp, #24
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b086      	sub	sp, #24
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80047e6:	e005      	b.n	80047f4 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	617a      	str	r2, [r7, #20]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	1e5a      	subs	r2, r3, #1
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f4      	bne.n	80047e8 <mem_set+0x12>
}
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	46c0      	nop			@ (mov r8, r8)
 8004802:	46bd      	mov	sp, r7
 8004804:	b006      	add	sp, #24
 8004806:	bd80      	pop	{r7, pc}

08004808 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004820:	46c0      	nop			@ (mov r8, r8)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	1e5a      	subs	r2, r3, #1
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00d      	beq.n	8004848 <mem_cmp+0x40>
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	61fa      	str	r2, [r7, #28]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	0019      	movs	r1, r3
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	61ba      	str	r2, [r7, #24]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	1acb      	subs	r3, r1, r3
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ec      	beq.n	8004822 <mem_cmp+0x1a>
	return r;
 8004848:	697b      	ldr	r3, [r7, #20]
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b008      	add	sp, #32
 8004850:	bd80      	pop	{r7, pc}

08004852 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800485c:	e002      	b.n	8004864 <chk_chr+0x12>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3301      	adds	r3, #1
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <chk_chr+0x26>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	001a      	movs	r2, r3
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	4293      	cmp	r3, r2
 8004876:	d1f2      	bne.n	800485e <chk_chr+0xc>
	return *str;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	781b      	ldrb	r3, [r3, #0]
}
 800487c:	0018      	movs	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	b002      	add	sp, #8
 8004882:	bd80      	pop	{r7, pc}

08004884 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800488e:	2300      	movs	r3, #0
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e038      	b.n	800490a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8004898:	492f      	ldr	r1, [pc, #188]	@ (8004958 <chk_lock+0xd4>)
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	0013      	movs	r3, r2
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	189b      	adds	r3, r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	585b      	ldr	r3, [r3, r1]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d02a      	beq.n	8004900 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80048aa:	492b      	ldr	r1, [pc, #172]	@ (8004958 <chk_lock+0xd4>)
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	0013      	movs	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	189b      	adds	r3, r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	585a      	ldr	r2, [r3, r1]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	2380      	movs	r3, #128	@ 0x80
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	58cb      	ldr	r3, [r1, r3]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d11f      	bne.n	8004904 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80048c4:	4924      	ldr	r1, [pc, #144]	@ (8004958 <chk_lock+0xd4>)
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	0013      	movs	r3, r2
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	189b      	adds	r3, r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	18cb      	adds	r3, r1, r3
 80048d2:	3304      	adds	r3, #4
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	2382      	movs	r3, #130	@ 0x82
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	58cb      	ldr	r3, [r1, r3]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80048de:	429a      	cmp	r2, r3
 80048e0:	d110      	bne.n	8004904 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80048e2:	491d      	ldr	r1, [pc, #116]	@ (8004958 <chk_lock+0xd4>)
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	0013      	movs	r3, r2
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	189b      	adds	r3, r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	18cb      	adds	r3, r1, r3
 80048f0:	3308      	adds	r3, #8
 80048f2:	881a      	ldrh	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4919      	ldr	r1, [pc, #100]	@ (800495c <chk_lock+0xd8>)
 80048f8:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d102      	bne.n	8004904 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80048fe:	e007      	b.n	8004910 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8004900:	2301      	movs	r3, #1
 8004902:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d9c3      	bls.n	8004898 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d109      	bne.n	800492a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d102      	bne.n	8004922 <chk_lock+0x9e>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d101      	bne.n	8004926 <chk_lock+0xa2>
 8004922:	2300      	movs	r3, #0
 8004924:	e014      	b.n	8004950 <chk_lock+0xcc>
 8004926:	2312      	movs	r3, #18
 8004928:	e012      	b.n	8004950 <chk_lock+0xcc>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10c      	bne.n	800494a <chk_lock+0xc6>
 8004930:	4909      	ldr	r1, [pc, #36]	@ (8004958 <chk_lock+0xd4>)
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	0013      	movs	r3, r2
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	189b      	adds	r3, r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	18cb      	adds	r3, r1, r3
 800493e:	330a      	adds	r3, #10
 8004940:	881a      	ldrh	r2, [r3, #0]
 8004942:	2380      	movs	r3, #128	@ 0x80
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	429a      	cmp	r2, r3
 8004948:	d101      	bne.n	800494e <chk_lock+0xca>
 800494a:	2310      	movs	r3, #16
 800494c:	e000      	b.n	8004950 <chk_lock+0xcc>
 800494e:	2300      	movs	r3, #0
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b004      	add	sp, #16
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000648 	.word	0x20000648
 800495c:	00000206 	.word	0x00000206

08004960 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004966:	2300      	movs	r3, #0
 8004968:	607b      	str	r3, [r7, #4]
 800496a:	e002      	b.n	8004972 <enq_lock+0x12>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3301      	adds	r3, #1
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d808      	bhi.n	800498a <enq_lock+0x2a>
 8004978:	4908      	ldr	r1, [pc, #32]	@ (800499c <enq_lock+0x3c>)
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	0013      	movs	r3, r2
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	189b      	adds	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	585b      	ldr	r3, [r3, r1]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f0      	bne.n	800496c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3b02      	subs	r3, #2
 800498e:	1e5a      	subs	r2, r3, #1
 8004990:	4193      	sbcs	r3, r2
 8004992:	b2db      	uxtb	r3, r3
}
 8004994:	0018      	movs	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	b002      	add	sp, #8
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000648 	.word	0x20000648

080049a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	e02c      	b.n	8004a0a <inc_lock+0x6a>
		if (Files[i].fs == dp->fs &&
 80049b0:	4955      	ldr	r1, [pc, #340]	@ (8004b08 <inc_lock+0x168>)
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	0013      	movs	r3, r2
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	189b      	adds	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	585a      	ldr	r2, [r3, r1]
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	2380      	movs	r3, #128	@ 0x80
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	58cb      	ldr	r3, [r1, r3]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d11c      	bne.n	8004a04 <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 80049ca:	494f      	ldr	r1, [pc, #316]	@ (8004b08 <inc_lock+0x168>)
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	0013      	movs	r3, r2
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	189b      	adds	r3, r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	18cb      	adds	r3, r1, r3
 80049d8:	3304      	adds	r3, #4
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	2382      	movs	r3, #130	@ 0x82
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	58cb      	ldr	r3, [r1, r3]
		if (Files[i].fs == dp->fs &&
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d10d      	bne.n	8004a04 <inc_lock+0x64>
			Files[i].idx == dp->index) break;
 80049e8:	4947      	ldr	r1, [pc, #284]	@ (8004b08 <inc_lock+0x168>)
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	0013      	movs	r3, r2
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	189b      	adds	r3, r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	18cb      	adds	r3, r1, r3
 80049f6:	3308      	adds	r3, #8
 80049f8:	881a      	ldrh	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4943      	ldr	r1, [pc, #268]	@ (8004b0c <inc_lock+0x16c>)
 80049fe:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d006      	beq.n	8004a12 <inc_lock+0x72>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3301      	adds	r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d9cf      	bls.n	80049b0 <inc_lock+0x10>
 8004a10:	e000      	b.n	8004a14 <inc_lock+0x74>
			Files[i].idx == dp->index) break;
 8004a12:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d145      	bne.n	8004aa6 <inc_lock+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e002      	b.n	8004a26 <inc_lock+0x86>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3301      	adds	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d808      	bhi.n	8004a3e <inc_lock+0x9e>
 8004a2c:	4936      	ldr	r1, [pc, #216]	@ (8004b08 <inc_lock+0x168>)
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	0013      	movs	r3, r2
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	189b      	adds	r3, r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	585b      	ldr	r3, [r3, r1]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d101      	bne.n	8004a48 <inc_lock+0xa8>
 8004a44:	2300      	movs	r3, #0
 8004a46:	e05a      	b.n	8004afe <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	2380      	movs	r3, #128	@ 0x80
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	58d0      	ldr	r0, [r2, r3]
 8004a50:	492d      	ldr	r1, [pc, #180]	@ (8004b08 <inc_lock+0x168>)
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	0013      	movs	r3, r2
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	189b      	adds	r3, r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	2382      	movs	r3, #130	@ 0x82
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	58d1      	ldr	r1, [r2, r3]
 8004a66:	4828      	ldr	r0, [pc, #160]	@ (8004b08 <inc_lock+0x168>)
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	0013      	movs	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	189b      	adds	r3, r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	18c3      	adds	r3, r0, r3
 8004a74:	3304      	adds	r3, #4
 8004a76:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a24      	ldr	r2, [pc, #144]	@ (8004b0c <inc_lock+0x16c>)
 8004a7c:	5a98      	ldrh	r0, [r3, r2]
 8004a7e:	4922      	ldr	r1, [pc, #136]	@ (8004b08 <inc_lock+0x168>)
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	0013      	movs	r3, r2
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	18cb      	adds	r3, r1, r3
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	1c02      	adds	r2, r0, #0
 8004a90:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004a92:	491d      	ldr	r1, [pc, #116]	@ (8004b08 <inc_lock+0x168>)
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	0013      	movs	r3, r2
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	189b      	adds	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	18cb      	adds	r3, r1, r3
 8004aa0:	330a      	adds	r3, #10
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00c      	beq.n	8004ac6 <inc_lock+0x126>
 8004aac:	4916      	ldr	r1, [pc, #88]	@ (8004b08 <inc_lock+0x168>)
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	0013      	movs	r3, r2
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	189b      	adds	r3, r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	18cb      	adds	r3, r1, r3
 8004aba:	330a      	adds	r3, #10
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <inc_lock+0x126>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e01b      	b.n	8004afe <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10b      	bne.n	8004ae4 <inc_lock+0x144>
 8004acc:	490e      	ldr	r1, [pc, #56]	@ (8004b08 <inc_lock+0x168>)
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	0013      	movs	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	189b      	adds	r3, r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	18cb      	adds	r3, r1, r3
 8004ada:	330a      	adds	r3, #10
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	e001      	b.n	8004ae8 <inc_lock+0x148>
 8004ae4:	2380      	movs	r3, #128	@ 0x80
 8004ae6:	005a      	lsls	r2, r3, #1
 8004ae8:	4807      	ldr	r0, [pc, #28]	@ (8004b08 <inc_lock+0x168>)
 8004aea:	68f9      	ldr	r1, [r7, #12]
 8004aec:	000b      	movs	r3, r1
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	185b      	adds	r3, r3, r1
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	18c3      	adds	r3, r0, r3
 8004af6:	330a      	adds	r3, #10
 8004af8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3301      	adds	r3, #1
}
 8004afe:	0018      	movs	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b004      	add	sp, #16
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	46c0      	nop			@ (mov r8, r8)
 8004b08:	20000648 	.word	0x20000648
 8004b0c:	00000206 	.word	0x00000206

08004b10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	607b      	str	r3, [r7, #4]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d83b      	bhi.n	8004b9c <dec_lock+0x8c>
		n = Files[i].ctr;
 8004b24:	240e      	movs	r4, #14
 8004b26:	1939      	adds	r1, r7, r4
 8004b28:	4822      	ldr	r0, [pc, #136]	@ (8004bb4 <dec_lock+0xa4>)
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	0013      	movs	r3, r2
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	189b      	adds	r3, r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	18c3      	adds	r3, r0, r3
 8004b36:	330a      	adds	r3, #10
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	800b      	strh	r3, [r1, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004b3c:	193b      	adds	r3, r7, r4
 8004b3e:	881a      	ldrh	r2, [r3, #0]
 8004b40:	2380      	movs	r3, #128	@ 0x80
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d102      	bne.n	8004b4e <dec_lock+0x3e>
 8004b48:	193b      	adds	r3, r7, r4
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	801a      	strh	r2, [r3, #0]
		if (n) n--;					/* Decrement read mode open count */
 8004b4e:	210e      	movs	r1, #14
 8004b50:	187b      	adds	r3, r7, r1
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d004      	beq.n	8004b62 <dec_lock+0x52>
 8004b58:	187b      	adds	r3, r7, r1
 8004b5a:	881a      	ldrh	r2, [r3, #0]
 8004b5c:	187b      	adds	r3, r7, r1
 8004b5e:	3a01      	subs	r2, #1
 8004b60:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8004b62:	4914      	ldr	r1, [pc, #80]	@ (8004bb4 <dec_lock+0xa4>)
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	0013      	movs	r3, r2
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	189b      	adds	r3, r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	18cb      	adds	r3, r1, r3
 8004b70:	330a      	adds	r3, #10
 8004b72:	210e      	movs	r1, #14
 8004b74:	187a      	adds	r2, r7, r1
 8004b76:	8812      	ldrh	r2, [r2, #0]
 8004b78:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004b7a:	187b      	adds	r3, r7, r1
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d107      	bne.n	8004b92 <dec_lock+0x82>
 8004b82:	490c      	ldr	r1, [pc, #48]	@ (8004bb4 <dec_lock+0xa4>)
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	0013      	movs	r3, r2
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	189b      	adds	r3, r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	2200      	movs	r2, #0
 8004b90:	505a      	str	r2, [r3, r1]
		res = FR_OK;
 8004b92:	230d      	movs	r3, #13
 8004b94:	18fb      	adds	r3, r7, r3
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	e003      	b.n	8004ba4 <dec_lock+0x94>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004b9c:	230d      	movs	r3, #13
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8004ba4:	230d      	movs	r3, #13
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	781b      	ldrb	r3, [r3, #0]
}
 8004baa:	0018      	movs	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b005      	add	sp, #20
 8004bb0:	bd90      	pop	{r4, r7, pc}
 8004bb2:	46c0      	nop			@ (mov r8, r8)
 8004bb4:	20000648 	.word	0x20000648

08004bb8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e014      	b.n	8004bf0 <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004bc6:	490e      	ldr	r1, [pc, #56]	@ (8004c00 <clear_lock+0x48>)
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	0013      	movs	r3, r2
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	189b      	adds	r3, r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	585b      	ldr	r3, [r3, r1]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d107      	bne.n	8004bea <clear_lock+0x32>
 8004bda:	4909      	ldr	r1, [pc, #36]	@ (8004c00 <clear_lock+0x48>)
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	0013      	movs	r3, r2
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	189b      	adds	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	2200      	movs	r2, #0
 8004be8:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3301      	adds	r3, #1
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d9e7      	bls.n	8004bc6 <clear_lock+0xe>
	}
}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	46c0      	nop			@ (mov r8, r8)
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	b004      	add	sp, #16
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20000648 	.word	0x20000648

08004c04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004c04:	b590      	push	{r4, r7, lr}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004c0c:	240f      	movs	r4, #15
 8004c0e:	193b      	adds	r3, r7, r4
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	2381      	movs	r3, #129	@ 0x81
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	5cd3      	ldrb	r3, [r2, r3]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d03d      	beq.n	8004c9c <sync_window+0x98>
		wsect = fs->winsect;	/* Current sector number */
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	238b      	movs	r3, #139	@ 0x8b
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	58d3      	ldr	r3, [r2, r3]
 8004c28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8004cac <sync_window+0xa8>)
 8004c2e:	5c98      	ldrb	r0, [r3, r2]
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	2301      	movs	r3, #1
 8004c36:	f7ff fd61 	bl	80046fc <disk_write>
 8004c3a:	1e03      	subs	r3, r0, #0
 8004c3c:	d003      	beq.n	8004c46 <sync_window+0x42>
			res = FR_DISK_ERR;
 8004c3e:	193b      	adds	r3, r7, r4
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	e02a      	b.n	8004c9c <sync_window+0x98>
		} else {
			fs->wflag = 0;
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	2381      	movs	r3, #129	@ 0x81
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	54d1      	strb	r1, [r2, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	2388      	movs	r3, #136	@ 0x88
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	58d3      	ldr	r3, [r2, r3]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	1ad2      	subs	r2, r2, r3
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	2386      	movs	r3, #134	@ 0x86
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	58cb      	ldr	r3, [r1, r3]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d219      	bcs.n	8004c9c <sync_window+0x98>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a11      	ldr	r2, [pc, #68]	@ (8004cb0 <sync_window+0xac>)
 8004c6c:	5c9b      	ldrb	r3, [r3, r2]
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	e011      	b.n	8004c96 <sync_window+0x92>
					wsect += fs->fsize;
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	2386      	movs	r3, #134	@ 0x86
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	58d3      	ldr	r3, [r2, r3]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	18d3      	adds	r3, r2, r3
 8004c7e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a0a      	ldr	r2, [pc, #40]	@ (8004cac <sync_window+0xa8>)
 8004c84:	5c98      	ldrb	r0, [r3, r2]
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f7ff fd36 	bl	80046fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d8ea      	bhi.n	8004c72 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8004c9c:	230f      	movs	r3, #15
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	781b      	ldrb	r3, [r3, #0]
}
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b007      	add	sp, #28
 8004ca8:	bd90      	pop	{r4, r7, pc}
 8004caa:	46c0      	nop			@ (mov r8, r8)
 8004cac:	00000201 	.word	0x00000201
 8004cb0:	00000203 	.word	0x00000203

08004cb4 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004cb4:	b5b0      	push	{r4, r5, r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004cbe:	240f      	movs	r4, #15
 8004cc0:	193b      	adds	r3, r7, r4
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	238b      	movs	r3, #139	@ 0x8b
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	58d3      	ldr	r3, [r2, r3]
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d021      	beq.n	8004d18 <move_window+0x64>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004cd4:	0025      	movs	r5, r4
 8004cd6:	193c      	adds	r4, r7, r4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f7ff ff92 	bl	8004c04 <sync_window>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004ce4:	002c      	movs	r4, r5
 8004ce6:	193b      	adds	r3, r7, r4
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d114      	bne.n	8004d18 <move_window+0x64>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8004d28 <move_window+0x74>)
 8004cf2:	5c98      	ldrb	r0, [r3, r2]
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f7ff fcd7 	bl	80046ac <disk_read>
 8004cfe:	1e03      	subs	r3, r0, #0
 8004d00:	d005      	beq.n	8004d0e <move_window+0x5a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004d02:	2301      	movs	r3, #1
 8004d04:	425b      	negs	r3, r3
 8004d06:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004d08:	193b      	adds	r3, r7, r4
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	238b      	movs	r3, #139	@ 0x8b
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	50d1      	str	r1, [r2, r3]
		}
	}
	return res;
 8004d18:	230f      	movs	r3, #15
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	781b      	ldrb	r3, [r3, #0]
}
 8004d1e:	0018      	movs	r0, r3
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b004      	add	sp, #16
 8004d24:	bdb0      	pop	{r4, r5, r7, pc}
 8004d26:	46c0      	nop			@ (mov r8, r8)
 8004d28:	00000201 	.word	0x00000201

08004d2c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004d2c:	b5b0      	push	{r4, r5, r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004d34:	250f      	movs	r5, #15
 8004d36:	197c      	adds	r4, r7, r5
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f7ff ff62 	bl	8004c04 <sync_window>
 8004d40:	0003      	movs	r3, r0
 8004d42:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8004d44:	197b      	adds	r3, r7, r5
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d000      	beq.n	8004d4e <sync_fs+0x22>
 8004d4c:	e0b4      	b.n	8004eb8 <sync_fs+0x18c>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	2380      	movs	r3, #128	@ 0x80
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	5cd3      	ldrb	r3, [r2, r3]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d000      	beq.n	8004d5c <sync_fs+0x30>
 8004d5a:	e09f      	b.n	8004e9c <sync_fs+0x170>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a5a      	ldr	r2, [pc, #360]	@ (8004ec8 <sync_fs+0x19c>)
 8004d60:	5c9b      	ldrb	r3, [r3, r2]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d000      	beq.n	8004d68 <sync_fs+0x3c>
 8004d66:	e099      	b.n	8004e9c <sync_fs+0x170>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2280      	movs	r2, #128	@ 0x80
 8004d6c:	0092      	lsls	r2, r2, #2
 8004d6e:	2100      	movs	r1, #0
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7ff fd30 	bl	80047d6 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	23ff      	movs	r3, #255	@ 0xff
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	2155      	movs	r1, #85	@ 0x55
 8004d7e:	54d1      	strb	r1, [r2, r3]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a52      	ldr	r2, [pc, #328]	@ (8004ecc <sync_fs+0x1a0>)
 8004d84:	21aa      	movs	r1, #170	@ 0xaa
 8004d86:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2252      	movs	r2, #82	@ 0x52
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2252      	movs	r2, #82	@ 0x52
 8004d92:	705a      	strb	r2, [r3, #1]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2261      	movs	r2, #97	@ 0x61
 8004d98:	709a      	strb	r2, [r3, #2]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2241      	movs	r2, #65	@ 0x41
 8004d9e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	23f2      	movs	r3, #242	@ 0xf2
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	2172      	movs	r1, #114	@ 0x72
 8004da8:	54d1      	strb	r1, [r2, r3]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	23e6      	movs	r3, #230	@ 0xe6
 8004dae:	33ff      	adds	r3, #255	@ 0xff
 8004db0:	2172      	movs	r1, #114	@ 0x72
 8004db2:	54d1      	strb	r1, [r2, r3]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	23f3      	movs	r3, #243	@ 0xf3
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	2141      	movs	r1, #65	@ 0x41
 8004dbc:	54d1      	strb	r1, [r2, r3]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	23e8      	movs	r3, #232	@ 0xe8
 8004dc2:	33ff      	adds	r3, #255	@ 0xff
 8004dc4:	2161      	movs	r1, #97	@ 0x61
 8004dc6:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	2384      	movs	r3, #132	@ 0x84
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	58d3      	ldr	r3, [r2, r3]
 8004dd0:	b2d9      	uxtb	r1, r3
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	23f4      	movs	r3, #244	@ 0xf4
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	54d1      	strb	r1, [r2, r3]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	2384      	movs	r3, #132	@ 0x84
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	58d3      	ldr	r3, [r2, r3]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	0a1b      	lsrs	r3, r3, #8
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	b2d9      	uxtb	r1, r3
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	23ea      	movs	r3, #234	@ 0xea
 8004dee:	33ff      	adds	r3, #255	@ 0xff
 8004df0:	54d1      	strb	r1, [r2, r3]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	2384      	movs	r3, #132	@ 0x84
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	58d3      	ldr	r3, [r2, r3]
 8004dfa:	0c1b      	lsrs	r3, r3, #16
 8004dfc:	b2d9      	uxtb	r1, r3
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	23f5      	movs	r3, #245	@ 0xf5
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	54d1      	strb	r1, [r2, r3]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	2384      	movs	r3, #132	@ 0x84
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	58d3      	ldr	r3, [r2, r3]
 8004e0e:	0e1b      	lsrs	r3, r3, #24
 8004e10:	b2d9      	uxtb	r1, r3
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	23ec      	movs	r3, #236	@ 0xec
 8004e16:	33ff      	adds	r3, #255	@ 0xff
 8004e18:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	2383      	movs	r3, #131	@ 0x83
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	58d3      	ldr	r3, [r2, r3]
 8004e22:	b2d9      	uxtb	r1, r3
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	23f6      	movs	r3, #246	@ 0xf6
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	54d1      	strb	r1, [r2, r3]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	2383      	movs	r3, #131	@ 0x83
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	58d3      	ldr	r3, [r2, r3]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	b2d9      	uxtb	r1, r3
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	23ee      	movs	r3, #238	@ 0xee
 8004e40:	33ff      	adds	r3, #255	@ 0xff
 8004e42:	54d1      	strb	r1, [r2, r3]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	2383      	movs	r3, #131	@ 0x83
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	58d3      	ldr	r3, [r2, r3]
 8004e4c:	0c1b      	lsrs	r3, r3, #16
 8004e4e:	b2d9      	uxtb	r1, r3
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	23f7      	movs	r3, #247	@ 0xf7
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	54d1      	strb	r1, [r2, r3]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	2383      	movs	r3, #131	@ 0x83
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	58d3      	ldr	r3, [r2, r3]
 8004e60:	0e1b      	lsrs	r3, r3, #24
 8004e62:	b2d9      	uxtb	r1, r3
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	23f0      	movs	r3, #240	@ 0xf0
 8004e68:	33ff      	adds	r3, #255	@ 0xff
 8004e6a:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	2387      	movs	r3, #135	@ 0x87
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	58d3      	ldr	r3, [r2, r3]
 8004e74:	1c59      	adds	r1, r3, #1
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	238b      	movs	r3, #139	@ 0x8b
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	50d1      	str	r1, [r2, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a13      	ldr	r2, [pc, #76]	@ (8004ed0 <sync_fs+0x1a4>)
 8004e82:	5c98      	ldrb	r0, [r3, r2]
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	238b      	movs	r3, #139	@ 0x8b
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	58d2      	ldr	r2, [r2, r3]
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f7ff fc34 	bl	80046fc <disk_write>
			fs->fsi_flag = 0;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec8 <sync_fs+0x19c>)
 8004e98:	2100      	movs	r1, #0
 8004e9a:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ed0 <sync_fs+0x1a4>)
 8004ea0:	5c9b      	ldrb	r3, [r3, r2]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f7ff fc50 	bl	800474c <disk_ioctl>
 8004eac:	1e03      	subs	r3, r0, #0
 8004eae:	d003      	beq.n	8004eb8 <sync_fs+0x18c>
			res = FR_DISK_ERR;
 8004eb0:	230f      	movs	r3, #15
 8004eb2:	18fb      	adds	r3, r7, r3
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8004eb8:	230f      	movs	r3, #15
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	781b      	ldrb	r3, [r3, #0]
}
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b004      	add	sp, #16
 8004ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec6:	46c0      	nop			@ (mov r8, r8)
 8004ec8:	00000205 	.word	0x00000205
 8004ecc:	000001ff 	.word	0x000001ff
 8004ed0:	00000201 	.word	0x00000201

08004ed4 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	3b02      	subs	r3, #2
 8004ee2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	2385      	movs	r3, #133	@ 0x85
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	58d3      	ldr	r3, [r2, r3]
 8004eec:	3b02      	subs	r3, #2
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d301      	bcc.n	8004ef8 <clust2sect+0x24>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e00a      	b.n	8004f0e <clust2sect+0x3a>
	return clst * fs->csize + fs->database;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a07      	ldr	r2, [pc, #28]	@ (8004f18 <clust2sect+0x44>)
 8004efc:	5c9b      	ldrb	r3, [r3, r2]
 8004efe:	001a      	movs	r2, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	435a      	muls	r2, r3
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	238a      	movs	r3, #138	@ 0x8a
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	58cb      	ldr	r3, [r1, r3]
 8004f0c:	18d3      	adds	r3, r2, r3
}
 8004f0e:	0018      	movs	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b002      	add	sp, #8
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	46c0      	nop			@ (mov r8, r8)
 8004f18:	00000202 	.word	0x00000202

08004f1c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d906      	bls.n	8004f3a <get_fat+0x1e>
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	2385      	movs	r3, #133	@ 0x85
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	58d3      	ldr	r3, [r2, r3]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d302      	bcc.n	8004f40 <get_fat+0x24>
		val = 1;	/* Internal error */
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	e0aa      	b.n	8005096 <get_fat+0x17a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004f40:	2301      	movs	r3, #1
 8004f42:	425b      	negs	r3, r3
 8004f44:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	2380      	movs	r3, #128	@ 0x80
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	5cd3      	ldrb	r3, [r2, r3]
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d100      	bne.n	8004f54 <get_fat+0x38>
 8004f52:	e06b      	b.n	800502c <get_fat+0x110>
 8004f54:	dd00      	ble.n	8004f58 <get_fat+0x3c>
 8004f56:	e094      	b.n	8005082 <get_fat+0x166>
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d002      	beq.n	8004f62 <get_fat+0x46>
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d041      	beq.n	8004fe4 <get_fat+0xc8>
 8004f60:	e08f      	b.n	8005082 <get_fat+0x166>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	085b      	lsrs	r3, r3, #1
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	18d3      	adds	r3, r2, r3
 8004f6e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	2388      	movs	r3, #136	@ 0x88
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	58d2      	ldr	r2, [r2, r3]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	0a5b      	lsrs	r3, r3, #9
 8004f7c:	18d2      	adds	r2, r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	0011      	movs	r1, r2
 8004f82:	0018      	movs	r0, r3
 8004f84:	f7ff fe96 	bl	8004cb4 <move_window>
 8004f88:	1e03      	subs	r3, r0, #0
 8004f8a:	d000      	beq.n	8004f8e <get_fat+0x72>
 8004f8c:	e07c      	b.n	8005088 <get_fat+0x16c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	60fa      	str	r2, [r7, #12]
 8004f94:	05db      	lsls	r3, r3, #23
 8004f96:	0ddb      	lsrs	r3, r3, #23
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	5cd3      	ldrb	r3, [r2, r3]
 8004f9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	2388      	movs	r3, #136	@ 0x88
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	58d2      	ldr	r2, [r2, r3]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	0a5b      	lsrs	r3, r3, #9
 8004faa:	18d2      	adds	r2, r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	0011      	movs	r1, r2
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f7ff fe7f 	bl	8004cb4 <move_window>
 8004fb6:	1e03      	subs	r3, r0, #0
 8004fb8:	d168      	bne.n	800508c <get_fat+0x170>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	05db      	lsls	r3, r3, #23
 8004fbe:	0ddb      	lsrs	r3, r3, #23
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	5cd3      	ldrb	r3, [r2, r3]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d002      	beq.n	8004fda <get_fat+0xbe>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	091b      	lsrs	r3, r3, #4
 8004fd8:	e002      	b.n	8004fe0 <get_fat+0xc4>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	051b      	lsls	r3, r3, #20
 8004fde:	0d1b      	lsrs	r3, r3, #20
 8004fe0:	617b      	str	r3, [r7, #20]
			break;
 8004fe2:	e058      	b.n	8005096 <get_fat+0x17a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	2388      	movs	r3, #136	@ 0x88
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	58d2      	ldr	r2, [r2, r3]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	0a1b      	lsrs	r3, r3, #8
 8004ff0:	18d2      	adds	r2, r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	0011      	movs	r1, r2
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f7ff fe5c 	bl	8004cb4 <move_window>
 8004ffc:	1e03      	subs	r3, r0, #0
 8004ffe:	d147      	bne.n	8005090 <get_fat+0x174>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	005a      	lsls	r2, r3, #1
 8005004:	23ff      	movs	r3, #255	@ 0xff
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	4013      	ands	r3, r2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	18d3      	adds	r3, r2, r3
 800500e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	3301      	adds	r3, #1
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	b21b      	sxth	r3, r3
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	b21a      	sxth	r2, r3
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	b21b      	sxth	r3, r3
 8005022:	4313      	orrs	r3, r2
 8005024:	b21b      	sxth	r3, r3
 8005026:	b29b      	uxth	r3, r3
 8005028:	617b      	str	r3, [r7, #20]
			break;
 800502a:	e034      	b.n	8005096 <get_fat+0x17a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	2388      	movs	r3, #136	@ 0x88
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	58d2      	ldr	r2, [r2, r3]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	09db      	lsrs	r3, r3, #7
 8005038:	18d2      	adds	r2, r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0011      	movs	r1, r2
 800503e:	0018      	movs	r0, r3
 8005040:	f7ff fe38 	bl	8004cb4 <move_window>
 8005044:	1e03      	subs	r3, r0, #0
 8005046:	d125      	bne.n	8005094 <get_fat+0x178>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	009a      	lsls	r2, r3, #2
 800504c:	23fe      	movs	r3, #254	@ 0xfe
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	4013      	ands	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	18d3      	adds	r3, r2, r3
 8005056:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	3303      	adds	r3, #3
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	061a      	lsls	r2, r3, #24
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	3302      	adds	r3, #2
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	041b      	lsls	r3, r3, #16
 8005068:	431a      	orrs	r2, r3
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	3301      	adds	r3, #1
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	4313      	orrs	r3, r2
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	7812      	ldrb	r2, [r2, #0]
 8005078:	4313      	orrs	r3, r2
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	091b      	lsrs	r3, r3, #4
 800507e:	617b      	str	r3, [r7, #20]
			break;
 8005080:	e009      	b.n	8005096 <get_fat+0x17a>

		default:
			val = 1;	/* Internal error */
 8005082:	2301      	movs	r3, #1
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	e006      	b.n	8005096 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005088:	46c0      	nop			@ (mov r8, r8)
 800508a:	e004      	b.n	8005096 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800508c:	46c0      	nop			@ (mov r8, r8)
 800508e:	e002      	b.n	8005096 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005090:	46c0      	nop			@ (mov r8, r8)
 8005092:	e000      	b.n	8005096 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005094:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 8005096:	697b      	ldr	r3, [r7, #20]
}
 8005098:	0018      	movs	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	b006      	add	sp, #24
 800509e:	bd80      	pop	{r7, pc}

080050a0 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80050a0:	b5b0      	push	{r4, r5, r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d906      	bls.n	80050c0 <put_fat+0x20>
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	2385      	movs	r3, #133	@ 0x85
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	58d3      	ldr	r3, [r2, r3]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d304      	bcc.n	80050ca <put_fat+0x2a>
		res = FR_INT_ERR;
 80050c0:	231f      	movs	r3, #31
 80050c2:	18fb      	adds	r3, r7, r3
 80050c4:	2202      	movs	r2, #2
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e111      	b.n	80052ee <put_fat+0x24e>

	} else {
		switch (fs->fs_type) {
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	2380      	movs	r3, #128	@ 0x80
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	5cd3      	ldrb	r3, [r2, r3]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d100      	bne.n	80050d8 <put_fat+0x38>
 80050d6:	e0ae      	b.n	8005236 <put_fat+0x196>
 80050d8:	dd00      	ble.n	80050dc <put_fat+0x3c>
 80050da:	e0fc      	b.n	80052d6 <put_fat+0x236>
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d003      	beq.n	80050e8 <put_fat+0x48>
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d100      	bne.n	80050e6 <put_fat+0x46>
 80050e4:	e079      	b.n	80051da <put_fat+0x13a>
 80050e6:	e0f6      	b.n	80052d6 <put_fat+0x236>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	085b      	lsrs	r3, r3, #1
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	18d3      	adds	r3, r2, r3
 80050f4:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	2388      	movs	r3, #136	@ 0x88
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	58d2      	ldr	r2, [r2, r3]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	0a5b      	lsrs	r3, r3, #9
 8005102:	18d2      	adds	r2, r2, r3
 8005104:	251f      	movs	r5, #31
 8005106:	197c      	adds	r4, r7, r5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	0011      	movs	r1, r2
 800510c:	0018      	movs	r0, r3
 800510e:	f7ff fdd1 	bl	8004cb4 <move_window>
 8005112:	0003      	movs	r3, r0
 8005114:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005116:	197b      	adds	r3, r7, r5
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d000      	beq.n	8005120 <put_fat+0x80>
 800511e:	e0df      	b.n	80052e0 <put_fat+0x240>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	617a      	str	r2, [r7, #20]
 8005126:	05db      	lsls	r3, r3, #23
 8005128:	0ddb      	lsrs	r3, r3, #23
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	18d3      	adds	r3, r2, r3
 800512e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2201      	movs	r2, #1
 8005134:	4013      	ands	r3, r2
 8005136:	d00d      	beq.n	8005154 <put_fat+0xb4>
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b25b      	sxtb	r3, r3
 800513e:	220f      	movs	r2, #15
 8005140:	4013      	ands	r3, r2
 8005142:	b25a      	sxtb	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	b25b      	sxtb	r3, r3
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	b25b      	sxtb	r3, r3
 800514c:	4313      	orrs	r3, r2
 800514e:	b25b      	sxtb	r3, r3
 8005150:	b2db      	uxtb	r3, r3
 8005152:	e001      	b.n	8005158 <put_fat+0xb8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	2381      	movs	r3, #129	@ 0x81
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	2101      	movs	r1, #1
 8005164:	54d1      	strb	r1, [r2, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	2388      	movs	r3, #136	@ 0x88
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	58d2      	ldr	r2, [r2, r3]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	0a5b      	lsrs	r3, r3, #9
 8005172:	18d2      	adds	r2, r2, r3
 8005174:	251f      	movs	r5, #31
 8005176:	197c      	adds	r4, r7, r5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	0011      	movs	r1, r2
 800517c:	0018      	movs	r0, r3
 800517e:	f7ff fd99 	bl	8004cb4 <move_window>
 8005182:	0003      	movs	r3, r0
 8005184:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005186:	197b      	adds	r3, r7, r5
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d000      	beq.n	8005190 <put_fat+0xf0>
 800518e:	e0a9      	b.n	80052e4 <put_fat+0x244>
			p = &fs->win.d8[bc % SS(fs)];
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	05db      	lsls	r3, r3, #23
 8005194:	0ddb      	lsrs	r3, r3, #23
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	18d3      	adds	r3, r2, r3
 800519a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2201      	movs	r2, #1
 80051a0:	4013      	ands	r3, r2
 80051a2:	d003      	beq.n	80051ac <put_fat+0x10c>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	091b      	lsrs	r3, r3, #4
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	e00e      	b.n	80051ca <put_fat+0x12a>
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	b25b      	sxtb	r3, r3
 80051b2:	220f      	movs	r2, #15
 80051b4:	4393      	bics	r3, r2
 80051b6:	b25a      	sxtb	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	0a1b      	lsrs	r3, r3, #8
 80051bc:	b25b      	sxtb	r3, r3
 80051be:	210f      	movs	r1, #15
 80051c0:	400b      	ands	r3, r1
 80051c2:	b25b      	sxtb	r3, r3
 80051c4:	4313      	orrs	r3, r2
 80051c6:	b25b      	sxtb	r3, r3
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	2381      	movs	r3, #129	@ 0x81
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	2101      	movs	r1, #1
 80051d6:	54d1      	strb	r1, [r2, r3]
			break;
 80051d8:	e089      	b.n	80052ee <put_fat+0x24e>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	2388      	movs	r3, #136	@ 0x88
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	58d2      	ldr	r2, [r2, r3]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	0a1b      	lsrs	r3, r3, #8
 80051e6:	18d2      	adds	r2, r2, r3
 80051e8:	251f      	movs	r5, #31
 80051ea:	197c      	adds	r4, r7, r5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	0011      	movs	r1, r2
 80051f0:	0018      	movs	r0, r3
 80051f2:	f7ff fd5f 	bl	8004cb4 <move_window>
 80051f6:	0003      	movs	r3, r0
 80051f8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80051fa:	197b      	adds	r3, r7, r5
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d172      	bne.n	80052e8 <put_fat+0x248>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	005a      	lsls	r2, r3, #1
 8005206:	23ff      	movs	r3, #255	@ 0xff
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	4013      	ands	r3, r2
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	18d3      	adds	r3, r2, r3
 8005210:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	b29b      	uxth	r3, r3
 800521e:	0a1b      	lsrs	r3, r3, #8
 8005220:	b29a      	uxth	r2, r3
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	3301      	adds	r3, #1
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	2381      	movs	r3, #129	@ 0x81
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	2101      	movs	r1, #1
 8005232:	54d1      	strb	r1, [r2, r3]
			break;
 8005234:	e05b      	b.n	80052ee <put_fat+0x24e>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	2388      	movs	r3, #136	@ 0x88
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	58d2      	ldr	r2, [r2, r3]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	09db      	lsrs	r3, r3, #7
 8005242:	18d2      	adds	r2, r2, r3
 8005244:	251f      	movs	r5, #31
 8005246:	197c      	adds	r4, r7, r5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	0011      	movs	r1, r2
 800524c:	0018      	movs	r0, r3
 800524e:	f7ff fd31 	bl	8004cb4 <move_window>
 8005252:	0003      	movs	r3, r0
 8005254:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005256:	197b      	adds	r3, r7, r5
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d146      	bne.n	80052ec <put_fat+0x24c>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	009a      	lsls	r2, r3, #2
 8005262:	23fe      	movs	r3, #254	@ 0xfe
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	4013      	ands	r3, r2
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	18d3      	adds	r3, r2, r3
 800526c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	3303      	adds	r3, #3
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	061a      	lsls	r2, r3, #24
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	3302      	adds	r3, #2
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	431a      	orrs	r2, r3
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	3301      	adds	r3, #1
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	4313      	orrs	r3, r2
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	7812      	ldrb	r2, [r2, #0]
 800528e:	4313      	orrs	r3, r2
 8005290:	0f1b      	lsrs	r3, r3, #28
 8005292:	071b      	lsls	r3, r3, #28
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	4313      	orrs	r3, r2
 8005298:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	b2da      	uxtb	r2, r3
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	3301      	adds	r3, #1
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	0c1a      	lsrs	r2, r3, #16
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	3302      	adds	r3, #2
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	0e1a      	lsrs	r2, r3, #24
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	3303      	adds	r3, #3
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	2381      	movs	r3, #129	@ 0x81
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	2101      	movs	r1, #1
 80052d2:	54d1      	strb	r1, [r2, r3]
			break;
 80052d4:	e00b      	b.n	80052ee <put_fat+0x24e>

		default :
			res = FR_INT_ERR;
 80052d6:	231f      	movs	r3, #31
 80052d8:	18fb      	adds	r3, r7, r3
 80052da:	2202      	movs	r2, #2
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	e006      	b.n	80052ee <put_fat+0x24e>
			if (res != FR_OK) break;
 80052e0:	46c0      	nop			@ (mov r8, r8)
 80052e2:	e004      	b.n	80052ee <put_fat+0x24e>
			if (res != FR_OK) break;
 80052e4:	46c0      	nop			@ (mov r8, r8)
 80052e6:	e002      	b.n	80052ee <put_fat+0x24e>
			if (res != FR_OK) break;
 80052e8:	46c0      	nop			@ (mov r8, r8)
 80052ea:	e000      	b.n	80052ee <put_fat+0x24e>
			if (res != FR_OK) break;
 80052ec:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return res;
 80052ee:	231f      	movs	r3, #31
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	781b      	ldrb	r3, [r3, #0]
}
 80052f4:	0018      	movs	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b008      	add	sp, #32
 80052fa:	bdb0      	pop	{r4, r5, r7, pc}

080052fc <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80052fc:	b5b0      	push	{r4, r5, r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d906      	bls.n	800531a <remove_chain+0x1e>
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	2385      	movs	r3, #133	@ 0x85
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	58d3      	ldr	r3, [r2, r3]
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d304      	bcc.n	8005324 <remove_chain+0x28>
		res = FR_INT_ERR;
 800531a:	230f      	movs	r3, #15
 800531c:	18fb      	adds	r3, r7, r3
 800531e:	2202      	movs	r2, #2
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	e052      	b.n	80053ca <remove_chain+0xce>

	} else {
		res = FR_OK;
 8005324:	230f      	movs	r3, #15
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	2200      	movs	r2, #0
 800532a:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800532c:	e042      	b.n	80053b4 <remove_chain+0xb8>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	0011      	movs	r1, r2
 8005334:	0018      	movs	r0, r3
 8005336:	f7ff fdf1 	bl	8004f1c <get_fat>
 800533a:	0003      	movs	r3, r0
 800533c:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d03f      	beq.n	80053c4 <remove_chain+0xc8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d104      	bne.n	8005354 <remove_chain+0x58>
 800534a:	230f      	movs	r3, #15
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	2202      	movs	r2, #2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	e03a      	b.n	80053ca <remove_chain+0xce>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	3301      	adds	r3, #1
 8005358:	d104      	bne.n	8005364 <remove_chain+0x68>
 800535a:	230f      	movs	r3, #15
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	2201      	movs	r2, #1
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	e032      	b.n	80053ca <remove_chain+0xce>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005364:	250f      	movs	r5, #15
 8005366:	197c      	adds	r4, r7, r5
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	0018      	movs	r0, r3
 8005370:	f7ff fe96 	bl	80050a0 <put_fat>
 8005374:	0003      	movs	r3, r0
 8005376:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005378:	197b      	adds	r3, r7, r5
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d123      	bne.n	80053c8 <remove_chain+0xcc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	2384      	movs	r3, #132	@ 0x84
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	58d3      	ldr	r3, [r2, r3]
 8005388:	3301      	adds	r3, #1
 800538a:	d011      	beq.n	80053b0 <remove_chain+0xb4>
				fs->free_clust++;
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	2384      	movs	r3, #132	@ 0x84
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	58d3      	ldr	r3, [r2, r3]
 8005394:	1c59      	adds	r1, r3, #1
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	2384      	movs	r3, #132	@ 0x84
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	50d1      	str	r1, [r2, r3]
				fs->fsi_flag |= 1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a0d      	ldr	r2, [pc, #52]	@ (80053d8 <remove_chain+0xdc>)
 80053a2:	5c9b      	ldrb	r3, [r3, r2]
 80053a4:	2201      	movs	r2, #1
 80053a6:	4313      	orrs	r3, r2
 80053a8:	b2d9      	uxtb	r1, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a0a      	ldr	r2, [pc, #40]	@ (80053d8 <remove_chain+0xdc>)
 80053ae:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	2385      	movs	r3, #133	@ 0x85
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	58d3      	ldr	r3, [r2, r3]
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d3b5      	bcc.n	800532e <remove_chain+0x32>
 80053c2:	e002      	b.n	80053ca <remove_chain+0xce>
			if (nxt == 0) break;				/* Empty cluster? */
 80053c4:	46c0      	nop			@ (mov r8, r8)
 80053c6:	e000      	b.n	80053ca <remove_chain+0xce>
			if (res != FR_OK) break;
 80053c8:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return res;
 80053ca:	230f      	movs	r3, #15
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	781b      	ldrb	r3, [r3, #0]
}
 80053d0:	0018      	movs	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b004      	add	sp, #16
 80053d6:	bdb0      	pop	{r4, r5, r7, pc}
 80053d8:	00000205 	.word	0x00000205

080053dc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80053dc:	b5b0      	push	{r4, r5, r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d111      	bne.n	8005410 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	2383      	movs	r3, #131	@ 0x83
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	58d3      	ldr	r3, [r2, r3]
 80053f4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d006      	beq.n	800540a <create_chain+0x2e>
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	2385      	movs	r3, #133	@ 0x85
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	58d3      	ldr	r3, [r2, r3]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	429a      	cmp	r2, r3
 8005408:	d31f      	bcc.n	800544a <create_chain+0x6e>
 800540a:	2301      	movs	r3, #1
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	e01c      	b.n	800544a <create_chain+0x6e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	0011      	movs	r1, r2
 8005416:	0018      	movs	r0, r3
 8005418:	f7ff fd80 	bl	8004f1c <get_fat>
 800541c:	0003      	movs	r3, r0
 800541e:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d801      	bhi.n	800542a <create_chain+0x4e>
 8005426:	2301      	movs	r3, #1
 8005428:	e085      	b.n	8005536 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	3301      	adds	r3, #1
 800542e:	d101      	bne.n	8005434 <create_chain+0x58>
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	e080      	b.n	8005536 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	2385      	movs	r3, #133	@ 0x85
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	58d3      	ldr	r3, [r2, r3]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	429a      	cmp	r2, r3
 8005440:	d201      	bcs.n	8005446 <create_chain+0x6a>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	e077      	b.n	8005536 <create_chain+0x15a>
		scl = clst;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	3301      	adds	r3, #1
 8005452:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	2385      	movs	r3, #133	@ 0x85
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	58d3      	ldr	r3, [r2, r3]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	429a      	cmp	r2, r3
 8005460:	d307      	bcc.n	8005472 <create_chain+0x96>
			ncl = 2;
 8005462:	2302      	movs	r3, #2
 8005464:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	429a      	cmp	r2, r3
 800546c:	d901      	bls.n	8005472 <create_chain+0x96>
 800546e:	2300      	movs	r3, #0
 8005470:	e061      	b.n	8005536 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	0011      	movs	r1, r2
 8005478:	0018      	movs	r0, r3
 800547a:	f7ff fd4f 	bl	8004f1c <get_fat>
 800547e:	0003      	movs	r3, r0
 8005480:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00d      	beq.n	80054a4 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	3301      	adds	r3, #1
 800548c:	d002      	beq.n	8005494 <create_chain+0xb8>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <create_chain+0xbc>
			return cs;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	e04e      	b.n	8005536 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	429a      	cmp	r2, r3
 800549e:	d1d6      	bne.n	800544e <create_chain+0x72>
 80054a0:	2300      	movs	r3, #0
 80054a2:	e048      	b.n	8005536 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 80054a4:	46c0      	nop			@ (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80054a6:	250f      	movs	r5, #15
 80054a8:	197c      	adds	r4, r7, r5
 80054aa:	4a25      	ldr	r2, [pc, #148]	@ (8005540 <create_chain+0x164>)
 80054ac:	6979      	ldr	r1, [r7, #20]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	0018      	movs	r0, r3
 80054b2:	f7ff fdf5 	bl	80050a0 <put_fat>
 80054b6:	0003      	movs	r3, r0
 80054b8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 80054ba:	197b      	adds	r3, r7, r5
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10b      	bne.n	80054da <create_chain+0xfe>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <create_chain+0xfe>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80054c8:	197c      	adds	r4, r7, r5
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	0018      	movs	r0, r3
 80054d2:	f7ff fde5 	bl	80050a0 <put_fat>
 80054d6:	0003      	movs	r3, r0
 80054d8:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 80054da:	230f      	movs	r3, #15
 80054dc:	18fb      	adds	r3, r7, r3
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d11d      	bne.n	8005520 <create_chain+0x144>
		fs->last_clust = ncl;			/* Update FSINFO */
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	2383      	movs	r3, #131	@ 0x83
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	6979      	ldr	r1, [r7, #20]
 80054ec:	50d1      	str	r1, [r2, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	2384      	movs	r3, #132	@ 0x84
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	58d3      	ldr	r3, [r2, r3]
 80054f6:	3301      	adds	r3, #1
 80054f8:	d01c      	beq.n	8005534 <create_chain+0x158>
			fs->free_clust--;
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	2384      	movs	r3, #132	@ 0x84
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	58d3      	ldr	r3, [r2, r3]
 8005502:	1e59      	subs	r1, r3, #1
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	2384      	movs	r3, #132	@ 0x84
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a0d      	ldr	r2, [pc, #52]	@ (8005544 <create_chain+0x168>)
 8005510:	5c9b      	ldrb	r3, [r3, r2]
 8005512:	2201      	movs	r2, #1
 8005514:	4313      	orrs	r3, r2
 8005516:	b2d9      	uxtb	r1, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a0a      	ldr	r2, [pc, #40]	@ (8005544 <create_chain+0x168>)
 800551c:	5499      	strb	r1, [r3, r2]
 800551e:	e009      	b.n	8005534 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005520:	230f      	movs	r3, #15
 8005522:	18fb      	adds	r3, r7, r3
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d102      	bne.n	8005530 <create_chain+0x154>
 800552a:	2301      	movs	r3, #1
 800552c:	425b      	negs	r3, r3
 800552e:	e000      	b.n	8005532 <create_chain+0x156>
 8005530:	2301      	movs	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005534:	697b      	ldr	r3, [r7, #20]
}
 8005536:	0018      	movs	r0, r3
 8005538:	46bd      	mov	sp, r7
 800553a:	b006      	add	sp, #24
 800553c:	bdb0      	pop	{r4, r5, r7, pc}
 800553e:	46c0      	nop			@ (mov r8, r8)
 8005540:	0fffffff 	.word	0x0fffffff
 8005544:	00000205 	.word	0x00000205

08005548 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	2389      	movs	r3, #137	@ 0x89
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	58d3      	ldr	r3, [r2, r3]
 800555a:	3304      	adds	r3, #4
 800555c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	0a58      	lsrs	r0, r3, #9
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	2380      	movs	r3, #128	@ 0x80
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	58d3      	ldr	r3, [r2, r3]
 800556a:	4a13      	ldr	r2, [pc, #76]	@ (80055b8 <clmt_clust+0x70>)
 800556c:	5c9b      	ldrb	r3, [r3, r2]
 800556e:	0019      	movs	r1, r3
 8005570:	f7fa fde6 	bl	8000140 <__udivsi3>
 8005574:	0003      	movs	r3, r0
 8005576:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1d1a      	adds	r2, r3, #4
 800557c:	613a      	str	r2, [r7, #16]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <clmt_clust+0x44>
 8005588:	2300      	movs	r3, #0
 800558a:	e010      	b.n	80055ae <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	429a      	cmp	r2, r3
 8005592:	d307      	bcc.n	80055a4 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	3304      	adds	r3, #4
 80055a0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80055a2:	e7e9      	b.n	8005578 <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 80055a4:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	18d3      	adds	r3, r2, r3
}
 80055ae:	0018      	movs	r0, r3
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b006      	add	sp, #24
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	46c0      	nop			@ (mov r8, r8)
 80055b8:	00000202 	.word	0x00000202

080055bc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	b299      	uxth	r1, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a51      	ldr	r2, [pc, #324]	@ (8005714 <dir_sdi+0x158>)
 80055ce:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	2382      	movs	r3, #130	@ 0x82
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	58d3      	ldr	r3, [r2, r3]
 80055d8:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d009      	beq.n	80055f4 <dir_sdi+0x38>
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	2380      	movs	r3, #128	@ 0x80
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	58d2      	ldr	r2, [r2, r3]
 80055e8:	2385      	movs	r3, #133	@ 0x85
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	58d3      	ldr	r3, [r2, r3]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d301      	bcc.n	80055f8 <dir_sdi+0x3c>
		return FR_INT_ERR;
 80055f4:	2302      	movs	r3, #2
 80055f6:	e088      	b.n	800570a <dir_sdi+0x14e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d110      	bne.n	8005620 <dir_sdi+0x64>
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	2380      	movs	r3, #128	@ 0x80
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	58d2      	ldr	r2, [r2, r3]
 8005606:	2380      	movs	r3, #128	@ 0x80
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	5cd3      	ldrb	r3, [r2, r3]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d107      	bne.n	8005620 <dir_sdi+0x64>
		clst = dp->fs->dirbase;
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	2380      	movs	r3, #128	@ 0x80
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	58d2      	ldr	r2, [r2, r3]
 8005618:	2389      	movs	r3, #137	@ 0x89
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	58d3      	ldr	r3, [r2, r3]
 800561e:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d115      	bne.n	8005652 <dir_sdi+0x96>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	2380      	movs	r3, #128	@ 0x80
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	58d2      	ldr	r2, [r2, r3]
 800562e:	2382      	movs	r3, #130	@ 0x82
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	5ad3      	ldrh	r3, [r2, r3]
 8005634:	001a      	movs	r2, r3
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	4293      	cmp	r3, r2
 800563a:	d301      	bcc.n	8005640 <dir_sdi+0x84>
			return FR_INT_ERR;
 800563c:	2302      	movs	r3, #2
 800563e:	e064      	b.n	800570a <dir_sdi+0x14e>
		sect = dp->fs->dirbase;
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	2380      	movs	r3, #128	@ 0x80
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	58d2      	ldr	r2, [r2, r3]
 8005648:	2389      	movs	r3, #137	@ 0x89
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	58d3      	ldr	r3, [r2, r3]
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	e03a      	b.n	80056c8 <dir_sdi+0x10c>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	2380      	movs	r3, #128	@ 0x80
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	58d3      	ldr	r3, [r2, r3]
 800565a:	4a2f      	ldr	r2, [pc, #188]	@ (8005718 <dir_sdi+0x15c>)
 800565c:	5c9b      	ldrb	r3, [r3, r2]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005662:	e022      	b.n	80056aa <dir_sdi+0xee>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	2380      	movs	r3, #128	@ 0x80
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	58d3      	ldr	r3, [r2, r3]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	0011      	movs	r1, r2
 8005670:	0018      	movs	r0, r3
 8005672:	f7ff fc53 	bl	8004f1c <get_fat>
 8005676:	0003      	movs	r3, r0
 8005678:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	3301      	adds	r3, #1
 800567e:	d101      	bne.n	8005684 <dir_sdi+0xc8>
 8005680:	2301      	movs	r3, #1
 8005682:	e042      	b.n	800570a <dir_sdi+0x14e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d909      	bls.n	800569e <dir_sdi+0xe2>
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	2380      	movs	r3, #128	@ 0x80
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	58d2      	ldr	r2, [r2, r3]
 8005692:	2385      	movs	r3, #133	@ 0x85
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	58d3      	ldr	r3, [r2, r3]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	429a      	cmp	r2, r3
 800569c:	d301      	bcc.n	80056a2 <dir_sdi+0xe6>
				return FR_INT_ERR;
 800569e:	2302      	movs	r3, #2
 80056a0:	e033      	b.n	800570a <dir_sdi+0x14e>
			idx -= ic;
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d2d8      	bcs.n	8005664 <dir_sdi+0xa8>
		}
		sect = clust2sect(dp->fs, clst);
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	2380      	movs	r3, #128	@ 0x80
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	58d3      	ldr	r3, [r2, r3]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	0011      	movs	r1, r2
 80056be:	0018      	movs	r0, r3
 80056c0:	f7ff fc08 	bl	8004ed4 <clust2sect>
 80056c4:	0003      	movs	r3, r0
 80056c6:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	2383      	movs	r3, #131	@ 0x83
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	6979      	ldr	r1, [r7, #20]
 80056d0:	50d1      	str	r1, [r2, r3]
	if (!sect) return FR_INT_ERR;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <dir_sdi+0x120>
 80056d8:	2302      	movs	r3, #2
 80056da:	e016      	b.n	800570a <dir_sdi+0x14e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	091a      	lsrs	r2, r3, #4
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	18d1      	adds	r1, r2, r3
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	2384      	movs	r3, #132	@ 0x84
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	50d1      	str	r1, [r2, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	2380      	movs	r3, #128	@ 0x80
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	58d3      	ldr	r3, [r2, r3]
 80056f4:	0019      	movs	r1, r3
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	220f      	movs	r2, #15
 80056fa:	4013      	ands	r3, r2
 80056fc:	015b      	lsls	r3, r3, #5
 80056fe:	18c9      	adds	r1, r1, r3
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	2385      	movs	r3, #133	@ 0x85
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	0018      	movs	r0, r3
 800570c:	46bd      	mov	sp, r7
 800570e:	b006      	add	sp, #24
 8005710:	bd80      	pop	{r7, pc}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	00000206 	.word	0x00000206
 8005718:	00000202 	.word	0x00000202

0800571c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800571c:	b590      	push	{r4, r7, lr}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a87      	ldr	r2, [pc, #540]	@ (8005948 <dir_next+0x22c>)
 800572a:	5a9b      	ldrh	r3, [r3, r2]
 800572c:	3301      	adds	r3, #1
 800572e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	041b      	lsls	r3, r3, #16
 8005734:	0c1b      	lsrs	r3, r3, #16
 8005736:	d005      	beq.n	8005744 <dir_next+0x28>
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	2384      	movs	r3, #132	@ 0x84
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	58d3      	ldr	r3, [r2, r3]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <dir_next+0x2c>
		return FR_NO_FILE;
 8005744:	2304      	movs	r3, #4
 8005746:	e0fb      	b.n	8005940 <dir_next+0x224>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	220f      	movs	r2, #15
 800574c:	4013      	ands	r3, r2
 800574e:	d000      	beq.n	8005752 <dir_next+0x36>
 8005750:	e0e2      	b.n	8005918 <dir_next+0x1fc>
		dp->sect++;					/* Next sector */
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	2384      	movs	r3, #132	@ 0x84
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	58d3      	ldr	r3, [r2, r3]
 800575a:	1c59      	adds	r1, r3, #1
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	2384      	movs	r3, #132	@ 0x84
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	50d1      	str	r1, [r2, r3]

		if (!dp->clust) {		/* Static table */
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	2383      	movs	r3, #131	@ 0x83
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	58d3      	ldr	r3, [r2, r3]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10d      	bne.n	800578c <dir_next+0x70>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	2380      	movs	r3, #128	@ 0x80
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	58d2      	ldr	r2, [r2, r3]
 8005778:	2382      	movs	r3, #130	@ 0x82
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	5ad3      	ldrh	r3, [r2, r3]
 800577e:	001a      	movs	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4293      	cmp	r3, r2
 8005784:	d200      	bcs.n	8005788 <dir_next+0x6c>
 8005786:	e0c7      	b.n	8005918 <dir_next+0x1fc>
				return FR_NO_FILE;
 8005788:	2304      	movs	r3, #4
 800578a:	e0d9      	b.n	8005940 <dir_next+0x224>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	091b      	lsrs	r3, r3, #4
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	2280      	movs	r2, #128	@ 0x80
 8005794:	0092      	lsls	r2, r2, #2
 8005796:	588a      	ldr	r2, [r1, r2]
 8005798:	496c      	ldr	r1, [pc, #432]	@ (800594c <dir_next+0x230>)
 800579a:	5c52      	ldrb	r2, [r2, r1]
 800579c:	3a01      	subs	r2, #1
 800579e:	4013      	ands	r3, r2
 80057a0:	d000      	beq.n	80057a4 <dir_next+0x88>
 80057a2:	e0b9      	b.n	8005918 <dir_next+0x1fc>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	2380      	movs	r3, #128	@ 0x80
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	58d0      	ldr	r0, [r2, r3]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	2383      	movs	r3, #131	@ 0x83
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	58d3      	ldr	r3, [r2, r3]
 80057b4:	0019      	movs	r1, r3
 80057b6:	f7ff fbb1 	bl	8004f1c <get_fat>
 80057ba:	0003      	movs	r3, r0
 80057bc:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d801      	bhi.n	80057c8 <dir_next+0xac>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e0bb      	b.n	8005940 <dir_next+0x224>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	3301      	adds	r3, #1
 80057cc:	d101      	bne.n	80057d2 <dir_next+0xb6>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e0b6      	b.n	8005940 <dir_next+0x224>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	2380      	movs	r3, #128	@ 0x80
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	58d2      	ldr	r2, [r2, r3]
 80057da:	2385      	movs	r3, #133	@ 0x85
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	58d3      	ldr	r3, [r2, r3]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d200      	bcs.n	80057e8 <dir_next+0xcc>
 80057e6:	e084      	b.n	80058f2 <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <dir_next+0xd6>
 80057ee:	2304      	movs	r3, #4
 80057f0:	e0a6      	b.n	8005940 <dir_next+0x224>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	2380      	movs	r3, #128	@ 0x80
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	58d0      	ldr	r0, [r2, r3]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	2383      	movs	r3, #131	@ 0x83
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	58d3      	ldr	r3, [r2, r3]
 8005802:	0019      	movs	r1, r3
 8005804:	f7ff fdea 	bl	80053dc <create_chain>
 8005808:	0003      	movs	r3, r0
 800580a:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <dir_next+0xfa>
 8005812:	2307      	movs	r3, #7
 8005814:	e094      	b.n	8005940 <dir_next+0x224>
					if (clst == 1) return FR_INT_ERR;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <dir_next+0x104>
 800581c:	2302      	movs	r3, #2
 800581e:	e08f      	b.n	8005940 <dir_next+0x224>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	3301      	adds	r3, #1
 8005824:	d101      	bne.n	800582a <dir_next+0x10e>
 8005826:	2301      	movs	r3, #1
 8005828:	e08a      	b.n	8005940 <dir_next+0x224>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	2380      	movs	r3, #128	@ 0x80
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	58d3      	ldr	r3, [r2, r3]
 8005832:	0018      	movs	r0, r3
 8005834:	f7ff f9e6 	bl	8004c04 <sync_window>
 8005838:	1e03      	subs	r3, r0, #0
 800583a:	d001      	beq.n	8005840 <dir_next+0x124>
 800583c:	2301      	movs	r3, #1
 800583e:	e07f      	b.n	8005940 <dir_next+0x224>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	2380      	movs	r3, #128	@ 0x80
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	58d3      	ldr	r3, [r2, r3]
 8005848:	0018      	movs	r0, r3
 800584a:	2380      	movs	r3, #128	@ 0x80
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	001a      	movs	r2, r3
 8005850:	2100      	movs	r1, #0
 8005852:	f7fe ffc0 	bl	80047d6 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	2380      	movs	r3, #128	@ 0x80
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	58d0      	ldr	r0, [r2, r3]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	2380      	movs	r3, #128	@ 0x80
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	58d4      	ldr	r4, [r2, r3]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	0019      	movs	r1, r3
 800586a:	f7ff fb33 	bl	8004ed4 <clust2sect>
 800586e:	0002      	movs	r2, r0
 8005870:	238b      	movs	r3, #139	@ 0x8b
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	50e2      	str	r2, [r4, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005876:	2300      	movs	r3, #0
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	e020      	b.n	80058be <dir_next+0x1a2>
						dp->fs->wflag = 1;
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	2380      	movs	r3, #128	@ 0x80
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	58d2      	ldr	r2, [r2, r3]
 8005884:	2381      	movs	r3, #129	@ 0x81
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	2101      	movs	r1, #1
 800588a:	54d1      	strb	r1, [r2, r3]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	2380      	movs	r3, #128	@ 0x80
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	58d3      	ldr	r3, [r2, r3]
 8005894:	0018      	movs	r0, r3
 8005896:	f7ff f9b5 	bl	8004c04 <sync_window>
 800589a:	1e03      	subs	r3, r0, #0
 800589c:	d001      	beq.n	80058a2 <dir_next+0x186>
 800589e:	2301      	movs	r3, #1
 80058a0:	e04e      	b.n	8005940 <dir_next+0x224>
						dp->fs->winsect++;
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	2380      	movs	r3, #128	@ 0x80
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	58d3      	ldr	r3, [r2, r3]
 80058aa:	228b      	movs	r2, #139	@ 0x8b
 80058ac:	0092      	lsls	r2, r2, #2
 80058ae:	589a      	ldr	r2, [r3, r2]
 80058b0:	1c51      	adds	r1, r2, #1
 80058b2:	228b      	movs	r2, #139	@ 0x8b
 80058b4:	0092      	lsls	r2, r2, #2
 80058b6:	5099      	str	r1, [r3, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	3301      	adds	r3, #1
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	2380      	movs	r3, #128	@ 0x80
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	58d3      	ldr	r3, [r2, r3]
 80058c6:	4a21      	ldr	r2, [pc, #132]	@ (800594c <dir_next+0x230>)
 80058c8:	5c9b      	ldrb	r3, [r3, r2]
 80058ca:	001a      	movs	r2, r3
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d3d4      	bcc.n	800587c <dir_next+0x160>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	2380      	movs	r3, #128	@ 0x80
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	58d2      	ldr	r2, [r2, r3]
 80058da:	238b      	movs	r3, #139	@ 0x8b
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	58d1      	ldr	r1, [r2, r3]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	2380      	movs	r3, #128	@ 0x80
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	58d2      	ldr	r2, [r2, r3]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ac9      	subs	r1, r1, r3
 80058ec:	238b      	movs	r3, #139	@ 0x8b
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	50d1      	str	r1, [r2, r3]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	2383      	movs	r3, #131	@ 0x83
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	6979      	ldr	r1, [r7, #20]
 80058fa:	50d1      	str	r1, [r2, r3]
				dp->sect = clust2sect(dp->fs, clst);
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	2380      	movs	r3, #128	@ 0x80
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	58d3      	ldr	r3, [r2, r3]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	0011      	movs	r1, r2
 8005908:	0018      	movs	r0, r3
 800590a:	f7ff fae3 	bl	8004ed4 <clust2sect>
 800590e:	0001      	movs	r1, r0
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	2384      	movs	r3, #132	@ 0x84
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	50d1      	str	r1, [r2, r3]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	b299      	uxth	r1, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a0a      	ldr	r2, [pc, #40]	@ (8005948 <dir_next+0x22c>)
 8005920:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	2380      	movs	r3, #128	@ 0x80
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	58d3      	ldr	r3, [r2, r3]
 800592a:	0019      	movs	r1, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	220f      	movs	r2, #15
 8005930:	4013      	ands	r3, r2
 8005932:	015b      	lsls	r3, r3, #5
 8005934:	18c9      	adds	r1, r1, r3
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	2385      	movs	r3, #133	@ 0x85
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	0018      	movs	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	b007      	add	sp, #28
 8005946:	bd90      	pop	{r4, r7, pc}
 8005948:	00000206 	.word	0x00000206
 800594c:	00000202 	.word	0x00000202

08005950 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005950:	b5b0      	push	{r4, r5, r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800595a:	250f      	movs	r5, #15
 800595c:	197c      	adds	r4, r7, r5
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2100      	movs	r1, #0
 8005962:	0018      	movs	r0, r3
 8005964:	f7ff fe2a 	bl	80055bc <dir_sdi>
 8005968:	0003      	movs	r3, r0
 800596a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800596c:	197b      	adds	r3, r7, r5
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d13b      	bne.n	80059ec <dir_alloc+0x9c>
		n = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	2380      	movs	r3, #128	@ 0x80
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	58d0      	ldr	r0, [r2, r3]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	2384      	movs	r3, #132	@ 0x84
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	58d3      	ldr	r3, [r2, r3]
 8005988:	250f      	movs	r5, #15
 800598a:	197c      	adds	r4, r7, r5
 800598c:	0019      	movs	r1, r3
 800598e:	f7ff f991 	bl	8004cb4 <move_window>
 8005992:	0003      	movs	r3, r0
 8005994:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005996:	197b      	adds	r3, r7, r5
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d125      	bne.n	80059ea <dir_alloc+0x9a>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	2385      	movs	r3, #133	@ 0x85
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	58d3      	ldr	r3, [r2, r3]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2be5      	cmp	r3, #229	@ 0xe5
 80059aa:	d006      	beq.n	80059ba <dir_alloc+0x6a>
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	2385      	movs	r3, #133	@ 0x85
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	58d3      	ldr	r3, [r2, r3]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d107      	bne.n	80059ca <dir_alloc+0x7a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	3301      	adds	r3, #1
 80059be:	60bb      	str	r3, [r7, #8]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d102      	bne.n	80059ce <dir_alloc+0x7e>
 80059c8:	e010      	b.n	80059ec <dir_alloc+0x9c>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80059ca:	2300      	movs	r3, #0
 80059cc:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80059ce:	250f      	movs	r5, #15
 80059d0:	197c      	adds	r4, r7, r5
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2101      	movs	r1, #1
 80059d6:	0018      	movs	r0, r3
 80059d8:	f7ff fea0 	bl	800571c <dir_next>
 80059dc:	0003      	movs	r3, r0
 80059de:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 80059e0:	197b      	adds	r3, r7, r5
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0c7      	beq.n	8005978 <dir_alloc+0x28>
 80059e8:	e000      	b.n	80059ec <dir_alloc+0x9c>
			if (res != FR_OK) break;
 80059ea:	46c0      	nop			@ (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80059ec:	220f      	movs	r2, #15
 80059ee:	18bb      	adds	r3, r7, r2
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d102      	bne.n	80059fc <dir_alloc+0xac>
 80059f6:	18bb      	adds	r3, r7, r2
 80059f8:	2207      	movs	r2, #7
 80059fa:	701a      	strb	r2, [r3, #0]
	return res;
 80059fc:	230f      	movs	r3, #15
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	781b      	ldrb	r3, [r3, #0]
}
 8005a02:	0018      	movs	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	b004      	add	sp, #16
 8005a08:	bdb0      	pop	{r4, r5, r7, pc}

08005a0a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	331b      	adds	r3, #27
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	b21b      	sxth	r3, r3
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	b21a      	sxth	r2, r3
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	331a      	adds	r3, #26
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	b21b      	sxth	r3, r3
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	b21b      	sxth	r3, r3
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	2380      	movs	r3, #128	@ 0x80
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	5cd3      	ldrb	r3, [r2, r3]
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d110      	bne.n	8005a5e <ld_clust+0x54>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	3315      	adds	r3, #21
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	b21b      	sxth	r3, r3
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	b21a      	sxth	r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	3314      	adds	r3, #20
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	b21b      	sxth	r3, r3
 8005a50:	4313      	orrs	r3, r2
 8005a52:	b21b      	sxth	r3, r3
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	041b      	lsls	r3, r3, #16
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

	return cl;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
}
 8005a60:	0018      	movs	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b004      	add	sp, #16
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	331a      	adds	r3, #26
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	0a1b      	lsrs	r3, r3, #8
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	331b      	adds	r3, #27
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	0c1a      	lsrs	r2, r3, #16
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3314      	adds	r3, #20
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	0c1b      	lsrs	r3, r3, #16
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	0a1b      	lsrs	r3, r3, #8
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3315      	adds	r3, #21
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
}
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	46bd      	mov	sp, r7
 8005aae:	b002      	add	sp, #8
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8005ab4:	b5b0      	push	{r4, r5, r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	2340      	movs	r3, #64	@ 0x40
 8005ac6:	439a      	bics	r2, r3
 8005ac8:	0013      	movs	r3, r2
 8005aca:	1e5a      	subs	r2, r3, #1
 8005acc:	0013      	movs	r3, r2
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	189b      	adds	r3, r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	189b      	adds	r3, r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	230e      	movs	r3, #14
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8005ae4:	4a30      	ldr	r2, [pc, #192]	@ (8005ba8 <cmp_lfn+0xf4>)
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	18d3      	adds	r3, r2, r3
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	18d3      	adds	r3, r2, r3
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	b21b      	sxth	r3, r3
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	b21a      	sxth	r2, r3
 8005afa:	492b      	ldr	r1, [pc, #172]	@ (8005ba8 <cmp_lfn+0xf4>)
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	18cb      	adds	r3, r1, r3
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	0019      	movs	r1, r3
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	185b      	adds	r3, r3, r1
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	b21b      	sxth	r3, r3
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	b21a      	sxth	r2, r3
 8005b10:	210c      	movs	r1, #12
 8005b12:	187b      	adds	r3, r7, r1
 8005b14:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last character has not been processed */
 8005b16:	250e      	movs	r5, #14
 8005b18:	197b      	adds	r3, r7, r5
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01c      	beq.n	8005b5a <cmp_lfn+0xa6>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8005b20:	197c      	adds	r4, r7, r5
 8005b22:	187b      	adds	r3, r7, r1
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	0018      	movs	r0, r3
 8005b28:	f003 fa72 	bl	8009010 <ff_wtoupper>
 8005b2c:	0003      	movs	r3, r0
 8005b2e:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2bfe      	cmp	r3, #254	@ 0xfe
 8005b34:	d80f      	bhi.n	8005b56 <cmp_lfn+0xa2>
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	617a      	str	r2, [r7, #20]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	18d3      	adds	r3, r2, r3
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	0018      	movs	r0, r3
 8005b46:	f003 fa63 	bl	8009010 <ff_wtoupper>
 8005b4a:	0003      	movs	r3, r0
 8005b4c:	001a      	movs	r2, r3
 8005b4e:	197b      	adds	r3, r7, r5
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d009      	beq.n	8005b6a <cmp_lfn+0xb6>
				return 0;				/* Not matched */
 8005b56:	2300      	movs	r3, #0
 8005b58:	e022      	b.n	8005ba0 <cmp_lfn+0xec>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005b5a:	230c      	movs	r3, #12
 8005b5c:	18fb      	adds	r3, r7, r3
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	4a12      	ldr	r2, [pc, #72]	@ (8005bac <cmp_lfn+0xf8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d001      	beq.n	8005b6a <cmp_lfn+0xb6>
 8005b66:	2300      	movs	r3, #0
 8005b68:	e01a      	b.n	8005ba0 <cmp_lfn+0xec>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b0c      	cmp	r3, #12
 8005b74:	d9b6      	bls.n	8005ae4 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	001a      	movs	r2, r3
 8005b7c:	2340      	movs	r3, #64	@ 0x40
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d00d      	beq.n	8005b9e <cmp_lfn+0xea>
 8005b82:	230e      	movs	r3, #14
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <cmp_lfn+0xea>
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	18d3      	adds	r3, r2, r3
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <cmp_lfn+0xea>
		return 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e000      	b.n	8005ba0 <cmp_lfn+0xec>

	return 1;						/* The part of LFN matched */
 8005b9e:	2301      	movs	r3, #1
}
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b006      	add	sp, #24
 8005ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ba8:	0800a9ec 	.word	0x0800a9ec
 8005bac:	0000ffff 	.word	0x0000ffff

08005bb0 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	001a      	movs	r2, r3
 8005bc0:	233f      	movs	r3, #63	@ 0x3f
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	1e5a      	subs	r2, r3, #1
 8005bc6:	0013      	movs	r3, r2
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	189b      	adds	r3, r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	189b      	adds	r3, r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	613b      	str	r3, [r7, #16]
 8005bd6:	230e      	movs	r3, #14
 8005bd8:	18fb      	adds	r3, r7, r3
 8005bda:	2201      	movs	r2, #1
 8005bdc:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 8005bde:	4a2b      	ldr	r2, [pc, #172]	@ (8005c8c <pick_lfn+0xdc>)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	18d3      	adds	r3, r2, r3
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	3301      	adds	r3, #1
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	18d3      	adds	r3, r2, r3
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	b21b      	sxth	r3, r3
 8005bf0:	021b      	lsls	r3, r3, #8
 8005bf2:	b21a      	sxth	r2, r3
 8005bf4:	4925      	ldr	r1, [pc, #148]	@ (8005c8c <pick_lfn+0xdc>)
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	18cb      	adds	r3, r1, r3
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	0019      	movs	r1, r3
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	185b      	adds	r3, r3, r1
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	b21b      	sxth	r3, r3
 8005c06:	4313      	orrs	r3, r2
 8005c08:	b21a      	sxth	r2, r3
 8005c0a:	230c      	movs	r3, #12
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last character has not been processed */
 8005c10:	230e      	movs	r3, #14
 8005c12:	18fb      	adds	r3, r7, r3
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d014      	beq.n	8005c44 <pick_lfn+0x94>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2bfe      	cmp	r3, #254	@ 0xfe
 8005c1e:	d901      	bls.n	8005c24 <pick_lfn+0x74>
 8005c20:	2300      	movs	r3, #0
 8005c22:	e02f      	b.n	8005c84 <pick_lfn+0xd4>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005c24:	210e      	movs	r1, #14
 8005c26:	187b      	adds	r3, r7, r1
 8005c28:	220c      	movs	r2, #12
 8005c2a:	18ba      	adds	r2, r7, r2
 8005c2c:	8812      	ldrh	r2, [r2, #0]
 8005c2e:	801a      	strh	r2, [r3, #0]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	617a      	str	r2, [r7, #20]
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	18d3      	adds	r3, r2, r3
 8005c3c:	187a      	adds	r2, r7, r1
 8005c3e:	8812      	ldrh	r2, [r2, #0]
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	e007      	b.n	8005c54 <pick_lfn+0xa4>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005c44:	230c      	movs	r3, #12
 8005c46:	18fb      	adds	r3, r7, r3
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	4a11      	ldr	r2, [pc, #68]	@ (8005c90 <pick_lfn+0xe0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d001      	beq.n	8005c54 <pick_lfn+0xa4>
 8005c50:	2300      	movs	r3, #0
 8005c52:	e017      	b.n	8005c84 <pick_lfn+0xd4>
		}
	} while (++s < 13);						/* Read all character in the entry */
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	3301      	adds	r3, #1
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b0c      	cmp	r3, #12
 8005c5e:	d9be      	bls.n	8005bde <pick_lfn+0x2e>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	001a      	movs	r2, r3
 8005c66:	2340      	movs	r3, #64	@ 0x40
 8005c68:	4013      	ands	r3, r2
 8005c6a:	d00a      	beq.n	8005c82 <pick_lfn+0xd2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2bfe      	cmp	r3, #254	@ 0xfe
 8005c70:	d901      	bls.n	8005c76 <pick_lfn+0xc6>
 8005c72:	2300      	movs	r3, #0
 8005c74:	e006      	b.n	8005c84 <pick_lfn+0xd4>
		lfnbuf[i] = 0;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	18d3      	adds	r3, r2, r3
 8005c7e:	2200      	movs	r2, #0
 8005c80:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 8005c82:	2301      	movs	r3, #1
}
 8005c84:	0018      	movs	r0, r3
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b006      	add	sp, #24
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	0800a9ec 	.word	0x0800a9ec
 8005c90:	0000ffff 	.word	0x0000ffff

08005c94 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	0019      	movs	r1, r3
 8005ca0:	1dfb      	adds	r3, r7, #7
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	1dbb      	adds	r3, r7, #6
 8005ca6:	1c0a      	adds	r2, r1, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	330d      	adds	r3, #13
 8005cae:	1dba      	adds	r2, r7, #6
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	330b      	adds	r3, #11
 8005cb8:	220f      	movs	r2, #15
 8005cba:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	331a      	adds	r3, #26
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	331b      	adds	r3, #27
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005cd4:	1dfb      	adds	r3, r7, #7
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	1e5a      	subs	r2, r3, #1
 8005cda:	0013      	movs	r3, r2
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	189b      	adds	r3, r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	189b      	adds	r3, r3, r2
 8005ce4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005ce6:	2316      	movs	r3, #22
 8005ce8:	18fb      	adds	r3, r7, r3
 8005cea:	2200      	movs	r2, #0
 8005cec:	801a      	strh	r2, [r3, #0]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005cf2:	2116      	movs	r1, #22
 8005cf4:	187b      	adds	r3, r7, r1
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	4a26      	ldr	r2, [pc, #152]	@ (8005d94 <fit_lfn+0x100>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d008      	beq.n	8005d10 <fit_lfn+0x7c>
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	61fa      	str	r2, [r7, #28]
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	18d2      	adds	r2, r2, r3
 8005d0a:	187b      	adds	r3, r7, r1
 8005d0c:	8812      	ldrh	r2, [r2, #0]
 8005d0e:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005d10:	4a21      	ldr	r2, [pc, #132]	@ (8005d98 <fit_lfn+0x104>)
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	18d3      	adds	r3, r2, r3
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	001a      	movs	r2, r3
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	189b      	adds	r3, r3, r2
 8005d1e:	2016      	movs	r0, #22
 8005d20:	183a      	adds	r2, r7, r0
 8005d22:	8812      	ldrh	r2, [r2, #0]
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	183b      	adds	r3, r7, r0
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	0a1b      	lsrs	r3, r3, #8
 8005d2e:	b299      	uxth	r1, r3
 8005d30:	4a19      	ldr	r2, [pc, #100]	@ (8005d98 <fit_lfn+0x104>)
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	18d3      	adds	r3, r2, r3
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	18d3      	adds	r3, r2, r3
 8005d3e:	b2ca      	uxtb	r2, r1
 8005d40:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005d42:	183b      	adds	r3, r7, r0
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d103      	bne.n	8005d52 <fit_lfn+0xbe>
 8005d4a:	183b      	adds	r3, r7, r0
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	4252      	negs	r2, r2
 8005d50:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	3301      	adds	r3, #1
 8005d56:	61bb      	str	r3, [r7, #24]
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b0c      	cmp	r3, #12
 8005d5c:	d9c9      	bls.n	8005cf2 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005d5e:	2316      	movs	r3, #22
 8005d60:	18fb      	adds	r3, r7, r3
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	4a0b      	ldr	r2, [pc, #44]	@ (8005d94 <fit_lfn+0x100>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d006      	beq.n	8005d78 <fit_lfn+0xe4>
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	18d3      	adds	r3, r2, r3
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d105      	bne.n	8005d84 <fit_lfn+0xf0>
 8005d78:	1dfb      	adds	r3, r7, #7
 8005d7a:	1dfa      	adds	r2, r7, #7
 8005d7c:	7812      	ldrb	r2, [r2, #0]
 8005d7e:	2140      	movs	r1, #64	@ 0x40
 8005d80:	430a      	orrs	r2, r1
 8005d82:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	1dfa      	adds	r2, r7, #7
 8005d88:	7812      	ldrb	r2, [r2, #0]
 8005d8a:	701a      	strb	r2, [r3, #0]
}
 8005d8c:	46c0      	nop			@ (mov r8, r8)
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	b008      	add	sp, #32
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	0000ffff 	.word	0x0000ffff
 8005d98:	0800a9ec 	.word	0x0800a9ec

08005d9c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08c      	sub	sp, #48	@ 0x30
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	220b      	movs	r2, #11
 8005db0:	0018      	movs	r0, r3
 8005db2:	f7fe fcf3 	bl	800479c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b05      	cmp	r3, #5
 8005dba:	d92f      	bls.n	8005e1c <gen_numname+0x80>
		sr = seq;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005dc0:	e026      	b.n	8005e10 <gen_numname+0x74>
			wc = *lfn++;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	1c9a      	adds	r2, r3, #2
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	2222      	movs	r2, #34	@ 0x22
 8005dca:	18ba      	adds	r2, r7, r2
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dd4:	e019      	b.n	8005e0a <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	005a      	lsls	r2, r3, #1
 8005dda:	2022      	movs	r0, #34	@ 0x22
 8005ddc:	183b      	adds	r3, r7, r0
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	2101      	movs	r1, #1
 8005de2:	400b      	ands	r3, r1
 8005de4:	18d3      	adds	r3, r2, r3
 8005de6:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005de8:	183b      	adds	r3, r7, r0
 8005dea:	183a      	adds	r2, r7, r0
 8005dec:	8812      	ldrh	r2, [r2, #0]
 8005dee:	0852      	lsrs	r2, r2, #1
 8005df0:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	2380      	movs	r3, #128	@ 0x80
 8005df6:	025b      	lsls	r3, r3, #9
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <gen_numname+0x68>
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	4a30      	ldr	r2, [pc, #192]	@ (8005ec0 <gen_numname+0x124>)
 8005e00:	4053      	eors	r3, r2
 8005e02:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e06:	3301      	adds	r3, #1
 8005e08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0c:	2b0f      	cmp	r3, #15
 8005e0e:	d9e2      	bls.n	8005dd6 <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1d4      	bne.n	8005dc2 <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005e1c:	2307      	movs	r3, #7
 8005e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	220f      	movs	r2, #15
 8005e26:	4013      	ands	r3, r2
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	212f      	movs	r1, #47	@ 0x2f
 8005e2c:	187b      	adds	r3, r7, r1
 8005e2e:	3230      	adds	r2, #48	@ 0x30
 8005e30:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 8005e32:	187b      	adds	r3, r7, r1
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b39      	cmp	r3, #57	@ 0x39
 8005e38:	d904      	bls.n	8005e44 <gen_numname+0xa8>
 8005e3a:	187b      	adds	r3, r7, r1
 8005e3c:	187a      	adds	r2, r7, r1
 8005e3e:	7812      	ldrb	r2, [r2, #0]
 8005e40:	3207      	adds	r2, #7
 8005e42:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8005e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e46:	1e5a      	subs	r2, r3, #1
 8005e48:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005e4a:	2014      	movs	r0, #20
 8005e4c:	183a      	adds	r2, r7, r0
 8005e4e:	212f      	movs	r1, #47	@ 0x2f
 8005e50:	1879      	adds	r1, r7, r1
 8005e52:	7809      	ldrb	r1, [r1, #0]
 8005e54:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	091b      	lsrs	r3, r3, #4
 8005e5a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1de      	bne.n	8005e20 <gen_numname+0x84>
	ns[i] = '~';
 8005e62:	183a      	adds	r2, r7, r0
 8005e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e66:	18d3      	adds	r3, r2, r3
 8005e68:	227e      	movs	r2, #126	@ 0x7e
 8005e6a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e70:	e002      	b.n	8005e78 <gen_numname+0xdc>
 8005e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e74:	3301      	adds	r3, #1
 8005e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d205      	bcs.n	8005e8c <gen_numname+0xf0>
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e84:	18d3      	adds	r3, r2, r3
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d1f2      	bne.n	8005e72 <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8e:	2b07      	cmp	r3, #7
 8005e90:	d806      	bhi.n	8005ea0 <gen_numname+0x104>
 8005e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005e98:	2214      	movs	r2, #20
 8005e9a:	18ba      	adds	r2, r7, r2
 8005e9c:	5cd1      	ldrb	r1, [r2, r3]
 8005e9e:	e000      	b.n	8005ea2 <gen_numname+0x106>
 8005ea0:	2120      	movs	r1, #32
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	18d3      	adds	r3, r2, r3
 8005eac:	1c0a      	adds	r2, r1, #0
 8005eae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	2b07      	cmp	r3, #7
 8005eb4:	d9ea      	bls.n	8005e8c <gen_numname+0xf0>
}
 8005eb6:	46c0      	nop			@ (mov r8, r8)
 8005eb8:	46c0      	nop			@ (mov r8, r8)
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b00c      	add	sp, #48	@ 0x30
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	00011021 	.word	0x00011021

08005ec4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005ecc:	230f      	movs	r3, #15
 8005ece:	18fb      	adds	r3, r7, r3
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 8005ed4:	230b      	movs	r3, #11
 8005ed6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8005ed8:	200f      	movs	r0, #15
 8005eda:	183b      	adds	r3, r7, r0
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	0852      	lsrs	r2, r2, #1
 8005ee2:	01db      	lsls	r3, r3, #7
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	b2d9      	uxtb	r1, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	781a      	ldrb	r2, [r3, #0]
 8005ef0:	183b      	adds	r3, r7, r0
 8005ef2:	188a      	adds	r2, r1, r2
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	60bb      	str	r3, [r7, #8]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1ea      	bne.n	8005ed8 <sum_sfn+0x14>
	return sum;
 8005f02:	183b      	adds	r3, r7, r0
 8005f04:	781b      	ldrb	r3, [r3, #0]
}
 8005f06:	0018      	movs	r0, r3
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	b004      	add	sp, #16
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005f10:	b5b0      	push	{r4, r5, r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005f18:	2517      	movs	r5, #23
 8005f1a:	197c      	adds	r4, r7, r5
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2100      	movs	r1, #0
 8005f20:	0018      	movs	r0, r3
 8005f22:	f7ff fb4b 	bl	80055bc <dir_sdi>
 8005f26:	0003      	movs	r3, r0
 8005f28:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8005f2a:	197b      	adds	r3, r7, r5
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <dir_find+0x28>
 8005f32:	197b      	adds	r3, r7, r5
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	e0ea      	b.n	800610e <dir_find+0x1fe>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005f38:	2114      	movs	r1, #20
 8005f3a:	187b      	adds	r3, r7, r1
 8005f3c:	22ff      	movs	r2, #255	@ 0xff
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	2315      	movs	r3, #21
 8005f42:	18fb      	adds	r3, r7, r3
 8005f44:	187a      	adds	r2, r7, r1
 8005f46:	7812      	ldrb	r2, [r2, #0]
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	2389      	movs	r3, #137	@ 0x89
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	2101      	movs	r1, #1
 8005f52:	4249      	negs	r1, r1
 8005f54:	52d1      	strh	r1, [r2, r3]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	2380      	movs	r3, #128	@ 0x80
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	58d0      	ldr	r0, [r2, r3]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	2384      	movs	r3, #132	@ 0x84
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	58d3      	ldr	r3, [r2, r3]
 8005f66:	2517      	movs	r5, #23
 8005f68:	197c      	adds	r4, r7, r5
 8005f6a:	0019      	movs	r1, r3
 8005f6c:	f7fe fea2 	bl	8004cb4 <move_window>
 8005f70:	0003      	movs	r3, r0
 8005f72:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8005f74:	0029      	movs	r1, r5
 8005f76:	187b      	adds	r3, r7, r1
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d000      	beq.n	8005f80 <dir_find+0x70>
 8005f7e:	e0be      	b.n	80060fe <dir_find+0x1ee>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	2385      	movs	r3, #133	@ 0x85
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	58d3      	ldr	r3, [r2, r3]
 8005f88:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005f8a:	2016      	movs	r0, #22
 8005f8c:	183b      	adds	r3, r7, r0
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	7812      	ldrb	r2, [r2, #0]
 8005f92:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005f94:	183b      	adds	r3, r7, r0
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d103      	bne.n	8005fa4 <dir_find+0x94>
 8005f9c:	187b      	adds	r3, r7, r1
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	e0b1      	b.n	8006108 <dir_find+0x1f8>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	330b      	adds	r3, #11
 8005fa8:	781a      	ldrb	r2, [r3, #0]
 8005faa:	200f      	movs	r0, #15
 8005fac:	183b      	adds	r3, r7, r0
 8005fae:	213f      	movs	r1, #63	@ 0x3f
 8005fb0:	400a      	ands	r2, r1
 8005fb2:	701a      	strb	r2, [r3, #0]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005fb4:	2316      	movs	r3, #22
 8005fb6:	18fb      	adds	r3, r7, r3
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2be5      	cmp	r3, #229	@ 0xe5
 8005fbc:	d008      	beq.n	8005fd0 <dir_find+0xc0>
 8005fbe:	183b      	adds	r3, r7, r0
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	d00e      	beq.n	8005fe6 <dir_find+0xd6>
 8005fc8:	183b      	adds	r3, r7, r0
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b0f      	cmp	r3, #15
 8005fce:	d00a      	beq.n	8005fe6 <dir_find+0xd6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005fd0:	2315      	movs	r3, #21
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	22ff      	movs	r2, #255	@ 0xff
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	2389      	movs	r3, #137	@ 0x89
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	2101      	movs	r1, #1
 8005fe0:	4249      	negs	r1, r1
 8005fe2:	52d1      	strh	r1, [r2, r3]
 8005fe4:	e07c      	b.n	80060e0 <dir_find+0x1d0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005fe6:	230f      	movs	r3, #15
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b0f      	cmp	r3, #15
 8005fee:	d148      	bne.n	8006082 <dir_find+0x172>
				if (dp->lfn) {
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	2388      	movs	r3, #136	@ 0x88
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	58d3      	ldr	r3, [r2, r3]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d100      	bne.n	8005ffe <dir_find+0xee>
 8005ffc:	e070      	b.n	80060e0 <dir_find+0x1d0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005ffe:	2016      	movs	r0, #22
 8006000:	183b      	adds	r3, r7, r0
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2240      	movs	r2, #64	@ 0x40
 8006006:	4013      	ands	r3, r2
 8006008:	d016      	beq.n	8006038 <dir_find+0x128>
						sum = dir[LDIR_Chksum];
 800600a:	2314      	movs	r3, #20
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	7b52      	ldrb	r2, [r2, #13]
 8006012:	701a      	strb	r2, [r3, #0]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006014:	183b      	adds	r3, r7, r0
 8006016:	183a      	adds	r2, r7, r0
 8006018:	7812      	ldrb	r2, [r2, #0]
 800601a:	2140      	movs	r1, #64	@ 0x40
 800601c:	438a      	bics	r2, r1
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	2315      	movs	r3, #21
 8006022:	18fb      	adds	r3, r7, r3
 8006024:	183a      	adds	r2, r7, r0
 8006026:	7812      	ldrb	r2, [r2, #0]
 8006028:	701a      	strb	r2, [r3, #0]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a3a      	ldr	r2, [pc, #232]	@ (8006118 <dir_find+0x208>)
 800602e:	5a99      	ldrh	r1, [r3, r2]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	2389      	movs	r3, #137	@ 0x89
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	52d1      	strh	r1, [r2, r3]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006038:	2316      	movs	r3, #22
 800603a:	18fa      	adds	r2, r7, r3
 800603c:	2415      	movs	r4, #21
 800603e:	193b      	adds	r3, r7, r4
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d117      	bne.n	8006078 <dir_find+0x168>
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	330d      	adds	r3, #13
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2214      	movs	r2, #20
 8006050:	18ba      	adds	r2, r7, r2
 8006052:	7812      	ldrb	r2, [r2, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d10f      	bne.n	8006078 <dir_find+0x168>
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	2388      	movs	r3, #136	@ 0x88
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	58d3      	ldr	r3, [r2, r3]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	0011      	movs	r1, r2
 8006064:	0018      	movs	r0, r3
 8006066:	f7ff fd25 	bl	8005ab4 <cmp_lfn>
 800606a:	1e03      	subs	r3, r0, #0
 800606c:	d004      	beq.n	8006078 <dir_find+0x168>
 800606e:	193b      	adds	r3, r7, r4
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	3b01      	subs	r3, #1
 8006074:	b2da      	uxtb	r2, r3
 8006076:	e000      	b.n	800607a <dir_find+0x16a>
 8006078:	22ff      	movs	r2, #255	@ 0xff
 800607a:	2315      	movs	r3, #21
 800607c:	18fb      	adds	r3, r7, r3
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	e02e      	b.n	80060e0 <dir_find+0x1d0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006082:	2315      	movs	r3, #21
 8006084:	18fb      	adds	r3, r7, r3
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10a      	bne.n	80060a2 <dir_find+0x192>
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	0018      	movs	r0, r3
 8006090:	f7ff ff18 	bl	8005ec4 <sum_sfn>
 8006094:	0003      	movs	r3, r0
 8006096:	001a      	movs	r2, r3
 8006098:	2314      	movs	r3, #20
 800609a:	18fb      	adds	r3, r7, r3
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	4293      	cmp	r3, r2
 80060a0:	d02f      	beq.n	8006102 <dir_find+0x1f2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	2386      	movs	r3, #134	@ 0x86
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	58d3      	ldr	r3, [r2, r3]
 80060aa:	330b      	adds	r3, #11
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	001a      	movs	r2, r3
 80060b0:	2301      	movs	r3, #1
 80060b2:	4013      	ands	r3, r2
 80060b4:	d10a      	bne.n	80060cc <dir_find+0x1bc>
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	2386      	movs	r3, #134	@ 0x86
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	58d1      	ldr	r1, [r2, r3]
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	220b      	movs	r2, #11
 80060c2:	0018      	movs	r0, r3
 80060c4:	f7fe fba0 	bl	8004808 <mem_cmp>
 80060c8:	1e03      	subs	r3, r0, #0
 80060ca:	d01c      	beq.n	8006106 <dir_find+0x1f6>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80060cc:	2315      	movs	r3, #21
 80060ce:	18fb      	adds	r3, r7, r3
 80060d0:	22ff      	movs	r2, #255	@ 0xff
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	2389      	movs	r3, #137	@ 0x89
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	2101      	movs	r1, #1
 80060dc:	4249      	negs	r1, r1
 80060de:	52d1      	strh	r1, [r2, r3]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80060e0:	2517      	movs	r5, #23
 80060e2:	197c      	adds	r4, r7, r5
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2100      	movs	r1, #0
 80060e8:	0018      	movs	r0, r3
 80060ea:	f7ff fb17 	bl	800571c <dir_next>
 80060ee:	0003      	movs	r3, r0
 80060f0:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80060f2:	197b      	adds	r3, r7, r5
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d100      	bne.n	80060fc <dir_find+0x1ec>
 80060fa:	e72c      	b.n	8005f56 <dir_find+0x46>
 80060fc:	e004      	b.n	8006108 <dir_find+0x1f8>
		if (res != FR_OK) break;
 80060fe:	46c0      	nop			@ (mov r8, r8)
 8006100:	e002      	b.n	8006108 <dir_find+0x1f8>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006102:	46c0      	nop			@ (mov r8, r8)
 8006104:	e000      	b.n	8006108 <dir_find+0x1f8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006106:	46c0      	nop			@ (mov r8, r8)

	return res;
 8006108:	2317      	movs	r3, #23
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	781b      	ldrb	r3, [r3, #0]
}
 800610e:	0018      	movs	r0, r3
 8006110:	46bd      	mov	sp, r7
 8006112:	b006      	add	sp, #24
 8006114:	bdb0      	pop	{r4, r5, r7, pc}
 8006116:	46c0      	nop			@ (mov r8, r8)
 8006118:	00000206 	.word	0x00000206

0800611c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800611c:	b5b0      	push	{r4, r5, r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 8006126:	2315      	movs	r3, #21
 8006128:	18fb      	adds	r3, r7, r3
 800612a:	22ff      	movs	r2, #255	@ 0xff
 800612c:	701a      	strb	r2, [r3, #0]
 800612e:	2314      	movs	r3, #20
 8006130:	18fb      	adds	r3, r7, r3
 8006132:	22ff      	movs	r2, #255	@ 0xff
 8006134:	701a      	strb	r2, [r3, #0]
#endif

	res = FR_NO_FILE;
 8006136:	2317      	movs	r3, #23
 8006138:	18fb      	adds	r3, r7, r3
 800613a:	2204      	movs	r2, #4
 800613c:	701a      	strb	r2, [r3, #0]
	while (dp->sect) {
 800613e:	e0b3      	b.n	80062a8 <dir_read+0x18c>
		res = move_window(dp->fs, dp->sect);
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	2380      	movs	r3, #128	@ 0x80
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	58d0      	ldr	r0, [r2, r3]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	2384      	movs	r3, #132	@ 0x84
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	58d3      	ldr	r3, [r2, r3]
 8006150:	2517      	movs	r5, #23
 8006152:	197c      	adds	r4, r7, r5
 8006154:	0019      	movs	r1, r3
 8006156:	f7fe fdad 	bl	8004cb4 <move_window>
 800615a:	0003      	movs	r3, r0
 800615c:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800615e:	0029      	movs	r1, r5
 8006160:	187b      	adds	r3, r7, r1
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d000      	beq.n	800616a <dir_read+0x4e>
 8006168:	e0a6      	b.n	80062b8 <dir_read+0x19c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	2385      	movs	r3, #133	@ 0x85
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	58d3      	ldr	r3, [r2, r3]
 8006172:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006174:	2016      	movs	r0, #22
 8006176:	183b      	adds	r3, r7, r0
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	7812      	ldrb	r2, [r2, #0]
 800617c:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800617e:	183b      	adds	r3, r7, r0
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d103      	bne.n	800618e <dir_read+0x72>
 8006186:	187b      	adds	r3, r7, r1
 8006188:	2204      	movs	r2, #4
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	e099      	b.n	80062c2 <dir_read+0x1a6>
		a = dir[DIR_Attr] & AM_MASK;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	330b      	adds	r3, #11
 8006192:	781a      	ldrb	r2, [r3, #0]
 8006194:	200f      	movs	r0, #15
 8006196:	183b      	adds	r3, r7, r0
 8006198:	213f      	movs	r1, #63	@ 0x3f
 800619a:	400a      	ands	r2, r1
 800619c:	701a      	strb	r2, [r3, #0]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800619e:	2216      	movs	r2, #22
 80061a0:	18bb      	adds	r3, r7, r2
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2be5      	cmp	r3, #229	@ 0xe5
 80061a6:	d00f      	beq.n	80061c8 <dir_read+0xac>
 80061a8:	18bb      	adds	r3, r7, r2
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80061ae:	d00b      	beq.n	80061c8 <dir_read+0xac>
 80061b0:	183b      	adds	r3, r7, r0
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2220      	movs	r2, #32
 80061b6:	4393      	bics	r3, r2
 80061b8:	3b08      	subs	r3, #8
 80061ba:	425a      	negs	r2, r3
 80061bc:	4153      	adcs	r3, r2
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	001a      	movs	r2, r3
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d004      	beq.n	80061d2 <dir_read+0xb6>
			ord = 0xFF;
 80061c8:	2315      	movs	r3, #21
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	22ff      	movs	r2, #255	@ 0xff
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	e05d      	b.n	800628e <dir_read+0x172>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80061d2:	230f      	movs	r3, #15
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b0f      	cmp	r3, #15
 80061da:	d141      	bne.n	8006260 <dir_read+0x144>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 80061dc:	2016      	movs	r0, #22
 80061de:	183b      	adds	r3, r7, r0
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2240      	movs	r2, #64	@ 0x40
 80061e4:	4013      	ands	r3, r2
 80061e6:	d016      	beq.n	8006216 <dir_read+0xfa>
					sum = dir[LDIR_Chksum];
 80061e8:	2314      	movs	r3, #20
 80061ea:	18fb      	adds	r3, r7, r3
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	7b52      	ldrb	r2, [r2, #13]
 80061f0:	701a      	strb	r2, [r3, #0]
					c &= ~LLEF; ord = c;
 80061f2:	183b      	adds	r3, r7, r0
 80061f4:	183a      	adds	r2, r7, r0
 80061f6:	7812      	ldrb	r2, [r2, #0]
 80061f8:	2140      	movs	r1, #64	@ 0x40
 80061fa:	438a      	bics	r2, r1
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	2315      	movs	r3, #21
 8006200:	18fb      	adds	r3, r7, r3
 8006202:	183a      	adds	r2, r7, r0
 8006204:	7812      	ldrb	r2, [r2, #0]
 8006206:	701a      	strb	r2, [r3, #0]
					dp->lfn_idx = dp->index;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a36      	ldr	r2, [pc, #216]	@ (80062e4 <dir_read+0x1c8>)
 800620c:	5a99      	ldrh	r1, [r3, r2]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	2389      	movs	r3, #137	@ 0x89
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	52d1      	strh	r1, [r2, r3]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006216:	2316      	movs	r3, #22
 8006218:	18fa      	adds	r2, r7, r3
 800621a:	2415      	movs	r4, #21
 800621c:	193b      	adds	r3, r7, r4
 800621e:	7812      	ldrb	r2, [r2, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d117      	bne.n	8006256 <dir_read+0x13a>
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	330d      	adds	r3, #13
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2214      	movs	r2, #20
 800622e:	18ba      	adds	r2, r7, r2
 8006230:	7812      	ldrb	r2, [r2, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d10f      	bne.n	8006256 <dir_read+0x13a>
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	2388      	movs	r3, #136	@ 0x88
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	58d3      	ldr	r3, [r2, r3]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	0011      	movs	r1, r2
 8006242:	0018      	movs	r0, r3
 8006244:	f7ff fcb4 	bl	8005bb0 <pick_lfn>
 8006248:	1e03      	subs	r3, r0, #0
 800624a:	d004      	beq.n	8006256 <dir_read+0x13a>
 800624c:	193b      	adds	r3, r7, r4
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	3b01      	subs	r3, #1
 8006252:	b2da      	uxtb	r2, r3
 8006254:	e000      	b.n	8006258 <dir_read+0x13c>
 8006256:	22ff      	movs	r2, #255	@ 0xff
 8006258:	2315      	movs	r3, #21
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	e016      	b.n	800628e <dir_read+0x172>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 8006260:	2315      	movs	r3, #21
 8006262:	18fb      	adds	r3, r7, r3
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <dir_read+0x164>
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	0018      	movs	r0, r3
 800626e:	f7ff fe29 	bl	8005ec4 <sum_sfn>
 8006272:	0003      	movs	r3, r0
 8006274:	001a      	movs	r2, r3
 8006276:	2314      	movs	r3, #20
 8006278:	18fb      	adds	r3, r7, r3
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	4293      	cmp	r3, r2
 800627e:	d01d      	beq.n	80062bc <dir_read+0x1a0>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	2389      	movs	r3, #137	@ 0x89
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	2101      	movs	r1, #1
 8006288:	4249      	negs	r1, r1
 800628a:	52d1      	strh	r1, [r2, r3]
				break;
 800628c:	e016      	b.n	80062bc <dir_read+0x1a0>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 800628e:	2517      	movs	r5, #23
 8006290:	197c      	adds	r4, r7, r5
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2100      	movs	r1, #0
 8006296:	0018      	movs	r0, r3
 8006298:	f7ff fa40 	bl	800571c <dir_next>
 800629c:	0003      	movs	r3, r0
 800629e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 80062a0:	197b      	adds	r3, r7, r5
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10b      	bne.n	80062c0 <dir_read+0x1a4>
	while (dp->sect) {
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	2384      	movs	r3, #132	@ 0x84
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	58d3      	ldr	r3, [r2, r3]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d000      	beq.n	80062b6 <dir_read+0x19a>
 80062b4:	e744      	b.n	8006140 <dir_read+0x24>
 80062b6:	e004      	b.n	80062c2 <dir_read+0x1a6>
		if (res != FR_OK) break;
 80062b8:	46c0      	nop			@ (mov r8, r8)
 80062ba:	e002      	b.n	80062c2 <dir_read+0x1a6>
				break;
 80062bc:	46c0      	nop			@ (mov r8, r8)
 80062be:	e000      	b.n	80062c2 <dir_read+0x1a6>
		if (res != FR_OK) break;
 80062c0:	46c0      	nop			@ (mov r8, r8)
	}

	if (res != FR_OK) dp->sect = 0;
 80062c2:	2317      	movs	r3, #23
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d004      	beq.n	80062d6 <dir_read+0x1ba>
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	2384      	movs	r3, #132	@ 0x84
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	2100      	movs	r1, #0
 80062d4:	50d1      	str	r1, [r2, r3]

	return res;
 80062d6:	2317      	movs	r3, #23
 80062d8:	18fb      	adds	r3, r7, r3
 80062da:	781b      	ldrb	r3, [r3, #0]
}
 80062dc:	0018      	movs	r0, r3
 80062de:	46bd      	mov	sp, r7
 80062e0:	b006      	add	sp, #24
 80062e2:	bdb0      	pop	{r4, r5, r7, pc}
 80062e4:	00000206 	.word	0x00000206

080062e8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80062e8:	b5b0      	push	{r4, r5, r7, lr}
 80062ea:	b08c      	sub	sp, #48	@ 0x30
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	2386      	movs	r3, #134	@ 0x86
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	58d3      	ldr	r3, [r2, r3]
 80062f8:	623b      	str	r3, [r7, #32]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	2388      	movs	r3, #136	@ 0x88
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	58d3      	ldr	r3, [r2, r3]
 8006302:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8006304:	6a39      	ldr	r1, [r7, #32]
 8006306:	240c      	movs	r4, #12
 8006308:	193b      	adds	r3, r7, r4
 800630a:	220c      	movs	r2, #12
 800630c:	0018      	movs	r0, r3
 800630e:	f7fe fa45 	bl	800479c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006312:	193b      	adds	r3, r7, r4
 8006314:	7adb      	ldrb	r3, [r3, #11]
 8006316:	001a      	movs	r2, r3
 8006318:	2301      	movs	r3, #1
 800631a:	4013      	ands	r3, r2
 800631c:	d03e      	beq.n	800639c <dir_register+0xb4>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	330b      	adds	r3, #11
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	2388      	movs	r3, #136	@ 0x88
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	2100      	movs	r1, #0
 800632e:	50d1      	str	r1, [r2, r3]
		for (n = 1; n < 100; n++) {
 8006330:	2301      	movs	r3, #1
 8006332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006334:	e015      	b.n	8006362 <dir_register+0x7a>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8006336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	210c      	movs	r1, #12
 800633c:	1879      	adds	r1, r7, r1
 800633e:	6a38      	ldr	r0, [r7, #32]
 8006340:	f7ff fd2c 	bl	8005d9c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006344:	252f      	movs	r5, #47	@ 0x2f
 8006346:	197c      	adds	r4, r7, r5
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	0018      	movs	r0, r3
 800634c:	f7ff fde0 	bl	8005f10 <dir_find>
 8006350:	0003      	movs	r3, r0
 8006352:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006354:	197b      	adds	r3, r7, r5
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d106      	bne.n	800636a <dir_register+0x82>
		for (n = 1; n < 100; n++) {
 800635c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635e:	3301      	adds	r3, #1
 8006360:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006364:	2b63      	cmp	r3, #99	@ 0x63
 8006366:	d9e6      	bls.n	8006336 <dir_register+0x4e>
 8006368:	e000      	b.n	800636c <dir_register+0x84>
			if (res != FR_OK) break;
 800636a:	46c0      	nop			@ (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800636c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636e:	2b64      	cmp	r3, #100	@ 0x64
 8006370:	d101      	bne.n	8006376 <dir_register+0x8e>
 8006372:	2307      	movs	r3, #7
 8006374:	e0eb      	b.n	800654e <dir_register+0x266>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006376:	222f      	movs	r2, #47	@ 0x2f
 8006378:	18bb      	adds	r3, r7, r2
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b04      	cmp	r3, #4
 800637e:	d002      	beq.n	8006386 <dir_register+0x9e>
 8006380:	18bb      	adds	r3, r7, r2
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	e0e3      	b.n	800654e <dir_register+0x266>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	330b      	adds	r3, #11
 800638a:	220c      	movs	r2, #12
 800638c:	18ba      	adds	r2, r7, r2
 800638e:	7ad2      	ldrb	r2, [r2, #11]
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	2388      	movs	r3, #136	@ 0x88
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	69f9      	ldr	r1, [r7, #28]
 800639a:	50d1      	str	r1, [r2, r3]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800639c:	230c      	movs	r3, #12
 800639e:	18fb      	adds	r3, r7, r3
 80063a0:	7adb      	ldrb	r3, [r3, #11]
 80063a2:	001a      	movs	r2, r3
 80063a4:	2302      	movs	r3, #2
 80063a6:	4013      	ands	r3, r2
 80063a8:	d015      	beq.n	80063d6 <dir_register+0xee>
		for (n = 0; lfn[n]; n++) ;
 80063aa:	2300      	movs	r3, #0
 80063ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063ae:	e002      	b.n	80063b6 <dir_register+0xce>
 80063b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b2:	3301      	adds	r3, #1
 80063b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	18d3      	adds	r3, r2, r3
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1f5      	bne.n	80063b0 <dir_register+0xc8>
		nent = (n + 25) / 13;
 80063c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c6:	3319      	adds	r3, #25
 80063c8:	210d      	movs	r1, #13
 80063ca:	0018      	movs	r0, r3
 80063cc:	f7f9 feb8 	bl	8000140 <__udivsi3>
 80063d0:	0003      	movs	r3, r0
 80063d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80063d4:	e001      	b.n	80063da <dir_register+0xf2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80063d6:	2301      	movs	r3, #1
 80063d8:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80063da:	252f      	movs	r5, #47	@ 0x2f
 80063dc:	197c      	adds	r4, r7, r5
 80063de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	0011      	movs	r1, r2
 80063e4:	0018      	movs	r0, r3
 80063e6:	f7ff fab3 	bl	8005950 <dir_alloc>
 80063ea:	0003      	movs	r3, r0
 80063ec:	7023      	strb	r3, [r4, #0]

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80063ee:	0029      	movs	r1, r5
 80063f0:	187b      	adds	r3, r7, r1
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d163      	bne.n	80064c0 <dir_register+0x1d8>
 80063f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fa:	3b01      	subs	r3, #1
 80063fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	2b00      	cmp	r3, #0
 8006402:	d05d      	beq.n	80064c0 <dir_register+0x1d8>
		res = dir_sdi(dp, dp->index - nent);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a54      	ldr	r2, [pc, #336]	@ (8006558 <dir_register+0x270>)
 8006408:	5a9b      	ldrh	r3, [r3, r2]
 800640a:	001a      	movs	r2, r3
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	1ad2      	subs	r2, r2, r3
 8006410:	000d      	movs	r5, r1
 8006412:	187c      	adds	r4, r7, r1
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	0011      	movs	r1, r2
 8006418:	0018      	movs	r0, r3
 800641a:	f7ff f8cf 	bl	80055bc <dir_sdi>
 800641e:	0003      	movs	r3, r0
 8006420:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8006422:	197b      	adds	r3, r7, r5
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d14a      	bne.n	80064c0 <dir_register+0x1d8>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	2386      	movs	r3, #134	@ 0x86
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	58d3      	ldr	r3, [r2, r3]
 8006432:	221b      	movs	r2, #27
 8006434:	18bc      	adds	r4, r7, r2
 8006436:	0018      	movs	r0, r3
 8006438:	f7ff fd44 	bl	8005ec4 <sum_sfn>
 800643c:	0003      	movs	r3, r0
 800643e:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	2380      	movs	r3, #128	@ 0x80
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	58d0      	ldr	r0, [r2, r3]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	2384      	movs	r3, #132	@ 0x84
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	58d3      	ldr	r3, [r2, r3]
 8006450:	252f      	movs	r5, #47	@ 0x2f
 8006452:	197c      	adds	r4, r7, r5
 8006454:	0019      	movs	r1, r3
 8006456:	f7fe fc2d 	bl	8004cb4 <move_window>
 800645a:	0003      	movs	r3, r0
 800645c:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 800645e:	002c      	movs	r4, r5
 8006460:	193b      	adds	r3, r7, r4
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d12a      	bne.n	80064be <dir_register+0x1d6>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	2388      	movs	r3, #136	@ 0x88
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	58d0      	ldr	r0, [r2, r3]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	2385      	movs	r3, #133	@ 0x85
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	58d1      	ldr	r1, [r2, r3]
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	b2da      	uxtb	r2, r3
 800647c:	231b      	movs	r3, #27
 800647e:	18fb      	adds	r3, r7, r3
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	f7ff fc07 	bl	8005c94 <fit_lfn>
				dp->fs->wflag = 1;
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	2380      	movs	r3, #128	@ 0x80
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	58d2      	ldr	r2, [r2, r3]
 800648e:	2381      	movs	r3, #129	@ 0x81
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	2101      	movs	r1, #1
 8006494:	54d1      	strb	r1, [r2, r3]
				res = dir_next(dp, 0);	/* Next entry */
 8006496:	0025      	movs	r5, r4
 8006498:	193c      	adds	r4, r7, r4
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2100      	movs	r1, #0
 800649e:	0018      	movs	r0, r3
 80064a0:	f7ff f93c 	bl	800571c <dir_next>
 80064a4:	0003      	movs	r3, r0
 80064a6:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 80064a8:	197b      	adds	r3, r7, r5
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d107      	bne.n	80064c0 <dir_register+0x1d8>
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	3b01      	subs	r3, #1
 80064b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80064b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1c1      	bne.n	8006440 <dir_register+0x158>
 80064bc:	e000      	b.n	80064c0 <dir_register+0x1d8>
				if (res != FR_OK) break;
 80064be:	46c0      	nop			@ (mov r8, r8)
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80064c0:	212f      	movs	r1, #47	@ 0x2f
 80064c2:	187b      	adds	r3, r7, r1
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d13e      	bne.n	8006548 <dir_register+0x260>
		res = move_window(dp->fs, dp->sect);
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	2380      	movs	r3, #128	@ 0x80
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	58d0      	ldr	r0, [r2, r3]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	2384      	movs	r3, #132	@ 0x84
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	58d3      	ldr	r3, [r2, r3]
 80064da:	000d      	movs	r5, r1
 80064dc:	187c      	adds	r4, r7, r1
 80064de:	0019      	movs	r1, r3
 80064e0:	f7fe fbe8 	bl	8004cb4 <move_window>
 80064e4:	0003      	movs	r3, r0
 80064e6:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80064e8:	197b      	adds	r3, r7, r5
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d12b      	bne.n	8006548 <dir_register+0x260>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	2385      	movs	r3, #133	@ 0x85
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	58d3      	ldr	r3, [r2, r3]
 80064f8:	2220      	movs	r2, #32
 80064fa:	2100      	movs	r1, #0
 80064fc:	0018      	movs	r0, r3
 80064fe:	f7fe f96a 	bl	80047d6 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	2385      	movs	r3, #133	@ 0x85
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	58d0      	ldr	r0, [r2, r3]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	2386      	movs	r3, #134	@ 0x86
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	58d3      	ldr	r3, [r2, r3]
 8006512:	220b      	movs	r2, #11
 8006514:	0019      	movs	r1, r3
 8006516:	f7fe f941 	bl	800479c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	2386      	movs	r3, #134	@ 0x86
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	58d3      	ldr	r3, [r2, r3]
 8006522:	330b      	adds	r3, #11
 8006524:	781a      	ldrb	r2, [r3, #0]
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	2385      	movs	r3, #133	@ 0x85
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	58cb      	ldr	r3, [r1, r3]
 800652e:	330c      	adds	r3, #12
 8006530:	2118      	movs	r1, #24
 8006532:	400a      	ands	r2, r1
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	2380      	movs	r3, #128	@ 0x80
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	58d2      	ldr	r2, [r2, r3]
 8006540:	2381      	movs	r3, #129	@ 0x81
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	2101      	movs	r1, #1
 8006546:	54d1      	strb	r1, [r2, r3]
		}
	}

	return res;
 8006548:	232f      	movs	r3, #47	@ 0x2f
 800654a:	18fb      	adds	r3, r7, r3
 800654c:	781b      	ldrb	r3, [r3, #0]
}
 800654e:	0018      	movs	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	b00c      	add	sp, #48	@ 0x30
 8006554:	bdb0      	pop	{r4, r5, r7, pc}
 8006556:	46c0      	nop			@ (mov r8, r8)
 8006558:	00000206 	.word	0x00000206

0800655c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800655c:	b5b0      	push	{r4, r5, r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	3309      	adds	r3, #9
 800656a:	61bb      	str	r3, [r7, #24]
	if (dp->sect) {		/* Get SFN */
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	2384      	movs	r3, #132	@ 0x84
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	58d3      	ldr	r3, [r2, r3]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d100      	bne.n	800657a <get_fileinfo+0x1e>
 8006578:	e081      	b.n	800667e <get_fileinfo+0x122>
		dir = dp->dir;
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	2385      	movs	r3, #133	@ 0x85
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	58d3      	ldr	r3, [r2, r3]
 8006582:	60fb      	str	r3, [r7, #12]
		i = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	61fb      	str	r3, [r7, #28]
		while (i < 11) {		/* Copy name body and extension */
 8006588:	e040      	b.n	800660c <get_fileinfo+0xb0>
			c = (TCHAR)dir[i++];
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	61fa      	str	r2, [r7, #28]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	18d2      	adds	r2, r2, r3
 8006594:	2117      	movs	r1, #23
 8006596:	187b      	adds	r3, r7, r1
 8006598:	7812      	ldrb	r2, [r2, #0]
 800659a:	701a      	strb	r2, [r3, #0]
			if (c == ' ') continue;				/* Skip padding spaces */
 800659c:	000a      	movs	r2, r1
 800659e:	18bb      	adds	r3, r7, r2
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d031      	beq.n	800660a <get_fileinfo+0xae>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80065a6:	18bb      	adds	r3, r7, r2
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d102      	bne.n	80065b4 <get_fileinfo+0x58>
 80065ae:	18bb      	adds	r3, r7, r2
 80065b0:	22e5      	movs	r2, #229	@ 0xe5
 80065b2:	701a      	strb	r2, [r3, #0]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	2b09      	cmp	r3, #9
 80065b8:	d104      	bne.n	80065c4 <get_fileinfo+0x68>
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	61ba      	str	r2, [r7, #24]
 80065c0:	222e      	movs	r2, #46	@ 0x2e
 80065c2:	701a      	strb	r2, [r3, #0]
#if _USE_LFN
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 80065c4:	2217      	movs	r2, #23
 80065c6:	18bb      	adds	r3, r7, r2
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b40      	cmp	r3, #64	@ 0x40
 80065cc:	d915      	bls.n	80065fa <get_fileinfo+0x9e>
 80065ce:	18bb      	adds	r3, r7, r2
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b5a      	cmp	r3, #90	@ 0x5a
 80065d4:	d811      	bhi.n	80065fa <get_fileinfo+0x9e>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	330c      	adds	r3, #12
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	001a      	movs	r2, r3
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d901      	bls.n	80065e8 <get_fileinfo+0x8c>
 80065e4:	2310      	movs	r3, #16
 80065e6:	e000      	b.n	80065ea <get_fileinfo+0x8e>
 80065e8:	2308      	movs	r3, #8
 80065ea:	4013      	ands	r3, r2
 80065ec:	d005      	beq.n	80065fa <get_fileinfo+0x9e>
				c += 0x20;			/* To lower */
 80065ee:	2217      	movs	r2, #23
 80065f0:	18bb      	adds	r3, r7, r2
 80065f2:	18ba      	adds	r2, r7, r2
 80065f4:	7812      	ldrb	r2, [r2, #0]
 80065f6:	3220      	adds	r2, #32
 80065f8:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	61ba      	str	r2, [r7, #24]
 8006600:	2217      	movs	r2, #23
 8006602:	18ba      	adds	r2, r7, r2
 8006604:	7812      	ldrb	r2, [r2, #0]
 8006606:	701a      	strb	r2, [r3, #0]
 8006608:	e000      	b.n	800660c <get_fileinfo+0xb0>
			if (c == ' ') continue;				/* Skip padding spaces */
 800660a:	46c0      	nop			@ (mov r8, r8)
		while (i < 11) {		/* Copy name body and extension */
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	2b0a      	cmp	r3, #10
 8006610:	d9bb      	bls.n	800658a <get_fileinfo+0x2e>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	7ada      	ldrb	r2, [r3, #11]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	331f      	adds	r3, #31
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	061a      	lsls	r2, r3, #24
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	331e      	adds	r3, #30
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	041b      	lsls	r3, r3, #16
 800662a:	431a      	orrs	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	331d      	adds	r3, #29
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	4313      	orrs	r3, r2
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	321c      	adds	r2, #28
 800663a:	7812      	ldrb	r2, [r2, #0]
 800663c:	431a      	orrs	r2, r3
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3319      	adds	r3, #25
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	b21b      	sxth	r3, r3
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	b21a      	sxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3318      	adds	r3, #24
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	b21b      	sxth	r3, r3
 8006656:	4313      	orrs	r3, r2
 8006658:	b21b      	sxth	r3, r3
 800665a:	b29a      	uxth	r2, r3
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3317      	adds	r3, #23
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	b21b      	sxth	r3, r3
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	b21a      	sxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3316      	adds	r3, #22
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	b21b      	sxth	r3, r3
 8006674:	4313      	orrs	r3, r2
 8006676:	b21b      	sxth	r3, r3
 8006678:	b29a      	uxth	r2, r3
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	2200      	movs	r2, #0
 8006682:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname) {
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d04f      	beq.n	800672c <get_fileinfo+0x1d0>
		i = 0; p = fno->lfname;
 800668c:	2300      	movs	r3, #0
 800668e:	61fb      	str	r3, [r7, #28]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	61bb      	str	r3, [r7, #24]
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	2384      	movs	r3, #132	@ 0x84
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	58d3      	ldr	r3, [r2, r3]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d03f      	beq.n	8006722 <get_fileinfo+0x1c6>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d03b      	beq.n	8006722 <get_fileinfo+0x1c6>
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	2389      	movs	r3, #137	@ 0x89
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	5ad3      	ldrh	r3, [r2, r3]
 80066b2:	4a20      	ldr	r2, [pc, #128]	@ (8006734 <get_fileinfo+0x1d8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d034      	beq.n	8006722 <get_fileinfo+0x1c6>
			lfn = dp->lfn;
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	2388      	movs	r3, #136	@ 0x88
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	58d3      	ldr	r3, [r2, r3]
 80066c0:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 80066c2:	e023      	b.n	800670c <get_fileinfo+0x1b0>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80066c4:	250a      	movs	r5, #10
 80066c6:	197c      	adds	r4, r7, r5
 80066c8:	197b      	adds	r3, r7, r5
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	2100      	movs	r1, #0
 80066ce:	0018      	movs	r0, r3
 80066d0:	f002 fc4c 	bl	8008f6c <ff_convert>
 80066d4:	0003      	movs	r3, r0
 80066d6:	8023      	strh	r3, [r4, #0]
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 80066d8:	197b      	adds	r3, r7, r5
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <get_fileinfo+0x18a>
 80066e0:	2300      	movs	r3, #0
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	e01d      	b.n	8006722 <get_fileinfo+0x1c6>
				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					p[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	69fa      	ldr	r2, [r7, #28]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d302      	bcc.n	80066f8 <get_fileinfo+0x19c>
 80066f2:	2300      	movs	r3, #0
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	e014      	b.n	8006722 <get_fileinfo+0x1c6>
				p[i++] = (TCHAR)w;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	61fa      	str	r2, [r7, #28]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	18d3      	adds	r3, r2, r3
 8006702:	220a      	movs	r2, #10
 8006704:	18ba      	adds	r2, r7, r2
 8006706:	8812      	ldrh	r2, [r2, #0]
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	1c9a      	adds	r2, r3, #2
 8006710:	613a      	str	r2, [r7, #16]
 8006712:	210a      	movs	r1, #10
 8006714:	187a      	adds	r2, r7, r1
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	8013      	strh	r3, [r2, #0]
 800671a:	187b      	adds	r3, r7, r1
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1d0      	bne.n	80066c4 <get_fileinfo+0x168>
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	18d3      	adds	r3, r2, r3
 8006728:	2200      	movs	r2, #0
 800672a:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 800672c:	46c0      	nop			@ (mov r8, r8)
 800672e:	46bd      	mov	sp, r7
 8006730:	b008      	add	sp, #32
 8006732:	bdb0      	pop	{r4, r5, r7, pc}
 8006734:	0000ffff 	.word	0x0000ffff

08006738 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006738:	b5b0      	push	{r4, r5, r7, lr}
 800673a:	b08a      	sub	sp, #40	@ 0x28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	613b      	str	r3, [r7, #16]
 8006748:	e002      	b.n	8006750 <create_name+0x18>
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	3301      	adds	r3, #1
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b2f      	cmp	r3, #47	@ 0x2f
 8006756:	d0f8      	beq.n	800674a <create_name+0x12>
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b5c      	cmp	r3, #92	@ 0x5c
 800675e:	d0f4      	beq.n	800674a <create_name+0x12>
	lfn = dp->lfn;
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	2388      	movs	r3, #136	@ 0x88
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	58d3      	ldr	r3, [r2, r3]
 8006768:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	61ba      	str	r2, [r7, #24]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	18d3      	adds	r3, r2, r3
 800677c:	781a      	ldrb	r2, [r3, #0]
 800677e:	2124      	movs	r1, #36	@ 0x24
 8006780:	187b      	adds	r3, r7, r1
 8006782:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006784:	000a      	movs	r2, r1
 8006786:	18bb      	adds	r3, r7, r2
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	2b1f      	cmp	r3, #31
 800678c:	d93d      	bls.n	800680a <create_name+0xd2>
 800678e:	18bb      	adds	r3, r7, r2
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	2b2f      	cmp	r3, #47	@ 0x2f
 8006794:	d039      	beq.n	800680a <create_name+0xd2>
 8006796:	18bb      	adds	r3, r7, r2
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	2b5c      	cmp	r3, #92	@ 0x5c
 800679c:	d035      	beq.n	800680a <create_name+0xd2>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2bfe      	cmp	r3, #254	@ 0xfe
 80067a2:	d901      	bls.n	80067a8 <create_name+0x70>
			return FR_INVALID_NAME;
 80067a4:	2306      	movs	r3, #6
 80067a6:	e1cb      	b.n	8006b40 <create_name+0x408>
#if !_LFN_UNICODE
		w &= 0xFF;
 80067a8:	2524      	movs	r5, #36	@ 0x24
 80067aa:	197b      	adds	r3, r7, r5
 80067ac:	197a      	adds	r2, r7, r5
 80067ae:	8812      	ldrh	r2, [r2, #0]
 80067b0:	21ff      	movs	r1, #255	@ 0xff
 80067b2:	400a      	ands	r2, r1
 80067b4:	801a      	strh	r2, [r3, #0]
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80067b6:	197c      	adds	r4, r7, r5
 80067b8:	197b      	adds	r3, r7, r5
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	2101      	movs	r1, #1
 80067be:	0018      	movs	r0, r3
 80067c0:	f002 fbd4 	bl	8008f6c <ff_convert>
 80067c4:	0003      	movs	r3, r0
 80067c6:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80067c8:	197b      	adds	r3, r7, r5
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <create_name+0x9c>
 80067d0:	2306      	movs	r3, #6
 80067d2:	e1b5      	b.n	8006b40 <create_name+0x408>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80067d4:	2224      	movs	r2, #36	@ 0x24
 80067d6:	18bb      	adds	r3, r7, r2
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	2b7f      	cmp	r3, #127	@ 0x7f
 80067dc:	d80a      	bhi.n	80067f4 <create_name+0xbc>
 80067de:	18bb      	adds	r3, r7, r2
 80067e0:	881a      	ldrh	r2, [r3, #0]
 80067e2:	4ba8      	ldr	r3, [pc, #672]	@ (8006a84 <create_name+0x34c>)
 80067e4:	0011      	movs	r1, r2
 80067e6:	0018      	movs	r0, r3
 80067e8:	f7fe f833 	bl	8004852 <chk_chr>
 80067ec:	1e03      	subs	r3, r0, #0
 80067ee:	d001      	beq.n	80067f4 <create_name+0xbc>
			return FR_INVALID_NAME;
 80067f0:	2306      	movs	r3, #6
 80067f2:	e1a5      	b.n	8006b40 <create_name+0x408>
		lfn[di++] = w;					/* Store the Unicode character */
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	617a      	str	r2, [r7, #20]
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	18d3      	adds	r3, r2, r3
 8006800:	2224      	movs	r2, #36	@ 0x24
 8006802:	18ba      	adds	r2, r7, r2
 8006804:	8812      	ldrh	r2, [r2, #0]
 8006806:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006808:	e7b3      	b.n	8006772 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	18d2      	adds	r2, r2, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006814:	2324      	movs	r3, #36	@ 0x24
 8006816:	18fb      	adds	r3, r7, r3
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	2b1f      	cmp	r3, #31
 800681c:	d801      	bhi.n	8006822 <create_name+0xea>
 800681e:	2204      	movs	r2, #4
 8006820:	e000      	b.n	8006824 <create_name+0xec>
 8006822:	2200      	movs	r2, #0
 8006824:	2327      	movs	r3, #39	@ 0x27
 8006826:	18fb      	adds	r3, r7, r3
 8006828:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800682a:	e016      	b.n	800685a <create_name+0x122>
		w = lfn[di - 1];
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	4a96      	ldr	r2, [pc, #600]	@ (8006a88 <create_name+0x350>)
 8006830:	4694      	mov	ip, r2
 8006832:	4463      	add	r3, ip
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	18d2      	adds	r2, r2, r3
 800683a:	2124      	movs	r1, #36	@ 0x24
 800683c:	187b      	adds	r3, r7, r1
 800683e:	8812      	ldrh	r2, [r2, #0]
 8006840:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 8006842:	000a      	movs	r2, r1
 8006844:	18bb      	adds	r3, r7, r2
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	2b20      	cmp	r3, #32
 800684a:	d003      	beq.n	8006854 <create_name+0x11c>
 800684c:	18bb      	adds	r3, r7, r2
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	2b2e      	cmp	r3, #46	@ 0x2e
 8006852:	d106      	bne.n	8006862 <create_name+0x12a>
		di--;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	3b01      	subs	r3, #1
 8006858:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e5      	bne.n	800682c <create_name+0xf4>
 8006860:	e000      	b.n	8006864 <create_name+0x12c>
		if (w != ' ' && w != '.') break;
 8006862:	46c0      	nop			@ (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <create_name+0x136>
 800686a:	2306      	movs	r3, #6
 800686c:	e168      	b.n	8006b40 <create_name+0x408>

	lfn[di] = 0;						/* LFN is created */
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	18d3      	adds	r3, r2, r3
 8006876:	2200      	movs	r2, #0
 8006878:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	2386      	movs	r3, #134	@ 0x86
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	58d3      	ldr	r3, [r2, r3]
 8006882:	220b      	movs	r2, #11
 8006884:	2120      	movs	r1, #32
 8006886:	0018      	movs	r0, r3
 8006888:	f7fd ffa5 	bl	80047d6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800688c:	2300      	movs	r3, #0
 800688e:	61bb      	str	r3, [r7, #24]
 8006890:	e002      	b.n	8006898 <create_name+0x160>
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	3301      	adds	r3, #1
 8006896:	61bb      	str	r3, [r7, #24]
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	18d3      	adds	r3, r2, r3
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	d0f5      	beq.n	8006892 <create_name+0x15a>
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	18d3      	adds	r3, r2, r3
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80068b2:	d0ee      	beq.n	8006892 <create_name+0x15a>
	if (si) cf |= NS_LOSS | NS_LFN;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <create_name+0x198>
 80068ba:	2227      	movs	r2, #39	@ 0x27
 80068bc:	18bb      	adds	r3, r7, r2
 80068be:	18ba      	adds	r2, r7, r2
 80068c0:	7812      	ldrb	r2, [r2, #0]
 80068c2:	2103      	movs	r1, #3
 80068c4:	430a      	orrs	r2, r1
 80068c6:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80068c8:	e002      	b.n	80068d0 <create_name+0x198>
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <create_name+0x1b2>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	4a6b      	ldr	r2, [pc, #428]	@ (8006a88 <create_name+0x350>)
 80068da:	4694      	mov	ip, r2
 80068dc:	4463      	add	r3, ip
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	18d3      	adds	r3, r2, r3
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80068e8:	d1ef      	bne.n	80068ca <create_name+0x192>

	b = i = 0; ni = 8;
 80068ea:	2300      	movs	r3, #0
 80068ec:	623b      	str	r3, [r7, #32]
 80068ee:	2326      	movs	r3, #38	@ 0x26
 80068f0:	18fb      	adds	r3, r7, r3
 80068f2:	2200      	movs	r2, #0
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	2308      	movs	r3, #8
 80068f8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	61ba      	str	r2, [r7, #24]
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	18d2      	adds	r2, r2, r3
 8006906:	2124      	movs	r1, #36	@ 0x24
 8006908:	187b      	adds	r3, r7, r1
 800690a:	8812      	ldrh	r2, [r2, #0]
 800690c:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 800690e:	000a      	movs	r2, r1
 8006910:	18bb      	adds	r3, r7, r2
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d100      	bne.n	800691a <create_name+0x1e2>
 8006918:	e0b1      	b.n	8006a7e <create_name+0x346>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800691a:	18bb      	adds	r3, r7, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	2b20      	cmp	r3, #32
 8006920:	d007      	beq.n	8006932 <create_name+0x1fa>
 8006922:	18bb      	adds	r3, r7, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	2b2e      	cmp	r3, #46	@ 0x2e
 8006928:	d10b      	bne.n	8006942 <create_name+0x20a>
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	429a      	cmp	r2, r3
 8006930:	d007      	beq.n	8006942 <create_name+0x20a>
			cf |= NS_LOSS | NS_LFN; continue;
 8006932:	2227      	movs	r2, #39	@ 0x27
 8006934:	18bb      	adds	r3, r7, r2
 8006936:	18ba      	adds	r2, r7, r2
 8006938:	7812      	ldrb	r2, [r2, #0]
 800693a:	2103      	movs	r1, #3
 800693c:	430a      	orrs	r2, r1
 800693e:	701a      	strb	r2, [r3, #0]
 8006940:	e09c      	b.n	8006a7c <create_name+0x344>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006942:	6a3a      	ldr	r2, [r7, #32]
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	429a      	cmp	r2, r3
 8006948:	d203      	bcs.n	8006952 <create_name+0x21a>
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	429a      	cmp	r2, r3
 8006950:	d127      	bne.n	80069a2 <create_name+0x26a>
			if (ni == 11) {				/* Long extension */
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	2b0b      	cmp	r3, #11
 8006956:	d107      	bne.n	8006968 <create_name+0x230>
				cf |= NS_LOSS | NS_LFN; break;
 8006958:	2227      	movs	r2, #39	@ 0x27
 800695a:	18bb      	adds	r3, r7, r2
 800695c:	18ba      	adds	r2, r7, r2
 800695e:	7812      	ldrb	r2, [r2, #0]
 8006960:	2103      	movs	r1, #3
 8006962:	430a      	orrs	r2, r1
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	e096      	b.n	8006a96 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	429a      	cmp	r2, r3
 800696e:	d006      	beq.n	800697e <create_name+0x246>
 8006970:	2227      	movs	r2, #39	@ 0x27
 8006972:	18bb      	adds	r3, r7, r2
 8006974:	18ba      	adds	r2, r7, r2
 8006976:	7812      	ldrb	r2, [r2, #0]
 8006978:	2103      	movs	r1, #3
 800697a:	430a      	orrs	r2, r1
 800697c:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	429a      	cmp	r2, r3
 8006984:	d900      	bls.n	8006988 <create_name+0x250>
 8006986:	e085      	b.n	8006a94 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	61bb      	str	r3, [r7, #24]
 800698c:	2308      	movs	r3, #8
 800698e:	623b      	str	r3, [r7, #32]
 8006990:	230b      	movs	r3, #11
 8006992:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006994:	2226      	movs	r2, #38	@ 0x26
 8006996:	18bb      	adds	r3, r7, r2
 8006998:	18ba      	adds	r2, r7, r2
 800699a:	7812      	ldrb	r2, [r2, #0]
 800699c:	0092      	lsls	r2, r2, #2
 800699e:	701a      	strb	r2, [r3, #0]
 80069a0:	e06c      	b.n	8006a7c <create_name+0x344>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80069a2:	2524      	movs	r5, #36	@ 0x24
 80069a4:	197b      	adds	r3, r7, r5
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80069aa:	d91a      	bls.n	80069e2 <create_name+0x2aa>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80069ac:	197c      	adds	r4, r7, r5
 80069ae:	197b      	adds	r3, r7, r5
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	2100      	movs	r1, #0
 80069b4:	0018      	movs	r0, r3
 80069b6:	f002 fad9 	bl	8008f6c <ff_convert>
 80069ba:	0003      	movs	r3, r0
 80069bc:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80069be:	197b      	adds	r3, r7, r5
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d006      	beq.n	80069d4 <create_name+0x29c>
 80069c6:	197b      	adds	r3, r7, r5
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	3b80      	subs	r3, #128	@ 0x80
 80069cc:	4a2f      	ldr	r2, [pc, #188]	@ (8006a8c <create_name+0x354>)
 80069ce:	5cd2      	ldrb	r2, [r2, r3]
 80069d0:	197b      	adds	r3, r7, r5
 80069d2:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80069d4:	2227      	movs	r2, #39	@ 0x27
 80069d6:	18bb      	adds	r3, r7, r2
 80069d8:	18ba      	adds	r2, r7, r2
 80069da:	7812      	ldrb	r2, [r2, #0]
 80069dc:	2102      	movs	r1, #2
 80069de:	430a      	orrs	r2, r1
 80069e0:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80069e2:	2224      	movs	r2, #36	@ 0x24
 80069e4:	18bb      	adds	r3, r7, r2
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <create_name+0x2c6>
 80069ec:	18bb      	adds	r3, r7, r2
 80069ee:	881a      	ldrh	r2, [r3, #0]
 80069f0:	4b27      	ldr	r3, [pc, #156]	@ (8006a90 <create_name+0x358>)
 80069f2:	0011      	movs	r1, r2
 80069f4:	0018      	movs	r0, r3
 80069f6:	f7fd ff2c 	bl	8004852 <chk_chr>
 80069fa:	1e03      	subs	r3, r0, #0
 80069fc:	d00b      	beq.n	8006a16 <create_name+0x2de>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80069fe:	2324      	movs	r3, #36	@ 0x24
 8006a00:	18fb      	adds	r3, r7, r3
 8006a02:	225f      	movs	r2, #95	@ 0x5f
 8006a04:	801a      	strh	r2, [r3, #0]
 8006a06:	2227      	movs	r2, #39	@ 0x27
 8006a08:	18bb      	adds	r3, r7, r2
 8006a0a:	18ba      	adds	r2, r7, r2
 8006a0c:	7812      	ldrb	r2, [r2, #0]
 8006a0e:	2103      	movs	r1, #3
 8006a10:	430a      	orrs	r2, r1
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	e025      	b.n	8006a62 <create_name+0x32a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006a16:	2224      	movs	r2, #36	@ 0x24
 8006a18:	18bb      	adds	r3, r7, r2
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	2b40      	cmp	r3, #64	@ 0x40
 8006a1e:	d90b      	bls.n	8006a38 <create_name+0x300>
 8006a20:	18bb      	adds	r3, r7, r2
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	2b5a      	cmp	r3, #90	@ 0x5a
 8006a26:	d807      	bhi.n	8006a38 <create_name+0x300>
					b |= 2;
 8006a28:	2226      	movs	r2, #38	@ 0x26
 8006a2a:	18bb      	adds	r3, r7, r2
 8006a2c:	18ba      	adds	r2, r7, r2
 8006a2e:	7812      	ldrb	r2, [r2, #0]
 8006a30:	2102      	movs	r1, #2
 8006a32:	430a      	orrs	r2, r1
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	e014      	b.n	8006a62 <create_name+0x32a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006a38:	2024      	movs	r0, #36	@ 0x24
 8006a3a:	183b      	adds	r3, r7, r0
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	2b60      	cmp	r3, #96	@ 0x60
 8006a40:	d90f      	bls.n	8006a62 <create_name+0x32a>
 8006a42:	183b      	adds	r3, r7, r0
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	2b7a      	cmp	r3, #122	@ 0x7a
 8006a48:	d80b      	bhi.n	8006a62 <create_name+0x32a>
						b |= 1; w -= 0x20;
 8006a4a:	2226      	movs	r2, #38	@ 0x26
 8006a4c:	18bb      	adds	r3, r7, r2
 8006a4e:	18ba      	adds	r2, r7, r2
 8006a50:	7812      	ldrb	r2, [r2, #0]
 8006a52:	2101      	movs	r1, #1
 8006a54:	430a      	orrs	r2, r1
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	183b      	adds	r3, r7, r0
 8006a5a:	183a      	adds	r2, r7, r0
 8006a5c:	8812      	ldrh	r2, [r2, #0]
 8006a5e:	3a20      	subs	r2, #32
 8006a60:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	2386      	movs	r3, #134	@ 0x86
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	58d2      	ldr	r2, [r2, r3]
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	1c59      	adds	r1, r3, #1
 8006a6e:	6239      	str	r1, [r7, #32]
 8006a70:	18d3      	adds	r3, r2, r3
 8006a72:	2224      	movs	r2, #36	@ 0x24
 8006a74:	18ba      	adds	r2, r7, r2
 8006a76:	8812      	ldrh	r2, [r2, #0]
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006a7c:	e73d      	b.n	80068fa <create_name+0x1c2>
		if (!w) break;					/* Break on end of the LFN */
 8006a7e:	46c0      	nop			@ (mov r8, r8)
 8006a80:	e009      	b.n	8006a96 <create_name+0x35e>
 8006a82:	46c0      	nop			@ (mov r8, r8)
 8006a84:	0800a8c8 	.word	0x0800a8c8
 8006a88:	7fffffff 	.word	0x7fffffff
 8006a8c:	0800a96c 	.word	0x0800a96c
 8006a90:	0800a8d4 	.word	0x0800a8d4
			if (si > di) break;			/* No extension */
 8006a94:	46c0      	nop			@ (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	2386      	movs	r3, #134	@ 0x86
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	58d3      	ldr	r3, [r2, r3]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2be5      	cmp	r3, #229	@ 0xe5
 8006aa2:	d105      	bne.n	8006ab0 <create_name+0x378>
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	2386      	movs	r3, #134	@ 0x86
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	58d3      	ldr	r3, [r2, r3]
 8006aac:	2205      	movs	r2, #5
 8006aae:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d105      	bne.n	8006ac2 <create_name+0x38a>
 8006ab6:	2226      	movs	r2, #38	@ 0x26
 8006ab8:	18bb      	adds	r3, r7, r2
 8006aba:	18ba      	adds	r2, r7, r2
 8006abc:	7812      	ldrb	r2, [r2, #0]
 8006abe:	0092      	lsls	r2, r2, #2
 8006ac0:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006ac2:	2126      	movs	r1, #38	@ 0x26
 8006ac4:	187b      	adds	r3, r7, r1
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	220c      	movs	r2, #12
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b0c      	cmp	r3, #12
 8006ace:	d005      	beq.n	8006adc <create_name+0x3a4>
 8006ad0:	187b      	adds	r3, r7, r1
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	2b03      	cmp	r3, #3
 8006ada:	d106      	bne.n	8006aea <create_name+0x3b2>
		cf |= NS_LFN;
 8006adc:	2227      	movs	r2, #39	@ 0x27
 8006ade:	18bb      	adds	r3, r7, r2
 8006ae0:	18ba      	adds	r2, r7, r2
 8006ae2:	7812      	ldrb	r2, [r2, #0]
 8006ae4:	2102      	movs	r1, #2
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006aea:	2127      	movs	r1, #39	@ 0x27
 8006aec:	187b      	adds	r3, r7, r1
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2202      	movs	r2, #2
 8006af2:	4013      	ands	r3, r2
 8006af4:	d11a      	bne.n	8006b2c <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006af6:	2326      	movs	r3, #38	@ 0x26
 8006af8:	18fb      	adds	r3, r7, r3
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2203      	movs	r2, #3
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d105      	bne.n	8006b10 <create_name+0x3d8>
 8006b04:	187b      	adds	r3, r7, r1
 8006b06:	187a      	adds	r2, r7, r1
 8006b08:	7812      	ldrb	r2, [r2, #0]
 8006b0a:	2110      	movs	r1, #16
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006b10:	2326      	movs	r3, #38	@ 0x26
 8006b12:	18fb      	adds	r3, r7, r3
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	220c      	movs	r2, #12
 8006b18:	4013      	ands	r3, r2
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d106      	bne.n	8006b2c <create_name+0x3f4>
 8006b1e:	2227      	movs	r2, #39	@ 0x27
 8006b20:	18bb      	adds	r3, r7, r2
 8006b22:	18ba      	adds	r2, r7, r2
 8006b24:	7812      	ldrb	r2, [r2, #0]
 8006b26:	2108      	movs	r1, #8
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	2386      	movs	r3, #134	@ 0x86
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	58d3      	ldr	r3, [r2, r3]
 8006b34:	330b      	adds	r3, #11
 8006b36:	2227      	movs	r2, #39	@ 0x27
 8006b38:	18ba      	adds	r2, r7, r2
 8006b3a:	7812      	ldrb	r2, [r2, #0]
 8006b3c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006b3e:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006b40:	0018      	movs	r0, r3
 8006b42:	46bd      	mov	sp, r7
 8006b44:	b00a      	add	sp, #40	@ 0x28
 8006b46:	bdb0      	pop	{r4, r5, r7, pc}

08006b48 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006b48:	b5b0      	push	{r4, r5, r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b2f      	cmp	r3, #47	@ 0x2f
 8006b58:	d003      	beq.n	8006b62 <follow_path+0x1a>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b60:	d102      	bne.n	8006b68 <follow_path+0x20>
		path++;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	3301      	adds	r3, #1
 8006b66:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	2382      	movs	r3, #130	@ 0x82
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	2100      	movs	r1, #0
 8006b70:	50d1      	str	r1, [r2, r3]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b1f      	cmp	r3, #31
 8006b78:	d80e      	bhi.n	8006b98 <follow_path+0x50>
		res = dir_sdi(dp, 0);
 8006b7a:	230f      	movs	r3, #15
 8006b7c:	18fc      	adds	r4, r7, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2100      	movs	r1, #0
 8006b82:	0018      	movs	r0, r3
 8006b84:	f7fe fd1a 	bl	80055bc <dir_sdi>
 8006b88:	0003      	movs	r3, r0
 8006b8a:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	2385      	movs	r3, #133	@ 0x85
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	2100      	movs	r1, #0
 8006b94:	50d1      	str	r1, [r2, r3]
 8006b96:	e058      	b.n	8006c4a <follow_path+0x102>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b98:	250f      	movs	r5, #15
 8006b9a:	197c      	adds	r4, r7, r5
 8006b9c:	003a      	movs	r2, r7
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	0011      	movs	r1, r2
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f7ff fdc8 	bl	8006738 <create_name>
 8006ba8:	0003      	movs	r3, r0
 8006baa:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006bac:	197b      	adds	r3, r7, r5
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d145      	bne.n	8006c40 <follow_path+0xf8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006bb4:	197c      	adds	r4, r7, r5
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f7ff f9a9 	bl	8005f10 <dir_find>
 8006bbe:	0003      	movs	r3, r0
 8006bc0:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	2386      	movs	r3, #134	@ 0x86
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	58d2      	ldr	r2, [r2, r3]
 8006bca:	210e      	movs	r1, #14
 8006bcc:	187b      	adds	r3, r7, r1
 8006bce:	7ad2      	ldrb	r2, [r2, #11]
 8006bd0:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8006bd2:	197b      	adds	r3, r7, r5
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00c      	beq.n	8006bf4 <follow_path+0xac>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006bda:	197b      	adds	r3, r7, r5
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d130      	bne.n	8006c44 <follow_path+0xfc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006be2:	187b      	adds	r3, r7, r1
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2204      	movs	r2, #4
 8006be8:	4013      	ands	r3, r2
 8006bea:	d12b      	bne.n	8006c44 <follow_path+0xfc>
 8006bec:	197b      	adds	r3, r7, r5
 8006bee:	2205      	movs	r2, #5
 8006bf0:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8006bf2:	e027      	b.n	8006c44 <follow_path+0xfc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006bf4:	230e      	movs	r3, #14
 8006bf6:	18fb      	adds	r3, r7, r3
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2204      	movs	r2, #4
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	d123      	bne.n	8006c48 <follow_path+0x100>
			dir = dp->dir;						/* Follow the sub-directory */
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	2385      	movs	r3, #133	@ 0x85
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	58d3      	ldr	r3, [r2, r3]
 8006c08:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	330b      	adds	r3, #11
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	001a      	movs	r2, r3
 8006c12:	2310      	movs	r3, #16
 8006c14:	4013      	ands	r3, r2
 8006c16:	d104      	bne.n	8006c22 <follow_path+0xda>
				res = FR_NO_PATH; break;
 8006c18:	230f      	movs	r3, #15
 8006c1a:	18fb      	adds	r3, r7, r3
 8006c1c:	2205      	movs	r2, #5
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e013      	b.n	8006c4a <follow_path+0x102>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	2380      	movs	r3, #128	@ 0x80
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	58d3      	ldr	r3, [r2, r3]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	0011      	movs	r1, r2
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f7fe feeb 	bl	8005a0a <ld_clust>
 8006c34:	0001      	movs	r1, r0
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	2382      	movs	r3, #130	@ 0x82
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	50d1      	str	r1, [r2, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c3e:	e7ab      	b.n	8006b98 <follow_path+0x50>
			if (res != FR_OK) break;
 8006c40:	46c0      	nop			@ (mov r8, r8)
 8006c42:	e002      	b.n	8006c4a <follow_path+0x102>
				break;
 8006c44:	46c0      	nop			@ (mov r8, r8)
 8006c46:	e000      	b.n	8006c4a <follow_path+0x102>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c48:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return res;
 8006c4a:	230f      	movs	r3, #15
 8006c4c:	18fb      	adds	r3, r7, r3
 8006c4e:	781b      	ldrb	r3, [r3, #0]
}
 8006c50:	0018      	movs	r0, r3
 8006c52:	46bd      	mov	sp, r7
 8006c54:	b004      	add	sp, #16
 8006c56:	bdb0      	pop	{r4, r5, r7, pc}

08006c58 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006c60:	2301      	movs	r3, #1
 8006c62:	425b      	negs	r3, r3
 8006c64:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d031      	beq.n	8006cd2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	e002      	b.n	8006c7c <get_ldnumber+0x24>
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b1f      	cmp	r3, #31
 8006c82:	d903      	bls.n	8006c8c <get_ldnumber+0x34>
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b3a      	cmp	r3, #58	@ 0x3a
 8006c8a:	d1f4      	bne.n	8006c76 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b3a      	cmp	r3, #58	@ 0x3a
 8006c92:	d11c      	bne.n	8006cce <get_ldnumber+0x76>
			tp = *path;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	60fa      	str	r2, [r7, #12]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	3b30      	subs	r3, #48	@ 0x30
 8006ca4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2b09      	cmp	r3, #9
 8006caa:	d80e      	bhi.n	8006cca <get_ldnumber+0x72>
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d10a      	bne.n	8006cca <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d107      	bne.n	8006cca <get_ldnumber+0x72>
					vol = (int)i;
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	617b      	str	r3, [r7, #20]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	e002      	b.n	8006cd4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006cd2:	693b      	ldr	r3, [r7, #16]
}
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	b006      	add	sp, #24
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	2381      	movs	r3, #129	@ 0x81
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	2100      	movs	r1, #0
 8006cee:	54d1      	strb	r1, [r2, r3]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	238b      	movs	r3, #139	@ 0x8b
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	4249      	negs	r1, r1
 8006cfa:	50d1      	str	r1, [r2, r3]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	0011      	movs	r1, r2
 8006d02:	0018      	movs	r0, r3
 8006d04:	f7fd ffd6 	bl	8004cb4 <move_window>
 8006d08:	1e03      	subs	r3, r0, #0
 8006d0a:	d001      	beq.n	8006d10 <check_fs+0x34>
		return 3;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e04c      	b.n	8006daa <check_fs+0xce>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	33ff      	adds	r3, #255	@ 0xff
 8006d14:	33ff      	adds	r3, #255	@ 0xff
 8006d16:	3301      	adds	r3, #1
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	b21b      	sxth	r3, r3
 8006d1c:	021b      	lsls	r3, r3, #8
 8006d1e:	b21a      	sxth	r2, r3
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	23ff      	movs	r3, #255	@ 0xff
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	5ccb      	ldrb	r3, [r1, r3]
 8006d28:	b21b      	sxth	r3, r3
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	b21b      	sxth	r3, r3
 8006d2e:	4a21      	ldr	r2, [pc, #132]	@ (8006db4 <check_fs+0xd8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d001      	beq.n	8006d38 <check_fs+0x5c>
		return 2;
 8006d34:	2302      	movs	r3, #2
 8006d36:	e038      	b.n	8006daa <check_fs+0xce>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3336      	adds	r3, #54	@ 0x36
 8006d3c:	3303      	adds	r3, #3
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	061a      	lsls	r2, r3, #24
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3336      	adds	r3, #54	@ 0x36
 8006d46:	3302      	adds	r3, #2
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	041b      	lsls	r3, r3, #16
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3336      	adds	r3, #54	@ 0x36
 8006d52:	3301      	adds	r3, #1
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	021b      	lsls	r3, r3, #8
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	2136      	movs	r1, #54	@ 0x36
 8006d5e:	5c52      	ldrb	r2, [r2, r1]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	021b      	lsls	r3, r3, #8
 8006d64:	0a1b      	lsrs	r3, r3, #8
 8006d66:	4a14      	ldr	r2, [pc, #80]	@ (8006db8 <check_fs+0xdc>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d101      	bne.n	8006d70 <check_fs+0x94>
		return 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	e01c      	b.n	8006daa <check_fs+0xce>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3352      	adds	r3, #82	@ 0x52
 8006d74:	3303      	adds	r3, #3
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	061a      	lsls	r2, r3, #24
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3352      	adds	r3, #82	@ 0x52
 8006d7e:	3302      	adds	r3, #2
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	041b      	lsls	r3, r3, #16
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3352      	adds	r3, #82	@ 0x52
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	4313      	orrs	r3, r2
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	2152      	movs	r1, #82	@ 0x52
 8006d96:	5c52      	ldrb	r2, [r2, r1]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	021b      	lsls	r3, r3, #8
 8006d9c:	0a1b      	lsrs	r3, r3, #8
 8006d9e:	4a06      	ldr	r2, [pc, #24]	@ (8006db8 <check_fs+0xdc>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d101      	bne.n	8006da8 <check_fs+0xcc>
		return 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	e000      	b.n	8006daa <check_fs+0xce>

	return 1;
 8006da8:	2301      	movs	r3, #1
}
 8006daa:	0018      	movs	r0, r3
 8006dac:	46bd      	mov	sp, r7
 8006dae:	b002      	add	sp, #8
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	46c0      	nop			@ (mov r8, r8)
 8006db4:	ffffaa55 	.word	0xffffaa55
 8006db8:	00544146 	.word	0x00544146

08006dbc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006dbc:	b5b0      	push	{r4, r5, r7, lr}
 8006dbe:	b096      	sub	sp, #88	@ 0x58
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	1dfb      	adds	r3, r7, #7
 8006dc8:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	f7ff ff40 	bl	8006c58 <get_ldnumber>
 8006dd8:	0003      	movs	r3, r0
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	da01      	bge.n	8006de6 <find_volume+0x2a>
 8006de2:	230b      	movs	r3, #11
 8006de4:	e2f8      	b.n	80073d8 <find_volume+0x61c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006de6:	4bd1      	ldr	r3, [pc, #836]	@ (800712c <find_volume+0x370>)
 8006de8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006dea:	0092      	lsls	r2, r2, #2
 8006dec:	58d3      	ldr	r3, [r2, r3]
 8006dee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <find_volume+0x3e>
 8006df6:	230c      	movs	r3, #12
 8006df8:	e2ee      	b.n	80073d8 <find_volume+0x61c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dfe:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006e00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e02:	2380      	movs	r3, #128	@ 0x80
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	5cd3      	ldrb	r3, [r2, r3]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01c      	beq.n	8006e46 <find_volume+0x8a>
		stat = disk_status(fs->drv);
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0e:	4ac8      	ldr	r2, [pc, #800]	@ (8007130 <find_volume+0x374>)
 8006e10:	5c9b      	ldrb	r3, [r3, r2]
 8006e12:	2537      	movs	r5, #55	@ 0x37
 8006e14:	197c      	adds	r4, r7, r5
 8006e16:	0018      	movs	r0, r3
 8006e18:	f7fd fbf6 	bl	8004608 <disk_status>
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006e20:	0029      	movs	r1, r5
 8006e22:	187b      	adds	r3, r7, r1
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2201      	movs	r2, #1
 8006e28:	4013      	ands	r3, r2
 8006e2a:	d10c      	bne.n	8006e46 <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006e2c:	1dfb      	adds	r3, r7, #7
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d006      	beq.n	8006e42 <find_volume+0x86>
 8006e34:	187b      	adds	r3, r7, r1
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2204      	movs	r2, #4
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	d001      	beq.n	8006e42 <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 8006e3e:	230a      	movs	r3, #10
 8006e40:	e2ca      	b.n	80073d8 <find_volume+0x61c>
			return FR_OK;				/* The file system object is valid */
 8006e42:	2300      	movs	r3, #0
 8006e44:	e2c8      	b.n	80073d8 <find_volume+0x61c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006e46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e48:	2380      	movs	r3, #128	@ 0x80
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e52:	b2d9      	uxtb	r1, r3
 8006e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e56:	4ab6      	ldr	r2, [pc, #728]	@ (8007130 <find_volume+0x374>)
 8006e58:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5c:	4ab4      	ldr	r2, [pc, #720]	@ (8007130 <find_volume+0x374>)
 8006e5e:	5c9b      	ldrb	r3, [r3, r2]
 8006e60:	2537      	movs	r5, #55	@ 0x37
 8006e62:	197c      	adds	r4, r7, r5
 8006e64:	0018      	movs	r0, r3
 8006e66:	f7fd fbf1 	bl	800464c <disk_initialize>
 8006e6a:	0003      	movs	r3, r0
 8006e6c:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006e6e:	197b      	adds	r3, r7, r5
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	2201      	movs	r2, #1
 8006e74:	4013      	ands	r3, r2
 8006e76:	d001      	beq.n	8006e7c <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e2ad      	b.n	80073d8 <find_volume+0x61c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006e7c:	1dfb      	adds	r3, r7, #7
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d007      	beq.n	8006e94 <find_volume+0xd8>
 8006e84:	2337      	movs	r3, #55	@ 0x37
 8006e86:	18fb      	adds	r3, r7, r3
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2204      	movs	r2, #4
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	d001      	beq.n	8006e94 <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 8006e90:	230a      	movs	r3, #10
 8006e92:	e2a1      	b.n	80073d8 <find_volume+0x61c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006e98:	2557      	movs	r5, #87	@ 0x57
 8006e9a:	197c      	adds	r4, r7, r5
 8006e9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea0:	0011      	movs	r1, r2
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f7ff ff1a 	bl	8006cdc <check_fs>
 8006ea8:	0003      	movs	r3, r0
 8006eaa:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006eac:	197b      	adds	r3, r7, r5
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d155      	bne.n	8006f60 <find_volume+0x1a4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eb8:	e027      	b.n	8006f0a <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006eba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	33bf      	adds	r3, #191	@ 0xbf
 8006ec2:	33ff      	adds	r3, #255	@ 0xff
 8006ec4:	18d3      	adds	r3, r2, r3
 8006ec6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eca:	3304      	adds	r3, #4
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d012      	beq.n	8006ef8 <find_volume+0x13c>
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	330b      	adds	r3, #11
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	061a      	lsls	r2, r3, #24
 8006eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006edc:	330a      	adds	r3, #10
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee6:	3309      	adds	r3, #9
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	021b      	lsls	r3, r3, #8
 8006eec:	4313      	orrs	r3, r2
 8006eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ef0:	3208      	adds	r2, #8
 8006ef2:	7812      	ldrb	r2, [r2, #0]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	e000      	b.n	8006efa <find_volume+0x13e>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2214      	movs	r2, #20
 8006efc:	18ba      	adds	r2, r7, r2
 8006efe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f00:	0089      	lsls	r1, r1, #2
 8006f02:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f06:	3301      	adds	r3, #1
 8006f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f0c:	2b03      	cmp	r3, #3
 8006f0e:	d9d4      	bls.n	8006eba <find_volume+0xfe>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006f10:	2300      	movs	r3, #0
 8006f12:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006f14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <find_volume+0x164>
 8006f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006f20:	2314      	movs	r3, #20
 8006f22:	18fb      	adds	r3, r7, r3
 8006f24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f26:	0092      	lsls	r2, r2, #2
 8006f28:	58d3      	ldr	r3, [r2, r3]
 8006f2a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006f2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d008      	beq.n	8006f44 <find_volume+0x188>
 8006f32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f36:	0011      	movs	r1, r2
 8006f38:	0018      	movs	r0, r3
 8006f3a:	f7ff fecf 	bl	8006cdc <check_fs>
 8006f3e:	0003      	movs	r3, r0
 8006f40:	001a      	movs	r2, r3
 8006f42:	e000      	b.n	8006f46 <find_volume+0x18a>
 8006f44:	2202      	movs	r2, #2
 8006f46:	2157      	movs	r1, #87	@ 0x57
 8006f48:	187b      	adds	r3, r7, r1
 8006f4a:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006f4c:	187b      	adds	r3, r7, r1
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <find_volume+0x1a4>
 8006f54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f56:	3301      	adds	r3, #1
 8006f58:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d9df      	bls.n	8006f20 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f60:	2357      	movs	r3, #87	@ 0x57
 8006f62:	18fb      	adds	r3, r7, r3
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d101      	bne.n	8006f6e <find_volume+0x1b2>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e234      	b.n	80073d8 <find_volume+0x61c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006f6e:	2357      	movs	r3, #87	@ 0x57
 8006f70:	18fb      	adds	r3, r7, r3
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <find_volume+0x1c0>
 8006f78:	230d      	movs	r3, #13
 8006f7a:	e22d      	b.n	80073d8 <find_volume+0x61c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7e:	7b1b      	ldrb	r3, [r3, #12]
 8006f80:	b21b      	sxth	r3, r3
 8006f82:	021b      	lsls	r3, r3, #8
 8006f84:	b21a      	sxth	r2, r3
 8006f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f88:	7adb      	ldrb	r3, [r3, #11]
 8006f8a:	b21b      	sxth	r3, r3
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	b21a      	sxth	r2, r3
 8006f90:	2380      	movs	r3, #128	@ 0x80
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d001      	beq.n	8006f9c <find_volume+0x1e0>
		return FR_NO_FILESYSTEM;
 8006f98:	230d      	movs	r3, #13
 8006f9a:	e21d      	b.n	80073d8 <find_volume+0x61c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9e:	7ddb      	ldrb	r3, [r3, #23]
 8006fa0:	b21b      	sxth	r3, r3
 8006fa2:	021b      	lsls	r3, r3, #8
 8006fa4:	b21a      	sxth	r2, r3
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa8:	7d9b      	ldrb	r3, [r3, #22]
 8006faa:	b21b      	sxth	r3, r3
 8006fac:	4313      	orrs	r3, r2
 8006fae:	b21b      	sxth	r3, r3
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d112      	bne.n	8006fe0 <find_volume+0x224>
 8006fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbc:	2227      	movs	r2, #39	@ 0x27
 8006fbe:	5c9b      	ldrb	r3, [r3, r2]
 8006fc0:	061a      	lsls	r2, r3, #24
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc4:	2126      	movs	r1, #38	@ 0x26
 8006fc6:	5c5b      	ldrb	r3, [r3, r1]
 8006fc8:	041b      	lsls	r3, r3, #16
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fce:	2125      	movs	r1, #37	@ 0x25
 8006fd0:	5c5b      	ldrb	r3, [r3, r1]
 8006fd2:	021b      	lsls	r3, r3, #8
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fd8:	2124      	movs	r1, #36	@ 0x24
 8006fda:	5c52      	ldrb	r2, [r2, r1]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8006fe0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fe2:	2386      	movs	r3, #134	@ 0x86
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006fe8:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fec:	7c19      	ldrb	r1, [r3, #16]
 8006fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff0:	4a50      	ldr	r2, [pc, #320]	@ (8007134 <find_volume+0x378>)
 8006ff2:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff6:	4a4f      	ldr	r2, [pc, #316]	@ (8007134 <find_volume+0x378>)
 8006ff8:	5c9b      	ldrb	r3, [r3, r2]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d006      	beq.n	800700c <find_volume+0x250>
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007000:	4a4c      	ldr	r2, [pc, #304]	@ (8007134 <find_volume+0x378>)
 8007002:	5c9b      	ldrb	r3, [r3, r2]
 8007004:	2b02      	cmp	r3, #2
 8007006:	d001      	beq.n	800700c <find_volume+0x250>
		return FR_NO_FILESYSTEM;
 8007008:	230d      	movs	r3, #13
 800700a:	e1e5      	b.n	80073d8 <find_volume+0x61c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800700c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700e:	4a49      	ldr	r2, [pc, #292]	@ (8007134 <find_volume+0x378>)
 8007010:	5c9b      	ldrb	r3, [r3, r2]
 8007012:	001a      	movs	r2, r3
 8007014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007016:	4353      	muls	r3, r2
 8007018:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800701a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701c:	7b59      	ldrb	r1, [r3, #13]
 800701e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007020:	4a45      	ldr	r2, [pc, #276]	@ (8007138 <find_volume+0x37c>)
 8007022:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007026:	4a44      	ldr	r2, [pc, #272]	@ (8007138 <find_volume+0x37c>)
 8007028:	5c9b      	ldrb	r3, [r3, r2]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d009      	beq.n	8007042 <find_volume+0x286>
 800702e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007030:	4a41      	ldr	r2, [pc, #260]	@ (8007138 <find_volume+0x37c>)
 8007032:	5c9b      	ldrb	r3, [r3, r2]
 8007034:	0019      	movs	r1, r3
 8007036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007038:	4a3f      	ldr	r2, [pc, #252]	@ (8007138 <find_volume+0x37c>)
 800703a:	5c9b      	ldrb	r3, [r3, r2]
 800703c:	3b01      	subs	r3, #1
 800703e:	400b      	ands	r3, r1
 8007040:	d001      	beq.n	8007046 <find_volume+0x28a>
		return FR_NO_FILESYSTEM;
 8007042:	230d      	movs	r3, #13
 8007044:	e1c8      	b.n	80073d8 <find_volume+0x61c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007048:	7c9b      	ldrb	r3, [r3, #18]
 800704a:	b21b      	sxth	r3, r3
 800704c:	021b      	lsls	r3, r3, #8
 800704e:	b21a      	sxth	r2, r3
 8007050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007052:	7c5b      	ldrb	r3, [r3, #17]
 8007054:	b21b      	sxth	r3, r3
 8007056:	4313      	orrs	r3, r2
 8007058:	b21b      	sxth	r3, r3
 800705a:	b299      	uxth	r1, r3
 800705c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800705e:	2382      	movs	r3, #130	@ 0x82
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007064:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007066:	2382      	movs	r3, #130	@ 0x82
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	5ad3      	ldrh	r3, [r2, r3]
 800706c:	220f      	movs	r2, #15
 800706e:	4013      	ands	r3, r2
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <find_volume+0x2be>
		return FR_NO_FILESYSTEM;
 8007076:	230d      	movs	r3, #13
 8007078:	e1ae      	b.n	80073d8 <find_volume+0x61c>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800707a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707c:	7d1b      	ldrb	r3, [r3, #20]
 800707e:	b21b      	sxth	r3, r3
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	b21a      	sxth	r2, r3
 8007084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007086:	7cdb      	ldrb	r3, [r3, #19]
 8007088:	b21b      	sxth	r3, r3
 800708a:	4313      	orrs	r3, r2
 800708c:	b21b      	sxth	r3, r3
 800708e:	b29b      	uxth	r3, r3
 8007090:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007094:	2b00      	cmp	r3, #0
 8007096:	d112      	bne.n	80070be <find_volume+0x302>
 8007098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709a:	2223      	movs	r2, #35	@ 0x23
 800709c:	5c9b      	ldrb	r3, [r3, r2]
 800709e:	061a      	lsls	r2, r3, #24
 80070a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a2:	2122      	movs	r1, #34	@ 0x22
 80070a4:	5c5b      	ldrb	r3, [r3, r1]
 80070a6:	041b      	lsls	r3, r3, #16
 80070a8:	431a      	orrs	r2, r3
 80070aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ac:	2121      	movs	r1, #33	@ 0x21
 80070ae:	5c5b      	ldrb	r3, [r3, r1]
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	4313      	orrs	r3, r2
 80070b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070b6:	2120      	movs	r1, #32
 80070b8:	5c52      	ldrb	r2, [r2, r1]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80070be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c0:	7bdb      	ldrb	r3, [r3, #15]
 80070c2:	b21b      	sxth	r3, r3
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	b21a      	sxth	r2, r3
 80070c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ca:	7b9b      	ldrb	r3, [r3, #14]
 80070cc:	b21b      	sxth	r3, r3
 80070ce:	4313      	orrs	r3, r2
 80070d0:	b21a      	sxth	r2, r3
 80070d2:	212e      	movs	r1, #46	@ 0x2e
 80070d4:	187b      	adds	r3, r7, r1
 80070d6:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80070d8:	187b      	adds	r3, r7, r1
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <find_volume+0x328>
 80070e0:	230d      	movs	r3, #13
 80070e2:	e179      	b.n	80073d8 <find_volume+0x61c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80070e4:	232e      	movs	r3, #46	@ 0x2e
 80070e6:	18fb      	adds	r3, r7, r3
 80070e8:	881a      	ldrh	r2, [r3, #0]
 80070ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070ec:	18d3      	adds	r3, r2, r3
 80070ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80070f0:	2282      	movs	r2, #130	@ 0x82
 80070f2:	0092      	lsls	r2, r2, #2
 80070f4:	5a8a      	ldrh	r2, [r1, r2]
 80070f6:	0912      	lsrs	r2, r2, #4
 80070f8:	b292      	uxth	r2, r2
 80070fa:	189b      	adds	r3, r3, r2
 80070fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80070fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007102:	429a      	cmp	r2, r3
 8007104:	d201      	bcs.n	800710a <find_volume+0x34e>
 8007106:	230d      	movs	r3, #13
 8007108:	e166      	b.n	80073d8 <find_volume+0x61c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800710a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800710c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007112:	4909      	ldr	r1, [pc, #36]	@ (8007138 <find_volume+0x37c>)
 8007114:	5c5b      	ldrb	r3, [r3, r1]
 8007116:	0019      	movs	r1, r3
 8007118:	0010      	movs	r0, r2
 800711a:	f7f9 f811 	bl	8000140 <__udivsi3>
 800711e:	0003      	movs	r3, r0
 8007120:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007124:	2b00      	cmp	r3, #0
 8007126:	d109      	bne.n	800713c <find_volume+0x380>
 8007128:	230d      	movs	r3, #13
 800712a:	e155      	b.n	80073d8 <find_volume+0x61c>
 800712c:	20000640 	.word	0x20000640
 8007130:	00000201 	.word	0x00000201
 8007134:	00000203 	.word	0x00000203
 8007138:	00000202 	.word	0x00000202
	fmt = FS_FAT12;
 800713c:	2157      	movs	r1, #87	@ 0x57
 800713e:	187b      	adds	r3, r7, r1
 8007140:	2201      	movs	r2, #1
 8007142:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	4aa6      	ldr	r2, [pc, #664]	@ (80073e0 <find_volume+0x624>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d902      	bls.n	8007152 <find_volume+0x396>
 800714c:	187b      	adds	r3, r7, r1
 800714e:	2202      	movs	r2, #2
 8007150:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	4aa3      	ldr	r2, [pc, #652]	@ (80073e4 <find_volume+0x628>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d903      	bls.n	8007162 <find_volume+0x3a6>
 800715a:	2357      	movs	r3, #87	@ 0x57
 800715c:	18fb      	adds	r3, r7, r3
 800715e:	2203      	movs	r2, #3
 8007160:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007164:	1c99      	adds	r1, r3, #2
 8007166:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007168:	2385      	movs	r3, #133	@ 0x85
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	50d1      	str	r1, [r2, r3]
	fs->volbase = bsect;								/* Volume start sector */
 800716e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007170:	2387      	movs	r3, #135	@ 0x87
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007176:	50d1      	str	r1, [r2, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007178:	232e      	movs	r3, #46	@ 0x2e
 800717a:	18fb      	adds	r3, r7, r3
 800717c:	881a      	ldrh	r2, [r3, #0]
 800717e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007180:	18d1      	adds	r1, r2, r3
 8007182:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007184:	2388      	movs	r3, #136	@ 0x88
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 800718a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800718c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718e:	18d1      	adds	r1, r2, r3
 8007190:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007192:	238a      	movs	r3, #138	@ 0x8a
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 8007198:	2357      	movs	r3, #87	@ 0x57
 800719a:	18fb      	adds	r3, r7, r3
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d125      	bne.n	80071ee <find_volume+0x432>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80071a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071a4:	2382      	movs	r3, #130	@ 0x82
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	5ad3      	ldrh	r3, [r2, r3]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <find_volume+0x3f6>
 80071ae:	230d      	movs	r3, #13
 80071b0:	e112      	b.n	80073d8 <find_volume+0x61c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80071b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b4:	222f      	movs	r2, #47	@ 0x2f
 80071b6:	5c9b      	ldrb	r3, [r3, r2]
 80071b8:	061a      	lsls	r2, r3, #24
 80071ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071bc:	212e      	movs	r1, #46	@ 0x2e
 80071be:	5c5b      	ldrb	r3, [r3, r1]
 80071c0:	041b      	lsls	r3, r3, #16
 80071c2:	431a      	orrs	r2, r3
 80071c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c6:	212d      	movs	r1, #45	@ 0x2d
 80071c8:	5c5b      	ldrb	r3, [r3, r1]
 80071ca:	021b      	lsls	r3, r3, #8
 80071cc:	4313      	orrs	r3, r2
 80071ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071d0:	212c      	movs	r1, #44	@ 0x2c
 80071d2:	5c52      	ldrb	r2, [r2, r1]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	0019      	movs	r1, r3
 80071d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071da:	2389      	movs	r3, #137	@ 0x89
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	50d1      	str	r1, [r2, r3]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80071e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071e2:	2385      	movs	r3, #133	@ 0x85
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	58d3      	ldr	r3, [r2, r3]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ec:	e02c      	b.n	8007248 <find_volume+0x48c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80071ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071f0:	2382      	movs	r3, #130	@ 0x82
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	5ad3      	ldrh	r3, [r2, r3]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <find_volume+0x442>
 80071fa:	230d      	movs	r3, #13
 80071fc:	e0ec      	b.n	80073d8 <find_volume+0x61c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80071fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007200:	2388      	movs	r3, #136	@ 0x88
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	58d2      	ldr	r2, [r2, r3]
 8007206:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007208:	18d1      	adds	r1, r2, r3
 800720a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800720c:	2389      	movs	r3, #137	@ 0x89
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	50d1      	str	r1, [r2, r3]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007212:	2357      	movs	r3, #87	@ 0x57
 8007214:	18fb      	adds	r3, r7, r3
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b02      	cmp	r3, #2
 800721a:	d105      	bne.n	8007228 <find_volume+0x46c>
 800721c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800721e:	2385      	movs	r3, #133	@ 0x85
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	58d3      	ldr	r3, [r2, r3]
 8007224:	005b      	lsls	r3, r3, #1
 8007226:	e00e      	b.n	8007246 <find_volume+0x48a>
 8007228:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800722a:	2385      	movs	r3, #133	@ 0x85
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	58d2      	ldr	r2, [r2, r3]
 8007230:	0013      	movs	r3, r2
 8007232:	005b      	lsls	r3, r3, #1
 8007234:	189b      	adds	r3, r3, r2
 8007236:	085a      	lsrs	r2, r3, #1
 8007238:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800723a:	2385      	movs	r3, #133	@ 0x85
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	58cb      	ldr	r3, [r1, r3]
 8007240:	2101      	movs	r1, #1
 8007242:	400b      	ands	r3, r1
 8007244:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007246:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007248:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800724a:	2386      	movs	r3, #134	@ 0x86
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	58d2      	ldr	r2, [r2, r3]
 8007250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007252:	4965      	ldr	r1, [pc, #404]	@ (80073e8 <find_volume+0x62c>)
 8007254:	468c      	mov	ip, r1
 8007256:	4463      	add	r3, ip
 8007258:	0a5b      	lsrs	r3, r3, #9
 800725a:	429a      	cmp	r2, r3
 800725c:	d201      	bcs.n	8007262 <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 800725e:	230d      	movs	r3, #13
 8007260:	e0ba      	b.n	80073d8 <find_volume+0x61c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007262:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007264:	2384      	movs	r3, #132	@ 0x84
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	2101      	movs	r1, #1
 800726a:	4249      	negs	r1, r1
 800726c:	50d1      	str	r1, [r2, r3]
 800726e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007270:	2384      	movs	r3, #132	@ 0x84
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	58d1      	ldr	r1, [r2, r3]
 8007276:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007278:	2383      	movs	r3, #131	@ 0x83
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	50d1      	str	r1, [r2, r3]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800727e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007280:	4a5a      	ldr	r2, [pc, #360]	@ (80073ec <find_volume+0x630>)
 8007282:	2180      	movs	r1, #128	@ 0x80
 8007284:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007286:	2357      	movs	r3, #87	@ 0x57
 8007288:	18fb      	adds	r3, r7, r3
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b03      	cmp	r3, #3
 800728e:	d000      	beq.n	8007292 <find_volume+0x4d6>
 8007290:	e08b      	b.n	80073aa <find_volume+0x5ee>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	2231      	movs	r2, #49	@ 0x31
 8007296:	5c9b      	ldrb	r3, [r3, r2]
 8007298:	b21b      	sxth	r3, r3
 800729a:	021b      	lsls	r3, r3, #8
 800729c:	b21a      	sxth	r2, r3
 800729e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a0:	2130      	movs	r1, #48	@ 0x30
 80072a2:	5c5b      	ldrb	r3, [r3, r1]
 80072a4:	b21b      	sxth	r3, r3
 80072a6:	4313      	orrs	r3, r2
 80072a8:	b21b      	sxth	r3, r3
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d000      	beq.n	80072b0 <find_volume+0x4f4>
 80072ae:	e07c      	b.n	80073aa <find_volume+0x5ee>
		&& move_window(fs, bsect + 1) == FR_OK)
 80072b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b6:	0011      	movs	r1, r2
 80072b8:	0018      	movs	r0, r3
 80072ba:	f7fd fcfb 	bl	8004cb4 <move_window>
 80072be:	1e03      	subs	r3, r0, #0
 80072c0:	d173      	bne.n	80073aa <find_volume+0x5ee>
	{
		fs->fsi_flag = 0;
 80072c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c4:	4a49      	ldr	r2, [pc, #292]	@ (80073ec <find_volume+0x630>)
 80072c6:	2100      	movs	r1, #0
 80072c8:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80072ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072cc:	4a46      	ldr	r2, [pc, #280]	@ (80073e8 <find_volume+0x62c>)
 80072ce:	5c9b      	ldrb	r3, [r3, r2]
 80072d0:	b21b      	sxth	r3, r3
 80072d2:	021b      	lsls	r3, r3, #8
 80072d4:	b21a      	sxth	r2, r3
 80072d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80072d8:	23ff      	movs	r3, #255	@ 0xff
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	5ccb      	ldrb	r3, [r1, r3]
 80072de:	b21b      	sxth	r3, r3
 80072e0:	4313      	orrs	r3, r2
 80072e2:	b21b      	sxth	r3, r3
 80072e4:	4a42      	ldr	r2, [pc, #264]	@ (80073f0 <find_volume+0x634>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d15f      	bne.n	80073aa <find_volume+0x5ee>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80072ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ec:	78db      	ldrb	r3, [r3, #3]
 80072ee:	061a      	lsls	r2, r3, #24
 80072f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f2:	789b      	ldrb	r3, [r3, #2]
 80072f4:	041b      	lsls	r3, r3, #16
 80072f6:	431a      	orrs	r2, r3
 80072f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	4313      	orrs	r3, r2
 8007300:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007302:	7812      	ldrb	r2, [r2, #0]
 8007304:	4313      	orrs	r3, r2
 8007306:	4a3b      	ldr	r2, [pc, #236]	@ (80073f4 <find_volume+0x638>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d14e      	bne.n	80073aa <find_volume+0x5ee>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800730c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800730e:	23e8      	movs	r3, #232	@ 0xe8
 8007310:	33ff      	adds	r3, #255	@ 0xff
 8007312:	5cd3      	ldrb	r3, [r2, r3]
 8007314:	061a      	lsls	r2, r3, #24
 8007316:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007318:	23f3      	movs	r3, #243	@ 0xf3
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	5ccb      	ldrb	r3, [r1, r3]
 800731e:	041b      	lsls	r3, r3, #16
 8007320:	431a      	orrs	r2, r3
 8007322:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007324:	23e6      	movs	r3, #230	@ 0xe6
 8007326:	33ff      	adds	r3, #255	@ 0xff
 8007328:	5ccb      	ldrb	r3, [r1, r3]
 800732a:	021b      	lsls	r3, r3, #8
 800732c:	4313      	orrs	r3, r2
 800732e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007330:	22f2      	movs	r2, #242	@ 0xf2
 8007332:	0052      	lsls	r2, r2, #1
 8007334:	5c8a      	ldrb	r2, [r1, r2]
 8007336:	4313      	orrs	r3, r2
 8007338:	4a2f      	ldr	r2, [pc, #188]	@ (80073f8 <find_volume+0x63c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d135      	bne.n	80073aa <find_volume+0x5ee>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800733e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007340:	23ec      	movs	r3, #236	@ 0xec
 8007342:	33ff      	adds	r3, #255	@ 0xff
 8007344:	5cd3      	ldrb	r3, [r2, r3]
 8007346:	061a      	lsls	r2, r3, #24
 8007348:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800734a:	23f5      	movs	r3, #245	@ 0xf5
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	5ccb      	ldrb	r3, [r1, r3]
 8007350:	041b      	lsls	r3, r3, #16
 8007352:	431a      	orrs	r2, r3
 8007354:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007356:	23ea      	movs	r3, #234	@ 0xea
 8007358:	33ff      	adds	r3, #255	@ 0xff
 800735a:	5ccb      	ldrb	r3, [r1, r3]
 800735c:	021b      	lsls	r3, r3, #8
 800735e:	4313      	orrs	r3, r2
 8007360:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007362:	22f4      	movs	r2, #244	@ 0xf4
 8007364:	0052      	lsls	r2, r2, #1
 8007366:	5c8a      	ldrb	r2, [r1, r2]
 8007368:	4313      	orrs	r3, r2
 800736a:	0019      	movs	r1, r3
 800736c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800736e:	2384      	movs	r3, #132	@ 0x84
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007374:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007376:	23f0      	movs	r3, #240	@ 0xf0
 8007378:	33ff      	adds	r3, #255	@ 0xff
 800737a:	5cd3      	ldrb	r3, [r2, r3]
 800737c:	061a      	lsls	r2, r3, #24
 800737e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007380:	23f7      	movs	r3, #247	@ 0xf7
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	5ccb      	ldrb	r3, [r1, r3]
 8007386:	041b      	lsls	r3, r3, #16
 8007388:	431a      	orrs	r2, r3
 800738a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800738c:	23ee      	movs	r3, #238	@ 0xee
 800738e:	33ff      	adds	r3, #255	@ 0xff
 8007390:	5ccb      	ldrb	r3, [r1, r3]
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	4313      	orrs	r3, r2
 8007396:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007398:	22f6      	movs	r2, #246	@ 0xf6
 800739a:	0052      	lsls	r2, r2, #1
 800739c:	5c8a      	ldrb	r2, [r1, r2]
 800739e:	4313      	orrs	r3, r2
 80073a0:	0019      	movs	r1, r3
 80073a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073a4:	2383      	movs	r3, #131	@ 0x83
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	50d1      	str	r1, [r2, r3]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80073aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073ac:	2357      	movs	r3, #87	@ 0x57
 80073ae:	18f9      	adds	r1, r7, r3
 80073b0:	2380      	movs	r3, #128	@ 0x80
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	7809      	ldrb	r1, [r1, #0]
 80073b6:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 80073b8:	4b10      	ldr	r3, [pc, #64]	@ (80073fc <find_volume+0x640>)
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	3301      	adds	r3, #1
 80073be:	b29a      	uxth	r2, r3
 80073c0:	4b0e      	ldr	r3, [pc, #56]	@ (80073fc <find_volume+0x640>)
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	4b0d      	ldr	r3, [pc, #52]	@ (80073fc <find_volume+0x640>)
 80073c6:	8819      	ldrh	r1, [r3, #0]
 80073c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007400 <find_volume+0x644>)
 80073cc:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80073ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d0:	0018      	movs	r0, r3
 80073d2:	f7fd fbf1 	bl	8004bb8 <clear_lock>
#endif

	return FR_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	0018      	movs	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	b016      	add	sp, #88	@ 0x58
 80073de:	bdb0      	pop	{r4, r5, r7, pc}
 80073e0:	00000ff5 	.word	0x00000ff5
 80073e4:	0000fff5 	.word	0x0000fff5
 80073e8:	000001ff 	.word	0x000001ff
 80073ec:	00000205 	.word	0x00000205
 80073f0:	ffffaa55 	.word	0xffffaa55
 80073f4:	41615252 	.word	0x41615252
 80073f8:	61417272 	.word	0x61417272
 80073fc:	20000644 	.word	0x20000644
 8007400:	00000206 	.word	0x00000206

08007404 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d028      	beq.n	8007468 <validate+0x64>
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	2380      	movs	r3, #128	@ 0x80
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	58d3      	ldr	r3, [r2, r3]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d022      	beq.n	8007468 <validate+0x64>
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	2380      	movs	r3, #128	@ 0x80
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	58d2      	ldr	r2, [r2, r3]
 800742a:	2380      	movs	r3, #128	@ 0x80
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	5cd3      	ldrb	r3, [r2, r3]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d019      	beq.n	8007468 <validate+0x64>
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	2380      	movs	r3, #128	@ 0x80
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	58d3      	ldr	r3, [r2, r3]
 800743c:	4a0e      	ldr	r2, [pc, #56]	@ (8007478 <validate+0x74>)
 800743e:	5a9a      	ldrh	r2, [r3, r2]
 8007440:	68f9      	ldr	r1, [r7, #12]
 8007442:	2381      	movs	r3, #129	@ 0x81
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	5acb      	ldrh	r3, [r1, r3]
 8007448:	429a      	cmp	r2, r3
 800744a:	d10d      	bne.n	8007468 <validate+0x64>
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	2380      	movs	r3, #128	@ 0x80
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	58d3      	ldr	r3, [r2, r3]
 8007454:	4a09      	ldr	r2, [pc, #36]	@ (800747c <validate+0x78>)
 8007456:	5c9b      	ldrb	r3, [r3, r2]
 8007458:	0018      	movs	r0, r3
 800745a:	f7fd f8d5 	bl	8004608 <disk_status>
 800745e:	0003      	movs	r3, r0
 8007460:	001a      	movs	r2, r3
 8007462:	2301      	movs	r3, #1
 8007464:	4013      	ands	r3, r2
 8007466:	d001      	beq.n	800746c <validate+0x68>
		return FR_INVALID_OBJECT;
 8007468:	2309      	movs	r3, #9
 800746a:	e000      	b.n	800746e <validate+0x6a>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	0018      	movs	r0, r3
 8007470:	46bd      	mov	sp, r7
 8007472:	b004      	add	sp, #16
 8007474:	bd80      	pop	{r7, pc}
 8007476:	46c0      	nop			@ (mov r8, r8)
 8007478:	00000206 	.word	0x00000206
 800747c:	00000201 	.word	0x00000201

08007480 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007480:	b5b0      	push	{r4, r5, r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	1dfb      	adds	r3, r7, #7
 800748c:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007492:	2310      	movs	r3, #16
 8007494:	18fb      	adds	r3, r7, r3
 8007496:	0018      	movs	r0, r3
 8007498:	f7ff fbde 	bl	8006c58 <get_ldnumber>
 800749c:	0003      	movs	r3, r0
 800749e:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	da01      	bge.n	80074aa <f_mount+0x2a>
 80074a6:	230b      	movs	r3, #11
 80074a8:	e034      	b.n	8007514 <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80074aa:	4b1c      	ldr	r3, [pc, #112]	@ (800751c <f_mount+0x9c>)
 80074ac:	69fa      	ldr	r2, [r7, #28]
 80074ae:	0092      	lsls	r2, r2, #2
 80074b0:	58d3      	ldr	r3, [r2, r3]
 80074b2:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d008      	beq.n	80074cc <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	0018      	movs	r0, r3
 80074be:	f7fd fb7b 	bl	8004bb8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	2380      	movs	r3, #128	@ 0x80
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	2100      	movs	r1, #0
 80074ca:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d004      	beq.n	80074dc <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	2380      	movs	r3, #128	@ 0x80
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	2100      	movs	r1, #0
 80074da:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80074dc:	68f9      	ldr	r1, [r7, #12]
 80074de:	4b0f      	ldr	r3, [pc, #60]	@ (800751c <f_mount+0x9c>)
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	0092      	lsls	r2, r2, #2
 80074e4:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <f_mount+0x74>
 80074ec:	1dfb      	adds	r3, r7, #7
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d001      	beq.n	80074f8 <f_mount+0x78>
 80074f4:	2300      	movs	r3, #0
 80074f6:	e00d      	b.n	8007514 <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80074f8:	2517      	movs	r5, #23
 80074fa:	197c      	adds	r4, r7, r5
 80074fc:	2308      	movs	r3, #8
 80074fe:	18f9      	adds	r1, r7, r3
 8007500:	230c      	movs	r3, #12
 8007502:	18fb      	adds	r3, r7, r3
 8007504:	2200      	movs	r2, #0
 8007506:	0018      	movs	r0, r3
 8007508:	f7ff fc58 	bl	8006dbc <find_volume>
 800750c:	0003      	movs	r3, r0
 800750e:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8007510:	197b      	adds	r3, r7, r5
 8007512:	781b      	ldrb	r3, [r3, #0]
}
 8007514:	0018      	movs	r0, r3
 8007516:	46bd      	mov	sp, r7
 8007518:	b008      	add	sp, #32
 800751a:	bdb0      	pop	{r4, r5, r7, pc}
 800751c:	20000640 	.word	0x20000640

08007520 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007522:	4cdd      	ldr	r4, [pc, #884]	@ (8007898 <f_open+0x378>)
 8007524:	44a5      	add	sp, r4
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	4bdb      	ldr	r3, [pc, #876]	@ (800789c <f_open+0x37c>)
 800752e:	2196      	movs	r1, #150	@ 0x96
 8007530:	0089      	lsls	r1, r1, #2
 8007532:	185b      	adds	r3, r3, r1
 8007534:	19db      	adds	r3, r3, r7
 8007536:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <f_open+0x22>
 800753e:	2309      	movs	r3, #9
 8007540:	e285      	b.n	8007a4e <f_open+0x52e>
	fp->fs = 0;			/* Clear file object */
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	2380      	movs	r3, #128	@ 0x80
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	2100      	movs	r1, #0
 800754a:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800754c:	4bd3      	ldr	r3, [pc, #844]	@ (800789c <f_open+0x37c>)
 800754e:	2096      	movs	r0, #150	@ 0x96
 8007550:	0080      	lsls	r0, r0, #2
 8007552:	181b      	adds	r3, r3, r0
 8007554:	19db      	adds	r3, r3, r7
 8007556:	4ad1      	ldr	r2, [pc, #836]	@ (800789c <f_open+0x37c>)
 8007558:	1812      	adds	r2, r2, r0
 800755a:	19d2      	adds	r2, r2, r7
 800755c:	7812      	ldrb	r2, [r2, #0]
 800755e:	211f      	movs	r1, #31
 8007560:	400a      	ands	r2, r1
 8007562:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007564:	4bcd      	ldr	r3, [pc, #820]	@ (800789c <f_open+0x37c>)
 8007566:	181b      	adds	r3, r3, r0
 8007568:	19db      	adds	r3, r3, r7
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2201      	movs	r2, #1
 800756e:	4393      	bics	r3, r2
 8007570:	b2da      	uxtb	r2, r3
 8007572:	4dcb      	ldr	r5, [pc, #812]	@ (80078a0 <f_open+0x380>)
 8007574:	197c      	adds	r4, r7, r5
 8007576:	2308      	movs	r3, #8
 8007578:	18f9      	adds	r1, r7, r3
 800757a:	231c      	movs	r3, #28
 800757c:	18fb      	adds	r3, r7, r3
 800757e:	2080      	movs	r0, #128	@ 0x80
 8007580:	0080      	lsls	r0, r0, #2
 8007582:	4684      	mov	ip, r0
 8007584:	4463      	add	r3, ip
 8007586:	0018      	movs	r0, r3
 8007588:	f7ff fc18 	bl	8006dbc <find_volume>
 800758c:	0003      	movs	r3, r0
 800758e:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007590:	197b      	adds	r3, r7, r5
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d000      	beq.n	800759a <f_open+0x7a>
 8007598:	e256      	b.n	8007a48 <f_open+0x528>
		INIT_BUF(dj);
 800759a:	2380      	movs	r3, #128	@ 0x80
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	0018      	movs	r0, r3
 80075a0:	f001 fd66 	bl	8009070 <ff_memalloc>
 80075a4:	0003      	movs	r3, r0
 80075a6:	2293      	movs	r2, #147	@ 0x93
 80075a8:	0092      	lsls	r2, r2, #2
 80075aa:	18b9      	adds	r1, r7, r2
 80075ac:	600b      	str	r3, [r1, #0]
 80075ae:	18bb      	adds	r3, r7, r2
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <f_open+0x9a>
 80075b6:	2311      	movs	r3, #17
 80075b8:	e249      	b.n	8007a4e <f_open+0x52e>
 80075ba:	4bba      	ldr	r3, [pc, #744]	@ (80078a4 <f_open+0x384>)
 80075bc:	2596      	movs	r5, #150	@ 0x96
 80075be:	00ad      	lsls	r5, r5, #2
 80075c0:	195b      	adds	r3, r3, r5
 80075c2:	19da      	adds	r2, r3, r7
 80075c4:	2388      	movs	r3, #136	@ 0x88
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	2193      	movs	r1, #147	@ 0x93
 80075ca:	0089      	lsls	r1, r1, #2
 80075cc:	1879      	adds	r1, r7, r1
 80075ce:	6809      	ldr	r1, [r1, #0]
 80075d0:	50d1      	str	r1, [r2, r3]
 80075d2:	4bb4      	ldr	r3, [pc, #720]	@ (80078a4 <f_open+0x384>)
 80075d4:	195b      	adds	r3, r3, r5
 80075d6:	19da      	adds	r2, r3, r7
 80075d8:	2386      	movs	r3, #134	@ 0x86
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	2110      	movs	r1, #16
 80075de:	1879      	adds	r1, r7, r1
 80075e0:	50d1      	str	r1, [r2, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	4eae      	ldr	r6, [pc, #696]	@ (80078a0 <f_open+0x380>)
 80075e6:	19bc      	adds	r4, r7, r6
 80075e8:	231c      	movs	r3, #28
 80075ea:	18fb      	adds	r3, r7, r3
 80075ec:	0011      	movs	r1, r2
 80075ee:	0018      	movs	r0, r3
 80075f0:	f7ff faaa 	bl	8006b48 <follow_path>
 80075f4:	0003      	movs	r3, r0
 80075f6:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 80075f8:	4baa      	ldr	r3, [pc, #680]	@ (80078a4 <f_open+0x384>)
 80075fa:	195b      	adds	r3, r3, r5
 80075fc:	19da      	adds	r2, r3, r7
 80075fe:	2385      	movs	r3, #133	@ 0x85
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	58d3      	ldr	r3, [r2, r3]
 8007604:	2294      	movs	r2, #148	@ 0x94
 8007606:	0092      	lsls	r2, r2, #2
 8007608:	18b9      	adds	r1, r7, r2
 800760a:	600b      	str	r3, [r1, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800760c:	19bb      	adds	r3, r7, r6
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d11d      	bne.n	8007650 <f_open+0x130>
			if (!dir)	/* Default directory itself */
 8007614:	18bb      	adds	r3, r7, r2
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d103      	bne.n	8007624 <f_open+0x104>
				res = FR_INVALID_NAME;
 800761c:	19bb      	adds	r3, r7, r6
 800761e:	2206      	movs	r2, #6
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	e015      	b.n	8007650 <f_open+0x130>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007624:	4b9d      	ldr	r3, [pc, #628]	@ (800789c <f_open+0x37c>)
 8007626:	2296      	movs	r2, #150	@ 0x96
 8007628:	0092      	lsls	r2, r2, #2
 800762a:	189b      	adds	r3, r3, r2
 800762c:	19db      	adds	r3, r3, r7
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2201      	movs	r2, #1
 8007632:	429a      	cmp	r2, r3
 8007634:	419b      	sbcs	r3, r3
 8007636:	425b      	negs	r3, r3
 8007638:	b2db      	uxtb	r3, r3
 800763a:	001a      	movs	r2, r3
 800763c:	4b98      	ldr	r3, [pc, #608]	@ (80078a0 <f_open+0x380>)
 800763e:	18fc      	adds	r4, r7, r3
 8007640:	231c      	movs	r3, #28
 8007642:	18fb      	adds	r3, r7, r3
 8007644:	0011      	movs	r1, r2
 8007646:	0018      	movs	r0, r3
 8007648:	f7fd f91c 	bl	8004884 <chk_lock>
 800764c:	0003      	movs	r3, r0
 800764e:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007650:	4b92      	ldr	r3, [pc, #584]	@ (800789c <f_open+0x37c>)
 8007652:	2296      	movs	r2, #150	@ 0x96
 8007654:	0092      	lsls	r2, r2, #2
 8007656:	189b      	adds	r3, r3, r2
 8007658:	19db      	adds	r3, r3, r7
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	221c      	movs	r2, #28
 800765e:	4013      	ands	r3, r2
 8007660:	d100      	bne.n	8007664 <f_open+0x144>
 8007662:	e106      	b.n	8007872 <f_open+0x352>
			if (res != FR_OK) {					/* No file, create new */
 8007664:	4a8e      	ldr	r2, [pc, #568]	@ (80078a0 <f_open+0x380>)
 8007666:	18bb      	adds	r3, r7, r2
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d02a      	beq.n	80076c4 <f_open+0x1a4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800766e:	18bb      	adds	r3, r7, r2
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2b04      	cmp	r3, #4
 8007674:	d10f      	bne.n	8007696 <f_open+0x176>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007676:	f7fd f973 	bl	8004960 <enq_lock>
 800767a:	1e03      	subs	r3, r0, #0
 800767c:	d007      	beq.n	800768e <f_open+0x16e>
 800767e:	231c      	movs	r3, #28
 8007680:	18fb      	adds	r3, r7, r3
 8007682:	0018      	movs	r0, r3
 8007684:	f7fe fe30 	bl	80062e8 <dir_register>
 8007688:	0003      	movs	r3, r0
 800768a:	001a      	movs	r2, r3
 800768c:	e000      	b.n	8007690 <f_open+0x170>
 800768e:	2212      	movs	r2, #18
 8007690:	4b83      	ldr	r3, [pc, #524]	@ (80078a0 <f_open+0x380>)
 8007692:	18fb      	adds	r3, r7, r3
 8007694:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007696:	4b81      	ldr	r3, [pc, #516]	@ (800789c <f_open+0x37c>)
 8007698:	2096      	movs	r0, #150	@ 0x96
 800769a:	0080      	lsls	r0, r0, #2
 800769c:	181b      	adds	r3, r3, r0
 800769e:	19db      	adds	r3, r3, r7
 80076a0:	4a7e      	ldr	r2, [pc, #504]	@ (800789c <f_open+0x37c>)
 80076a2:	1812      	adds	r2, r2, r0
 80076a4:	19d2      	adds	r2, r2, r7
 80076a6:	7812      	ldrb	r2, [r2, #0]
 80076a8:	2108      	movs	r1, #8
 80076aa:	430a      	orrs	r2, r1
 80076ac:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80076ae:	4b7d      	ldr	r3, [pc, #500]	@ (80078a4 <f_open+0x384>)
 80076b0:	181b      	adds	r3, r3, r0
 80076b2:	19da      	adds	r2, r3, r7
 80076b4:	2385      	movs	r3, #133	@ 0x85
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	58d3      	ldr	r3, [r2, r3]
 80076ba:	2294      	movs	r2, #148	@ 0x94
 80076bc:	0092      	lsls	r2, r2, #2
 80076be:	18ba      	adds	r2, r7, r2
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	e01b      	b.n	80076fc <f_open+0x1dc>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80076c4:	2394      	movs	r3, #148	@ 0x94
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	18fb      	adds	r3, r7, r3
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	330b      	adds	r3, #11
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	001a      	movs	r2, r3
 80076d2:	2311      	movs	r3, #17
 80076d4:	4013      	ands	r3, r2
 80076d6:	d004      	beq.n	80076e2 <f_open+0x1c2>
					res = FR_DENIED;
 80076d8:	4b71      	ldr	r3, [pc, #452]	@ (80078a0 <f_open+0x380>)
 80076da:	18fb      	adds	r3, r7, r3
 80076dc:	2207      	movs	r2, #7
 80076de:	701a      	strb	r2, [r3, #0]
 80076e0:	e00c      	b.n	80076fc <f_open+0x1dc>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80076e2:	4b6e      	ldr	r3, [pc, #440]	@ (800789c <f_open+0x37c>)
 80076e4:	2296      	movs	r2, #150	@ 0x96
 80076e6:	0092      	lsls	r2, r2, #2
 80076e8:	189b      	adds	r3, r3, r2
 80076ea:	19db      	adds	r3, r3, r7
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2204      	movs	r2, #4
 80076f0:	4013      	ands	r3, r2
 80076f2:	d003      	beq.n	80076fc <f_open+0x1dc>
						res = FR_EXIST;
 80076f4:	4b6a      	ldr	r3, [pc, #424]	@ (80078a0 <f_open+0x380>)
 80076f6:	18fb      	adds	r3, r7, r3
 80076f8:	2208      	movs	r2, #8
 80076fa:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80076fc:	4868      	ldr	r0, [pc, #416]	@ (80078a0 <f_open+0x380>)
 80076fe:	183b      	adds	r3, r7, r0
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d000      	beq.n	8007708 <f_open+0x1e8>
 8007706:	e0e6      	b.n	80078d6 <f_open+0x3b6>
 8007708:	4b64      	ldr	r3, [pc, #400]	@ (800789c <f_open+0x37c>)
 800770a:	2496      	movs	r4, #150	@ 0x96
 800770c:	00a4      	lsls	r4, r4, #2
 800770e:	191b      	adds	r3, r3, r4
 8007710:	19db      	adds	r3, r3, r7
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2208      	movs	r2, #8
 8007716:	4013      	ands	r3, r2
 8007718:	d100      	bne.n	800771c <f_open+0x1fc>
 800771a:	e0dc      	b.n	80078d6 <f_open+0x3b6>
				dw = GET_FATTIME();				/* Created time */
 800771c:	f7fc ff6e 	bl	80045fc <get_fattime>
 8007720:	0003      	movs	r3, r0
 8007722:	2692      	movs	r6, #146	@ 0x92
 8007724:	00b6      	lsls	r6, r6, #2
 8007726:	19ba      	adds	r2, r7, r6
 8007728:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800772a:	2194      	movs	r1, #148	@ 0x94
 800772c:	0089      	lsls	r1, r1, #2
 800772e:	187b      	adds	r3, r7, r1
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	330e      	adds	r3, #14
 8007734:	19ba      	adds	r2, r7, r6
 8007736:	6812      	ldr	r2, [r2, #0]
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	701a      	strb	r2, [r3, #0]
 800773c:	19bb      	adds	r3, r7, r6
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	b29b      	uxth	r3, r3
 8007742:	0a1b      	lsrs	r3, r3, #8
 8007744:	b29a      	uxth	r2, r3
 8007746:	187b      	adds	r3, r7, r1
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	330f      	adds	r3, #15
 800774c:	b2d2      	uxtb	r2, r2
 800774e:	701a      	strb	r2, [r3, #0]
 8007750:	19bb      	adds	r3, r7, r6
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	0c1a      	lsrs	r2, r3, #16
 8007756:	187b      	adds	r3, r7, r1
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3310      	adds	r3, #16
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	19bb      	adds	r3, r7, r6
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	0e1a      	lsrs	r2, r3, #24
 8007766:	187b      	adds	r3, r7, r1
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3311      	adds	r3, #17
 800776c:	b2d2      	uxtb	r2, r2
 800776e:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007770:	187b      	adds	r3, r7, r1
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	330b      	adds	r3, #11
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800777a:	187b      	adds	r3, r7, r1
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	331c      	adds	r3, #28
 8007780:	2200      	movs	r2, #0
 8007782:	701a      	strb	r2, [r3, #0]
 8007784:	187b      	adds	r3, r7, r1
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	331d      	adds	r3, #29
 800778a:	2200      	movs	r2, #0
 800778c:	701a      	strb	r2, [r3, #0]
 800778e:	187b      	adds	r3, r7, r1
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	331e      	adds	r3, #30
 8007794:	2200      	movs	r2, #0
 8007796:	701a      	strb	r2, [r3, #0]
 8007798:	187b      	adds	r3, r7, r1
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	331f      	adds	r3, #31
 800779e:	2200      	movs	r2, #0
 80077a0:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80077a2:	4b40      	ldr	r3, [pc, #256]	@ (80078a4 <f_open+0x384>)
 80077a4:	0025      	movs	r5, r4
 80077a6:	191b      	adds	r3, r3, r4
 80077a8:	19da      	adds	r2, r3, r7
 80077aa:	2380      	movs	r3, #128	@ 0x80
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	58d3      	ldr	r3, [r2, r3]
 80077b0:	000c      	movs	r4, r1
 80077b2:	187a      	adds	r2, r7, r1
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	0011      	movs	r1, r2
 80077b8:	0018      	movs	r0, r3
 80077ba:	f7fe f926 	bl	8005a0a <ld_clust>
 80077be:	0003      	movs	r3, r0
 80077c0:	2191      	movs	r1, #145	@ 0x91
 80077c2:	0089      	lsls	r1, r1, #2
 80077c4:	187a      	adds	r2, r7, r1
 80077c6:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80077c8:	193b      	adds	r3, r7, r4
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2100      	movs	r1, #0
 80077ce:	0018      	movs	r0, r3
 80077d0:	f7fe f94a 	bl	8005a68 <st_clust>
				dj.fs->wflag = 1;
 80077d4:	4b33      	ldr	r3, [pc, #204]	@ (80078a4 <f_open+0x384>)
 80077d6:	195b      	adds	r3, r3, r5
 80077d8:	19da      	adds	r2, r3, r7
 80077da:	2380      	movs	r3, #128	@ 0x80
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	58d2      	ldr	r2, [r2, r3]
 80077e0:	2381      	movs	r3, #129	@ 0x81
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	2101      	movs	r1, #1
 80077e6:	54d1      	strb	r1, [r2, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 80077e8:	2191      	movs	r1, #145	@ 0x91
 80077ea:	0089      	lsls	r1, r1, #2
 80077ec:	187b      	adds	r3, r7, r1
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d100      	bne.n	80077f6 <f_open+0x2d6>
 80077f4:	e06f      	b.n	80078d6 <f_open+0x3b6>
					dw = dj.fs->winsect;
 80077f6:	4b2b      	ldr	r3, [pc, #172]	@ (80078a4 <f_open+0x384>)
 80077f8:	195b      	adds	r3, r3, r5
 80077fa:	19da      	adds	r2, r3, r7
 80077fc:	2380      	movs	r3, #128	@ 0x80
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	58d2      	ldr	r2, [r2, r3]
 8007802:	238b      	movs	r3, #139	@ 0x8b
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	58d3      	ldr	r3, [r2, r3]
 8007808:	19ba      	adds	r2, r7, r6
 800780a:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800780c:	4b25      	ldr	r3, [pc, #148]	@ (80078a4 <f_open+0x384>)
 800780e:	195b      	adds	r3, r3, r5
 8007810:	19da      	adds	r2, r3, r7
 8007812:	2380      	movs	r3, #128	@ 0x80
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	58d3      	ldr	r3, [r2, r3]
 8007818:	4821      	ldr	r0, [pc, #132]	@ (80078a0 <f_open+0x380>)
 800781a:	183c      	adds	r4, r7, r0
 800781c:	187a      	adds	r2, r7, r1
 800781e:	6812      	ldr	r2, [r2, #0]
 8007820:	0011      	movs	r1, r2
 8007822:	0018      	movs	r0, r3
 8007824:	f7fd fd6a 	bl	80052fc <remove_chain>
 8007828:	0003      	movs	r3, r0
 800782a:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 800782c:	481c      	ldr	r0, [pc, #112]	@ (80078a0 <f_open+0x380>)
 800782e:	183b      	adds	r3, r7, r0
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d14f      	bne.n	80078d6 <f_open+0x3b6>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007836:	4b1b      	ldr	r3, [pc, #108]	@ (80078a4 <f_open+0x384>)
 8007838:	195b      	adds	r3, r3, r5
 800783a:	19da      	adds	r2, r3, r7
 800783c:	2380      	movs	r3, #128	@ 0x80
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	58d2      	ldr	r2, [r2, r3]
 8007842:	2191      	movs	r1, #145	@ 0x91
 8007844:	0089      	lsls	r1, r1, #2
 8007846:	187b      	adds	r3, r7, r1
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	1e59      	subs	r1, r3, #1
 800784c:	2383      	movs	r3, #131	@ 0x83
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	50d1      	str	r1, [r2, r3]
						res = move_window(dj.fs, dw);
 8007852:	4b14      	ldr	r3, [pc, #80]	@ (80078a4 <f_open+0x384>)
 8007854:	195b      	adds	r3, r3, r5
 8007856:	19da      	adds	r2, r3, r7
 8007858:	2380      	movs	r3, #128	@ 0x80
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	58d3      	ldr	r3, [r2, r3]
 800785e:	183c      	adds	r4, r7, r0
 8007860:	19ba      	adds	r2, r7, r6
 8007862:	6812      	ldr	r2, [r2, #0]
 8007864:	0011      	movs	r1, r2
 8007866:	0018      	movs	r0, r3
 8007868:	f7fd fa24 	bl	8004cb4 <move_window>
 800786c:	0003      	movs	r3, r0
 800786e:	7023      	strb	r3, [r4, #0]
 8007870:	e031      	b.n	80078d6 <f_open+0x3b6>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007872:	490b      	ldr	r1, [pc, #44]	@ (80078a0 <f_open+0x380>)
 8007874:	187b      	adds	r3, r7, r1
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d12c      	bne.n	80078d6 <f_open+0x3b6>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800787c:	2394      	movs	r3, #148	@ 0x94
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	18fb      	adds	r3, r7, r3
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	330b      	adds	r3, #11
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	001a      	movs	r2, r3
 800788a:	2310      	movs	r3, #16
 800788c:	4013      	ands	r3, r2
 800788e:	d00b      	beq.n	80078a8 <f_open+0x388>
					res = FR_NO_FILE;
 8007890:	187b      	adds	r3, r7, r1
 8007892:	2204      	movs	r2, #4
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	e01e      	b.n	80078d6 <f_open+0x3b6>
 8007898:	fffffda4 	.word	0xfffffda4
 800789c:	fffffdaf 	.word	0xfffffdaf
 80078a0:	00000257 	.word	0x00000257
 80078a4:	fffffdc4 	.word	0xfffffdc4
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80078a8:	4b6c      	ldr	r3, [pc, #432]	@ (8007a5c <f_open+0x53c>)
 80078aa:	2296      	movs	r2, #150	@ 0x96
 80078ac:	0092      	lsls	r2, r2, #2
 80078ae:	189b      	adds	r3, r3, r2
 80078b0:	19db      	adds	r3, r3, r7
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2202      	movs	r2, #2
 80078b6:	4013      	ands	r3, r2
 80078b8:	d00d      	beq.n	80078d6 <f_open+0x3b6>
 80078ba:	2394      	movs	r3, #148	@ 0x94
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	18fb      	adds	r3, r7, r3
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	330b      	adds	r3, #11
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	001a      	movs	r2, r3
 80078c8:	2301      	movs	r3, #1
 80078ca:	4013      	ands	r3, r2
 80078cc:	d003      	beq.n	80078d6 <f_open+0x3b6>
						res = FR_DENIED;
 80078ce:	4b64      	ldr	r3, [pc, #400]	@ (8007a60 <f_open+0x540>)
 80078d0:	18fb      	adds	r3, r7, r3
 80078d2:	2207      	movs	r2, #7
 80078d4:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 80078d6:	4b62      	ldr	r3, [pc, #392]	@ (8007a60 <f_open+0x540>)
 80078d8:	18fb      	adds	r3, r7, r3
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d148      	bne.n	8007972 <f_open+0x452>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80078e0:	4b5e      	ldr	r3, [pc, #376]	@ (8007a5c <f_open+0x53c>)
 80078e2:	2196      	movs	r1, #150	@ 0x96
 80078e4:	0089      	lsls	r1, r1, #2
 80078e6:	185b      	adds	r3, r3, r1
 80078e8:	19db      	adds	r3, r3, r7
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2208      	movs	r2, #8
 80078ee:	4013      	ands	r3, r2
 80078f0:	d009      	beq.n	8007906 <f_open+0x3e6>
				mode |= FA__WRITTEN;
 80078f2:	4b5a      	ldr	r3, [pc, #360]	@ (8007a5c <f_open+0x53c>)
 80078f4:	185b      	adds	r3, r3, r1
 80078f6:	19db      	adds	r3, r3, r7
 80078f8:	4a58      	ldr	r2, [pc, #352]	@ (8007a5c <f_open+0x53c>)
 80078fa:	1852      	adds	r2, r2, r1
 80078fc:	19d2      	adds	r2, r2, r7
 80078fe:	7812      	ldrb	r2, [r2, #0]
 8007900:	2120      	movs	r1, #32
 8007902:	430a      	orrs	r2, r1
 8007904:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007906:	4b57      	ldr	r3, [pc, #348]	@ (8007a64 <f_open+0x544>)
 8007908:	2096      	movs	r0, #150	@ 0x96
 800790a:	0080      	lsls	r0, r0, #2
 800790c:	181b      	adds	r3, r3, r0
 800790e:	19da      	adds	r2, r3, r7
 8007910:	2380      	movs	r3, #128	@ 0x80
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	58d2      	ldr	r2, [r2, r3]
 8007916:	238b      	movs	r3, #139	@ 0x8b
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	58d1      	ldr	r1, [r2, r3]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	2387      	movs	r3, #135	@ 0x87
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	50d1      	str	r1, [r2, r3]
			fp->dir_ptr = dir;
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	2388      	movs	r3, #136	@ 0x88
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	2194      	movs	r1, #148	@ 0x94
 800792c:	0089      	lsls	r1, r1, #2
 800792e:	1879      	adds	r1, r7, r1
 8007930:	6809      	ldr	r1, [r1, #0]
 8007932:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007934:	4b49      	ldr	r3, [pc, #292]	@ (8007a5c <f_open+0x53c>)
 8007936:	181b      	adds	r3, r3, r0
 8007938:	19db      	adds	r3, r3, r7
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2201      	movs	r2, #1
 800793e:	429a      	cmp	r2, r3
 8007940:	419b      	sbcs	r3, r3
 8007942:	425b      	negs	r3, r3
 8007944:	b2db      	uxtb	r3, r3
 8007946:	001a      	movs	r2, r3
 8007948:	231c      	movs	r3, #28
 800794a:	18fb      	adds	r3, r7, r3
 800794c:	0011      	movs	r1, r2
 800794e:	0018      	movs	r0, r3
 8007950:	f7fd f826 	bl	80049a0 <inc_lock>
 8007954:	0001      	movs	r1, r0
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	238a      	movs	r3, #138	@ 0x8a
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	50d1      	str	r1, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	238a      	movs	r3, #138	@ 0x8a
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	58d3      	ldr	r3, [r2, r3]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d103      	bne.n	8007972 <f_open+0x452>
 800796a:	4b3d      	ldr	r3, [pc, #244]	@ (8007a60 <f_open+0x540>)
 800796c:	18fb      	adds	r3, r7, r3
 800796e:	2202      	movs	r2, #2
 8007970:	701a      	strb	r2, [r3, #0]
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 8007972:	2393      	movs	r3, #147	@ 0x93
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	18fb      	adds	r3, r7, r3
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	0018      	movs	r0, r3
 800797c:	f001 fb85 	bl	800908a <ff_memfree>

		if (res == FR_OK) {
 8007980:	4b37      	ldr	r3, [pc, #220]	@ (8007a60 <f_open+0x540>)
 8007982:	18fb      	adds	r3, r7, r3
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d15e      	bne.n	8007a48 <f_open+0x528>
			fp->flag = mode;					/* File access mode */
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4a33      	ldr	r2, [pc, #204]	@ (8007a5c <f_open+0x53c>)
 800798e:	2596      	movs	r5, #150	@ 0x96
 8007990:	00ad      	lsls	r5, r5, #2
 8007992:	1952      	adds	r2, r2, r5
 8007994:	19d2      	adds	r2, r2, r7
 8007996:	4934      	ldr	r1, [pc, #208]	@ (8007a68 <f_open+0x548>)
 8007998:	7812      	ldrb	r2, [r2, #0]
 800799a:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4a33      	ldr	r2, [pc, #204]	@ (8007a6c <f_open+0x54c>)
 80079a0:	2100      	movs	r1, #0
 80079a2:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80079a4:	4b2f      	ldr	r3, [pc, #188]	@ (8007a64 <f_open+0x544>)
 80079a6:	195b      	adds	r3, r3, r5
 80079a8:	19da      	adds	r2, r3, r7
 80079aa:	2380      	movs	r3, #128	@ 0x80
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	58d3      	ldr	r3, [r2, r3]
 80079b0:	2494      	movs	r4, #148	@ 0x94
 80079b2:	00a4      	lsls	r4, r4, #2
 80079b4:	193a      	adds	r2, r7, r4
 80079b6:	6812      	ldr	r2, [r2, #0]
 80079b8:	0011      	movs	r1, r2
 80079ba:	0018      	movs	r0, r3
 80079bc:	f7fe f825 	bl	8005a0a <ld_clust>
 80079c0:	0001      	movs	r1, r0
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	2384      	movs	r3, #132	@ 0x84
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	50d1      	str	r1, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80079ca:	0021      	movs	r1, r4
 80079cc:	187b      	adds	r3, r7, r1
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	331f      	adds	r3, #31
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	061a      	lsls	r2, r3, #24
 80079d6:	187b      	adds	r3, r7, r1
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	331e      	adds	r3, #30
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	041b      	lsls	r3, r3, #16
 80079e0:	431a      	orrs	r2, r3
 80079e2:	187b      	adds	r3, r7, r1
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	331d      	adds	r3, #29
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	4313      	orrs	r3, r2
 80079ee:	187a      	adds	r2, r7, r1
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	321c      	adds	r2, #28
 80079f4:	7812      	ldrb	r2, [r2, #0]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	0019      	movs	r1, r3
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	2383      	movs	r3, #131	@ 0x83
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	50d1      	str	r1, [r2, r3]
			fp->fptr = 0;						/* File pointer */
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	2382      	movs	r3, #130	@ 0x82
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	2100      	movs	r1, #0
 8007a0a:	50d1      	str	r1, [r2, r3]
			fp->dsect = 0;
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	2386      	movs	r3, #134	@ 0x86
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	2100      	movs	r1, #0
 8007a14:	50d1      	str	r1, [r2, r3]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	2389      	movs	r3, #137	@ 0x89
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	50d1      	str	r1, [r2, r3]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007a20:	4b10      	ldr	r3, [pc, #64]	@ (8007a64 <f_open+0x544>)
 8007a22:	195b      	adds	r3, r3, r5
 8007a24:	19da      	adds	r2, r3, r7
 8007a26:	2380      	movs	r3, #128	@ 0x80
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	58d1      	ldr	r1, [r2, r3]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	2380      	movs	r3, #128	@ 0x80
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	2380      	movs	r3, #128	@ 0x80
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	58d3      	ldr	r3, [r2, r3]
 8007a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8007a68 <f_open+0x548>)
 8007a3e:	5a99      	ldrh	r1, [r3, r2]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	2381      	movs	r3, #129	@ 0x81
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	52d1      	strh	r1, [r2, r3]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007a48:	4b05      	ldr	r3, [pc, #20]	@ (8007a60 <f_open+0x540>)
 8007a4a:	18fb      	adds	r3, r7, r3
 8007a4c:	781b      	ldrb	r3, [r3, #0]
}
 8007a4e:	0018      	movs	r0, r3
 8007a50:	46bd      	mov	sp, r7
 8007a52:	2397      	movs	r3, #151	@ 0x97
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	449d      	add	sp, r3
 8007a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a5a:	46c0      	nop			@ (mov r8, r8)
 8007a5c:	fffffdaf 	.word	0xfffffdaf
 8007a60:	00000257 	.word	0x00000257
 8007a64:	fffffdc4 	.word	0xfffffdc4
 8007a68:	00000206 	.word	0x00000206
 8007a6c:	00000207 	.word	0x00000207

08007a70 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007a70:	b5b0      	push	{r4, r5, r7, lr}
 8007a72:	b08a      	sub	sp, #40	@ 0x28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007a88:	2517      	movs	r5, #23
 8007a8a:	197c      	adds	r4, r7, r5
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	0018      	movs	r0, r3
 8007a90:	f7ff fcb8 	bl	8007404 <validate>
 8007a94:	0003      	movs	r3, r0
 8007a96:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007a98:	197b      	adds	r3, r7, r5
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <f_write+0x36>
 8007aa0:	197b      	adds	r3, r7, r5
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	e1c5      	b.n	8007e32 <f_write+0x3c2>
	if (fp->err)							/* Check error */
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4acf      	ldr	r2, [pc, #828]	@ (8007de8 <f_write+0x378>)
 8007aaa:	5c9b      	ldrb	r3, [r3, r2]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <f_write+0x48>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4acd      	ldr	r2, [pc, #820]	@ (8007de8 <f_write+0x378>)
 8007ab4:	5c9b      	ldrb	r3, [r3, r2]
 8007ab6:	e1bc      	b.n	8007e32 <f_write+0x3c2>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4acc      	ldr	r2, [pc, #816]	@ (8007dec <f_write+0x37c>)
 8007abc:	5c9b      	ldrb	r3, [r3, r2]
 8007abe:	001a      	movs	r2, r3
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	d101      	bne.n	8007aca <f_write+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007ac6:	2307      	movs	r3, #7
 8007ac8:	e1b3      	b.n	8007e32 <f_write+0x3c2>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	2382      	movs	r3, #130	@ 0x82
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	58d2      	ldr	r2, [r2, r3]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	18d2      	adds	r2, r2, r3
 8007ad6:	68f9      	ldr	r1, [r7, #12]
 8007ad8:	2382      	movs	r3, #130	@ 0x82
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	58cb      	ldr	r3, [r1, r3]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d300      	bcc.n	8007ae4 <f_write+0x74>
 8007ae2:	e17c      	b.n	8007dde <f_write+0x36e>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007ae8:	e179      	b.n	8007dde <f_write+0x36e>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	2382      	movs	r3, #130	@ 0x82
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	58d3      	ldr	r3, [r2, r3]
 8007af2:	05db      	lsls	r3, r3, #23
 8007af4:	0ddb      	lsrs	r3, r3, #23
 8007af6:	d000      	beq.n	8007afa <f_write+0x8a>
 8007af8:	e133      	b.n	8007d62 <f_write+0x2f2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	2382      	movs	r3, #130	@ 0x82
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	58d3      	ldr	r3, [r2, r3]
 8007b02:	0a5b      	lsrs	r3, r3, #9
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	68f9      	ldr	r1, [r7, #12]
 8007b08:	2380      	movs	r3, #128	@ 0x80
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	58cb      	ldr	r3, [r1, r3]
 8007b0e:	49b8      	ldr	r1, [pc, #736]	@ (8007df0 <f_write+0x380>)
 8007b10:	5c5b      	ldrb	r3, [r3, r1]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	b2d9      	uxtb	r1, r3
 8007b16:	2016      	movs	r0, #22
 8007b18:	183b      	adds	r3, r7, r0
 8007b1a:	400a      	ands	r2, r1
 8007b1c:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
 8007b1e:	183b      	adds	r3, r7, r0
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d15d      	bne.n	8007be2 <f_write+0x172>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	2382      	movs	r3, #130	@ 0x82
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	58d3      	ldr	r3, [r2, r3]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d112      	bne.n	8007b58 <f_write+0xe8>
					clst = fp->sclust;		/* Follow from the origin */
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	2384      	movs	r3, #132	@ 0x84
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	58d3      	ldr	r3, [r2, r3]
 8007b3a:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d129      	bne.n	8007b96 <f_write+0x126>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	2380      	movs	r3, #128	@ 0x80
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	58d3      	ldr	r3, [r2, r3]
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f7fd fc45 	bl	80053dc <create_chain>
 8007b52:	0003      	movs	r3, r0
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b56:	e01e      	b.n	8007b96 <f_write+0x126>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	2389      	movs	r3, #137	@ 0x89
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	58d3      	ldr	r3, [r2, r3]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00b      	beq.n	8007b7c <f_write+0x10c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	2382      	movs	r3, #130	@ 0x82
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	58d2      	ldr	r2, [r2, r3]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	0011      	movs	r1, r2
 8007b70:	0018      	movs	r0, r3
 8007b72:	f7fd fce9 	bl	8005548 <clmt_clust>
 8007b76:	0003      	movs	r3, r0
 8007b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b7a:	e00c      	b.n	8007b96 <f_write+0x126>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	2380      	movs	r3, #128	@ 0x80
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	58d0      	ldr	r0, [r2, r3]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	2385      	movs	r3, #133	@ 0x85
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	58d3      	ldr	r3, [r2, r3]
 8007b8c:	0019      	movs	r1, r3
 8007b8e:	f7fd fc25 	bl	80053dc <create_chain>
 8007b92:	0003      	movs	r3, r0
 8007b94:	627b      	str	r3, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d100      	bne.n	8007b9e <f_write+0x12e>
 8007b9c:	e12c      	b.n	8007df8 <f_write+0x388>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d105      	bne.n	8007bb0 <f_write+0x140>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4a90      	ldr	r2, [pc, #576]	@ (8007de8 <f_write+0x378>)
 8007ba8:	2102      	movs	r1, #2
 8007baa:	5499      	strb	r1, [r3, r2]
 8007bac:	2302      	movs	r3, #2
 8007bae:	e140      	b.n	8007e32 <f_write+0x3c2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	d105      	bne.n	8007bc2 <f_write+0x152>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4a8b      	ldr	r2, [pc, #556]	@ (8007de8 <f_write+0x378>)
 8007bba:	2101      	movs	r1, #1
 8007bbc:	5499      	strb	r1, [r3, r2]
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e137      	b.n	8007e32 <f_write+0x3c2>
				fp->clust = clst;			/* Update current cluster */
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	2385      	movs	r3, #133	@ 0x85
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bca:	50d1      	str	r1, [r2, r3]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	2384      	movs	r3, #132	@ 0x84
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	58d3      	ldr	r3, [r2, r3]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d104      	bne.n	8007be2 <f_write+0x172>
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	2384      	movs	r3, #132	@ 0x84
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007be0:	50d1      	str	r1, [r2, r3]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	4a81      	ldr	r2, [pc, #516]	@ (8007dec <f_write+0x37c>)
 8007be6:	5c9b      	ldrb	r3, [r3, r2]
 8007be8:	001a      	movs	r2, r3
 8007bea:	2340      	movs	r3, #64	@ 0x40
 8007bec:	4013      	ands	r3, r2
 8007bee:	d01e      	beq.n	8007c2e <f_write+0x1be>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	2380      	movs	r3, #128	@ 0x80
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	58d3      	ldr	r3, [r2, r3]
 8007bf8:	4a7e      	ldr	r2, [pc, #504]	@ (8007df4 <f_write+0x384>)
 8007bfa:	5c98      	ldrb	r0, [r3, r2]
 8007bfc:	68f9      	ldr	r1, [r7, #12]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	2386      	movs	r3, #134	@ 0x86
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	58d2      	ldr	r2, [r2, r3]
 8007c06:	2301      	movs	r3, #1
 8007c08:	f7fc fd78 	bl	80046fc <disk_write>
 8007c0c:	1e03      	subs	r3, r0, #0
 8007c0e:	d005      	beq.n	8007c1c <f_write+0x1ac>
					ABORT(fp->fs, FR_DISK_ERR);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4a75      	ldr	r2, [pc, #468]	@ (8007de8 <f_write+0x378>)
 8007c14:	2101      	movs	r1, #1
 8007c16:	5499      	strb	r1, [r3, r2]
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e10a      	b.n	8007e32 <f_write+0x3c2>
				fp->flag &= ~FA__DIRTY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4a73      	ldr	r2, [pc, #460]	@ (8007dec <f_write+0x37c>)
 8007c20:	5c9b      	ldrb	r3, [r3, r2]
 8007c22:	2240      	movs	r2, #64	@ 0x40
 8007c24:	4393      	bics	r3, r2
 8007c26:	b2d9      	uxtb	r1, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4a70      	ldr	r2, [pc, #448]	@ (8007dec <f_write+0x37c>)
 8007c2c:	5499      	strb	r1, [r3, r2]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	2380      	movs	r3, #128	@ 0x80
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	58d0      	ldr	r0, [r2, r3]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	2385      	movs	r3, #133	@ 0x85
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	58d3      	ldr	r3, [r2, r3]
 8007c3e:	0019      	movs	r1, r3
 8007c40:	f7fd f948 	bl	8004ed4 <clust2sect>
 8007c44:	0003      	movs	r3, r0
 8007c46:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d105      	bne.n	8007c5a <f_write+0x1ea>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4a65      	ldr	r2, [pc, #404]	@ (8007de8 <f_write+0x378>)
 8007c52:	2102      	movs	r1, #2
 8007c54:	5499      	strb	r1, [r3, r2]
 8007c56:	2302      	movs	r3, #2
 8007c58:	e0eb      	b.n	8007e32 <f_write+0x3c2>
			sect += csect;
 8007c5a:	2016      	movs	r0, #22
 8007c5c:	183b      	adds	r3, r7, r0
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	18d3      	adds	r3, r2, r3
 8007c64:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	0a5b      	lsrs	r3, r3, #9
 8007c6a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d04e      	beq.n	8007d10 <f_write+0x2a0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007c72:	183b      	adds	r3, r7, r0
 8007c74:	781a      	ldrb	r2, [r3, #0]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	18d3      	adds	r3, r2, r3
 8007c7a:	68f9      	ldr	r1, [r7, #12]
 8007c7c:	2280      	movs	r2, #128	@ 0x80
 8007c7e:	0092      	lsls	r2, r2, #2
 8007c80:	588a      	ldr	r2, [r1, r2]
 8007c82:	495b      	ldr	r1, [pc, #364]	@ (8007df0 <f_write+0x380>)
 8007c84:	5c52      	ldrb	r2, [r2, r1]
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d90a      	bls.n	8007ca0 <f_write+0x230>
					cc = fp->fs->csize - csect;
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	2380      	movs	r3, #128	@ 0x80
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	58d3      	ldr	r3, [r2, r3]
 8007c92:	4a57      	ldr	r2, [pc, #348]	@ (8007df0 <f_write+0x380>)
 8007c94:	5c9b      	ldrb	r3, [r3, r2]
 8007c96:	001a      	movs	r2, r3
 8007c98:	183b      	adds	r3, r7, r0
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	2380      	movs	r3, #128	@ 0x80
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	58d3      	ldr	r3, [r2, r3]
 8007ca8:	4a52      	ldr	r2, [pc, #328]	@ (8007df4 <f_write+0x384>)
 8007caa:	5c98      	ldrb	r0, [r3, r2]
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	69b9      	ldr	r1, [r7, #24]
 8007cb2:	f7fc fd23 	bl	80046fc <disk_write>
 8007cb6:	1e03      	subs	r3, r0, #0
 8007cb8:	d005      	beq.n	8007cc6 <f_write+0x256>
					ABORT(fp->fs, FR_DISK_ERR);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8007de8 <f_write+0x378>)
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	5499      	strb	r1, [r3, r2]
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e0b5      	b.n	8007e32 <f_write+0x3c2>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	2386      	movs	r3, #134	@ 0x86
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	58d2      	ldr	r2, [r2, r3]
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	69fa      	ldr	r2, [r7, #28]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d917      	bls.n	8007d08 <f_write+0x298>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	2386      	movs	r3, #134	@ 0x86
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	58d2      	ldr	r2, [r2, r3]
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	025b      	lsls	r3, r3, #9
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	18d3      	adds	r3, r2, r3
 8007cec:	2280      	movs	r2, #128	@ 0x80
 8007cee:	0092      	lsls	r2, r2, #2
 8007cf0:	0019      	movs	r1, r3
 8007cf2:	f7fc fd53 	bl	800479c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8007dec <f_write+0x37c>)
 8007cfa:	5c9b      	ldrb	r3, [r3, r2]
 8007cfc:	2240      	movs	r2, #64	@ 0x40
 8007cfe:	4393      	bics	r3, r2
 8007d00:	b2d9      	uxtb	r1, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	4a39      	ldr	r2, [pc, #228]	@ (8007dec <f_write+0x37c>)
 8007d06:	5499      	strb	r1, [r3, r2]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	025b      	lsls	r3, r3, #9
 8007d0c:	623b      	str	r3, [r7, #32]
				continue;
 8007d0e:	e04e      	b.n	8007dae <f_write+0x33e>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	2386      	movs	r3, #134	@ 0x86
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	58d3      	ldr	r3, [r2, r3]
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d01c      	beq.n	8007d58 <f_write+0x2e8>
				if (fp->fptr < fp->fsize &&
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	2382      	movs	r3, #130	@ 0x82
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	58d2      	ldr	r2, [r2, r3]
 8007d26:	68f9      	ldr	r1, [r7, #12]
 8007d28:	2383      	movs	r3, #131	@ 0x83
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	58cb      	ldr	r3, [r1, r3]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d212      	bcs.n	8007d58 <f_write+0x2e8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	2380      	movs	r3, #128	@ 0x80
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	58d3      	ldr	r3, [r2, r3]
 8007d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8007df4 <f_write+0x384>)
 8007d3c:	5c98      	ldrb	r0, [r3, r2]
 8007d3e:	68f9      	ldr	r1, [r7, #12]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	2301      	movs	r3, #1
 8007d44:	f7fc fcb2 	bl	80046ac <disk_read>
 8007d48:	1e03      	subs	r3, r0, #0
				if (fp->fptr < fp->fsize &&
 8007d4a:	d005      	beq.n	8007d58 <f_write+0x2e8>
						ABORT(fp->fs, FR_DISK_ERR);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4a26      	ldr	r2, [pc, #152]	@ (8007de8 <f_write+0x378>)
 8007d50:	2101      	movs	r1, #1
 8007d52:	5499      	strb	r1, [r3, r2]
 8007d54:	2301      	movs	r3, #1
 8007d56:	e06c      	b.n	8007e32 <f_write+0x3c2>
			}
#endif
			fp->dsect = sect;
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	2386      	movs	r3, #134	@ 0x86
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	6939      	ldr	r1, [r7, #16]
 8007d60:	50d1      	str	r1, [r2, r3]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	2382      	movs	r3, #130	@ 0x82
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	58d3      	ldr	r3, [r2, r3]
 8007d6a:	05db      	lsls	r3, r3, #23
 8007d6c:	0ddb      	lsrs	r3, r3, #23
 8007d6e:	2280      	movs	r2, #128	@ 0x80
 8007d70:	0092      	lsls	r2, r2, #2
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007d76:	6a3a      	ldr	r2, [r7, #32]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d901      	bls.n	8007d82 <f_write+0x312>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	2382      	movs	r3, #130	@ 0x82
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	58d3      	ldr	r3, [r2, r3]
 8007d8a:	05db      	lsls	r3, r3, #23
 8007d8c:	0ddb      	lsrs	r3, r3, #23
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	18d3      	adds	r3, r2, r3
 8007d92:	6a3a      	ldr	r2, [r7, #32]
 8007d94:	69b9      	ldr	r1, [r7, #24]
 8007d96:	0018      	movs	r0, r3
 8007d98:	f7fc fd00 	bl	800479c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4a13      	ldr	r2, [pc, #76]	@ (8007dec <f_write+0x37c>)
 8007da0:	5c9b      	ldrb	r3, [r3, r2]
 8007da2:	2240      	movs	r2, #64	@ 0x40
 8007da4:	4313      	orrs	r3, r2
 8007da6:	b2d9      	uxtb	r1, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4a10      	ldr	r2, [pc, #64]	@ (8007dec <f_write+0x37c>)
 8007dac:	5499      	strb	r1, [r3, r2]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	18d3      	adds	r3, r2, r3
 8007db4:	61bb      	str	r3, [r7, #24]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	2382      	movs	r3, #130	@ 0x82
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	58d2      	ldr	r2, [r2, r3]
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	18d1      	adds	r1, r2, r3
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	2382      	movs	r3, #130	@ 0x82
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	50d1      	str	r1, [r2, r3]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	18d2      	adds	r2, r2, r3
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d000      	beq.n	8007de6 <f_write+0x376>
 8007de4:	e681      	b.n	8007aea <f_write+0x7a>
 8007de6:	e008      	b.n	8007dfa <f_write+0x38a>
 8007de8:	00000207 	.word	0x00000207
 8007dec:	00000206 	.word	0x00000206
 8007df0:	00000202 	.word	0x00000202
 8007df4:	00000201 	.word	0x00000201
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007df8:	46c0      	nop			@ (mov r8, r8)
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	2382      	movs	r3, #130	@ 0x82
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	58d2      	ldr	r2, [r2, r3]
 8007e02:	68f9      	ldr	r1, [r7, #12]
 8007e04:	2383      	movs	r3, #131	@ 0x83
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	58cb      	ldr	r3, [r1, r3]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d907      	bls.n	8007e1e <f_write+0x3ae>
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	2382      	movs	r3, #130	@ 0x82
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	58d1      	ldr	r1, [r2, r3]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	2383      	movs	r3, #131	@ 0x83
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	50d1      	str	r1, [r2, r3]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4a06      	ldr	r2, [pc, #24]	@ (8007e3c <f_write+0x3cc>)
 8007e22:	5c9b      	ldrb	r3, [r3, r2]
 8007e24:	2220      	movs	r2, #32
 8007e26:	4313      	orrs	r3, r2
 8007e28:	b2d9      	uxtb	r1, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a03      	ldr	r2, [pc, #12]	@ (8007e3c <f_write+0x3cc>)
 8007e2e:	5499      	strb	r1, [r3, r2]

	LEAVE_FF(fp->fs, FR_OK);
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	0018      	movs	r0, r3
 8007e34:	46bd      	mov	sp, r7
 8007e36:	b00a      	add	sp, #40	@ 0x28
 8007e38:	bdb0      	pop	{r4, r5, r7, pc}
 8007e3a:	46c0      	nop			@ (mov r8, r8)
 8007e3c:	00000206 	.word	0x00000206

08007e40 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007e40:	b5b0      	push	{r4, r5, r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007e48:	2517      	movs	r5, #23
 8007e4a:	197c      	adds	r4, r7, r5
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	0018      	movs	r0, r3
 8007e50:	f7ff fad8 	bl	8007404 <validate>
 8007e54:	0003      	movs	r3, r0
 8007e56:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007e58:	197b      	adds	r3, r7, r5
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d000      	beq.n	8007e62 <f_sync+0x22>
 8007e60:	e0b9      	b.n	8007fd6 <f_sync+0x196>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a5f      	ldr	r2, [pc, #380]	@ (8007fe4 <f_sync+0x1a4>)
 8007e66:	5c9b      	ldrb	r3, [r3, r2]
 8007e68:	001a      	movs	r2, r3
 8007e6a:	2320      	movs	r3, #32
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	d100      	bne.n	8007e72 <f_sync+0x32>
 8007e70:	e0b1      	b.n	8007fd6 <f_sync+0x196>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a5b      	ldr	r2, [pc, #364]	@ (8007fe4 <f_sync+0x1a4>)
 8007e76:	5c9b      	ldrb	r3, [r3, r2]
 8007e78:	001a      	movs	r2, r3
 8007e7a:	2340      	movs	r3, #64	@ 0x40
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	d01a      	beq.n	8007eb6 <f_sync+0x76>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	2380      	movs	r3, #128	@ 0x80
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	58d3      	ldr	r3, [r2, r3]
 8007e88:	4a57      	ldr	r2, [pc, #348]	@ (8007fe8 <f_sync+0x1a8>)
 8007e8a:	5c98      	ldrb	r0, [r3, r2]
 8007e8c:	6879      	ldr	r1, [r7, #4]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	2386      	movs	r3, #134	@ 0x86
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	58d2      	ldr	r2, [r2, r3]
 8007e96:	2301      	movs	r3, #1
 8007e98:	f7fc fc30 	bl	80046fc <disk_write>
 8007e9c:	1e03      	subs	r3, r0, #0
 8007e9e:	d001      	beq.n	8007ea4 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e09b      	b.n	8007fdc <f_sync+0x19c>
				fp->flag &= ~FA__DIRTY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a4f      	ldr	r2, [pc, #316]	@ (8007fe4 <f_sync+0x1a4>)
 8007ea8:	5c9b      	ldrb	r3, [r3, r2]
 8007eaa:	2240      	movs	r2, #64	@ 0x40
 8007eac:	4393      	bics	r3, r2
 8007eae:	b2d9      	uxtb	r1, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a4c      	ldr	r2, [pc, #304]	@ (8007fe4 <f_sync+0x1a4>)
 8007eb4:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	2380      	movs	r3, #128	@ 0x80
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	58d0      	ldr	r0, [r2, r3]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	2387      	movs	r3, #135	@ 0x87
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	58d3      	ldr	r3, [r2, r3]
 8007ec6:	2517      	movs	r5, #23
 8007ec8:	197c      	adds	r4, r7, r5
 8007eca:	0019      	movs	r1, r3
 8007ecc:	f7fc fef2 	bl	8004cb4 <move_window>
 8007ed0:	0003      	movs	r3, r0
 8007ed2:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 8007ed4:	002c      	movs	r4, r5
 8007ed6:	193b      	adds	r3, r7, r4
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d17b      	bne.n	8007fd6 <f_sync+0x196>
				dir = fp->dir_ptr;
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	2388      	movs	r3, #136	@ 0x88
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	58d3      	ldr	r3, [r2, r3]
 8007ee6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	330b      	adds	r3, #11
 8007eec:	781a      	ldrb	r2, [r3, #0]
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	330b      	adds	r3, #11
 8007ef2:	2120      	movs	r1, #32
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	2383      	movs	r3, #131	@ 0x83
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	58d2      	ldr	r2, [r2, r3]
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	331c      	adds	r3, #28
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	701a      	strb	r2, [r3, #0]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	2383      	movs	r3, #131	@ 0x83
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	58d3      	ldr	r3, [r2, r3]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	0a1b      	lsrs	r3, r3, #8
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	331d      	adds	r3, #29
 8007f1c:	b2d2      	uxtb	r2, r2
 8007f1e:	701a      	strb	r2, [r3, #0]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	2383      	movs	r3, #131	@ 0x83
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	58d3      	ldr	r3, [r2, r3]
 8007f28:	0c1a      	lsrs	r2, r3, #16
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	331e      	adds	r3, #30
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	2383      	movs	r3, #131	@ 0x83
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	58d3      	ldr	r3, [r2, r3]
 8007f3a:	0e1a      	lsrs	r2, r3, #24
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	331f      	adds	r3, #31
 8007f40:	b2d2      	uxtb	r2, r2
 8007f42:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	2384      	movs	r3, #132	@ 0x84
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	58d2      	ldr	r2, [r2, r3]
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	0011      	movs	r1, r2
 8007f50:	0018      	movs	r0, r3
 8007f52:	f7fd fd89 	bl	8005a68 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007f56:	f7fc fb51 	bl	80045fc <get_fattime>
 8007f5a:	0003      	movs	r3, r0
 8007f5c:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	3316      	adds	r3, #22
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	b2d2      	uxtb	r2, r2
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	0a1b      	lsrs	r3, r3, #8
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	3317      	adds	r3, #23
 8007f74:	b2d2      	uxtb	r2, r2
 8007f76:	701a      	strb	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	0c1a      	lsrs	r2, r3, #16
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	3318      	adds	r3, #24
 8007f80:	b2d2      	uxtb	r2, r2
 8007f82:	701a      	strb	r2, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	0e1a      	lsrs	r2, r3, #24
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	3319      	adds	r3, #25
 8007f8c:	b2d2      	uxtb	r2, r2
 8007f8e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	3312      	adds	r3, #18
 8007f94:	2200      	movs	r2, #0
 8007f96:	701a      	strb	r2, [r3, #0]
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	3313      	adds	r3, #19
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a10      	ldr	r2, [pc, #64]	@ (8007fe4 <f_sync+0x1a4>)
 8007fa4:	5c9b      	ldrb	r3, [r3, r2]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	4393      	bics	r3, r2
 8007faa:	b2d9      	uxtb	r1, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a0d      	ldr	r2, [pc, #52]	@ (8007fe4 <f_sync+0x1a4>)
 8007fb0:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	2380      	movs	r3, #128	@ 0x80
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	58d2      	ldr	r2, [r2, r3]
 8007fba:	2381      	movs	r3, #129	@ 0x81
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	54d1      	strb	r1, [r2, r3]
				res = sync_fs(fp->fs);
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	2380      	movs	r3, #128	@ 0x80
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	58d3      	ldr	r3, [r2, r3]
 8007fca:	193c      	adds	r4, r7, r4
 8007fcc:	0018      	movs	r0, r3
 8007fce:	f7fc fead 	bl	8004d2c <sync_fs>
 8007fd2:	0003      	movs	r3, r0
 8007fd4:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007fd6:	2317      	movs	r3, #23
 8007fd8:	18fb      	adds	r3, r7, r3
 8007fda:	781b      	ldrb	r3, [r3, #0]
}
 8007fdc:	0018      	movs	r0, r3
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	b006      	add	sp, #24
 8007fe2:	bdb0      	pop	{r4, r5, r7, pc}
 8007fe4:	00000206 	.word	0x00000206
 8007fe8:	00000201 	.word	0x00000201

08007fec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007fec:	b5b0      	push	{r4, r5, r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007ff4:	250f      	movs	r5, #15
 8007ff6:	197c      	adds	r4, r7, r5
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	0018      	movs	r0, r3
 8007ffc:	f7ff ff20 	bl	8007e40 <f_sync>
 8008000:	0003      	movs	r3, r0
 8008002:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8008004:	197b      	adds	r3, r7, r5
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d11f      	bne.n	800804c <f_close+0x60>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800800c:	197c      	adds	r4, r7, r5
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	0018      	movs	r0, r3
 8008012:	f7ff f9f7 	bl	8007404 <validate>
 8008016:	0003      	movs	r3, r0
 8008018:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800801a:	0029      	movs	r1, r5
 800801c:	187b      	adds	r3, r7, r1
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d113      	bne.n	800804c <f_close+0x60>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	238a      	movs	r3, #138	@ 0x8a
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	58d3      	ldr	r3, [r2, r3]
 800802c:	000d      	movs	r5, r1
 800802e:	187c      	adds	r4, r7, r1
 8008030:	0018      	movs	r0, r3
 8008032:	f7fc fd6d 	bl	8004b10 <dec_lock>
 8008036:	0003      	movs	r3, r0
 8008038:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 800803a:	197b      	adds	r3, r7, r5
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d104      	bne.n	800804c <f_close+0x60>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	2380      	movs	r3, #128	@ 0x80
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	2100      	movs	r1, #0
 800804a:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800804c:	230f      	movs	r3, #15
 800804e:	18fb      	adds	r3, r7, r3
 8008050:	781b      	ldrb	r3, [r3, #0]
}
 8008052:	0018      	movs	r0, r3
 8008054:	46bd      	mov	sp, r7
 8008056:	b004      	add	sp, #16
 8008058:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800805c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800805c:	b5b0      	push	{r4, r5, r7, lr}
 800805e:	b088      	sub	sp, #32
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <f_opendir+0x14>
 800806c:	2309      	movs	r3, #9
 800806e:	e0ad      	b.n	80081cc <f_opendir+0x170>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8008070:	251f      	movs	r5, #31
 8008072:	197c      	adds	r4, r7, r5
 8008074:	0039      	movs	r1, r7
 8008076:	2314      	movs	r3, #20
 8008078:	18fb      	adds	r3, r7, r3
 800807a:	2200      	movs	r2, #0
 800807c:	0018      	movs	r0, r3
 800807e:	f7fe fe9d 	bl	8006dbc <find_volume>
 8008082:	0003      	movs	r3, r0
 8008084:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008086:	197b      	adds	r3, r7, r5
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d000      	beq.n	8008090 <f_opendir+0x34>
 800808e:	e090      	b.n	80081b2 <f_opendir+0x156>
		dp->fs = fs;
 8008090:	6979      	ldr	r1, [r7, #20]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	2380      	movs	r3, #128	@ 0x80
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	50d1      	str	r1, [r2, r3]
		INIT_BUF(*dp);
 800809a:	2380      	movs	r3, #128	@ 0x80
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	0018      	movs	r0, r3
 80080a0:	f000 ffe6 	bl	8009070 <ff_memalloc>
 80080a4:	0003      	movs	r3, r0
 80080a6:	61bb      	str	r3, [r7, #24]
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <f_opendir+0x56>
 80080ae:	2311      	movs	r3, #17
 80080b0:	e08c      	b.n	80081cc <f_opendir+0x170>
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	2388      	movs	r3, #136	@ 0x88
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	69b9      	ldr	r1, [r7, #24]
 80080ba:	50d1      	str	r1, [r2, r3]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	2386      	movs	r3, #134	@ 0x86
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	2108      	movs	r1, #8
 80080c4:	1879      	adds	r1, r7, r1
 80080c6:	50d1      	str	r1, [r2, r3]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	251f      	movs	r5, #31
 80080cc:	197c      	adds	r4, r7, r5
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	0011      	movs	r1, r2
 80080d2:	0018      	movs	r0, r3
 80080d4:	f7fe fd38 	bl	8006b48 <follow_path>
 80080d8:	0003      	movs	r3, r0
 80080da:	7023      	strb	r3, [r4, #0]
		FREE_BUF();
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	0018      	movs	r0, r3
 80080e0:	f000 ffd3 	bl	800908a <ff_memfree>
		if (res == FR_OK) {						/* Follow completed */
 80080e4:	197b      	adds	r3, r7, r5
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d15a      	bne.n	80081a2 <f_opendir+0x146>
			if (dp->dir) {						/* It is not the origin directory itself */
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	2385      	movs	r3, #133	@ 0x85
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	58d3      	ldr	r3, [r2, r3]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d01b      	beq.n	8008130 <f_opendir+0xd4>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	2385      	movs	r3, #133	@ 0x85
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	58d3      	ldr	r3, [r2, r3]
 8008100:	330b      	adds	r3, #11
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	001a      	movs	r2, r3
 8008106:	2310      	movs	r3, #16
 8008108:	4013      	ands	r3, r2
 800810a:	d00d      	beq.n	8008128 <f_opendir+0xcc>
					dp->sclust = ld_clust(fs, dp->dir);
 800810c:	6978      	ldr	r0, [r7, #20]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	2385      	movs	r3, #133	@ 0x85
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	58d3      	ldr	r3, [r2, r3]
 8008116:	0019      	movs	r1, r3
 8008118:	f7fd fc77 	bl	8005a0a <ld_clust>
 800811c:	0001      	movs	r1, r0
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	2382      	movs	r3, #130	@ 0x82
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	50d1      	str	r1, [r2, r3]
 8008126:	e003      	b.n	8008130 <f_opendir+0xd4>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8008128:	231f      	movs	r3, #31
 800812a:	18fb      	adds	r3, r7, r3
 800812c:	2205      	movs	r2, #5
 800812e:	701a      	strb	r2, [r3, #0]
			}
			if (res == FR_OK) {
 8008130:	241f      	movs	r4, #31
 8008132:	193b      	adds	r3, r7, r4
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d133      	bne.n	80081a2 <f_opendir+0x146>
				dp->id = fs->id;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	4a25      	ldr	r2, [pc, #148]	@ (80081d4 <f_opendir+0x178>)
 800813e:	5a99      	ldrh	r1, [r3, r2]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	2381      	movs	r3, #129	@ 0x81
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	52d1      	strh	r1, [r2, r3]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008148:	0025      	movs	r5, r4
 800814a:	193c      	adds	r4, r7, r4
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2100      	movs	r1, #0
 8008150:	0018      	movs	r0, r3
 8008152:	f7fd fa33 	bl	80055bc <dir_sdi>
 8008156:	0003      	movs	r3, r0
 8008158:	7023      	strb	r3, [r4, #0]
#if _FS_LOCK
				if (res == FR_OK) {
 800815a:	002c      	movs	r4, r5
 800815c:	193b      	adds	r3, r7, r4
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d11e      	bne.n	80081a2 <f_opendir+0x146>
					if (dp->sclust) {
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	2382      	movs	r3, #130	@ 0x82
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	58d3      	ldr	r3, [r2, r3]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d013      	beq.n	8008198 <f_opendir+0x13c>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2100      	movs	r1, #0
 8008174:	0018      	movs	r0, r3
 8008176:	f7fc fc13 	bl	80049a0 <inc_lock>
 800817a:	0001      	movs	r1, r0
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	2387      	movs	r3, #135	@ 0x87
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	50d1      	str	r1, [r2, r3]
						if (!dp->lockid)
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	2387      	movs	r3, #135	@ 0x87
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	58d3      	ldr	r3, [r2, r3]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d108      	bne.n	80081a2 <f_opendir+0x146>
							res = FR_TOO_MANY_OPEN_FILES;
 8008190:	193b      	adds	r3, r7, r4
 8008192:	2212      	movs	r2, #18
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	e004      	b.n	80081a2 <f_opendir+0x146>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	2387      	movs	r3, #135	@ 0x87
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	2100      	movs	r1, #0
 80081a0:	50d1      	str	r1, [r2, r3]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80081a2:	221f      	movs	r2, #31
 80081a4:	18bb      	adds	r3, r7, r2
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2b04      	cmp	r3, #4
 80081aa:	d102      	bne.n	80081b2 <f_opendir+0x156>
 80081ac:	18bb      	adds	r3, r7, r2
 80081ae:	2205      	movs	r2, #5
 80081b0:	701a      	strb	r2, [r3, #0]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 80081b2:	231f      	movs	r3, #31
 80081b4:	18fb      	adds	r3, r7, r3
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d004      	beq.n	80081c6 <f_opendir+0x16a>
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	2380      	movs	r3, #128	@ 0x80
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	2100      	movs	r1, #0
 80081c4:	50d1      	str	r1, [r2, r3]

	LEAVE_FF(fs, res);
 80081c6:	231f      	movs	r3, #31
 80081c8:	18fb      	adds	r3, r7, r3
 80081ca:	781b      	ldrb	r3, [r3, #0]
}
 80081cc:	0018      	movs	r0, r3
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b008      	add	sp, #32
 80081d2:	bdb0      	pop	{r4, r5, r7, pc}
 80081d4:	00000206 	.word	0x00000206

080081d8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80081d8:	b5b0      	push	{r4, r5, r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 80081e0:	250f      	movs	r5, #15
 80081e2:	197c      	adds	r4, r7, r5
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	0018      	movs	r0, r3
 80081e8:	f7ff f90c 	bl	8007404 <validate>
 80081ec:	0003      	movs	r3, r0
 80081ee:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80081f0:	0029      	movs	r1, r5
 80081f2:	187b      	adds	r3, r7, r1
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d119      	bne.n	800822e <f_closedir+0x56>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	2387      	movs	r3, #135	@ 0x87
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	58d3      	ldr	r3, [r2, r3]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d009      	beq.n	800821a <f_closedir+0x42>
			res = dec_lock(dp->lockid);
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	2387      	movs	r3, #135	@ 0x87
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	58d3      	ldr	r3, [r2, r3]
 800820e:	187c      	adds	r4, r7, r1
 8008210:	0018      	movs	r0, r3
 8008212:	f7fc fc7d 	bl	8004b10 <dec_lock>
 8008216:	0003      	movs	r3, r0
 8008218:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK)
 800821a:	230f      	movs	r3, #15
 800821c:	18fb      	adds	r3, r7, r3
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <f_closedir+0x56>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	2380      	movs	r3, #128	@ 0x80
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	2100      	movs	r1, #0
 800822c:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800822e:	230f      	movs	r3, #15
 8008230:	18fb      	adds	r3, r7, r3
 8008232:	781b      	ldrb	r3, [r3, #0]
}
 8008234:	0018      	movs	r0, r3
 8008236:	46bd      	mov	sp, r7
 8008238:	b004      	add	sp, #16
 800823a:	bdb0      	pop	{r4, r5, r7, pc}

0800823c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800823c:	b5b0      	push	{r4, r5, r7, lr}
 800823e:	b088      	sub	sp, #32
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8008246:	251f      	movs	r5, #31
 8008248:	197c      	adds	r4, r7, r5
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	0018      	movs	r0, r3
 800824e:	f7ff f8d9 	bl	8007404 <validate>
 8008252:	0003      	movs	r3, r0
 8008254:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008256:	002a      	movs	r2, r5
 8008258:	18bb      	adds	r3, r7, r2
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d15c      	bne.n	800831a <f_readdir+0xde>
		if (!fno) {
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d108      	bne.n	8008278 <f_readdir+0x3c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008266:	18bc      	adds	r4, r7, r2
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2100      	movs	r1, #0
 800826c:	0018      	movs	r0, r3
 800826e:	f7fd f9a5 	bl	80055bc <dir_sdi>
 8008272:	0003      	movs	r3, r0
 8008274:	7023      	strb	r3, [r4, #0]
 8008276:	e050      	b.n	800831a <f_readdir+0xde>
		} else {
			INIT_BUF(*dp);
 8008278:	2380      	movs	r3, #128	@ 0x80
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	0018      	movs	r0, r3
 800827e:	f000 fef7 	bl	8009070 <ff_memalloc>
 8008282:	0003      	movs	r3, r0
 8008284:	61bb      	str	r3, [r7, #24]
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <f_readdir+0x54>
 800828c:	2311      	movs	r3, #17
 800828e:	e047      	b.n	8008320 <f_readdir+0xe4>
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	2388      	movs	r3, #136	@ 0x88
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	69b9      	ldr	r1, [r7, #24]
 8008298:	50d1      	str	r1, [r2, r3]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	2386      	movs	r3, #134	@ 0x86
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	210c      	movs	r1, #12
 80082a2:	1879      	adds	r1, r7, r1
 80082a4:	50d1      	str	r1, [r2, r3]
			res = dir_read(dp, 0);			/* Read an item */
 80082a6:	251f      	movs	r5, #31
 80082a8:	197c      	adds	r4, r7, r5
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2100      	movs	r1, #0
 80082ae:	0018      	movs	r0, r3
 80082b0:	f7fd ff34 	bl	800611c <dir_read>
 80082b4:	0003      	movs	r3, r0
 80082b6:	7023      	strb	r3, [r4, #0]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 80082b8:	0028      	movs	r0, r5
 80082ba:	183b      	adds	r3, r7, r0
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	2b04      	cmp	r3, #4
 80082c0:	d107      	bne.n	80082d2 <f_readdir+0x96>
				dp->sect = 0;
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	2384      	movs	r3, #132	@ 0x84
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	2100      	movs	r1, #0
 80082ca:	50d1      	str	r1, [r2, r3]
				res = FR_OK;
 80082cc:	183b      	adds	r3, r7, r0
 80082ce:	2200      	movs	r2, #0
 80082d0:	701a      	strb	r2, [r3, #0]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 80082d2:	251f      	movs	r5, #31
 80082d4:	197b      	adds	r3, r7, r5
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d11a      	bne.n	8008312 <f_readdir+0xd6>
				get_fileinfo(dp, fno);		/* Get the object information */
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	0011      	movs	r1, r2
 80082e2:	0018      	movs	r0, r3
 80082e4:	f7fe f93a 	bl	800655c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80082e8:	197c      	adds	r4, r7, r5
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2100      	movs	r1, #0
 80082ee:	0018      	movs	r0, r3
 80082f0:	f7fd fa14 	bl	800571c <dir_next>
 80082f4:	0003      	movs	r3, r0
 80082f6:	7023      	strb	r3, [r4, #0]
				if (res == FR_NO_FILE) {
 80082f8:	0028      	movs	r0, r5
 80082fa:	183b      	adds	r3, r7, r0
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	2b04      	cmp	r3, #4
 8008300:	d107      	bne.n	8008312 <f_readdir+0xd6>
					dp->sect = 0;
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	2384      	movs	r3, #132	@ 0x84
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	2100      	movs	r1, #0
 800830a:	50d1      	str	r1, [r2, r3]
					res = FR_OK;
 800830c:	183b      	adds	r3, r7, r0
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]
				}
			}
			FREE_BUF();
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	0018      	movs	r0, r3
 8008316:	f000 feb8 	bl	800908a <ff_memfree>
		}
	}

	LEAVE_FF(dp->fs, res);
 800831a:	231f      	movs	r3, #31
 800831c:	18fb      	adds	r3, r7, r3
 800831e:	781b      	ldrb	r3, [r3, #0]
}
 8008320:	0018      	movs	r0, r3
 8008322:	46bd      	mov	sp, r7
 8008324:	b008      	add	sp, #32
 8008326:	bdb0      	pop	{r4, r5, r7, pc}

08008328 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008328:	b5b0      	push	{r4, r5, r7, lr}
 800832a:	b08e      	sub	sp, #56	@ 0x38
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8008334:	2537      	movs	r5, #55	@ 0x37
 8008336:	197c      	adds	r4, r7, r5
 8008338:	230c      	movs	r3, #12
 800833a:	18f9      	adds	r1, r7, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	0018      	movs	r0, r3
 8008342:	f7fe fd3b 	bl	8006dbc <find_volume>
 8008346:	0003      	movs	r3, r0
 8008348:	7023      	strb	r3, [r4, #0]
	fs = *fatfs;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8008350:	197b      	adds	r3, r7, r5
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d000      	beq.n	800835a <f_getfree+0x32>
 8008358:	e0c1      	b.n	80084de <f_getfree+0x1b6>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800835a:	69fa      	ldr	r2, [r7, #28]
 800835c:	2384      	movs	r3, #132	@ 0x84
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	58d2      	ldr	r2, [r2, r3]
 8008362:	69f9      	ldr	r1, [r7, #28]
 8008364:	2385      	movs	r3, #133	@ 0x85
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	58cb      	ldr	r3, [r1, r3]
 800836a:	3b02      	subs	r3, #2
 800836c:	429a      	cmp	r2, r3
 800836e:	d806      	bhi.n	800837e <f_getfree+0x56>
			*nclst = fs->free_clust;
 8008370:	69fa      	ldr	r2, [r7, #28]
 8008372:	2384      	movs	r3, #132	@ 0x84
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	58d2      	ldr	r2, [r2, r3]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	e0af      	b.n	80084de <f_getfree+0x1b6>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800837e:	201b      	movs	r0, #27
 8008380:	183b      	adds	r3, r7, r0
 8008382:	69f9      	ldr	r1, [r7, #28]
 8008384:	2280      	movs	r2, #128	@ 0x80
 8008386:	0092      	lsls	r2, r2, #2
 8008388:	5c8a      	ldrb	r2, [r1, r2]
 800838a:	701a      	strb	r2, [r3, #0]
			n = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fat == FS_FAT12) {
 8008390:	183b      	adds	r3, r7, r0
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d12a      	bne.n	80083ee <f_getfree+0xc6>
				clst = 2;
 8008398:	2302      	movs	r3, #2
 800839a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				do {
					stat = get_fat(fs, clst);
 800839c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	0011      	movs	r1, r2
 80083a2:	0018      	movs	r0, r3
 80083a4:	f7fc fdba 	bl	8004f1c <get_fat>
 80083a8:	0003      	movs	r3, r0
 80083aa:	617b      	str	r3, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	3301      	adds	r3, #1
 80083b0:	d104      	bne.n	80083bc <f_getfree+0x94>
 80083b2:	2337      	movs	r3, #55	@ 0x37
 80083b4:	18fb      	adds	r3, r7, r3
 80083b6:	2201      	movs	r2, #1
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	e07f      	b.n	80084bc <f_getfree+0x194>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d104      	bne.n	80083cc <f_getfree+0xa4>
 80083c2:	2337      	movs	r3, #55	@ 0x37
 80083c4:	18fb      	adds	r3, r7, r3
 80083c6:	2202      	movs	r2, #2
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	e077      	b.n	80084bc <f_getfree+0x194>
					if (stat == 0) n++;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d102      	bne.n	80083d8 <f_getfree+0xb0>
 80083d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d4:	3301      	adds	r3, #1
 80083d6:	633b      	str	r3, [r7, #48]	@ 0x30
				} while (++clst < fs->n_fatent);
 80083d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083da:	3301      	adds	r3, #1
 80083dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	2385      	movs	r3, #133	@ 0x85
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	58d3      	ldr	r3, [r2, r3]
 80083e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d3d7      	bcc.n	800839c <f_getfree+0x74>
 80083ec:	e066      	b.n	80084bc <f_getfree+0x194>
			} else {
				clst = fs->n_fatent;
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	2385      	movs	r3, #133	@ 0x85
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	58d3      	ldr	r3, [r2, r3]
 80083f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				sect = fs->fatbase;
 80083f8:	69fa      	ldr	r2, [r7, #28]
 80083fa:	2388      	movs	r3, #136	@ 0x88
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	58d3      	ldr	r3, [r2, r3]
 8008400:	62bb      	str	r3, [r7, #40]	@ 0x28
				i = 0; p = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	627b      	str	r3, [r7, #36]	@ 0x24
 8008406:	2300      	movs	r3, #0
 8008408:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840c:	2b00      	cmp	r3, #0
 800840e:	d114      	bne.n	800843a <f_getfree+0x112>
						res = move_window(fs, sect++);
 8008410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008416:	2537      	movs	r5, #55	@ 0x37
 8008418:	197c      	adds	r4, r7, r5
 800841a:	69fa      	ldr	r2, [r7, #28]
 800841c:	0019      	movs	r1, r3
 800841e:	0010      	movs	r0, r2
 8008420:	f7fc fc48 	bl	8004cb4 <move_window>
 8008424:	0003      	movs	r3, r0
 8008426:	7023      	strb	r3, [r4, #0]
						if (res != FR_OK) break;
 8008428:	197b      	adds	r3, r7, r5
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d144      	bne.n	80084ba <f_getfree+0x192>
						p = fs->win.d8;
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8008434:	2380      	movs	r3, #128	@ 0x80
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	627b      	str	r3, [r7, #36]	@ 0x24
					}
					if (fat == FS_FAT16) {
 800843a:	231b      	movs	r3, #27
 800843c:	18fb      	adds	r3, r7, r3
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2b02      	cmp	r3, #2
 8008442:	d116      	bne.n	8008472 <f_getfree+0x14a>
						if (LD_WORD(p) == 0) n++;
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	3301      	adds	r3, #1
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	b21b      	sxth	r3, r3
 800844c:	021b      	lsls	r3, r3, #8
 800844e:	b21a      	sxth	r2, r3
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	b21b      	sxth	r3, r3
 8008456:	4313      	orrs	r3, r2
 8008458:	b21b      	sxth	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d102      	bne.n	8008464 <f_getfree+0x13c>
 800845e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008460:	3301      	adds	r3, #1
 8008462:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 2; i -= 2;
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	3302      	adds	r3, #2
 8008468:	623b      	str	r3, [r7, #32]
 800846a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846c:	3b02      	subs	r3, #2
 800846e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008470:	e01c      	b.n	80084ac <f_getfree+0x184>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	3303      	adds	r3, #3
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	061a      	lsls	r2, r3, #24
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	3302      	adds	r3, #2
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	041b      	lsls	r3, r3, #16
 8008482:	431a      	orrs	r2, r3
 8008484:	6a3b      	ldr	r3, [r7, #32]
 8008486:	3301      	adds	r3, #1
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	021b      	lsls	r3, r3, #8
 800848c:	4313      	orrs	r3, r2
 800848e:	6a3a      	ldr	r2, [r7, #32]
 8008490:	7812      	ldrb	r2, [r2, #0]
 8008492:	4313      	orrs	r3, r2
 8008494:	011b      	lsls	r3, r3, #4
 8008496:	091b      	lsrs	r3, r3, #4
 8008498:	d102      	bne.n	80084a0 <f_getfree+0x178>
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	3301      	adds	r3, #1
 800849e:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 4; i -= 4;
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	3304      	adds	r3, #4
 80084a4:	623b      	str	r3, [r7, #32]
 80084a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a8:	3b04      	subs	r3, #4
 80084aa:	627b      	str	r3, [r7, #36]	@ 0x24
					}
				} while (--clst);
 80084ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ae:	3b01      	subs	r3, #1
 80084b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1a8      	bne.n	800840a <f_getfree+0xe2>
 80084b8:	e000      	b.n	80084bc <f_getfree+0x194>
						if (res != FR_OK) break;
 80084ba:	46c0      	nop			@ (mov r8, r8)
			}
			fs->free_clust = n;
 80084bc:	69fa      	ldr	r2, [r7, #28]
 80084be:	2384      	movs	r3, #132	@ 0x84
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80084c4:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	4a08      	ldr	r2, [pc, #32]	@ (80084ec <f_getfree+0x1c4>)
 80084ca:	5c9b      	ldrb	r3, [r3, r2]
 80084cc:	2201      	movs	r2, #1
 80084ce:	4313      	orrs	r3, r2
 80084d0:	b2d9      	uxtb	r1, r3
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	4a05      	ldr	r2, [pc, #20]	@ (80084ec <f_getfree+0x1c4>)
 80084d6:	5499      	strb	r1, [r3, r2]
			*nclst = n;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084dc:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80084de:	2337      	movs	r3, #55	@ 0x37
 80084e0:	18fb      	adds	r3, r7, r3
 80084e2:	781b      	ldrb	r3, [r3, #0]
}
 80084e4:	0018      	movs	r0, r3
 80084e6:	46bd      	mov	sp, r7
 80084e8:	b00e      	add	sp, #56	@ 0x38
 80084ea:	bdb0      	pop	{r4, r5, r7, pc}
 80084ec:	00000205 	.word	0x00000205

080084f0 <f_mkfs>:
FRESULT f_mkfs (
	const TCHAR* path,	/* Logical drive number */
	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au				/* Size of allocation unit in unit of byte or sector */
)
{
 80084f0:	b5b0      	push	{r4, r5, r7, lr}
 80084f2:	b098      	sub	sp, #96	@ 0x60
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	607a      	str	r2, [r7, #4]
 80084fa:	200b      	movs	r0, #11
 80084fc:	183b      	adds	r3, r7, r0
 80084fe:	1c0a      	adds	r2, r1, #0
 8008500:	701a      	strb	r2, [r3, #0]
	DWORD eb[2];
#endif


	/* Check mounted drive and clear work area */
	if (sfd > 1) return FR_INVALID_PARAMETER;
 8008502:	183b      	adds	r3, r7, r0
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d902      	bls.n	8008510 <f_mkfs+0x20>
 800850a:	2313      	movs	r3, #19
 800850c:	f000 fcc1 	bl	8008e92 <f_mkfs+0x9a2>
	vol = get_ldnumber(&path);
 8008510:	230c      	movs	r3, #12
 8008512:	18fb      	adds	r3, r7, r3
 8008514:	0018      	movs	r0, r3
 8008516:	f7fe fb9f 	bl	8006c58 <get_ldnumber>
 800851a:	0003      	movs	r3, r0
 800851c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800851e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008520:	2b00      	cmp	r3, #0
 8008522:	da02      	bge.n	800852a <f_mkfs+0x3a>
 8008524:	230b      	movs	r3, #11
 8008526:	f000 fcb4 	bl	8008e92 <f_mkfs+0x9a2>
	fs = FatFs[vol];
 800852a:	4bb3      	ldr	r3, [pc, #716]	@ (80087f8 <f_mkfs+0x308>)
 800852c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800852e:	0092      	lsls	r2, r2, #2
 8008530:	58d3      	ldr	r3, [r2, r3]
 8008532:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;
 8008534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008536:	2b00      	cmp	r3, #0
 8008538:	d102      	bne.n	8008540 <f_mkfs+0x50>
 800853a:	230c      	movs	r3, #12
 800853c:	f000 fca9 	bl	8008e92 <f_mkfs+0x9a2>
	fs->fs_type = 0;
 8008540:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008542:	2380      	movs	r3, #128	@ 0x80
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	2100      	movs	r1, #0
 8008548:	54d1      	strb	r1, [r2, r3]
	pdrv = LD2PD(vol);	/* Physical drive */
 800854a:	214f      	movs	r1, #79	@ 0x4f
 800854c:	187b      	adds	r3, r7, r1
 800854e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008550:	701a      	strb	r2, [r3, #0]
	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
 8008552:	234e      	movs	r3, #78	@ 0x4e
 8008554:	18fb      	adds	r3, r7, r3
 8008556:	2200      	movs	r2, #0
 8008558:	701a      	strb	r2, [r3, #0]

	/* Get disk statics */
	stat = disk_initialize(pdrv);
 800855a:	255f      	movs	r5, #95	@ 0x5f
 800855c:	197c      	adds	r4, r7, r5
 800855e:	187b      	adds	r3, r7, r1
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	0018      	movs	r0, r3
 8008564:	f7fc f872 	bl	800464c <disk_initialize>
 8008568:	0003      	movs	r3, r0
 800856a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800856c:	197b      	adds	r3, r7, r5
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2201      	movs	r2, #1
 8008572:	4013      	ands	r3, r2
 8008574:	d002      	beq.n	800857c <f_mkfs+0x8c>
 8008576:	2303      	movs	r3, #3
 8008578:	f000 fc8b 	bl	8008e92 <f_mkfs+0x9a2>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800857c:	235f      	movs	r3, #95	@ 0x5f
 800857e:	18fb      	adds	r3, r7, r3
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	2204      	movs	r2, #4
 8008584:	4013      	ands	r3, r2
 8008586:	d002      	beq.n	800858e <f_mkfs+0x9e>
 8008588:	230a      	movs	r3, #10
 800858a:	f000 fc82 	bl	8008e92 <f_mkfs+0x9a2>
		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
 800858e:	2314      	movs	r3, #20
 8008590:	18fa      	adds	r2, r7, r3
 8008592:	234f      	movs	r3, #79	@ 0x4f
 8008594:	18fb      	adds	r3, r7, r3
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2101      	movs	r1, #1
 800859a:	0018      	movs	r0, r3
 800859c:	f7fc f8d6 	bl	800474c <disk_ioctl>
 80085a0:	1e03      	subs	r3, r0, #0
 80085a2:	d102      	bne.n	80085aa <f_mkfs+0xba>
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80085a8:	d802      	bhi.n	80085b0 <f_mkfs+0xc0>
			return FR_DISK_ERR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	f000 fc71 	bl	8008e92 <f_mkfs+0x9a2>
		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
 80085b0:	230b      	movs	r3, #11
 80085b2:	18fb      	adds	r3, r7, r3
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <f_mkfs+0xce>
 80085ba:	2300      	movs	r3, #0
 80085bc:	e000      	b.n	80085c0 <f_mkfs+0xd0>
 80085be:	233f      	movs	r3, #63	@ 0x3f
 80085c0:	65bb      	str	r3, [r7, #88]	@ 0x58
		n_vol -= b_vol;				/* Volume size */
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	617b      	str	r3, [r7, #20]
	}

	if (au & (au - 1)) au = 0;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	4013      	ands	r3, r2
 80085d2:	d001      	beq.n	80085d8 <f_mkfs+0xe8>
 80085d4:	2300      	movs	r3, #0
 80085d6:	607b      	str	r3, [r7, #4]
	if (!au) {						/* AU auto selection */
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d11a      	bne.n	8008614 <f_mkfs+0x124>
		vs = n_vol / (2000 / (SS(fs) / 512));
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	22fa      	movs	r2, #250	@ 0xfa
 80085e2:	00d1      	lsls	r1, r2, #3
 80085e4:	0018      	movs	r0, r3
 80085e6:	f7f7 fdab 	bl	8000140 <__udivsi3>
 80085ea:	0003      	movs	r3, r0
 80085ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for (i = 0; vs < vst[i]; i++) ;
 80085ee:	2300      	movs	r3, #0
 80085f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085f2:	e002      	b.n	80085fa <f_mkfs+0x10a>
 80085f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085f6:	3301      	adds	r3, #1
 80085f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80085fa:	4b80      	ldr	r3, [pc, #512]	@ (80087fc <f_mkfs+0x30c>)
 80085fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085fe:	0052      	lsls	r2, r2, #1
 8008600:	5ad3      	ldrh	r3, [r2, r3]
 8008602:	001a      	movs	r2, r3
 8008604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008606:	4293      	cmp	r3, r2
 8008608:	d3f4      	bcc.n	80085f4 <f_mkfs+0x104>
		au = cst[i];
 800860a:	4b7d      	ldr	r3, [pc, #500]	@ (8008800 <f_mkfs+0x310>)
 800860c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800860e:	0052      	lsls	r2, r2, #1
 8008610:	5ad3      	ldrh	r3, [r2, r3]
 8008612:	607b      	str	r3, [r7, #4]
	}
	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	2380      	movs	r3, #128	@ 0x80
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	429a      	cmp	r2, r3
 800861c:	d302      	bcc.n	8008624 <f_mkfs+0x134>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	0a5b      	lsrs	r3, r3, #9
 8008622:	607b      	str	r3, [r7, #4]
	if (!au) au = 1;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <f_mkfs+0x13e>
 800862a:	2301      	movs	r3, #1
 800862c:	607b      	str	r3, [r7, #4]
	if (au > 128) au = 128;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b80      	cmp	r3, #128	@ 0x80
 8008632:	d901      	bls.n	8008638 <f_mkfs+0x148>
 8008634:	2380      	movs	r3, #128	@ 0x80
 8008636:	607b      	str	r3, [r7, #4]

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	0018      	movs	r0, r3
 800863e:	f7f7 fd7f 	bl	8000140 <__udivsi3>
 8008642:	0003      	movs	r3, r0
 8008644:	62bb      	str	r3, [r7, #40]	@ 0x28
	fmt = FS_FAT12;
 8008646:	2133      	movs	r1, #51	@ 0x33
 8008648:	187b      	adds	r3, r7, r1
 800864a:	2201      	movs	r2, #1
 800864c:	701a      	strb	r2, [r3, #0]
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 800864e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008650:	4a6c      	ldr	r2, [pc, #432]	@ (8008804 <f_mkfs+0x314>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d902      	bls.n	800865c <f_mkfs+0x16c>
 8008656:	187b      	adds	r3, r7, r1
 8008658:	2202      	movs	r2, #2
 800865a:	701a      	strb	r2, [r3, #0]
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 800865c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865e:	4a6a      	ldr	r2, [pc, #424]	@ (8008808 <f_mkfs+0x318>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d903      	bls.n	800866c <f_mkfs+0x17c>
 8008664:	2333      	movs	r3, #51	@ 0x33
 8008666:	18fb      	adds	r3, r7, r3
 8008668:	2203      	movs	r2, #3
 800866a:	701a      	strb	r2, [r3, #0]

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
 800866c:	2333      	movs	r3, #51	@ 0x33
 800866e:	18fb      	adds	r3, r7, r3
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	2b03      	cmp	r3, #3
 8008674:	d10b      	bne.n	800868e <f_mkfs+0x19e>
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 8008676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4a64      	ldr	r2, [pc, #400]	@ (800880c <f_mkfs+0x31c>)
 800867c:	4694      	mov	ip, r2
 800867e:	4463      	add	r3, ip
 8008680:	0a5b      	lsrs	r3, r3, #9
 8008682:	63bb      	str	r3, [r7, #56]	@ 0x38
		n_rsv = 32;
 8008684:	2320      	movs	r3, #32
 8008686:	63fb      	str	r3, [r7, #60]	@ 0x3c
		n_dir = 0;
 8008688:	2300      	movs	r3, #0
 800868a:	637b      	str	r3, [r7, #52]	@ 0x34
 800868c:	e01a      	b.n	80086c4 <f_mkfs+0x1d4>
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
 800868e:	2333      	movs	r3, #51	@ 0x33
 8008690:	18fb      	adds	r3, r7, r3
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d107      	bne.n	80086a8 <f_mkfs+0x1b8>
 8008698:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800869a:	0013      	movs	r3, r2
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	189b      	adds	r3, r3, r2
 80086a0:	3301      	adds	r3, #1
 80086a2:	085b      	lsrs	r3, r3, #1
 80086a4:	3303      	adds	r3, #3
 80086a6:	e002      	b.n	80086ae <f_mkfs+0x1be>
 80086a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086aa:	3302      	adds	r3, #2
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	63bb      	str	r3, [r7, #56]	@ 0x38
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 80086b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b2:	4a57      	ldr	r2, [pc, #348]	@ (8008810 <f_mkfs+0x320>)
 80086b4:	4694      	mov	ip, r2
 80086b6:	4463      	add	r3, ip
 80086b8:	0a5b      	lsrs	r3, r3, #9
 80086ba:	63bb      	str	r3, [r7, #56]	@ 0x38
		n_rsv = 1;
 80086bc:	2301      	movs	r3, #1
 80086be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
 80086c0:	2320      	movs	r3, #32
 80086c2:	637b      	str	r3, [r7, #52]	@ 0x34
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
 80086c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086c8:	18d3      	adds	r3, r2, r3
 80086ca:	643b      	str	r3, [r7, #64]	@ 0x40
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
 80086cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d0:	18d3      	adds	r3, r2, r3
 80086d2:	627b      	str	r3, [r7, #36]	@ 0x24
	b_data = b_dir + n_dir;				/* Data area start sector */
 80086d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d8:	18d3      	adds	r3, r2, r3
 80086da:	623b      	str	r3, [r7, #32]
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80086dc:	6a3a      	ldr	r2, [r7, #32]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	18d2      	adds	r2, r2, r3
 80086e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80086e4:	1ad2      	subs	r2, r2, r3
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d902      	bls.n	80086f2 <f_mkfs+0x202>
 80086ec:	230e      	movs	r3, #14
 80086ee:	f000 fbd0 	bl	8008e92 <f_mkfs+0x9a2>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
 80086f2:	2318      	movs	r3, #24
 80086f4:	18fa      	adds	r2, r7, r3
 80086f6:	234f      	movs	r3, #79	@ 0x4f
 80086f8:	18fb      	adds	r3, r7, r3
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2103      	movs	r1, #3
 80086fe:	0018      	movs	r0, r3
 8008700:	f7fc f824 	bl	800474c <disk_ioctl>
 8008704:	1e03      	subs	r3, r0, #0
 8008706:	d107      	bne.n	8008718 <f_mkfs+0x228>
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <f_mkfs+0x228>
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	2380      	movs	r3, #128	@ 0x80
 8008712:	021b      	lsls	r3, r3, #8
 8008714:	429a      	cmp	r2, r3
 8008716:	d901      	bls.n	800871c <f_mkfs+0x22c>
 8008718:	2301      	movs	r3, #1
 800871a:	61bb      	str	r3, [r7, #24]
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	18d3      	adds	r3, r2, r3
 8008722:	3b01      	subs	r3, #1
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	4252      	negs	r2, r2
 8008728:	4013      	ands	r3, r2
 800872a:	61bb      	str	r3, [r7, #24]
	n = (n - b_data) / N_FATS;
 800872c:	69ba      	ldr	r2, [r7, #24]
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	61bb      	str	r3, [r7, #24]
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 8008734:	2333      	movs	r3, #51	@ 0x33
 8008736:	18fb      	adds	r3, r7, r3
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	2b03      	cmp	r3, #3
 800873c:	d108      	bne.n	8008750 <f_mkfs+0x260>
		n_rsv += n;
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008742:	18d3      	adds	r3, r2, r3
 8008744:	63fb      	str	r3, [r7, #60]	@ 0x3c
		b_fat += n;
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800874a:	18d3      	adds	r3, r2, r3
 800874c:	643b      	str	r3, [r7, #64]	@ 0x40
 800874e:	e003      	b.n	8008758 <f_mkfs+0x268>
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008754:	18d3      	adds	r3, r2, r3
 8008756:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800875c:	1ad2      	subs	r2, r2, r3
 800875e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008760:	1ad2      	subs	r2, r2, r3
 8008762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	6879      	ldr	r1, [r7, #4]
 8008768:	0018      	movs	r0, r3
 800876a:	f7f7 fce9 	bl	8000140 <__udivsi3>
 800876e:	0003      	movs	r3, r0
 8008770:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 8008772:	2333      	movs	r3, #51	@ 0x33
 8008774:	18fb      	adds	r3, r7, r3
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	2b02      	cmp	r3, #2
 800877a:	d103      	bne.n	8008784 <f_mkfs+0x294>
 800877c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800877e:	4a21      	ldr	r2, [pc, #132]	@ (8008804 <f_mkfs+0x314>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d908      	bls.n	8008796 <f_mkfs+0x2a6>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 8008784:	2333      	movs	r3, #51	@ 0x33
 8008786:	18fb      	adds	r3, r7, r3
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	2b03      	cmp	r3, #3
 800878c:	d105      	bne.n	800879a <f_mkfs+0x2aa>
 800878e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008790:	4a1d      	ldr	r2, [pc, #116]	@ (8008808 <f_mkfs+0x318>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d801      	bhi.n	800879a <f_mkfs+0x2aa>
		return FR_MKFS_ABORTED;
 8008796:	230e      	movs	r3, #14
 8008798:	e37b      	b.n	8008e92 <f_mkfs+0x9a2>

	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
 800879a:	2333      	movs	r3, #51	@ 0x33
 800879c:	18fb      	adds	r3, r7, r3
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d104      	bne.n	80087ae <f_mkfs+0x2be>
		sys = 0x0C;		/* FAT32X */
 80087a4:	234c      	movs	r3, #76	@ 0x4c
 80087a6:	18fb      	adds	r3, r7, r3
 80087a8:	220c      	movs	r2, #12
 80087aa:	701a      	strb	r2, [r3, #0]
 80087ac:	e019      	b.n	80087e2 <f_mkfs+0x2f2>
	} else {
		if (fmt == FS_FAT12 && n_vol < 0x10000) {
 80087ae:	2333      	movs	r3, #51	@ 0x33
 80087b0:	18fb      	adds	r3, r7, r3
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d109      	bne.n	80087cc <f_mkfs+0x2dc>
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	2380      	movs	r3, #128	@ 0x80
 80087bc:	025b      	lsls	r3, r3, #9
 80087be:	429a      	cmp	r2, r3
 80087c0:	d204      	bcs.n	80087cc <f_mkfs+0x2dc>
			sys = 0x01;	/* FAT12(<65536) */
 80087c2:	234c      	movs	r3, #76	@ 0x4c
 80087c4:	18fb      	adds	r3, r7, r3
 80087c6:	2201      	movs	r2, #1
 80087c8:	701a      	strb	r2, [r3, #0]
 80087ca:	e00a      	b.n	80087e2 <f_mkfs+0x2f2>
		} else {
			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	2380      	movs	r3, #128	@ 0x80
 80087d0:	025b      	lsls	r3, r3, #9
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d201      	bcs.n	80087da <f_mkfs+0x2ea>
 80087d6:	2204      	movs	r2, #4
 80087d8:	e000      	b.n	80087dc <f_mkfs+0x2ec>
 80087da:	2206      	movs	r2, #6
 80087dc:	234c      	movs	r3, #76	@ 0x4c
 80087de:	18fb      	adds	r3, r7, r3
 80087e0:	701a      	strb	r2, [r3, #0]
		tbl[4] = sys;
		if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to teh MBR */
			return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No partition table (SFD) */
 80087e2:	230b      	movs	r3, #11
 80087e4:	18fb      	adds	r3, r7, r3
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d013      	beq.n	8008814 <f_mkfs+0x324>
			md = 0xF0;
 80087ec:	234d      	movs	r3, #77	@ 0x4d
 80087ee:	18fb      	adds	r3, r7, r3
 80087f0:	22f0      	movs	r2, #240	@ 0xf0
 80087f2:	701a      	strb	r2, [r3, #0]
 80087f4:	e088      	b.n	8008908 <f_mkfs+0x418>
 80087f6:	46c0      	nop			@ (mov r8, r8)
 80087f8:	20000640 	.word	0x20000640
 80087fc:	0800a9fc 	.word	0x0800a9fc
 8008800:	0800aa14 	.word	0x0800aa14
 8008804:	00000ff5 	.word	0x00000ff5
 8008808:	0000fff5 	.word	0x0000fff5
 800880c:	00000207 	.word	0x00000207
 8008810:	000001ff 	.word	0x000001ff
		} else {	/* Create partition table (FDISK) */
			mem_set(fs->win.d8, 0, SS(fs));
 8008814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008816:	2280      	movs	r2, #128	@ 0x80
 8008818:	0092      	lsls	r2, r2, #2
 800881a:	2100      	movs	r1, #0
 800881c:	0018      	movs	r0, r3
 800881e:	f7fb ffda 	bl	80047d6 <mem_set>
			tbl = fs->win.d8 + MBR_Table;	/* Create partition table for single partition in the drive */
 8008822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008824:	33bf      	adds	r3, #191	@ 0xbf
 8008826:	33ff      	adds	r3, #255	@ 0xff
 8008828:	61fb      	str	r3, [r7, #28]
			tbl[1] = 1;						/* Partition start head */
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	3301      	adds	r3, #1
 800882e:	2201      	movs	r2, #1
 8008830:	701a      	strb	r2, [r3, #0]
			tbl[2] = 1;						/* Partition start sector */
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	3302      	adds	r3, #2
 8008836:	2201      	movs	r2, #1
 8008838:	701a      	strb	r2, [r3, #0]
			tbl[3] = 0;						/* Partition start cylinder */
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	3303      	adds	r3, #3
 800883e:	2200      	movs	r2, #0
 8008840:	701a      	strb	r2, [r3, #0]
			tbl[4] = sys;					/* System type */
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	3304      	adds	r3, #4
 8008846:	224c      	movs	r2, #76	@ 0x4c
 8008848:	18ba      	adds	r2, r7, r2
 800884a:	7812      	ldrb	r2, [r2, #0]
 800884c:	701a      	strb	r2, [r3, #0]
			tbl[5] = 254;					/* Partition end head */
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	3305      	adds	r3, #5
 8008852:	22fe      	movs	r2, #254	@ 0xfe
 8008854:	701a      	strb	r2, [r3, #0]
			n = (b_vol + n_vol) / 63 / 255;
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800885a:	18d3      	adds	r3, r2, r3
 800885c:	49ee      	ldr	r1, [pc, #952]	@ (8008c18 <f_mkfs+0x728>)
 800885e:	0018      	movs	r0, r3
 8008860:	f7f7 fc6e 	bl	8000140 <__udivsi3>
 8008864:	0003      	movs	r3, r0
 8008866:	61bb      	str	r3, [r7, #24]
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	089b      	lsrs	r3, r3, #2
 800886c:	b2da      	uxtb	r2, r3
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	3306      	adds	r3, #6
 8008872:	213f      	movs	r1, #63	@ 0x3f
 8008874:	430a      	orrs	r2, r1
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]
			tbl[7] = (BYTE)n;				/* End cylinder */
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	3307      	adds	r3, #7
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	3308      	adds	r3, #8
 8008888:	223f      	movs	r2, #63	@ 0x3f
 800888a:	701a      	strb	r2, [r3, #0]
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	3309      	adds	r3, #9
 8008890:	2200      	movs	r2, #0
 8008892:	701a      	strb	r2, [r3, #0]
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	330a      	adds	r3, #10
 8008898:	2200      	movs	r2, #0
 800889a:	701a      	strb	r2, [r3, #0]
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	330b      	adds	r3, #11
 80088a0:	2200      	movs	r2, #0
 80088a2:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	330c      	adds	r3, #12
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	701a      	strb	r2, [r3, #0]
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	0a1b      	lsrs	r3, r3, #8
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	330d      	adds	r3, #13
 80088ba:	b2d2      	uxtb	r2, r2
 80088bc:	701a      	strb	r2, [r3, #0]
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	0c1a      	lsrs	r2, r3, #16
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	330e      	adds	r3, #14
 80088c6:	b2d2      	uxtb	r2, r2
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	0e1a      	lsrs	r2, r3, #24
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	330f      	adds	r3, #15
 80088d2:	b2d2      	uxtb	r2, r2
 80088d4:	701a      	strb	r2, [r3, #0]
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 80088d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80088d8:	23ff      	movs	r3, #255	@ 0xff
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	2155      	movs	r1, #85	@ 0x55
 80088de:	54d1      	strb	r1, [r2, r3]
 80088e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088e2:	4ace      	ldr	r2, [pc, #824]	@ (8008c1c <f_mkfs+0x72c>)
 80088e4:	21aa      	movs	r1, #170	@ 0xaa
 80088e6:	5499      	strb	r1, [r3, r2]
			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 80088e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80088ea:	234f      	movs	r3, #79	@ 0x4f
 80088ec:	18fb      	adds	r3, r7, r3
 80088ee:	7818      	ldrb	r0, [r3, #0]
 80088f0:	2301      	movs	r3, #1
 80088f2:	2200      	movs	r2, #0
 80088f4:	f7fb ff02 	bl	80046fc <disk_write>
 80088f8:	1e03      	subs	r3, r0, #0
 80088fa:	d001      	beq.n	8008900 <f_mkfs+0x410>
				return FR_DISK_ERR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e2c8      	b.n	8008e92 <f_mkfs+0x9a2>
			md = 0xF8;
 8008900:	234d      	movs	r3, #77	@ 0x4d
 8008902:	18fb      	adds	r3, r7, r3
 8008904:	22f8      	movs	r2, #248	@ 0xf8
 8008906:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Create BPB in the VBR */
	tbl = fs->win.d8;							/* Clear sector */
 8008908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800890a:	61fb      	str	r3, [r7, #28]
	mem_set(tbl, 0, SS(fs));
 800890c:	2380      	movs	r3, #128	@ 0x80
 800890e:	009a      	lsls	r2, r3, #2
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	2100      	movs	r1, #0
 8008914:	0018      	movs	r0, r3
 8008916:	f7fb ff5e 	bl	80047d6 <mem_set>
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
 800891a:	49c1      	ldr	r1, [pc, #772]	@ (8008c20 <f_mkfs+0x730>)
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	220b      	movs	r2, #11
 8008920:	0018      	movs	r0, r3
 8008922:	f7fb ff3b 	bl	800479c <mem_cpy>
	i = SS(fs);								/* Sector size */
 8008926:	2380      	movs	r3, #128	@ 0x80
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	647b      	str	r3, [r7, #68]	@ 0x44
	ST_WORD(tbl + BPB_BytsPerSec, i);
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	330b      	adds	r3, #11
 8008930:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008932:	b2d2      	uxtb	r2, r2
 8008934:	701a      	strb	r2, [r3, #0]
 8008936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008938:	b29b      	uxth	r3, r3
 800893a:	0a1b      	lsrs	r3, r3, #8
 800893c:	b29a      	uxth	r2, r3
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	330c      	adds	r3, #12
 8008942:	b2d2      	uxtb	r2, r2
 8008944:	701a      	strb	r2, [r3, #0]
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	330d      	adds	r3, #13
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	b2d2      	uxtb	r2, r2
 800894e:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	330e      	adds	r3, #14
 8008954:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008956:	b2d2      	uxtb	r2, r2
 8008958:	701a      	strb	r2, [r3, #0]
 800895a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800895c:	b29b      	uxth	r3, r3
 800895e:	0a1b      	lsrs	r3, r3, #8
 8008960:	b29a      	uxth	r2, r3
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	330f      	adds	r3, #15
 8008966:	b2d2      	uxtb	r2, r2
 8008968:	701a      	strb	r2, [r3, #0]
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	3310      	adds	r3, #16
 800896e:	2201      	movs	r2, #1
 8008970:	701a      	strb	r2, [r3, #0]
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 8008972:	2333      	movs	r3, #51	@ 0x33
 8008974:	18fb      	adds	r3, r7, r3
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b03      	cmp	r3, #3
 800897a:	d101      	bne.n	8008980 <f_mkfs+0x490>
 800897c:	2300      	movs	r3, #0
 800897e:	e001      	b.n	8008984 <f_mkfs+0x494>
 8008980:	2380      	movs	r3, #128	@ 0x80
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	647b      	str	r3, [r7, #68]	@ 0x44
	ST_WORD(tbl + BPB_RootEntCnt, i);
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	3311      	adds	r3, #17
 800898a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800898c:	b2d2      	uxtb	r2, r2
 800898e:	701a      	strb	r2, [r3, #0]
 8008990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008992:	b29b      	uxth	r3, r3
 8008994:	0a1b      	lsrs	r3, r3, #8
 8008996:	b29a      	uxth	r2, r3
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	3312      	adds	r3, #18
 800899c:	b2d2      	uxtb	r2, r2
 800899e:	701a      	strb	r2, [r3, #0]
	if (n_vol < 0x10000) {					/* Number of total sectors */
 80089a0:	697a      	ldr	r2, [r7, #20]
 80089a2:	2380      	movs	r3, #128	@ 0x80
 80089a4:	025b      	lsls	r3, r3, #9
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d20d      	bcs.n	80089c6 <f_mkfs+0x4d6>
		ST_WORD(tbl + BPB_TotSec16, n_vol);
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	3313      	adds	r3, #19
 80089b0:	b2d2      	uxtb	r2, r2
 80089b2:	701a      	strb	r2, [r3, #0]
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	0a1b      	lsrs	r3, r3, #8
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	3314      	adds	r3, #20
 80089c0:	b2d2      	uxtb	r2, r2
 80089c2:	701a      	strb	r2, [r3, #0]
 80089c4:	e018      	b.n	80089f8 <f_mkfs+0x508>
	} else {
		ST_DWORD(tbl + BPB_TotSec32, n_vol);
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	3320      	adds	r3, #32
 80089cc:	b2d2      	uxtb	r2, r2
 80089ce:	701a      	strb	r2, [r3, #0]
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	0a1b      	lsrs	r3, r3, #8
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	3321      	adds	r3, #33	@ 0x21
 80089dc:	b2d2      	uxtb	r2, r2
 80089de:	701a      	strb	r2, [r3, #0]
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	0c1a      	lsrs	r2, r3, #16
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	3322      	adds	r3, #34	@ 0x22
 80089e8:	b2d2      	uxtb	r2, r2
 80089ea:	701a      	strb	r2, [r3, #0]
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	0e1a      	lsrs	r2, r3, #24
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	3323      	adds	r3, #35	@ 0x23
 80089f4:	b2d2      	uxtb	r2, r2
 80089f6:	701a      	strb	r2, [r3, #0]
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	3315      	adds	r3, #21
 80089fc:	224d      	movs	r2, #77	@ 0x4d
 80089fe:	18ba      	adds	r2, r7, r2
 8008a00:	7812      	ldrb	r2, [r2, #0]
 8008a02:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	3318      	adds	r3, #24
 8008a08:	223f      	movs	r2, #63	@ 0x3f
 8008a0a:	701a      	strb	r2, [r3, #0]
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	3319      	adds	r3, #25
 8008a10:	2200      	movs	r2, #0
 8008a12:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	331a      	adds	r3, #26
 8008a18:	22ff      	movs	r2, #255	@ 0xff
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	331b      	adds	r3, #27
 8008a20:	2200      	movs	r2, #0
 8008a22:	701a      	strb	r2, [r3, #0]
	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	331c      	adds	r3, #28
 8008a28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a2a:	b2d2      	uxtb	r2, r2
 8008a2c:	701a      	strb	r2, [r3, #0]
 8008a2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	0a1b      	lsrs	r3, r3, #8
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	331d      	adds	r3, #29
 8008a3a:	b2d2      	uxtb	r2, r2
 8008a3c:	701a      	strb	r2, [r3, #0]
 8008a3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a40:	0c1a      	lsrs	r2, r3, #16
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	331e      	adds	r3, #30
 8008a46:	b2d2      	uxtb	r2, r2
 8008a48:	701a      	strb	r2, [r3, #0]
 8008a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a4c:	0e1a      	lsrs	r2, r3, #24
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	331f      	adds	r3, #31
 8008a52:	b2d2      	uxtb	r2, r2
 8008a54:	701a      	strb	r2, [r3, #0]
	n = GET_FATTIME();						/* Use current time as VSN */
 8008a56:	f7fb fdd1 	bl	80045fc <get_fattime>
 8008a5a:	0003      	movs	r3, r0
 8008a5c:	61bb      	str	r3, [r7, #24]
	if (fmt == FS_FAT32) {
 8008a5e:	2333      	movs	r3, #51	@ 0x33
 8008a60:	18fb      	adds	r3, r7, r3
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d161      	bne.n	8008b2c <f_mkfs+0x63c>
		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	3343      	adds	r3, #67	@ 0x43
 8008a6e:	b2d2      	uxtb	r2, r2
 8008a70:	701a      	strb	r2, [r3, #0]
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	0a1b      	lsrs	r3, r3, #8
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	3344      	adds	r3, #68	@ 0x44
 8008a7e:	b2d2      	uxtb	r2, r2
 8008a80:	701a      	strb	r2, [r3, #0]
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	0c1a      	lsrs	r2, r3, #16
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	3345      	adds	r3, #69	@ 0x45
 8008a8a:	b2d2      	uxtb	r2, r2
 8008a8c:	701a      	strb	r2, [r3, #0]
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	0e1a      	lsrs	r2, r3, #24
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	3346      	adds	r3, #70	@ 0x46
 8008a96:	b2d2      	uxtb	r2, r2
 8008a98:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	3324      	adds	r3, #36	@ 0x24
 8008a9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008aa0:	b2d2      	uxtb	r2, r2
 8008aa2:	701a      	strb	r2, [r3, #0]
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	0a1b      	lsrs	r3, r3, #8
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	3325      	adds	r3, #37	@ 0x25
 8008ab0:	b2d2      	uxtb	r2, r2
 8008ab2:	701a      	strb	r2, [r3, #0]
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab6:	0c1a      	lsrs	r2, r3, #16
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	3326      	adds	r3, #38	@ 0x26
 8008abc:	b2d2      	uxtb	r2, r2
 8008abe:	701a      	strb	r2, [r3, #0]
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac2:	0e1a      	lsrs	r2, r3, #24
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	3327      	adds	r3, #39	@ 0x27
 8008ac8:	b2d2      	uxtb	r2, r2
 8008aca:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	332c      	adds	r3, #44	@ 0x2c
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	701a      	strb	r2, [r3, #0]
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	332d      	adds	r3, #45	@ 0x2d
 8008ad8:	2200      	movs	r2, #0
 8008ada:	701a      	strb	r2, [r3, #0]
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	332e      	adds	r3, #46	@ 0x2e
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	701a      	strb	r2, [r3, #0]
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	332f      	adds	r3, #47	@ 0x2f
 8008ae8:	2200      	movs	r2, #0
 8008aea:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	3330      	adds	r3, #48	@ 0x30
 8008af0:	2201      	movs	r2, #1
 8008af2:	701a      	strb	r2, [r3, #0]
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	3331      	adds	r3, #49	@ 0x31
 8008af8:	2200      	movs	r2, #0
 8008afa:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	3332      	adds	r3, #50	@ 0x32
 8008b00:	2206      	movs	r2, #6
 8008b02:	701a      	strb	r2, [r3, #0]
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	3333      	adds	r3, #51	@ 0x33
 8008b08:	2200      	movs	r2, #0
 8008b0a:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	3340      	adds	r3, #64	@ 0x40
 8008b10:	2280      	movs	r2, #128	@ 0x80
 8008b12:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	3342      	adds	r3, #66	@ 0x42
 8008b18:	2229      	movs	r2, #41	@ 0x29
 8008b1a:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	3347      	adds	r3, #71	@ 0x47
 8008b20:	4940      	ldr	r1, [pc, #256]	@ (8008c24 <f_mkfs+0x734>)
 8008b22:	2213      	movs	r2, #19
 8008b24:	0018      	movs	r0, r3
 8008b26:	f7fb fe39 	bl	800479c <mem_cpy>
 8008b2a:	e034      	b.n	8008b96 <f_mkfs+0x6a6>
	} else {
		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
 8008b2c:	69ba      	ldr	r2, [r7, #24]
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	3327      	adds	r3, #39	@ 0x27
 8008b32:	b2d2      	uxtb	r2, r2
 8008b34:	701a      	strb	r2, [r3, #0]
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	0a1b      	lsrs	r3, r3, #8
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	3328      	adds	r3, #40	@ 0x28
 8008b42:	b2d2      	uxtb	r2, r2
 8008b44:	701a      	strb	r2, [r3, #0]
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	0c1a      	lsrs	r2, r3, #16
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	3329      	adds	r3, #41	@ 0x29
 8008b4e:	b2d2      	uxtb	r2, r2
 8008b50:	701a      	strb	r2, [r3, #0]
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	0e1a      	lsrs	r2, r3, #24
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	332a      	adds	r3, #42	@ 0x2a
 8008b5a:	b2d2      	uxtb	r2, r2
 8008b5c:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	3316      	adds	r3, #22
 8008b62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b64:	b2d2      	uxtb	r2, r2
 8008b66:	701a      	strb	r2, [r3, #0]
 8008b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	0a1b      	lsrs	r3, r3, #8
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	3317      	adds	r3, #23
 8008b74:	b2d2      	uxtb	r2, r2
 8008b76:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	3324      	adds	r3, #36	@ 0x24
 8008b7c:	2280      	movs	r2, #128	@ 0x80
 8008b7e:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	3326      	adds	r3, #38	@ 0x26
 8008b84:	2229      	movs	r2, #41	@ 0x29
 8008b86:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	332b      	adds	r3, #43	@ 0x2b
 8008b8c:	4926      	ldr	r1, [pc, #152]	@ (8008c28 <f_mkfs+0x738>)
 8008b8e:	2213      	movs	r2, #19
 8008b90:	0018      	movs	r0, r3
 8008b92:	f7fb fe03 	bl	800479c <mem_cpy>
	}
	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	33ff      	adds	r3, #255	@ 0xff
 8008b9a:	33ff      	adds	r3, #255	@ 0xff
 8008b9c:	2255      	movs	r2, #85	@ 0x55
 8008b9e:	701a      	strb	r2, [r3, #0]
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8008c1c <f_mkfs+0x72c>)
 8008ba4:	4694      	mov	ip, r2
 8008ba6:	4463      	add	r3, ip
 8008ba8:	22aa      	movs	r2, #170	@ 0xaa
 8008baa:	701a      	strb	r2, [r3, #0]
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
 8008bac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008bae:	69f9      	ldr	r1, [r7, #28]
 8008bb0:	234f      	movs	r3, #79	@ 0x4f
 8008bb2:	18fb      	adds	r3, r7, r3
 8008bb4:	7818      	ldrb	r0, [r3, #0]
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	f7fb fda0 	bl	80046fc <disk_write>
 8008bbc:	1e03      	subs	r3, r0, #0
 8008bbe:	d001      	beq.n	8008bc4 <f_mkfs+0x6d4>
		return FR_DISK_ERR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e166      	b.n	8008e92 <f_mkfs+0x9a2>
	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
 8008bc4:	2333      	movs	r3, #51	@ 0x33
 8008bc6:	18fb      	adds	r3, r7, r3
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d108      	bne.n	8008be0 <f_mkfs+0x6f0>
		disk_write(pdrv, tbl, b_vol + 6, 1);
 8008bce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bd0:	1d9a      	adds	r2, r3, #6
 8008bd2:	69f9      	ldr	r1, [r7, #28]
 8008bd4:	234f      	movs	r3, #79	@ 0x4f
 8008bd6:	18fb      	adds	r3, r7, r3
 8008bd8:	7818      	ldrb	r0, [r3, #0]
 8008bda:	2301      	movs	r3, #1
 8008bdc:	f7fb fd8e 	bl	80046fc <disk_write>

	/* Initialize FAT area */
	wsect = b_fat;
 8008be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008be2:	64bb      	str	r3, [r7, #72]	@ 0x48
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 8008be4:	2300      	movs	r3, #0
 8008be6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008be8:	e0ab      	b.n	8008d42 <f_mkfs+0x852>
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 8008bea:	2380      	movs	r3, #128	@ 0x80
 8008bec:	009a      	lsls	r2, r3, #2
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f7fb fdef 	bl	80047d6 <mem_set>
		n = md;								/* Media descriptor byte */
 8008bf8:	234d      	movs	r3, #77	@ 0x4d
 8008bfa:	18fb      	adds	r3, r7, r3
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	61bb      	str	r3, [r7, #24]
		if (fmt != FS_FAT32) {
 8008c00:	2233      	movs	r2, #51	@ 0x33
 8008c02:	18bb      	adds	r3, r7, r2
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d02f      	beq.n	8008c6a <f_mkfs+0x77a>
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 8008c0a:	18bb      	adds	r3, r7, r2
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d10e      	bne.n	8008c30 <f_mkfs+0x740>
 8008c12:	4b06      	ldr	r3, [pc, #24]	@ (8008c2c <f_mkfs+0x73c>)
 8008c14:	e00d      	b.n	8008c32 <f_mkfs+0x742>
 8008c16:	46c0      	nop			@ (mov r8, r8)
 8008c18:	00003ec1 	.word	0x00003ec1
 8008c1c:	000001ff 	.word	0x000001ff
 8008c20:	0800a8ec 	.word	0x0800a8ec
 8008c24:	0800a8f8 	.word	0x0800a8f8
 8008c28:	0800a90c 	.word	0x0800a90c
 8008c2c:	00ffff00 	.word	0x00ffff00
 8008c30:	4b9a      	ldr	r3, [pc, #616]	@ (8008e9c <f_mkfs+0x9ac>)
 8008c32:	69ba      	ldr	r2, [r7, #24]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	61bb      	str	r3, [r7, #24]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	701a      	strb	r2, [r3, #0]
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	0a1b      	lsrs	r3, r3, #8
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	b2d2      	uxtb	r2, r2
 8008c4e:	701a      	strb	r2, [r3, #0]
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	0c1a      	lsrs	r2, r3, #16
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	3302      	adds	r3, #2
 8008c58:	b2d2      	uxtb	r2, r2
 8008c5a:	701a      	strb	r2, [r3, #0]
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	0e1a      	lsrs	r2, r3, #24
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	3303      	adds	r3, #3
 8008c64:	b2d2      	uxtb	r2, r2
 8008c66:	701a      	strb	r2, [r3, #0]
 8008c68:	e03b      	b.n	8008ce2 <f_mkfs+0x7f2>
		} else {
			n |= 0xFFFFFF00;
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	4a8b      	ldr	r2, [pc, #556]	@ (8008e9c <f_mkfs+0x9ac>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	61bb      	str	r3, [r7, #24]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	701a      	strb	r2, [r3, #0]
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	0a1b      	lsrs	r3, r3, #8
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	3301      	adds	r3, #1
 8008c86:	b2d2      	uxtb	r2, r2
 8008c88:	701a      	strb	r2, [r3, #0]
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	0c1a      	lsrs	r2, r3, #16
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	3302      	adds	r3, #2
 8008c92:	b2d2      	uxtb	r2, r2
 8008c94:	701a      	strb	r2, [r3, #0]
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	0e1a      	lsrs	r2, r3, #24
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	3303      	adds	r3, #3
 8008c9e:	b2d2      	uxtb	r2, r2
 8008ca0:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	3304      	adds	r3, #4
 8008ca6:	22ff      	movs	r2, #255	@ 0xff
 8008ca8:	701a      	strb	r2, [r3, #0]
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	3305      	adds	r3, #5
 8008cae:	22ff      	movs	r2, #255	@ 0xff
 8008cb0:	701a      	strb	r2, [r3, #0]
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	3306      	adds	r3, #6
 8008cb6:	22ff      	movs	r2, #255	@ 0xff
 8008cb8:	701a      	strb	r2, [r3, #0]
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	3307      	adds	r3, #7
 8008cbe:	22ff      	movs	r2, #255	@ 0xff
 8008cc0:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	22ff      	movs	r2, #255	@ 0xff
 8008cc8:	701a      	strb	r2, [r3, #0]
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	3309      	adds	r3, #9
 8008cce:	22ff      	movs	r2, #255	@ 0xff
 8008cd0:	701a      	strb	r2, [r3, #0]
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	330a      	adds	r3, #10
 8008cd6:	22ff      	movs	r2, #255	@ 0xff
 8008cd8:	701a      	strb	r2, [r3, #0]
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	330b      	adds	r3, #11
 8008cde:	220f      	movs	r2, #15
 8008ce0:	701a      	strb	r2, [r3, #0]
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 8008ce2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ce4:	1c53      	adds	r3, r2, #1
 8008ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ce8:	69f9      	ldr	r1, [r7, #28]
 8008cea:	234f      	movs	r3, #79	@ 0x4f
 8008cec:	18fb      	adds	r3, r7, r3
 8008cee:	7818      	ldrb	r0, [r3, #0]
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f7fb fd03 	bl	80046fc <disk_write>
 8008cf6:	1e03      	subs	r3, r0, #0
 8008cf8:	d001      	beq.n	8008cfe <f_mkfs+0x80e>
			return FR_DISK_ERR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e0c9      	b.n	8008e92 <f_mkfs+0x9a2>
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
 8008cfe:	2380      	movs	r3, #128	@ 0x80
 8008d00:	009a      	lsls	r2, r3, #2
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	2100      	movs	r1, #0
 8008d06:	0018      	movs	r0, r3
 8008d08:	f7fb fd65 	bl	80047d6 <mem_set>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	61bb      	str	r3, [r7, #24]
 8008d10:	e010      	b.n	8008d34 <f_mkfs+0x844>
			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 8008d12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d14:	1c53      	adds	r3, r2, #1
 8008d16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d18:	69f9      	ldr	r1, [r7, #28]
 8008d1a:	234f      	movs	r3, #79	@ 0x4f
 8008d1c:	18fb      	adds	r3, r7, r3
 8008d1e:	7818      	ldrb	r0, [r3, #0]
 8008d20:	2301      	movs	r3, #1
 8008d22:	f7fb fceb 	bl	80046fc <disk_write>
 8008d26:	1e03      	subs	r3, r0, #0
 8008d28:	d001      	beq.n	8008d2e <f_mkfs+0x83e>
				return FR_DISK_ERR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e0b1      	b.n	8008e92 <f_mkfs+0x9a2>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	3301      	adds	r3, #1
 8008d32:	61bb      	str	r3, [r7, #24]
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d8ea      	bhi.n	8008d12 <f_mkfs+0x822>
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 8008d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d3e:	3301      	adds	r3, #1
 8008d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d100      	bne.n	8008d4a <f_mkfs+0x85a>
 8008d48:	e74f      	b.n	8008bea <f_mkfs+0x6fa>
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
 8008d4a:	2333      	movs	r3, #51	@ 0x33
 8008d4c:	18fb      	adds	r3, r7, r3
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	d101      	bne.n	8008d58 <f_mkfs+0x868>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	e000      	b.n	8008d5a <f_mkfs+0x86a>
 8008d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d5a:	647b      	str	r3, [r7, #68]	@ 0x44
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 8008d5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d5e:	1c53      	adds	r3, r2, #1
 8008d60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d62:	69f9      	ldr	r1, [r7, #28]
 8008d64:	234f      	movs	r3, #79	@ 0x4f
 8008d66:	18fb      	adds	r3, r7, r3
 8008d68:	7818      	ldrb	r0, [r3, #0]
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	f7fb fcc6 	bl	80046fc <disk_write>
 8008d70:	1e03      	subs	r3, r0, #0
 8008d72:	d001      	beq.n	8008d78 <f_mkfs+0x888>
			return FR_DISK_ERR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e08c      	b.n	8008e92 <f_mkfs+0x9a2>
	} while (--i);
 8008d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1eb      	bne.n	8008d5c <f_mkfs+0x86c>
		disk_ioctl(pdrv, CTRL_TRIM, eb);
	}
#endif

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
 8008d84:	2333      	movs	r3, #51	@ 0x33
 8008d86:	18fb      	adds	r3, r7, r3
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b03      	cmp	r3, #3
 8008d8c:	d175      	bne.n	8008e7a <f_mkfs+0x98a>
		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	2252      	movs	r2, #82	@ 0x52
 8008d92:	701a      	strb	r2, [r3, #0]
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	3301      	adds	r3, #1
 8008d98:	2252      	movs	r2, #82	@ 0x52
 8008d9a:	701a      	strb	r2, [r3, #0]
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	3302      	adds	r3, #2
 8008da0:	2261      	movs	r2, #97	@ 0x61
 8008da2:	701a      	strb	r2, [r3, #0]
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	3303      	adds	r3, #3
 8008da8:	2241      	movs	r2, #65	@ 0x41
 8008daa:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	33e5      	adds	r3, #229	@ 0xe5
 8008db0:	33ff      	adds	r3, #255	@ 0xff
 8008db2:	2272      	movs	r2, #114	@ 0x72
 8008db4:	701a      	strb	r2, [r3, #0]
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	33e6      	adds	r3, #230	@ 0xe6
 8008dba:	33ff      	adds	r3, #255	@ 0xff
 8008dbc:	2272      	movs	r2, #114	@ 0x72
 8008dbe:	701a      	strb	r2, [r3, #0]
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	33e7      	adds	r3, #231	@ 0xe7
 8008dc4:	33ff      	adds	r3, #255	@ 0xff
 8008dc6:	2241      	movs	r2, #65	@ 0x41
 8008dc8:	701a      	strb	r2, [r3, #0]
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	33e8      	adds	r3, #232	@ 0xe8
 8008dce:	33ff      	adds	r3, #255	@ 0xff
 8008dd0:	2261      	movs	r2, #97	@ 0x61
 8008dd2:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8008dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	33e9      	adds	r3, #233	@ 0xe9
 8008ddc:	33ff      	adds	r3, #255	@ 0xff
 8008dde:	3a01      	subs	r2, #1
 8008de0:	b2d2      	uxtb	r2, r2
 8008de2:	701a      	strb	r2, [r3, #0]
 8008de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	3b01      	subs	r3, #1
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	0a1b      	lsrs	r3, r3, #8
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	33ea      	adds	r3, #234	@ 0xea
 8008df4:	33ff      	adds	r3, #255	@ 0xff
 8008df6:	b2d2      	uxtb	r2, r2
 8008df8:	701a      	strb	r2, [r3, #0]
 8008dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	0c1a      	lsrs	r2, r3, #16
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	33eb      	adds	r3, #235	@ 0xeb
 8008e04:	33ff      	adds	r3, #255	@ 0xff
 8008e06:	b2d2      	uxtb	r2, r2
 8008e08:	701a      	strb	r2, [r3, #0]
 8008e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	0e1a      	lsrs	r2, r3, #24
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	33ec      	adds	r3, #236	@ 0xec
 8008e14:	33ff      	adds	r3, #255	@ 0xff
 8008e16:	b2d2      	uxtb	r2, r2
 8008e18:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	33ed      	adds	r3, #237	@ 0xed
 8008e1e:	33ff      	adds	r3, #255	@ 0xff
 8008e20:	2202      	movs	r2, #2
 8008e22:	701a      	strb	r2, [r3, #0]
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	33ee      	adds	r3, #238	@ 0xee
 8008e28:	33ff      	adds	r3, #255	@ 0xff
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	33ef      	adds	r3, #239	@ 0xef
 8008e32:	33ff      	adds	r3, #255	@ 0xff
 8008e34:	2200      	movs	r2, #0
 8008e36:	701a      	strb	r2, [r3, #0]
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	33f0      	adds	r3, #240	@ 0xf0
 8008e3c:	33ff      	adds	r3, #255	@ 0xff
 8008e3e:	2200      	movs	r2, #0
 8008e40:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BS_55AA, 0xAA55);
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	33ff      	adds	r3, #255	@ 0xff
 8008e46:	33ff      	adds	r3, #255	@ 0xff
 8008e48:	2255      	movs	r2, #85	@ 0x55
 8008e4a:	701a      	strb	r2, [r3, #0]
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	4a14      	ldr	r2, [pc, #80]	@ (8008ea0 <f_mkfs+0x9b0>)
 8008e50:	4694      	mov	ip, r2
 8008e52:	4463      	add	r3, ip
 8008e54:	22aa      	movs	r2, #170	@ 0xaa
 8008e56:	701a      	strb	r2, [r3, #0]
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 8008e58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e5a:	1c5a      	adds	r2, r3, #1
 8008e5c:	69f9      	ldr	r1, [r7, #28]
 8008e5e:	244f      	movs	r4, #79	@ 0x4f
 8008e60:	193b      	adds	r3, r7, r4
 8008e62:	7818      	ldrb	r0, [r3, #0]
 8008e64:	2301      	movs	r3, #1
 8008e66:	f7fb fc49 	bl	80046fc <disk_write>
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
 8008e6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e6c:	1dda      	adds	r2, r3, #7
 8008e6e:	69f9      	ldr	r1, [r7, #28]
 8008e70:	193b      	adds	r3, r7, r4
 8008e72:	7818      	ldrb	r0, [r3, #0]
 8008e74:	2301      	movs	r3, #1
 8008e76:	f7fb fc41 	bl	80046fc <disk_write>
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
 8008e7a:	234f      	movs	r3, #79	@ 0x4f
 8008e7c:	18fb      	adds	r3, r7, r3
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	2200      	movs	r2, #0
 8008e82:	2100      	movs	r1, #0
 8008e84:	0018      	movs	r0, r3
 8008e86:	f7fb fc61 	bl	800474c <disk_ioctl>
 8008e8a:	0003      	movs	r3, r0
 8008e8c:	1e5a      	subs	r2, r3, #1
 8008e8e:	4193      	sbcs	r3, r2
 8008e90:	b2db      	uxtb	r3, r3
}
 8008e92:	0018      	movs	r0, r3
 8008e94:	46bd      	mov	sp, r7
 8008e96:	b018      	add	sp, #96	@ 0x60
 8008e98:	bdb0      	pop	{r4, r5, r7, pc}
 8008e9a:	46c0      	nop			@ (mov r8, r8)
 8008e9c:	ffffff00 	.word	0xffffff00
 8008ea0:	000001ff 	.word	0x000001ff

08008ea4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ea4:	b590      	push	{r4, r7, lr}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	1dfb      	adds	r3, r7, #7
 8008eb0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8008eb2:	2417      	movs	r4, #23
 8008eb4:	193b      	adds	r3, r7, r4
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8008eba:	2016      	movs	r0, #22
 8008ebc:	183b      	adds	r3, r7, r0
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 8008ec2:	4b21      	ldr	r3, [pc, #132]	@ (8008f48 <FATFS_LinkDriverEx+0xa4>)
 8008ec4:	7a5b      	ldrb	r3, [r3, #9]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d836      	bhi.n	8008f3a <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8008f48 <FATFS_LinkDriverEx+0xa4>)
 8008ece:	7a5b      	ldrb	r3, [r3, #9]
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	001a      	movs	r2, r3
 8008ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8008f48 <FATFS_LinkDriverEx+0xa4>)
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008eda:	4b1b      	ldr	r3, [pc, #108]	@ (8008f48 <FATFS_LinkDriverEx+0xa4>)
 8008edc:	7a5b      	ldrb	r3, [r3, #9]
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	4a19      	ldr	r2, [pc, #100]	@ (8008f48 <FATFS_LinkDriverEx+0xa4>)
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	18d3      	adds	r3, r2, r3
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 8008eec:	4b16      	ldr	r3, [pc, #88]	@ (8008f48 <FATFS_LinkDriverEx+0xa4>)
 8008eee:	7a5b      	ldrb	r3, [r3, #9]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	001a      	movs	r2, r3
 8008ef4:	4b14      	ldr	r3, [pc, #80]	@ (8008f48 <FATFS_LinkDriverEx+0xa4>)
 8008ef6:	189b      	adds	r3, r3, r2
 8008ef8:	1dfa      	adds	r2, r7, #7
 8008efa:	7812      	ldrb	r2, [r2, #0]
 8008efc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008efe:	4b12      	ldr	r3, [pc, #72]	@ (8008f48 <FATFS_LinkDriverEx+0xa4>)
 8008f00:	7a5b      	ldrb	r3, [r3, #9]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	b2d1      	uxtb	r1, r2
 8008f08:	4a0f      	ldr	r2, [pc, #60]	@ (8008f48 <FATFS_LinkDriverEx+0xa4>)
 8008f0a:	7251      	strb	r1, [r2, #9]
 8008f0c:	183a      	adds	r2, r7, r0
 8008f0e:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8008f10:	183b      	adds	r3, r7, r0
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	3330      	adds	r3, #48	@ 0x30
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	223a      	movs	r2, #58	@ 0x3a
 8008f22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	3302      	adds	r3, #2
 8008f28:	222f      	movs	r2, #47	@ 0x2f
 8008f2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	3303      	adds	r3, #3
 8008f30:	2200      	movs	r2, #0
 8008f32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008f34:	193b      	adds	r3, r7, r4
 8008f36:	2200      	movs	r2, #0
 8008f38:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8008f3a:	2317      	movs	r3, #23
 8008f3c:	18fb      	adds	r3, r7, r3
 8008f3e:	781b      	ldrb	r3, [r3, #0]
}
 8008f40:	0018      	movs	r0, r3
 8008f42:	46bd      	mov	sp, r7
 8008f44:	b007      	add	sp, #28
 8008f46:	bd90      	pop	{r4, r7, pc}
 8008f48:	20000660 	.word	0x20000660

08008f4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008f56:	6839      	ldr	r1, [r7, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	0018      	movs	r0, r3
 8008f5e:	f7ff ffa1 	bl	8008ea4 <FATFS_LinkDriverEx>
 8008f62:	0003      	movs	r3, r0
}
 8008f64:	0018      	movs	r0, r3
 8008f66:	46bd      	mov	sp, r7
 8008f68:	b002      	add	sp, #8
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	0002      	movs	r2, r0
 8008f74:	6039      	str	r1, [r7, #0]
 8008f76:	1dbb      	adds	r3, r7, #6
 8008f78:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008f7a:	1dbb      	adds	r3, r7, #6
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f80:	d805      	bhi.n	8008f8e <ff_convert+0x22>
		c = chr;
 8008f82:	230e      	movs	r3, #14
 8008f84:	18fb      	adds	r3, r7, r3
 8008f86:	1dba      	adds	r2, r7, #6
 8008f88:	8812      	ldrh	r2, [r2, #0]
 8008f8a:	801a      	strh	r2, [r3, #0]
 8008f8c:	e037      	b.n	8008ffe <ff_convert+0x92>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d010      	beq.n	8008fb6 <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008f94:	1dbb      	adds	r3, r7, #6
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	2bff      	cmp	r3, #255	@ 0xff
 8008f9a:	d807      	bhi.n	8008fac <ff_convert+0x40>
 8008f9c:	1dbb      	adds	r3, r7, #6
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	3b80      	subs	r3, #128	@ 0x80
 8008fa2:	001a      	movs	r2, r3
 8008fa4:	4b19      	ldr	r3, [pc, #100]	@ (800900c <ff_convert+0xa0>)
 8008fa6:	0052      	lsls	r2, r2, #1
 8008fa8:	5ad2      	ldrh	r2, [r2, r3]
 8008faa:	e000      	b.n	8008fae <ff_convert+0x42>
 8008fac:	2200      	movs	r2, #0
 8008fae:	230e      	movs	r3, #14
 8008fb0:	18fb      	adds	r3, r7, r3
 8008fb2:	801a      	strh	r2, [r3, #0]
 8008fb4:	e023      	b.n	8008ffe <ff_convert+0x92>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8008fb6:	230e      	movs	r3, #14
 8008fb8:	18fb      	adds	r3, r7, r3
 8008fba:	2200      	movs	r2, #0
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	e00e      	b.n	8008fde <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 8008fc0:	210e      	movs	r1, #14
 8008fc2:	187b      	adds	r3, r7, r1
 8008fc4:	881a      	ldrh	r2, [r3, #0]
 8008fc6:	4b11      	ldr	r3, [pc, #68]	@ (800900c <ff_convert+0xa0>)
 8008fc8:	0052      	lsls	r2, r2, #1
 8008fca:	5ad3      	ldrh	r3, [r2, r3]
 8008fcc:	1dba      	adds	r2, r7, #6
 8008fce:	8812      	ldrh	r2, [r2, #0]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d00a      	beq.n	8008fea <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 8008fd4:	187b      	adds	r3, r7, r1
 8008fd6:	881a      	ldrh	r2, [r3, #0]
 8008fd8:	187b      	adds	r3, r7, r1
 8008fda:	3201      	adds	r2, #1
 8008fdc:	801a      	strh	r2, [r3, #0]
 8008fde:	230e      	movs	r3, #14
 8008fe0:	18fb      	adds	r3, r7, r3
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	2b7f      	cmp	r3, #127	@ 0x7f
 8008fe6:	d9eb      	bls.n	8008fc0 <ff_convert+0x54>
 8008fe8:	e000      	b.n	8008fec <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 8008fea:	46c0      	nop			@ (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 8008fec:	210e      	movs	r1, #14
 8008fee:	187b      	adds	r3, r7, r1
 8008ff0:	881b      	ldrh	r3, [r3, #0]
 8008ff2:	3380      	adds	r3, #128	@ 0x80
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	187b      	adds	r3, r7, r1
 8008ff8:	21ff      	movs	r1, #255	@ 0xff
 8008ffa:	400a      	ands	r2, r1
 8008ffc:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 8008ffe:	230e      	movs	r3, #14
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	881b      	ldrh	r3, [r3, #0]
}
 8009004:	0018      	movs	r0, r3
 8009006:	46bd      	mov	sp, r7
 8009008:	b004      	add	sp, #16
 800900a:	bd80      	pop	{r7, pc}
 800900c:	0800aa2c 	.word	0x0800aa2c

08009010 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	0002      	movs	r2, r0
 8009018:	1dbb      	adds	r3, r7, #6
 800901a:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800901c:	2300      	movs	r3, #0
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	e002      	b.n	8009028 <ff_wtoupper+0x18>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	3301      	adds	r3, #1
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	4b0f      	ldr	r3, [pc, #60]	@ (8009068 <ff_wtoupper+0x58>)
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	0052      	lsls	r2, r2, #1
 800902e:	5ad3      	ldrh	r3, [r2, r3]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d007      	beq.n	8009044 <ff_wtoupper+0x34>
 8009034:	4b0c      	ldr	r3, [pc, #48]	@ (8009068 <ff_wtoupper+0x58>)
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	0052      	lsls	r2, r2, #1
 800903a:	5ad3      	ldrh	r3, [r2, r3]
 800903c:	1dba      	adds	r2, r7, #6
 800903e:	8812      	ldrh	r2, [r2, #0]
 8009040:	429a      	cmp	r2, r3
 8009042:	d1ee      	bne.n	8009022 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8009044:	4b08      	ldr	r3, [pc, #32]	@ (8009068 <ff_wtoupper+0x58>)
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	0052      	lsls	r2, r2, #1
 800904a:	5ad3      	ldrh	r3, [r2, r3]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d004      	beq.n	800905a <ff_wtoupper+0x4a>
 8009050:	4b06      	ldr	r3, [pc, #24]	@ (800906c <ff_wtoupper+0x5c>)
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	0052      	lsls	r2, r2, #1
 8009056:	5ad3      	ldrh	r3, [r2, r3]
 8009058:	e001      	b.n	800905e <ff_wtoupper+0x4e>
 800905a:	1dbb      	adds	r3, r7, #6
 800905c:	881b      	ldrh	r3, [r3, #0]
}
 800905e:	0018      	movs	r0, r3
 8009060:	46bd      	mov	sp, r7
 8009062:	b004      	add	sp, #16
 8009064:	bd80      	pop	{r7, pc}
 8009066:	46c0      	nop			@ (mov r8, r8)
 8009068:	0800ab2c 	.word	0x0800ab2c
 800906c:	0800ad0c 	.word	0x0800ad0c

08009070 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	0018      	movs	r0, r3
 800907c:	f000 f812 	bl	80090a4 <malloc>
 8009080:	0003      	movs	r3, r0
}
 8009082:	0018      	movs	r0, r3
 8009084:	46bd      	mov	sp, r7
 8009086:	b002      	add	sp, #8
 8009088:	bd80      	pop	{r7, pc}

0800908a <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b082      	sub	sp, #8
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Discard the memory block with POSIX API */
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	0018      	movs	r0, r3
 8009096:	f000 f80f 	bl	80090b8 <free>
}
 800909a:	46c0      	nop			@ (mov r8, r8)
 800909c:	46bd      	mov	sp, r7
 800909e:	b002      	add	sp, #8
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <malloc>:
 80090a4:	b510      	push	{r4, lr}
 80090a6:	4b03      	ldr	r3, [pc, #12]	@ (80090b4 <malloc+0x10>)
 80090a8:	0001      	movs	r1, r0
 80090aa:	6818      	ldr	r0, [r3, #0]
 80090ac:	f000 f830 	bl	8009110 <_malloc_r>
 80090b0:	bd10      	pop	{r4, pc}
 80090b2:	46c0      	nop			@ (mov r8, r8)
 80090b4:	20000018 	.word	0x20000018

080090b8 <free>:
 80090b8:	b510      	push	{r4, lr}
 80090ba:	4b03      	ldr	r3, [pc, #12]	@ (80090c8 <free+0x10>)
 80090bc:	0001      	movs	r1, r0
 80090be:	6818      	ldr	r0, [r3, #0]
 80090c0:	f000 fba2 	bl	8009808 <_free_r>
 80090c4:	bd10      	pop	{r4, pc}
 80090c6:	46c0      	nop			@ (mov r8, r8)
 80090c8:	20000018 	.word	0x20000018

080090cc <sbrk_aligned>:
 80090cc:	b570      	push	{r4, r5, r6, lr}
 80090ce:	4e0f      	ldr	r6, [pc, #60]	@ (800910c <sbrk_aligned+0x40>)
 80090d0:	000d      	movs	r5, r1
 80090d2:	6831      	ldr	r1, [r6, #0]
 80090d4:	0004      	movs	r4, r0
 80090d6:	2900      	cmp	r1, #0
 80090d8:	d102      	bne.n	80090e0 <sbrk_aligned+0x14>
 80090da:	f000 fb41 	bl	8009760 <_sbrk_r>
 80090de:	6030      	str	r0, [r6, #0]
 80090e0:	0029      	movs	r1, r5
 80090e2:	0020      	movs	r0, r4
 80090e4:	f000 fb3c 	bl	8009760 <_sbrk_r>
 80090e8:	1c43      	adds	r3, r0, #1
 80090ea:	d103      	bne.n	80090f4 <sbrk_aligned+0x28>
 80090ec:	2501      	movs	r5, #1
 80090ee:	426d      	negs	r5, r5
 80090f0:	0028      	movs	r0, r5
 80090f2:	bd70      	pop	{r4, r5, r6, pc}
 80090f4:	2303      	movs	r3, #3
 80090f6:	1cc5      	adds	r5, r0, #3
 80090f8:	439d      	bics	r5, r3
 80090fa:	42a8      	cmp	r0, r5
 80090fc:	d0f8      	beq.n	80090f0 <sbrk_aligned+0x24>
 80090fe:	1a29      	subs	r1, r5, r0
 8009100:	0020      	movs	r0, r4
 8009102:	f000 fb2d 	bl	8009760 <_sbrk_r>
 8009106:	3001      	adds	r0, #1
 8009108:	d1f2      	bne.n	80090f0 <sbrk_aligned+0x24>
 800910a:	e7ef      	b.n	80090ec <sbrk_aligned+0x20>
 800910c:	2000066c 	.word	0x2000066c

08009110 <_malloc_r>:
 8009110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009112:	2203      	movs	r2, #3
 8009114:	1ccb      	adds	r3, r1, #3
 8009116:	4393      	bics	r3, r2
 8009118:	3308      	adds	r3, #8
 800911a:	0005      	movs	r5, r0
 800911c:	001f      	movs	r7, r3
 800911e:	2b0c      	cmp	r3, #12
 8009120:	d234      	bcs.n	800918c <_malloc_r+0x7c>
 8009122:	270c      	movs	r7, #12
 8009124:	42b9      	cmp	r1, r7
 8009126:	d833      	bhi.n	8009190 <_malloc_r+0x80>
 8009128:	0028      	movs	r0, r5
 800912a:	f000 f871 	bl	8009210 <__malloc_lock>
 800912e:	4e37      	ldr	r6, [pc, #220]	@ (800920c <_malloc_r+0xfc>)
 8009130:	6833      	ldr	r3, [r6, #0]
 8009132:	001c      	movs	r4, r3
 8009134:	2c00      	cmp	r4, #0
 8009136:	d12f      	bne.n	8009198 <_malloc_r+0x88>
 8009138:	0039      	movs	r1, r7
 800913a:	0028      	movs	r0, r5
 800913c:	f7ff ffc6 	bl	80090cc <sbrk_aligned>
 8009140:	0004      	movs	r4, r0
 8009142:	1c43      	adds	r3, r0, #1
 8009144:	d15f      	bne.n	8009206 <_malloc_r+0xf6>
 8009146:	6834      	ldr	r4, [r6, #0]
 8009148:	9400      	str	r4, [sp, #0]
 800914a:	9b00      	ldr	r3, [sp, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d14a      	bne.n	80091e6 <_malloc_r+0xd6>
 8009150:	2c00      	cmp	r4, #0
 8009152:	d052      	beq.n	80091fa <_malloc_r+0xea>
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	0028      	movs	r0, r5
 8009158:	18e3      	adds	r3, r4, r3
 800915a:	9900      	ldr	r1, [sp, #0]
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	f000 faff 	bl	8009760 <_sbrk_r>
 8009162:	9b01      	ldr	r3, [sp, #4]
 8009164:	4283      	cmp	r3, r0
 8009166:	d148      	bne.n	80091fa <_malloc_r+0xea>
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	0028      	movs	r0, r5
 800916c:	1aff      	subs	r7, r7, r3
 800916e:	0039      	movs	r1, r7
 8009170:	f7ff ffac 	bl	80090cc <sbrk_aligned>
 8009174:	3001      	adds	r0, #1
 8009176:	d040      	beq.n	80091fa <_malloc_r+0xea>
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	19db      	adds	r3, r3, r7
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	6833      	ldr	r3, [r6, #0]
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	2a00      	cmp	r2, #0
 8009184:	d133      	bne.n	80091ee <_malloc_r+0xde>
 8009186:	9b00      	ldr	r3, [sp, #0]
 8009188:	6033      	str	r3, [r6, #0]
 800918a:	e019      	b.n	80091c0 <_malloc_r+0xb0>
 800918c:	2b00      	cmp	r3, #0
 800918e:	dac9      	bge.n	8009124 <_malloc_r+0x14>
 8009190:	230c      	movs	r3, #12
 8009192:	602b      	str	r3, [r5, #0]
 8009194:	2000      	movs	r0, #0
 8009196:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009198:	6821      	ldr	r1, [r4, #0]
 800919a:	1bc9      	subs	r1, r1, r7
 800919c:	d420      	bmi.n	80091e0 <_malloc_r+0xd0>
 800919e:	290b      	cmp	r1, #11
 80091a0:	d90a      	bls.n	80091b8 <_malloc_r+0xa8>
 80091a2:	19e2      	adds	r2, r4, r7
 80091a4:	6027      	str	r7, [r4, #0]
 80091a6:	42a3      	cmp	r3, r4
 80091a8:	d104      	bne.n	80091b4 <_malloc_r+0xa4>
 80091aa:	6032      	str	r2, [r6, #0]
 80091ac:	6863      	ldr	r3, [r4, #4]
 80091ae:	6011      	str	r1, [r2, #0]
 80091b0:	6053      	str	r3, [r2, #4]
 80091b2:	e005      	b.n	80091c0 <_malloc_r+0xb0>
 80091b4:	605a      	str	r2, [r3, #4]
 80091b6:	e7f9      	b.n	80091ac <_malloc_r+0x9c>
 80091b8:	6862      	ldr	r2, [r4, #4]
 80091ba:	42a3      	cmp	r3, r4
 80091bc:	d10e      	bne.n	80091dc <_malloc_r+0xcc>
 80091be:	6032      	str	r2, [r6, #0]
 80091c0:	0028      	movs	r0, r5
 80091c2:	f000 f82d 	bl	8009220 <__malloc_unlock>
 80091c6:	0020      	movs	r0, r4
 80091c8:	2207      	movs	r2, #7
 80091ca:	300b      	adds	r0, #11
 80091cc:	1d23      	adds	r3, r4, #4
 80091ce:	4390      	bics	r0, r2
 80091d0:	1ac2      	subs	r2, r0, r3
 80091d2:	4298      	cmp	r0, r3
 80091d4:	d0df      	beq.n	8009196 <_malloc_r+0x86>
 80091d6:	1a1b      	subs	r3, r3, r0
 80091d8:	50a3      	str	r3, [r4, r2]
 80091da:	e7dc      	b.n	8009196 <_malloc_r+0x86>
 80091dc:	605a      	str	r2, [r3, #4]
 80091de:	e7ef      	b.n	80091c0 <_malloc_r+0xb0>
 80091e0:	0023      	movs	r3, r4
 80091e2:	6864      	ldr	r4, [r4, #4]
 80091e4:	e7a6      	b.n	8009134 <_malloc_r+0x24>
 80091e6:	9c00      	ldr	r4, [sp, #0]
 80091e8:	6863      	ldr	r3, [r4, #4]
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	e7ad      	b.n	800914a <_malloc_r+0x3a>
 80091ee:	001a      	movs	r2, r3
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	42a3      	cmp	r3, r4
 80091f4:	d1fb      	bne.n	80091ee <_malloc_r+0xde>
 80091f6:	2300      	movs	r3, #0
 80091f8:	e7da      	b.n	80091b0 <_malloc_r+0xa0>
 80091fa:	230c      	movs	r3, #12
 80091fc:	0028      	movs	r0, r5
 80091fe:	602b      	str	r3, [r5, #0]
 8009200:	f000 f80e 	bl	8009220 <__malloc_unlock>
 8009204:	e7c6      	b.n	8009194 <_malloc_r+0x84>
 8009206:	6007      	str	r7, [r0, #0]
 8009208:	e7da      	b.n	80091c0 <_malloc_r+0xb0>
 800920a:	46c0      	nop			@ (mov r8, r8)
 800920c:	20000670 	.word	0x20000670

08009210 <__malloc_lock>:
 8009210:	b510      	push	{r4, lr}
 8009212:	4802      	ldr	r0, [pc, #8]	@ (800921c <__malloc_lock+0xc>)
 8009214:	f000 faf5 	bl	8009802 <__retarget_lock_acquire_recursive>
 8009218:	bd10      	pop	{r4, pc}
 800921a:	46c0      	nop			@ (mov r8, r8)
 800921c:	200007b4 	.word	0x200007b4

08009220 <__malloc_unlock>:
 8009220:	b510      	push	{r4, lr}
 8009222:	4802      	ldr	r0, [pc, #8]	@ (800922c <__malloc_unlock+0xc>)
 8009224:	f000 faee 	bl	8009804 <__retarget_lock_release_recursive>
 8009228:	bd10      	pop	{r4, pc}
 800922a:	46c0      	nop			@ (mov r8, r8)
 800922c:	200007b4 	.word	0x200007b4

08009230 <std>:
 8009230:	2300      	movs	r3, #0
 8009232:	b510      	push	{r4, lr}
 8009234:	0004      	movs	r4, r0
 8009236:	6003      	str	r3, [r0, #0]
 8009238:	6043      	str	r3, [r0, #4]
 800923a:	6083      	str	r3, [r0, #8]
 800923c:	8181      	strh	r1, [r0, #12]
 800923e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009240:	81c2      	strh	r2, [r0, #14]
 8009242:	6103      	str	r3, [r0, #16]
 8009244:	6143      	str	r3, [r0, #20]
 8009246:	6183      	str	r3, [r0, #24]
 8009248:	0019      	movs	r1, r3
 800924a:	2208      	movs	r2, #8
 800924c:	305c      	adds	r0, #92	@ 0x5c
 800924e:	f000 fa45 	bl	80096dc <memset>
 8009252:	4b0b      	ldr	r3, [pc, #44]	@ (8009280 <std+0x50>)
 8009254:	6224      	str	r4, [r4, #32]
 8009256:	6263      	str	r3, [r4, #36]	@ 0x24
 8009258:	4b0a      	ldr	r3, [pc, #40]	@ (8009284 <std+0x54>)
 800925a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800925c:	4b0a      	ldr	r3, [pc, #40]	@ (8009288 <std+0x58>)
 800925e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009260:	4b0a      	ldr	r3, [pc, #40]	@ (800928c <std+0x5c>)
 8009262:	6323      	str	r3, [r4, #48]	@ 0x30
 8009264:	4b0a      	ldr	r3, [pc, #40]	@ (8009290 <std+0x60>)
 8009266:	429c      	cmp	r4, r3
 8009268:	d005      	beq.n	8009276 <std+0x46>
 800926a:	4b0a      	ldr	r3, [pc, #40]	@ (8009294 <std+0x64>)
 800926c:	429c      	cmp	r4, r3
 800926e:	d002      	beq.n	8009276 <std+0x46>
 8009270:	4b09      	ldr	r3, [pc, #36]	@ (8009298 <std+0x68>)
 8009272:	429c      	cmp	r4, r3
 8009274:	d103      	bne.n	800927e <std+0x4e>
 8009276:	0020      	movs	r0, r4
 8009278:	3058      	adds	r0, #88	@ 0x58
 800927a:	f000 fac1 	bl	8009800 <__retarget_lock_init_recursive>
 800927e:	bd10      	pop	{r4, pc}
 8009280:	08009505 	.word	0x08009505
 8009284:	0800952d 	.word	0x0800952d
 8009288:	08009565 	.word	0x08009565
 800928c:	08009591 	.word	0x08009591
 8009290:	20000674 	.word	0x20000674
 8009294:	200006dc 	.word	0x200006dc
 8009298:	20000744 	.word	0x20000744

0800929c <stdio_exit_handler>:
 800929c:	b510      	push	{r4, lr}
 800929e:	4a03      	ldr	r2, [pc, #12]	@ (80092ac <stdio_exit_handler+0x10>)
 80092a0:	4903      	ldr	r1, [pc, #12]	@ (80092b0 <stdio_exit_handler+0x14>)
 80092a2:	4804      	ldr	r0, [pc, #16]	@ (80092b4 <stdio_exit_handler+0x18>)
 80092a4:	f000 f86c 	bl	8009380 <_fwalk_sglue>
 80092a8:	bd10      	pop	{r4, pc}
 80092aa:	46c0      	nop			@ (mov r8, r8)
 80092ac:	2000000c 	.word	0x2000000c
 80092b0:	0800a1e5 	.word	0x0800a1e5
 80092b4:	2000001c 	.word	0x2000001c

080092b8 <cleanup_stdio>:
 80092b8:	6841      	ldr	r1, [r0, #4]
 80092ba:	4b0b      	ldr	r3, [pc, #44]	@ (80092e8 <cleanup_stdio+0x30>)
 80092bc:	b510      	push	{r4, lr}
 80092be:	0004      	movs	r4, r0
 80092c0:	4299      	cmp	r1, r3
 80092c2:	d001      	beq.n	80092c8 <cleanup_stdio+0x10>
 80092c4:	f000 ff8e 	bl	800a1e4 <_fflush_r>
 80092c8:	68a1      	ldr	r1, [r4, #8]
 80092ca:	4b08      	ldr	r3, [pc, #32]	@ (80092ec <cleanup_stdio+0x34>)
 80092cc:	4299      	cmp	r1, r3
 80092ce:	d002      	beq.n	80092d6 <cleanup_stdio+0x1e>
 80092d0:	0020      	movs	r0, r4
 80092d2:	f000 ff87 	bl	800a1e4 <_fflush_r>
 80092d6:	68e1      	ldr	r1, [r4, #12]
 80092d8:	4b05      	ldr	r3, [pc, #20]	@ (80092f0 <cleanup_stdio+0x38>)
 80092da:	4299      	cmp	r1, r3
 80092dc:	d002      	beq.n	80092e4 <cleanup_stdio+0x2c>
 80092de:	0020      	movs	r0, r4
 80092e0:	f000 ff80 	bl	800a1e4 <_fflush_r>
 80092e4:	bd10      	pop	{r4, pc}
 80092e6:	46c0      	nop			@ (mov r8, r8)
 80092e8:	20000674 	.word	0x20000674
 80092ec:	200006dc 	.word	0x200006dc
 80092f0:	20000744 	.word	0x20000744

080092f4 <global_stdio_init.part.0>:
 80092f4:	b510      	push	{r4, lr}
 80092f6:	4b09      	ldr	r3, [pc, #36]	@ (800931c <global_stdio_init.part.0+0x28>)
 80092f8:	4a09      	ldr	r2, [pc, #36]	@ (8009320 <global_stdio_init.part.0+0x2c>)
 80092fa:	2104      	movs	r1, #4
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	4809      	ldr	r0, [pc, #36]	@ (8009324 <global_stdio_init.part.0+0x30>)
 8009300:	2200      	movs	r2, #0
 8009302:	f7ff ff95 	bl	8009230 <std>
 8009306:	2201      	movs	r2, #1
 8009308:	2109      	movs	r1, #9
 800930a:	4807      	ldr	r0, [pc, #28]	@ (8009328 <global_stdio_init.part.0+0x34>)
 800930c:	f7ff ff90 	bl	8009230 <std>
 8009310:	2202      	movs	r2, #2
 8009312:	2112      	movs	r1, #18
 8009314:	4805      	ldr	r0, [pc, #20]	@ (800932c <global_stdio_init.part.0+0x38>)
 8009316:	f7ff ff8b 	bl	8009230 <std>
 800931a:	bd10      	pop	{r4, pc}
 800931c:	200007ac 	.word	0x200007ac
 8009320:	0800929d 	.word	0x0800929d
 8009324:	20000674 	.word	0x20000674
 8009328:	200006dc 	.word	0x200006dc
 800932c:	20000744 	.word	0x20000744

08009330 <__sfp_lock_acquire>:
 8009330:	b510      	push	{r4, lr}
 8009332:	4802      	ldr	r0, [pc, #8]	@ (800933c <__sfp_lock_acquire+0xc>)
 8009334:	f000 fa65 	bl	8009802 <__retarget_lock_acquire_recursive>
 8009338:	bd10      	pop	{r4, pc}
 800933a:	46c0      	nop			@ (mov r8, r8)
 800933c:	200007b5 	.word	0x200007b5

08009340 <__sfp_lock_release>:
 8009340:	b510      	push	{r4, lr}
 8009342:	4802      	ldr	r0, [pc, #8]	@ (800934c <__sfp_lock_release+0xc>)
 8009344:	f000 fa5e 	bl	8009804 <__retarget_lock_release_recursive>
 8009348:	bd10      	pop	{r4, pc}
 800934a:	46c0      	nop			@ (mov r8, r8)
 800934c:	200007b5 	.word	0x200007b5

08009350 <__sinit>:
 8009350:	b510      	push	{r4, lr}
 8009352:	0004      	movs	r4, r0
 8009354:	f7ff ffec 	bl	8009330 <__sfp_lock_acquire>
 8009358:	6a23      	ldr	r3, [r4, #32]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <__sinit+0x14>
 800935e:	f7ff ffef 	bl	8009340 <__sfp_lock_release>
 8009362:	bd10      	pop	{r4, pc}
 8009364:	4b04      	ldr	r3, [pc, #16]	@ (8009378 <__sinit+0x28>)
 8009366:	6223      	str	r3, [r4, #32]
 8009368:	4b04      	ldr	r3, [pc, #16]	@ (800937c <__sinit+0x2c>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1f6      	bne.n	800935e <__sinit+0xe>
 8009370:	f7ff ffc0 	bl	80092f4 <global_stdio_init.part.0>
 8009374:	e7f3      	b.n	800935e <__sinit+0xe>
 8009376:	46c0      	nop			@ (mov r8, r8)
 8009378:	080092b9 	.word	0x080092b9
 800937c:	200007ac 	.word	0x200007ac

08009380 <_fwalk_sglue>:
 8009380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009382:	0014      	movs	r4, r2
 8009384:	2600      	movs	r6, #0
 8009386:	9000      	str	r0, [sp, #0]
 8009388:	9101      	str	r1, [sp, #4]
 800938a:	68a5      	ldr	r5, [r4, #8]
 800938c:	6867      	ldr	r7, [r4, #4]
 800938e:	3f01      	subs	r7, #1
 8009390:	d504      	bpl.n	800939c <_fwalk_sglue+0x1c>
 8009392:	6824      	ldr	r4, [r4, #0]
 8009394:	2c00      	cmp	r4, #0
 8009396:	d1f8      	bne.n	800938a <_fwalk_sglue+0xa>
 8009398:	0030      	movs	r0, r6
 800939a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800939c:	89ab      	ldrh	r3, [r5, #12]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d908      	bls.n	80093b4 <_fwalk_sglue+0x34>
 80093a2:	220e      	movs	r2, #14
 80093a4:	5eab      	ldrsh	r3, [r5, r2]
 80093a6:	3301      	adds	r3, #1
 80093a8:	d004      	beq.n	80093b4 <_fwalk_sglue+0x34>
 80093aa:	0029      	movs	r1, r5
 80093ac:	9800      	ldr	r0, [sp, #0]
 80093ae:	9b01      	ldr	r3, [sp, #4]
 80093b0:	4798      	blx	r3
 80093b2:	4306      	orrs	r6, r0
 80093b4:	3568      	adds	r5, #104	@ 0x68
 80093b6:	e7ea      	b.n	800938e <_fwalk_sglue+0xe>

080093b8 <iprintf>:
 80093b8:	b40f      	push	{r0, r1, r2, r3}
 80093ba:	b507      	push	{r0, r1, r2, lr}
 80093bc:	4905      	ldr	r1, [pc, #20]	@ (80093d4 <iprintf+0x1c>)
 80093be:	ab04      	add	r3, sp, #16
 80093c0:	6808      	ldr	r0, [r1, #0]
 80093c2:	cb04      	ldmia	r3!, {r2}
 80093c4:	6881      	ldr	r1, [r0, #8]
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	f000 fbee 	bl	8009ba8 <_vfiprintf_r>
 80093cc:	b003      	add	sp, #12
 80093ce:	bc08      	pop	{r3}
 80093d0:	b004      	add	sp, #16
 80093d2:	4718      	bx	r3
 80093d4:	20000018 	.word	0x20000018

080093d8 <_puts_r>:
 80093d8:	6a03      	ldr	r3, [r0, #32]
 80093da:	b570      	push	{r4, r5, r6, lr}
 80093dc:	0005      	movs	r5, r0
 80093de:	000e      	movs	r6, r1
 80093e0:	6884      	ldr	r4, [r0, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <_puts_r+0x12>
 80093e6:	f7ff ffb3 	bl	8009350 <__sinit>
 80093ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093ec:	07db      	lsls	r3, r3, #31
 80093ee:	d405      	bmi.n	80093fc <_puts_r+0x24>
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	059b      	lsls	r3, r3, #22
 80093f4:	d402      	bmi.n	80093fc <_puts_r+0x24>
 80093f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093f8:	f000 fa03 	bl	8009802 <__retarget_lock_acquire_recursive>
 80093fc:	89a3      	ldrh	r3, [r4, #12]
 80093fe:	071b      	lsls	r3, r3, #28
 8009400:	d502      	bpl.n	8009408 <_puts_r+0x30>
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d11f      	bne.n	8009448 <_puts_r+0x70>
 8009408:	0021      	movs	r1, r4
 800940a:	0028      	movs	r0, r5
 800940c:	f000 f908 	bl	8009620 <__swsetup_r>
 8009410:	2800      	cmp	r0, #0
 8009412:	d019      	beq.n	8009448 <_puts_r+0x70>
 8009414:	2501      	movs	r5, #1
 8009416:	426d      	negs	r5, r5
 8009418:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800941a:	07db      	lsls	r3, r3, #31
 800941c:	d405      	bmi.n	800942a <_puts_r+0x52>
 800941e:	89a3      	ldrh	r3, [r4, #12]
 8009420:	059b      	lsls	r3, r3, #22
 8009422:	d402      	bmi.n	800942a <_puts_r+0x52>
 8009424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009426:	f000 f9ed 	bl	8009804 <__retarget_lock_release_recursive>
 800942a:	0028      	movs	r0, r5
 800942c:	bd70      	pop	{r4, r5, r6, pc}
 800942e:	3601      	adds	r6, #1
 8009430:	60a3      	str	r3, [r4, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	da04      	bge.n	8009440 <_puts_r+0x68>
 8009436:	69a2      	ldr	r2, [r4, #24]
 8009438:	429a      	cmp	r2, r3
 800943a:	dc16      	bgt.n	800946a <_puts_r+0x92>
 800943c:	290a      	cmp	r1, #10
 800943e:	d014      	beq.n	800946a <_puts_r+0x92>
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	6022      	str	r2, [r4, #0]
 8009446:	7019      	strb	r1, [r3, #0]
 8009448:	68a3      	ldr	r3, [r4, #8]
 800944a:	7831      	ldrb	r1, [r6, #0]
 800944c:	3b01      	subs	r3, #1
 800944e:	2900      	cmp	r1, #0
 8009450:	d1ed      	bne.n	800942e <_puts_r+0x56>
 8009452:	60a3      	str	r3, [r4, #8]
 8009454:	2b00      	cmp	r3, #0
 8009456:	da0f      	bge.n	8009478 <_puts_r+0xa0>
 8009458:	0022      	movs	r2, r4
 800945a:	0028      	movs	r0, r5
 800945c:	310a      	adds	r1, #10
 800945e:	f000 f89d 	bl	800959c <__swbuf_r>
 8009462:	3001      	adds	r0, #1
 8009464:	d0d6      	beq.n	8009414 <_puts_r+0x3c>
 8009466:	250a      	movs	r5, #10
 8009468:	e7d6      	b.n	8009418 <_puts_r+0x40>
 800946a:	0022      	movs	r2, r4
 800946c:	0028      	movs	r0, r5
 800946e:	f000 f895 	bl	800959c <__swbuf_r>
 8009472:	3001      	adds	r0, #1
 8009474:	d1e8      	bne.n	8009448 <_puts_r+0x70>
 8009476:	e7cd      	b.n	8009414 <_puts_r+0x3c>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	6022      	str	r2, [r4, #0]
 800947e:	220a      	movs	r2, #10
 8009480:	701a      	strb	r2, [r3, #0]
 8009482:	e7f0      	b.n	8009466 <_puts_r+0x8e>

08009484 <puts>:
 8009484:	b510      	push	{r4, lr}
 8009486:	4b03      	ldr	r3, [pc, #12]	@ (8009494 <puts+0x10>)
 8009488:	0001      	movs	r1, r0
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	f7ff ffa4 	bl	80093d8 <_puts_r>
 8009490:	bd10      	pop	{r4, pc}
 8009492:	46c0      	nop			@ (mov r8, r8)
 8009494:	20000018 	.word	0x20000018

08009498 <sniprintf>:
 8009498:	b40c      	push	{r2, r3}
 800949a:	b530      	push	{r4, r5, lr}
 800949c:	4b18      	ldr	r3, [pc, #96]	@ (8009500 <sniprintf+0x68>)
 800949e:	000c      	movs	r4, r1
 80094a0:	681d      	ldr	r5, [r3, #0]
 80094a2:	b09d      	sub	sp, #116	@ 0x74
 80094a4:	2900      	cmp	r1, #0
 80094a6:	da08      	bge.n	80094ba <sniprintf+0x22>
 80094a8:	238b      	movs	r3, #139	@ 0x8b
 80094aa:	2001      	movs	r0, #1
 80094ac:	602b      	str	r3, [r5, #0]
 80094ae:	4240      	negs	r0, r0
 80094b0:	b01d      	add	sp, #116	@ 0x74
 80094b2:	bc30      	pop	{r4, r5}
 80094b4:	bc08      	pop	{r3}
 80094b6:	b002      	add	sp, #8
 80094b8:	4718      	bx	r3
 80094ba:	2382      	movs	r3, #130	@ 0x82
 80094bc:	466a      	mov	r2, sp
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	8293      	strh	r3, [r2, #20]
 80094c2:	2300      	movs	r3, #0
 80094c4:	9002      	str	r0, [sp, #8]
 80094c6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80094c8:	9006      	str	r0, [sp, #24]
 80094ca:	4299      	cmp	r1, r3
 80094cc:	d000      	beq.n	80094d0 <sniprintf+0x38>
 80094ce:	1e4b      	subs	r3, r1, #1
 80094d0:	9304      	str	r3, [sp, #16]
 80094d2:	9307      	str	r3, [sp, #28]
 80094d4:	2301      	movs	r3, #1
 80094d6:	466a      	mov	r2, sp
 80094d8:	425b      	negs	r3, r3
 80094da:	82d3      	strh	r3, [r2, #22]
 80094dc:	0028      	movs	r0, r5
 80094de:	ab21      	add	r3, sp, #132	@ 0x84
 80094e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80094e2:	a902      	add	r1, sp, #8
 80094e4:	9301      	str	r3, [sp, #4]
 80094e6:	f000 fa39 	bl	800995c <_svfiprintf_r>
 80094ea:	1c43      	adds	r3, r0, #1
 80094ec:	da01      	bge.n	80094f2 <sniprintf+0x5a>
 80094ee:	238b      	movs	r3, #139	@ 0x8b
 80094f0:	602b      	str	r3, [r5, #0]
 80094f2:	2c00      	cmp	r4, #0
 80094f4:	d0dc      	beq.n	80094b0 <sniprintf+0x18>
 80094f6:	2200      	movs	r2, #0
 80094f8:	9b02      	ldr	r3, [sp, #8]
 80094fa:	701a      	strb	r2, [r3, #0]
 80094fc:	e7d8      	b.n	80094b0 <sniprintf+0x18>
 80094fe:	46c0      	nop			@ (mov r8, r8)
 8009500:	20000018 	.word	0x20000018

08009504 <__sread>:
 8009504:	b570      	push	{r4, r5, r6, lr}
 8009506:	000c      	movs	r4, r1
 8009508:	250e      	movs	r5, #14
 800950a:	5f49      	ldrsh	r1, [r1, r5]
 800950c:	f000 f914 	bl	8009738 <_read_r>
 8009510:	2800      	cmp	r0, #0
 8009512:	db03      	blt.n	800951c <__sread+0x18>
 8009514:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009516:	181b      	adds	r3, r3, r0
 8009518:	6563      	str	r3, [r4, #84]	@ 0x54
 800951a:	bd70      	pop	{r4, r5, r6, pc}
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	4a02      	ldr	r2, [pc, #8]	@ (8009528 <__sread+0x24>)
 8009520:	4013      	ands	r3, r2
 8009522:	81a3      	strh	r3, [r4, #12]
 8009524:	e7f9      	b.n	800951a <__sread+0x16>
 8009526:	46c0      	nop			@ (mov r8, r8)
 8009528:	ffffefff 	.word	0xffffefff

0800952c <__swrite>:
 800952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952e:	001f      	movs	r7, r3
 8009530:	898b      	ldrh	r3, [r1, #12]
 8009532:	0005      	movs	r5, r0
 8009534:	000c      	movs	r4, r1
 8009536:	0016      	movs	r6, r2
 8009538:	05db      	lsls	r3, r3, #23
 800953a:	d505      	bpl.n	8009548 <__swrite+0x1c>
 800953c:	230e      	movs	r3, #14
 800953e:	5ec9      	ldrsh	r1, [r1, r3]
 8009540:	2200      	movs	r2, #0
 8009542:	2302      	movs	r3, #2
 8009544:	f000 f8e4 	bl	8009710 <_lseek_r>
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	4a05      	ldr	r2, [pc, #20]	@ (8009560 <__swrite+0x34>)
 800954c:	0028      	movs	r0, r5
 800954e:	4013      	ands	r3, r2
 8009550:	81a3      	strh	r3, [r4, #12]
 8009552:	0032      	movs	r2, r6
 8009554:	230e      	movs	r3, #14
 8009556:	5ee1      	ldrsh	r1, [r4, r3]
 8009558:	003b      	movs	r3, r7
 800955a:	f000 f913 	bl	8009784 <_write_r>
 800955e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009560:	ffffefff 	.word	0xffffefff

08009564 <__sseek>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	000c      	movs	r4, r1
 8009568:	250e      	movs	r5, #14
 800956a:	5f49      	ldrsh	r1, [r1, r5]
 800956c:	f000 f8d0 	bl	8009710 <_lseek_r>
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	1c42      	adds	r2, r0, #1
 8009574:	d103      	bne.n	800957e <__sseek+0x1a>
 8009576:	4a05      	ldr	r2, [pc, #20]	@ (800958c <__sseek+0x28>)
 8009578:	4013      	ands	r3, r2
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	bd70      	pop	{r4, r5, r6, pc}
 800957e:	2280      	movs	r2, #128	@ 0x80
 8009580:	0152      	lsls	r2, r2, #5
 8009582:	4313      	orrs	r3, r2
 8009584:	81a3      	strh	r3, [r4, #12]
 8009586:	6560      	str	r0, [r4, #84]	@ 0x54
 8009588:	e7f8      	b.n	800957c <__sseek+0x18>
 800958a:	46c0      	nop			@ (mov r8, r8)
 800958c:	ffffefff 	.word	0xffffefff

08009590 <__sclose>:
 8009590:	b510      	push	{r4, lr}
 8009592:	230e      	movs	r3, #14
 8009594:	5ec9      	ldrsh	r1, [r1, r3]
 8009596:	f000 f8a9 	bl	80096ec <_close_r>
 800959a:	bd10      	pop	{r4, pc}

0800959c <__swbuf_r>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	0006      	movs	r6, r0
 80095a0:	000d      	movs	r5, r1
 80095a2:	0014      	movs	r4, r2
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d004      	beq.n	80095b2 <__swbuf_r+0x16>
 80095a8:	6a03      	ldr	r3, [r0, #32]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <__swbuf_r+0x16>
 80095ae:	f7ff fecf 	bl	8009350 <__sinit>
 80095b2:	69a3      	ldr	r3, [r4, #24]
 80095b4:	60a3      	str	r3, [r4, #8]
 80095b6:	89a3      	ldrh	r3, [r4, #12]
 80095b8:	071b      	lsls	r3, r3, #28
 80095ba:	d502      	bpl.n	80095c2 <__swbuf_r+0x26>
 80095bc:	6923      	ldr	r3, [r4, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d109      	bne.n	80095d6 <__swbuf_r+0x3a>
 80095c2:	0021      	movs	r1, r4
 80095c4:	0030      	movs	r0, r6
 80095c6:	f000 f82b 	bl	8009620 <__swsetup_r>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d003      	beq.n	80095d6 <__swbuf_r+0x3a>
 80095ce:	2501      	movs	r5, #1
 80095d0:	426d      	negs	r5, r5
 80095d2:	0028      	movs	r0, r5
 80095d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d6:	6923      	ldr	r3, [r4, #16]
 80095d8:	6820      	ldr	r0, [r4, #0]
 80095da:	b2ef      	uxtb	r7, r5
 80095dc:	1ac0      	subs	r0, r0, r3
 80095de:	6963      	ldr	r3, [r4, #20]
 80095e0:	b2ed      	uxtb	r5, r5
 80095e2:	4283      	cmp	r3, r0
 80095e4:	dc05      	bgt.n	80095f2 <__swbuf_r+0x56>
 80095e6:	0021      	movs	r1, r4
 80095e8:	0030      	movs	r0, r6
 80095ea:	f000 fdfb 	bl	800a1e4 <_fflush_r>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d1ed      	bne.n	80095ce <__swbuf_r+0x32>
 80095f2:	68a3      	ldr	r3, [r4, #8]
 80095f4:	3001      	adds	r0, #1
 80095f6:	3b01      	subs	r3, #1
 80095f8:	60a3      	str	r3, [r4, #8]
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	1c5a      	adds	r2, r3, #1
 80095fe:	6022      	str	r2, [r4, #0]
 8009600:	701f      	strb	r7, [r3, #0]
 8009602:	6963      	ldr	r3, [r4, #20]
 8009604:	4283      	cmp	r3, r0
 8009606:	d004      	beq.n	8009612 <__swbuf_r+0x76>
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	07db      	lsls	r3, r3, #31
 800960c:	d5e1      	bpl.n	80095d2 <__swbuf_r+0x36>
 800960e:	2d0a      	cmp	r5, #10
 8009610:	d1df      	bne.n	80095d2 <__swbuf_r+0x36>
 8009612:	0021      	movs	r1, r4
 8009614:	0030      	movs	r0, r6
 8009616:	f000 fde5 	bl	800a1e4 <_fflush_r>
 800961a:	2800      	cmp	r0, #0
 800961c:	d0d9      	beq.n	80095d2 <__swbuf_r+0x36>
 800961e:	e7d6      	b.n	80095ce <__swbuf_r+0x32>

08009620 <__swsetup_r>:
 8009620:	4b2d      	ldr	r3, [pc, #180]	@ (80096d8 <__swsetup_r+0xb8>)
 8009622:	b570      	push	{r4, r5, r6, lr}
 8009624:	0005      	movs	r5, r0
 8009626:	6818      	ldr	r0, [r3, #0]
 8009628:	000c      	movs	r4, r1
 800962a:	2800      	cmp	r0, #0
 800962c:	d004      	beq.n	8009638 <__swsetup_r+0x18>
 800962e:	6a03      	ldr	r3, [r0, #32]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <__swsetup_r+0x18>
 8009634:	f7ff fe8c 	bl	8009350 <__sinit>
 8009638:	220c      	movs	r2, #12
 800963a:	5ea3      	ldrsh	r3, [r4, r2]
 800963c:	071a      	lsls	r2, r3, #28
 800963e:	d423      	bmi.n	8009688 <__swsetup_r+0x68>
 8009640:	06da      	lsls	r2, r3, #27
 8009642:	d407      	bmi.n	8009654 <__swsetup_r+0x34>
 8009644:	2209      	movs	r2, #9
 8009646:	602a      	str	r2, [r5, #0]
 8009648:	2240      	movs	r2, #64	@ 0x40
 800964a:	2001      	movs	r0, #1
 800964c:	4313      	orrs	r3, r2
 800964e:	81a3      	strh	r3, [r4, #12]
 8009650:	4240      	negs	r0, r0
 8009652:	e03a      	b.n	80096ca <__swsetup_r+0xaa>
 8009654:	075b      	lsls	r3, r3, #29
 8009656:	d513      	bpl.n	8009680 <__swsetup_r+0x60>
 8009658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800965a:	2900      	cmp	r1, #0
 800965c:	d008      	beq.n	8009670 <__swsetup_r+0x50>
 800965e:	0023      	movs	r3, r4
 8009660:	3344      	adds	r3, #68	@ 0x44
 8009662:	4299      	cmp	r1, r3
 8009664:	d002      	beq.n	800966c <__swsetup_r+0x4c>
 8009666:	0028      	movs	r0, r5
 8009668:	f000 f8ce 	bl	8009808 <_free_r>
 800966c:	2300      	movs	r3, #0
 800966e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009670:	2224      	movs	r2, #36	@ 0x24
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	4393      	bics	r3, r2
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	2300      	movs	r3, #0
 800967a:	6063      	str	r3, [r4, #4]
 800967c:	6923      	ldr	r3, [r4, #16]
 800967e:	6023      	str	r3, [r4, #0]
 8009680:	2308      	movs	r3, #8
 8009682:	89a2      	ldrh	r2, [r4, #12]
 8009684:	4313      	orrs	r3, r2
 8009686:	81a3      	strh	r3, [r4, #12]
 8009688:	6923      	ldr	r3, [r4, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10b      	bne.n	80096a6 <__swsetup_r+0x86>
 800968e:	21a0      	movs	r1, #160	@ 0xa0
 8009690:	2280      	movs	r2, #128	@ 0x80
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	0089      	lsls	r1, r1, #2
 8009696:	0092      	lsls	r2, r2, #2
 8009698:	400b      	ands	r3, r1
 800969a:	4293      	cmp	r3, r2
 800969c:	d003      	beq.n	80096a6 <__swsetup_r+0x86>
 800969e:	0021      	movs	r1, r4
 80096a0:	0028      	movs	r0, r5
 80096a2:	f000 fdf5 	bl	800a290 <__smakebuf_r>
 80096a6:	220c      	movs	r2, #12
 80096a8:	5ea3      	ldrsh	r3, [r4, r2]
 80096aa:	2101      	movs	r1, #1
 80096ac:	001a      	movs	r2, r3
 80096ae:	400a      	ands	r2, r1
 80096b0:	420b      	tst	r3, r1
 80096b2:	d00b      	beq.n	80096cc <__swsetup_r+0xac>
 80096b4:	2200      	movs	r2, #0
 80096b6:	60a2      	str	r2, [r4, #8]
 80096b8:	6962      	ldr	r2, [r4, #20]
 80096ba:	4252      	negs	r2, r2
 80096bc:	61a2      	str	r2, [r4, #24]
 80096be:	2000      	movs	r0, #0
 80096c0:	6922      	ldr	r2, [r4, #16]
 80096c2:	4282      	cmp	r2, r0
 80096c4:	d101      	bne.n	80096ca <__swsetup_r+0xaa>
 80096c6:	061a      	lsls	r2, r3, #24
 80096c8:	d4be      	bmi.n	8009648 <__swsetup_r+0x28>
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	0799      	lsls	r1, r3, #30
 80096ce:	d400      	bmi.n	80096d2 <__swsetup_r+0xb2>
 80096d0:	6962      	ldr	r2, [r4, #20]
 80096d2:	60a2      	str	r2, [r4, #8]
 80096d4:	e7f3      	b.n	80096be <__swsetup_r+0x9e>
 80096d6:	46c0      	nop			@ (mov r8, r8)
 80096d8:	20000018 	.word	0x20000018

080096dc <memset>:
 80096dc:	0003      	movs	r3, r0
 80096de:	1882      	adds	r2, r0, r2
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d100      	bne.n	80096e6 <memset+0xa>
 80096e4:	4770      	bx	lr
 80096e6:	7019      	strb	r1, [r3, #0]
 80096e8:	3301      	adds	r3, #1
 80096ea:	e7f9      	b.n	80096e0 <memset+0x4>

080096ec <_close_r>:
 80096ec:	2300      	movs	r3, #0
 80096ee:	b570      	push	{r4, r5, r6, lr}
 80096f0:	4d06      	ldr	r5, [pc, #24]	@ (800970c <_close_r+0x20>)
 80096f2:	0004      	movs	r4, r0
 80096f4:	0008      	movs	r0, r1
 80096f6:	602b      	str	r3, [r5, #0]
 80096f8:	f7f7 ffc7 	bl	800168a <_close>
 80096fc:	1c43      	adds	r3, r0, #1
 80096fe:	d103      	bne.n	8009708 <_close_r+0x1c>
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d000      	beq.n	8009708 <_close_r+0x1c>
 8009706:	6023      	str	r3, [r4, #0]
 8009708:	bd70      	pop	{r4, r5, r6, pc}
 800970a:	46c0      	nop			@ (mov r8, r8)
 800970c:	200007b0 	.word	0x200007b0

08009710 <_lseek_r>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	0004      	movs	r4, r0
 8009714:	0008      	movs	r0, r1
 8009716:	0011      	movs	r1, r2
 8009718:	001a      	movs	r2, r3
 800971a:	2300      	movs	r3, #0
 800971c:	4d05      	ldr	r5, [pc, #20]	@ (8009734 <_lseek_r+0x24>)
 800971e:	602b      	str	r3, [r5, #0]
 8009720:	f7f7 ffd4 	bl	80016cc <_lseek>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	d103      	bne.n	8009730 <_lseek_r+0x20>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d000      	beq.n	8009730 <_lseek_r+0x20>
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	bd70      	pop	{r4, r5, r6, pc}
 8009732:	46c0      	nop			@ (mov r8, r8)
 8009734:	200007b0 	.word	0x200007b0

08009738 <_read_r>:
 8009738:	b570      	push	{r4, r5, r6, lr}
 800973a:	0004      	movs	r4, r0
 800973c:	0008      	movs	r0, r1
 800973e:	0011      	movs	r1, r2
 8009740:	001a      	movs	r2, r3
 8009742:	2300      	movs	r3, #0
 8009744:	4d05      	ldr	r5, [pc, #20]	@ (800975c <_read_r+0x24>)
 8009746:	602b      	str	r3, [r5, #0]
 8009748:	f7f7 ff82 	bl	8001650 <_read>
 800974c:	1c43      	adds	r3, r0, #1
 800974e:	d103      	bne.n	8009758 <_read_r+0x20>
 8009750:	682b      	ldr	r3, [r5, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d000      	beq.n	8009758 <_read_r+0x20>
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	bd70      	pop	{r4, r5, r6, pc}
 800975a:	46c0      	nop			@ (mov r8, r8)
 800975c:	200007b0 	.word	0x200007b0

08009760 <_sbrk_r>:
 8009760:	2300      	movs	r3, #0
 8009762:	b570      	push	{r4, r5, r6, lr}
 8009764:	4d06      	ldr	r5, [pc, #24]	@ (8009780 <_sbrk_r+0x20>)
 8009766:	0004      	movs	r4, r0
 8009768:	0008      	movs	r0, r1
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	f7f7 ffba 	bl	80016e4 <_sbrk>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d103      	bne.n	800977c <_sbrk_r+0x1c>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d000      	beq.n	800977c <_sbrk_r+0x1c>
 800977a:	6023      	str	r3, [r4, #0]
 800977c:	bd70      	pop	{r4, r5, r6, pc}
 800977e:	46c0      	nop			@ (mov r8, r8)
 8009780:	200007b0 	.word	0x200007b0

08009784 <_write_r>:
 8009784:	b570      	push	{r4, r5, r6, lr}
 8009786:	0004      	movs	r4, r0
 8009788:	0008      	movs	r0, r1
 800978a:	0011      	movs	r1, r2
 800978c:	001a      	movs	r2, r3
 800978e:	2300      	movs	r3, #0
 8009790:	4d05      	ldr	r5, [pc, #20]	@ (80097a8 <_write_r+0x24>)
 8009792:	602b      	str	r3, [r5, #0]
 8009794:	f7f6 fd60 	bl	8000258 <_write>
 8009798:	1c43      	adds	r3, r0, #1
 800979a:	d103      	bne.n	80097a4 <_write_r+0x20>
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d000      	beq.n	80097a4 <_write_r+0x20>
 80097a2:	6023      	str	r3, [r4, #0]
 80097a4:	bd70      	pop	{r4, r5, r6, pc}
 80097a6:	46c0      	nop			@ (mov r8, r8)
 80097a8:	200007b0 	.word	0x200007b0

080097ac <__errno>:
 80097ac:	4b01      	ldr	r3, [pc, #4]	@ (80097b4 <__errno+0x8>)
 80097ae:	6818      	ldr	r0, [r3, #0]
 80097b0:	4770      	bx	lr
 80097b2:	46c0      	nop			@ (mov r8, r8)
 80097b4:	20000018 	.word	0x20000018

080097b8 <__libc_init_array>:
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	2600      	movs	r6, #0
 80097bc:	4c0c      	ldr	r4, [pc, #48]	@ (80097f0 <__libc_init_array+0x38>)
 80097be:	4d0d      	ldr	r5, [pc, #52]	@ (80097f4 <__libc_init_array+0x3c>)
 80097c0:	1b64      	subs	r4, r4, r5
 80097c2:	10a4      	asrs	r4, r4, #2
 80097c4:	42a6      	cmp	r6, r4
 80097c6:	d109      	bne.n	80097dc <__libc_init_array+0x24>
 80097c8:	2600      	movs	r6, #0
 80097ca:	f000 fe25 	bl	800a418 <_init>
 80097ce:	4c0a      	ldr	r4, [pc, #40]	@ (80097f8 <__libc_init_array+0x40>)
 80097d0:	4d0a      	ldr	r5, [pc, #40]	@ (80097fc <__libc_init_array+0x44>)
 80097d2:	1b64      	subs	r4, r4, r5
 80097d4:	10a4      	asrs	r4, r4, #2
 80097d6:	42a6      	cmp	r6, r4
 80097d8:	d105      	bne.n	80097e6 <__libc_init_array+0x2e>
 80097da:	bd70      	pop	{r4, r5, r6, pc}
 80097dc:	00b3      	lsls	r3, r6, #2
 80097de:	58eb      	ldr	r3, [r5, r3]
 80097e0:	4798      	blx	r3
 80097e2:	3601      	adds	r6, #1
 80097e4:	e7ee      	b.n	80097c4 <__libc_init_array+0xc>
 80097e6:	00b3      	lsls	r3, r6, #2
 80097e8:	58eb      	ldr	r3, [r5, r3]
 80097ea:	4798      	blx	r3
 80097ec:	3601      	adds	r6, #1
 80097ee:	e7f2      	b.n	80097d6 <__libc_init_array+0x1e>
 80097f0:	0800af20 	.word	0x0800af20
 80097f4:	0800af20 	.word	0x0800af20
 80097f8:	0800af24 	.word	0x0800af24
 80097fc:	0800af20 	.word	0x0800af20

08009800 <__retarget_lock_init_recursive>:
 8009800:	4770      	bx	lr

08009802 <__retarget_lock_acquire_recursive>:
 8009802:	4770      	bx	lr

08009804 <__retarget_lock_release_recursive>:
 8009804:	4770      	bx	lr
	...

08009808 <_free_r>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	0005      	movs	r5, r0
 800980c:	1e0c      	subs	r4, r1, #0
 800980e:	d010      	beq.n	8009832 <_free_r+0x2a>
 8009810:	3c04      	subs	r4, #4
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	da00      	bge.n	800981a <_free_r+0x12>
 8009818:	18e4      	adds	r4, r4, r3
 800981a:	0028      	movs	r0, r5
 800981c:	f7ff fcf8 	bl	8009210 <__malloc_lock>
 8009820:	4a1d      	ldr	r2, [pc, #116]	@ (8009898 <_free_r+0x90>)
 8009822:	6813      	ldr	r3, [r2, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d105      	bne.n	8009834 <_free_r+0x2c>
 8009828:	6063      	str	r3, [r4, #4]
 800982a:	6014      	str	r4, [r2, #0]
 800982c:	0028      	movs	r0, r5
 800982e:	f7ff fcf7 	bl	8009220 <__malloc_unlock>
 8009832:	bd70      	pop	{r4, r5, r6, pc}
 8009834:	42a3      	cmp	r3, r4
 8009836:	d908      	bls.n	800984a <_free_r+0x42>
 8009838:	6820      	ldr	r0, [r4, #0]
 800983a:	1821      	adds	r1, r4, r0
 800983c:	428b      	cmp	r3, r1
 800983e:	d1f3      	bne.n	8009828 <_free_r+0x20>
 8009840:	6819      	ldr	r1, [r3, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	1809      	adds	r1, r1, r0
 8009846:	6021      	str	r1, [r4, #0]
 8009848:	e7ee      	b.n	8009828 <_free_r+0x20>
 800984a:	001a      	movs	r2, r3
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d001      	beq.n	8009856 <_free_r+0x4e>
 8009852:	42a3      	cmp	r3, r4
 8009854:	d9f9      	bls.n	800984a <_free_r+0x42>
 8009856:	6811      	ldr	r1, [r2, #0]
 8009858:	1850      	adds	r0, r2, r1
 800985a:	42a0      	cmp	r0, r4
 800985c:	d10b      	bne.n	8009876 <_free_r+0x6e>
 800985e:	6820      	ldr	r0, [r4, #0]
 8009860:	1809      	adds	r1, r1, r0
 8009862:	1850      	adds	r0, r2, r1
 8009864:	6011      	str	r1, [r2, #0]
 8009866:	4283      	cmp	r3, r0
 8009868:	d1e0      	bne.n	800982c <_free_r+0x24>
 800986a:	6818      	ldr	r0, [r3, #0]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	1841      	adds	r1, r0, r1
 8009870:	6011      	str	r1, [r2, #0]
 8009872:	6053      	str	r3, [r2, #4]
 8009874:	e7da      	b.n	800982c <_free_r+0x24>
 8009876:	42a0      	cmp	r0, r4
 8009878:	d902      	bls.n	8009880 <_free_r+0x78>
 800987a:	230c      	movs	r3, #12
 800987c:	602b      	str	r3, [r5, #0]
 800987e:	e7d5      	b.n	800982c <_free_r+0x24>
 8009880:	6820      	ldr	r0, [r4, #0]
 8009882:	1821      	adds	r1, r4, r0
 8009884:	428b      	cmp	r3, r1
 8009886:	d103      	bne.n	8009890 <_free_r+0x88>
 8009888:	6819      	ldr	r1, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	1809      	adds	r1, r1, r0
 800988e:	6021      	str	r1, [r4, #0]
 8009890:	6063      	str	r3, [r4, #4]
 8009892:	6054      	str	r4, [r2, #4]
 8009894:	e7ca      	b.n	800982c <_free_r+0x24>
 8009896:	46c0      	nop			@ (mov r8, r8)
 8009898:	20000670 	.word	0x20000670

0800989c <__ssputs_r>:
 800989c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800989e:	688e      	ldr	r6, [r1, #8]
 80098a0:	b085      	sub	sp, #20
 80098a2:	001f      	movs	r7, r3
 80098a4:	000c      	movs	r4, r1
 80098a6:	680b      	ldr	r3, [r1, #0]
 80098a8:	9002      	str	r0, [sp, #8]
 80098aa:	9203      	str	r2, [sp, #12]
 80098ac:	42be      	cmp	r6, r7
 80098ae:	d830      	bhi.n	8009912 <__ssputs_r+0x76>
 80098b0:	210c      	movs	r1, #12
 80098b2:	5e62      	ldrsh	r2, [r4, r1]
 80098b4:	2190      	movs	r1, #144	@ 0x90
 80098b6:	00c9      	lsls	r1, r1, #3
 80098b8:	420a      	tst	r2, r1
 80098ba:	d028      	beq.n	800990e <__ssputs_r+0x72>
 80098bc:	2003      	movs	r0, #3
 80098be:	6921      	ldr	r1, [r4, #16]
 80098c0:	1a5b      	subs	r3, r3, r1
 80098c2:	9301      	str	r3, [sp, #4]
 80098c4:	6963      	ldr	r3, [r4, #20]
 80098c6:	4343      	muls	r3, r0
 80098c8:	9801      	ldr	r0, [sp, #4]
 80098ca:	0fdd      	lsrs	r5, r3, #31
 80098cc:	18ed      	adds	r5, r5, r3
 80098ce:	1c7b      	adds	r3, r7, #1
 80098d0:	181b      	adds	r3, r3, r0
 80098d2:	106d      	asrs	r5, r5, #1
 80098d4:	42ab      	cmp	r3, r5
 80098d6:	d900      	bls.n	80098da <__ssputs_r+0x3e>
 80098d8:	001d      	movs	r5, r3
 80098da:	0552      	lsls	r2, r2, #21
 80098dc:	d528      	bpl.n	8009930 <__ssputs_r+0x94>
 80098de:	0029      	movs	r1, r5
 80098e0:	9802      	ldr	r0, [sp, #8]
 80098e2:	f7ff fc15 	bl	8009110 <_malloc_r>
 80098e6:	1e06      	subs	r6, r0, #0
 80098e8:	d02c      	beq.n	8009944 <__ssputs_r+0xa8>
 80098ea:	9a01      	ldr	r2, [sp, #4]
 80098ec:	6921      	ldr	r1, [r4, #16]
 80098ee:	f000 fd52 	bl	800a396 <memcpy>
 80098f2:	89a2      	ldrh	r2, [r4, #12]
 80098f4:	4b18      	ldr	r3, [pc, #96]	@ (8009958 <__ssputs_r+0xbc>)
 80098f6:	401a      	ands	r2, r3
 80098f8:	2380      	movs	r3, #128	@ 0x80
 80098fa:	4313      	orrs	r3, r2
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	9b01      	ldr	r3, [sp, #4]
 8009900:	6126      	str	r6, [r4, #16]
 8009902:	18f6      	adds	r6, r6, r3
 8009904:	6026      	str	r6, [r4, #0]
 8009906:	003e      	movs	r6, r7
 8009908:	6165      	str	r5, [r4, #20]
 800990a:	1aed      	subs	r5, r5, r3
 800990c:	60a5      	str	r5, [r4, #8]
 800990e:	42be      	cmp	r6, r7
 8009910:	d900      	bls.n	8009914 <__ssputs_r+0x78>
 8009912:	003e      	movs	r6, r7
 8009914:	0032      	movs	r2, r6
 8009916:	9903      	ldr	r1, [sp, #12]
 8009918:	6820      	ldr	r0, [r4, #0]
 800991a:	f000 fcfa 	bl	800a312 <memmove>
 800991e:	2000      	movs	r0, #0
 8009920:	68a3      	ldr	r3, [r4, #8]
 8009922:	1b9b      	subs	r3, r3, r6
 8009924:	60a3      	str	r3, [r4, #8]
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	199b      	adds	r3, r3, r6
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	b005      	add	sp, #20
 800992e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009930:	002a      	movs	r2, r5
 8009932:	9802      	ldr	r0, [sp, #8]
 8009934:	f000 fd38 	bl	800a3a8 <_realloc_r>
 8009938:	1e06      	subs	r6, r0, #0
 800993a:	d1e0      	bne.n	80098fe <__ssputs_r+0x62>
 800993c:	6921      	ldr	r1, [r4, #16]
 800993e:	9802      	ldr	r0, [sp, #8]
 8009940:	f7ff ff62 	bl	8009808 <_free_r>
 8009944:	230c      	movs	r3, #12
 8009946:	2001      	movs	r0, #1
 8009948:	9a02      	ldr	r2, [sp, #8]
 800994a:	4240      	negs	r0, r0
 800994c:	6013      	str	r3, [r2, #0]
 800994e:	89a2      	ldrh	r2, [r4, #12]
 8009950:	3334      	adds	r3, #52	@ 0x34
 8009952:	4313      	orrs	r3, r2
 8009954:	81a3      	strh	r3, [r4, #12]
 8009956:	e7e9      	b.n	800992c <__ssputs_r+0x90>
 8009958:	fffffb7f 	.word	0xfffffb7f

0800995c <_svfiprintf_r>:
 800995c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800995e:	b0a1      	sub	sp, #132	@ 0x84
 8009960:	9003      	str	r0, [sp, #12]
 8009962:	001d      	movs	r5, r3
 8009964:	898b      	ldrh	r3, [r1, #12]
 8009966:	000f      	movs	r7, r1
 8009968:	0016      	movs	r6, r2
 800996a:	061b      	lsls	r3, r3, #24
 800996c:	d511      	bpl.n	8009992 <_svfiprintf_r+0x36>
 800996e:	690b      	ldr	r3, [r1, #16]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10e      	bne.n	8009992 <_svfiprintf_r+0x36>
 8009974:	2140      	movs	r1, #64	@ 0x40
 8009976:	f7ff fbcb 	bl	8009110 <_malloc_r>
 800997a:	6038      	str	r0, [r7, #0]
 800997c:	6138      	str	r0, [r7, #16]
 800997e:	2800      	cmp	r0, #0
 8009980:	d105      	bne.n	800998e <_svfiprintf_r+0x32>
 8009982:	230c      	movs	r3, #12
 8009984:	9a03      	ldr	r2, [sp, #12]
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	2001      	movs	r0, #1
 800998a:	4240      	negs	r0, r0
 800998c:	e0cf      	b.n	8009b2e <_svfiprintf_r+0x1d2>
 800998e:	2340      	movs	r3, #64	@ 0x40
 8009990:	617b      	str	r3, [r7, #20]
 8009992:	2300      	movs	r3, #0
 8009994:	ac08      	add	r4, sp, #32
 8009996:	6163      	str	r3, [r4, #20]
 8009998:	3320      	adds	r3, #32
 800999a:	7663      	strb	r3, [r4, #25]
 800999c:	3310      	adds	r3, #16
 800999e:	76a3      	strb	r3, [r4, #26]
 80099a0:	9507      	str	r5, [sp, #28]
 80099a2:	0035      	movs	r5, r6
 80099a4:	782b      	ldrb	r3, [r5, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <_svfiprintf_r+0x52>
 80099aa:	2b25      	cmp	r3, #37	@ 0x25
 80099ac:	d148      	bne.n	8009a40 <_svfiprintf_r+0xe4>
 80099ae:	1bab      	subs	r3, r5, r6
 80099b0:	9305      	str	r3, [sp, #20]
 80099b2:	42b5      	cmp	r5, r6
 80099b4:	d00b      	beq.n	80099ce <_svfiprintf_r+0x72>
 80099b6:	0032      	movs	r2, r6
 80099b8:	0039      	movs	r1, r7
 80099ba:	9803      	ldr	r0, [sp, #12]
 80099bc:	f7ff ff6e 	bl	800989c <__ssputs_r>
 80099c0:	3001      	adds	r0, #1
 80099c2:	d100      	bne.n	80099c6 <_svfiprintf_r+0x6a>
 80099c4:	e0ae      	b.n	8009b24 <_svfiprintf_r+0x1c8>
 80099c6:	6963      	ldr	r3, [r4, #20]
 80099c8:	9a05      	ldr	r2, [sp, #20]
 80099ca:	189b      	adds	r3, r3, r2
 80099cc:	6163      	str	r3, [r4, #20]
 80099ce:	782b      	ldrb	r3, [r5, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d100      	bne.n	80099d6 <_svfiprintf_r+0x7a>
 80099d4:	e0a6      	b.n	8009b24 <_svfiprintf_r+0x1c8>
 80099d6:	2201      	movs	r2, #1
 80099d8:	2300      	movs	r3, #0
 80099da:	4252      	negs	r2, r2
 80099dc:	6062      	str	r2, [r4, #4]
 80099de:	a904      	add	r1, sp, #16
 80099e0:	3254      	adds	r2, #84	@ 0x54
 80099e2:	1852      	adds	r2, r2, r1
 80099e4:	1c6e      	adds	r6, r5, #1
 80099e6:	6023      	str	r3, [r4, #0]
 80099e8:	60e3      	str	r3, [r4, #12]
 80099ea:	60a3      	str	r3, [r4, #8]
 80099ec:	7013      	strb	r3, [r2, #0]
 80099ee:	65a3      	str	r3, [r4, #88]	@ 0x58
 80099f0:	4b54      	ldr	r3, [pc, #336]	@ (8009b44 <_svfiprintf_r+0x1e8>)
 80099f2:	2205      	movs	r2, #5
 80099f4:	0018      	movs	r0, r3
 80099f6:	7831      	ldrb	r1, [r6, #0]
 80099f8:	9305      	str	r3, [sp, #20]
 80099fa:	f000 fcc1 	bl	800a380 <memchr>
 80099fe:	1c75      	adds	r5, r6, #1
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d11f      	bne.n	8009a44 <_svfiprintf_r+0xe8>
 8009a04:	6822      	ldr	r2, [r4, #0]
 8009a06:	06d3      	lsls	r3, r2, #27
 8009a08:	d504      	bpl.n	8009a14 <_svfiprintf_r+0xb8>
 8009a0a:	2353      	movs	r3, #83	@ 0x53
 8009a0c:	a904      	add	r1, sp, #16
 8009a0e:	185b      	adds	r3, r3, r1
 8009a10:	2120      	movs	r1, #32
 8009a12:	7019      	strb	r1, [r3, #0]
 8009a14:	0713      	lsls	r3, r2, #28
 8009a16:	d504      	bpl.n	8009a22 <_svfiprintf_r+0xc6>
 8009a18:	2353      	movs	r3, #83	@ 0x53
 8009a1a:	a904      	add	r1, sp, #16
 8009a1c:	185b      	adds	r3, r3, r1
 8009a1e:	212b      	movs	r1, #43	@ 0x2b
 8009a20:	7019      	strb	r1, [r3, #0]
 8009a22:	7833      	ldrb	r3, [r6, #0]
 8009a24:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a26:	d016      	beq.n	8009a56 <_svfiprintf_r+0xfa>
 8009a28:	0035      	movs	r5, r6
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	200a      	movs	r0, #10
 8009a2e:	68e3      	ldr	r3, [r4, #12]
 8009a30:	782a      	ldrb	r2, [r5, #0]
 8009a32:	1c6e      	adds	r6, r5, #1
 8009a34:	3a30      	subs	r2, #48	@ 0x30
 8009a36:	2a09      	cmp	r2, #9
 8009a38:	d950      	bls.n	8009adc <_svfiprintf_r+0x180>
 8009a3a:	2900      	cmp	r1, #0
 8009a3c:	d111      	bne.n	8009a62 <_svfiprintf_r+0x106>
 8009a3e:	e017      	b.n	8009a70 <_svfiprintf_r+0x114>
 8009a40:	3501      	adds	r5, #1
 8009a42:	e7af      	b.n	80099a4 <_svfiprintf_r+0x48>
 8009a44:	9b05      	ldr	r3, [sp, #20]
 8009a46:	6822      	ldr	r2, [r4, #0]
 8009a48:	1ac0      	subs	r0, r0, r3
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	4083      	lsls	r3, r0
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	002e      	movs	r6, r5
 8009a52:	6023      	str	r3, [r4, #0]
 8009a54:	e7cc      	b.n	80099f0 <_svfiprintf_r+0x94>
 8009a56:	9b07      	ldr	r3, [sp, #28]
 8009a58:	1d19      	adds	r1, r3, #4
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	9107      	str	r1, [sp, #28]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	db01      	blt.n	8009a66 <_svfiprintf_r+0x10a>
 8009a62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a64:	e004      	b.n	8009a70 <_svfiprintf_r+0x114>
 8009a66:	425b      	negs	r3, r3
 8009a68:	60e3      	str	r3, [r4, #12]
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	6023      	str	r3, [r4, #0]
 8009a70:	782b      	ldrb	r3, [r5, #0]
 8009a72:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a74:	d10c      	bne.n	8009a90 <_svfiprintf_r+0x134>
 8009a76:	786b      	ldrb	r3, [r5, #1]
 8009a78:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a7a:	d134      	bne.n	8009ae6 <_svfiprintf_r+0x18a>
 8009a7c:	9b07      	ldr	r3, [sp, #28]
 8009a7e:	3502      	adds	r5, #2
 8009a80:	1d1a      	adds	r2, r3, #4
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	9207      	str	r2, [sp, #28]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	da01      	bge.n	8009a8e <_svfiprintf_r+0x132>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	425b      	negs	r3, r3
 8009a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a90:	4e2d      	ldr	r6, [pc, #180]	@ (8009b48 <_svfiprintf_r+0x1ec>)
 8009a92:	2203      	movs	r2, #3
 8009a94:	0030      	movs	r0, r6
 8009a96:	7829      	ldrb	r1, [r5, #0]
 8009a98:	f000 fc72 	bl	800a380 <memchr>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d006      	beq.n	8009aae <_svfiprintf_r+0x152>
 8009aa0:	2340      	movs	r3, #64	@ 0x40
 8009aa2:	1b80      	subs	r0, r0, r6
 8009aa4:	4083      	lsls	r3, r0
 8009aa6:	6822      	ldr	r2, [r4, #0]
 8009aa8:	3501      	adds	r5, #1
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	7829      	ldrb	r1, [r5, #0]
 8009ab0:	2206      	movs	r2, #6
 8009ab2:	4826      	ldr	r0, [pc, #152]	@ (8009b4c <_svfiprintf_r+0x1f0>)
 8009ab4:	1c6e      	adds	r6, r5, #1
 8009ab6:	7621      	strb	r1, [r4, #24]
 8009ab8:	f000 fc62 	bl	800a380 <memchr>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	d038      	beq.n	8009b32 <_svfiprintf_r+0x1d6>
 8009ac0:	4b23      	ldr	r3, [pc, #140]	@ (8009b50 <_svfiprintf_r+0x1f4>)
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d122      	bne.n	8009b0c <_svfiprintf_r+0x1b0>
 8009ac6:	2207      	movs	r2, #7
 8009ac8:	9b07      	ldr	r3, [sp, #28]
 8009aca:	3307      	adds	r3, #7
 8009acc:	4393      	bics	r3, r2
 8009ace:	3308      	adds	r3, #8
 8009ad0:	9307      	str	r3, [sp, #28]
 8009ad2:	6963      	ldr	r3, [r4, #20]
 8009ad4:	9a04      	ldr	r2, [sp, #16]
 8009ad6:	189b      	adds	r3, r3, r2
 8009ad8:	6163      	str	r3, [r4, #20]
 8009ada:	e762      	b.n	80099a2 <_svfiprintf_r+0x46>
 8009adc:	4343      	muls	r3, r0
 8009ade:	0035      	movs	r5, r6
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	189b      	adds	r3, r3, r2
 8009ae4:	e7a4      	b.n	8009a30 <_svfiprintf_r+0xd4>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	200a      	movs	r0, #10
 8009aea:	0019      	movs	r1, r3
 8009aec:	3501      	adds	r5, #1
 8009aee:	6063      	str	r3, [r4, #4]
 8009af0:	782a      	ldrb	r2, [r5, #0]
 8009af2:	1c6e      	adds	r6, r5, #1
 8009af4:	3a30      	subs	r2, #48	@ 0x30
 8009af6:	2a09      	cmp	r2, #9
 8009af8:	d903      	bls.n	8009b02 <_svfiprintf_r+0x1a6>
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d0c8      	beq.n	8009a90 <_svfiprintf_r+0x134>
 8009afe:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b00:	e7c6      	b.n	8009a90 <_svfiprintf_r+0x134>
 8009b02:	4341      	muls	r1, r0
 8009b04:	0035      	movs	r5, r6
 8009b06:	2301      	movs	r3, #1
 8009b08:	1889      	adds	r1, r1, r2
 8009b0a:	e7f1      	b.n	8009af0 <_svfiprintf_r+0x194>
 8009b0c:	aa07      	add	r2, sp, #28
 8009b0e:	9200      	str	r2, [sp, #0]
 8009b10:	0021      	movs	r1, r4
 8009b12:	003a      	movs	r2, r7
 8009b14:	4b0f      	ldr	r3, [pc, #60]	@ (8009b54 <_svfiprintf_r+0x1f8>)
 8009b16:	9803      	ldr	r0, [sp, #12]
 8009b18:	e000      	b.n	8009b1c <_svfiprintf_r+0x1c0>
 8009b1a:	bf00      	nop
 8009b1c:	9004      	str	r0, [sp, #16]
 8009b1e:	9b04      	ldr	r3, [sp, #16]
 8009b20:	3301      	adds	r3, #1
 8009b22:	d1d6      	bne.n	8009ad2 <_svfiprintf_r+0x176>
 8009b24:	89bb      	ldrh	r3, [r7, #12]
 8009b26:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009b28:	065b      	lsls	r3, r3, #25
 8009b2a:	d500      	bpl.n	8009b2e <_svfiprintf_r+0x1d2>
 8009b2c:	e72c      	b.n	8009988 <_svfiprintf_r+0x2c>
 8009b2e:	b021      	add	sp, #132	@ 0x84
 8009b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b32:	aa07      	add	r2, sp, #28
 8009b34:	9200      	str	r2, [sp, #0]
 8009b36:	0021      	movs	r1, r4
 8009b38:	003a      	movs	r2, r7
 8009b3a:	4b06      	ldr	r3, [pc, #24]	@ (8009b54 <_svfiprintf_r+0x1f8>)
 8009b3c:	9803      	ldr	r0, [sp, #12]
 8009b3e:	f000 f9bf 	bl	8009ec0 <_printf_i>
 8009b42:	e7eb      	b.n	8009b1c <_svfiprintf_r+0x1c0>
 8009b44:	0800aeec 	.word	0x0800aeec
 8009b48:	0800aef2 	.word	0x0800aef2
 8009b4c:	0800aef6 	.word	0x0800aef6
 8009b50:	00000000 	.word	0x00000000
 8009b54:	0800989d 	.word	0x0800989d

08009b58 <__sfputc_r>:
 8009b58:	6893      	ldr	r3, [r2, #8]
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	6093      	str	r3, [r2, #8]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	da04      	bge.n	8009b6e <__sfputc_r+0x16>
 8009b64:	6994      	ldr	r4, [r2, #24]
 8009b66:	42a3      	cmp	r3, r4
 8009b68:	db07      	blt.n	8009b7a <__sfputc_r+0x22>
 8009b6a:	290a      	cmp	r1, #10
 8009b6c:	d005      	beq.n	8009b7a <__sfputc_r+0x22>
 8009b6e:	6813      	ldr	r3, [r2, #0]
 8009b70:	1c58      	adds	r0, r3, #1
 8009b72:	6010      	str	r0, [r2, #0]
 8009b74:	7019      	strb	r1, [r3, #0]
 8009b76:	0008      	movs	r0, r1
 8009b78:	bd10      	pop	{r4, pc}
 8009b7a:	f7ff fd0f 	bl	800959c <__swbuf_r>
 8009b7e:	0001      	movs	r1, r0
 8009b80:	e7f9      	b.n	8009b76 <__sfputc_r+0x1e>

08009b82 <__sfputs_r>:
 8009b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b84:	0006      	movs	r6, r0
 8009b86:	000f      	movs	r7, r1
 8009b88:	0014      	movs	r4, r2
 8009b8a:	18d5      	adds	r5, r2, r3
 8009b8c:	42ac      	cmp	r4, r5
 8009b8e:	d101      	bne.n	8009b94 <__sfputs_r+0x12>
 8009b90:	2000      	movs	r0, #0
 8009b92:	e007      	b.n	8009ba4 <__sfputs_r+0x22>
 8009b94:	7821      	ldrb	r1, [r4, #0]
 8009b96:	003a      	movs	r2, r7
 8009b98:	0030      	movs	r0, r6
 8009b9a:	f7ff ffdd 	bl	8009b58 <__sfputc_r>
 8009b9e:	3401      	adds	r4, #1
 8009ba0:	1c43      	adds	r3, r0, #1
 8009ba2:	d1f3      	bne.n	8009b8c <__sfputs_r+0xa>
 8009ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ba8 <_vfiprintf_r>:
 8009ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009baa:	b0a1      	sub	sp, #132	@ 0x84
 8009bac:	000f      	movs	r7, r1
 8009bae:	0015      	movs	r5, r2
 8009bb0:	001e      	movs	r6, r3
 8009bb2:	9003      	str	r0, [sp, #12]
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d004      	beq.n	8009bc2 <_vfiprintf_r+0x1a>
 8009bb8:	6a03      	ldr	r3, [r0, #32]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <_vfiprintf_r+0x1a>
 8009bbe:	f7ff fbc7 	bl	8009350 <__sinit>
 8009bc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bc4:	07db      	lsls	r3, r3, #31
 8009bc6:	d405      	bmi.n	8009bd4 <_vfiprintf_r+0x2c>
 8009bc8:	89bb      	ldrh	r3, [r7, #12]
 8009bca:	059b      	lsls	r3, r3, #22
 8009bcc:	d402      	bmi.n	8009bd4 <_vfiprintf_r+0x2c>
 8009bce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009bd0:	f7ff fe17 	bl	8009802 <__retarget_lock_acquire_recursive>
 8009bd4:	89bb      	ldrh	r3, [r7, #12]
 8009bd6:	071b      	lsls	r3, r3, #28
 8009bd8:	d502      	bpl.n	8009be0 <_vfiprintf_r+0x38>
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d113      	bne.n	8009c08 <_vfiprintf_r+0x60>
 8009be0:	0039      	movs	r1, r7
 8009be2:	9803      	ldr	r0, [sp, #12]
 8009be4:	f7ff fd1c 	bl	8009620 <__swsetup_r>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d00d      	beq.n	8009c08 <_vfiprintf_r+0x60>
 8009bec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bee:	07db      	lsls	r3, r3, #31
 8009bf0:	d503      	bpl.n	8009bfa <_vfiprintf_r+0x52>
 8009bf2:	2001      	movs	r0, #1
 8009bf4:	4240      	negs	r0, r0
 8009bf6:	b021      	add	sp, #132	@ 0x84
 8009bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bfa:	89bb      	ldrh	r3, [r7, #12]
 8009bfc:	059b      	lsls	r3, r3, #22
 8009bfe:	d4f8      	bmi.n	8009bf2 <_vfiprintf_r+0x4a>
 8009c00:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009c02:	f7ff fdff 	bl	8009804 <__retarget_lock_release_recursive>
 8009c06:	e7f4      	b.n	8009bf2 <_vfiprintf_r+0x4a>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	ac08      	add	r4, sp, #32
 8009c0c:	6163      	str	r3, [r4, #20]
 8009c0e:	3320      	adds	r3, #32
 8009c10:	7663      	strb	r3, [r4, #25]
 8009c12:	3310      	adds	r3, #16
 8009c14:	76a3      	strb	r3, [r4, #26]
 8009c16:	9607      	str	r6, [sp, #28]
 8009c18:	002e      	movs	r6, r5
 8009c1a:	7833      	ldrb	r3, [r6, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <_vfiprintf_r+0x7c>
 8009c20:	2b25      	cmp	r3, #37	@ 0x25
 8009c22:	d148      	bne.n	8009cb6 <_vfiprintf_r+0x10e>
 8009c24:	1b73      	subs	r3, r6, r5
 8009c26:	9305      	str	r3, [sp, #20]
 8009c28:	42ae      	cmp	r6, r5
 8009c2a:	d00b      	beq.n	8009c44 <_vfiprintf_r+0x9c>
 8009c2c:	002a      	movs	r2, r5
 8009c2e:	0039      	movs	r1, r7
 8009c30:	9803      	ldr	r0, [sp, #12]
 8009c32:	f7ff ffa6 	bl	8009b82 <__sfputs_r>
 8009c36:	3001      	adds	r0, #1
 8009c38:	d100      	bne.n	8009c3c <_vfiprintf_r+0x94>
 8009c3a:	e0ae      	b.n	8009d9a <_vfiprintf_r+0x1f2>
 8009c3c:	6963      	ldr	r3, [r4, #20]
 8009c3e:	9a05      	ldr	r2, [sp, #20]
 8009c40:	189b      	adds	r3, r3, r2
 8009c42:	6163      	str	r3, [r4, #20]
 8009c44:	7833      	ldrb	r3, [r6, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d100      	bne.n	8009c4c <_vfiprintf_r+0xa4>
 8009c4a:	e0a6      	b.n	8009d9a <_vfiprintf_r+0x1f2>
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	2300      	movs	r3, #0
 8009c50:	4252      	negs	r2, r2
 8009c52:	6062      	str	r2, [r4, #4]
 8009c54:	a904      	add	r1, sp, #16
 8009c56:	3254      	adds	r2, #84	@ 0x54
 8009c58:	1852      	adds	r2, r2, r1
 8009c5a:	1c75      	adds	r5, r6, #1
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	60e3      	str	r3, [r4, #12]
 8009c60:	60a3      	str	r3, [r4, #8]
 8009c62:	7013      	strb	r3, [r2, #0]
 8009c64:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009c66:	4b59      	ldr	r3, [pc, #356]	@ (8009dcc <_vfiprintf_r+0x224>)
 8009c68:	2205      	movs	r2, #5
 8009c6a:	0018      	movs	r0, r3
 8009c6c:	7829      	ldrb	r1, [r5, #0]
 8009c6e:	9305      	str	r3, [sp, #20]
 8009c70:	f000 fb86 	bl	800a380 <memchr>
 8009c74:	1c6e      	adds	r6, r5, #1
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d11f      	bne.n	8009cba <_vfiprintf_r+0x112>
 8009c7a:	6822      	ldr	r2, [r4, #0]
 8009c7c:	06d3      	lsls	r3, r2, #27
 8009c7e:	d504      	bpl.n	8009c8a <_vfiprintf_r+0xe2>
 8009c80:	2353      	movs	r3, #83	@ 0x53
 8009c82:	a904      	add	r1, sp, #16
 8009c84:	185b      	adds	r3, r3, r1
 8009c86:	2120      	movs	r1, #32
 8009c88:	7019      	strb	r1, [r3, #0]
 8009c8a:	0713      	lsls	r3, r2, #28
 8009c8c:	d504      	bpl.n	8009c98 <_vfiprintf_r+0xf0>
 8009c8e:	2353      	movs	r3, #83	@ 0x53
 8009c90:	a904      	add	r1, sp, #16
 8009c92:	185b      	adds	r3, r3, r1
 8009c94:	212b      	movs	r1, #43	@ 0x2b
 8009c96:	7019      	strb	r1, [r3, #0]
 8009c98:	782b      	ldrb	r3, [r5, #0]
 8009c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c9c:	d016      	beq.n	8009ccc <_vfiprintf_r+0x124>
 8009c9e:	002e      	movs	r6, r5
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	200a      	movs	r0, #10
 8009ca4:	68e3      	ldr	r3, [r4, #12]
 8009ca6:	7832      	ldrb	r2, [r6, #0]
 8009ca8:	1c75      	adds	r5, r6, #1
 8009caa:	3a30      	subs	r2, #48	@ 0x30
 8009cac:	2a09      	cmp	r2, #9
 8009cae:	d950      	bls.n	8009d52 <_vfiprintf_r+0x1aa>
 8009cb0:	2900      	cmp	r1, #0
 8009cb2:	d111      	bne.n	8009cd8 <_vfiprintf_r+0x130>
 8009cb4:	e017      	b.n	8009ce6 <_vfiprintf_r+0x13e>
 8009cb6:	3601      	adds	r6, #1
 8009cb8:	e7af      	b.n	8009c1a <_vfiprintf_r+0x72>
 8009cba:	9b05      	ldr	r3, [sp, #20]
 8009cbc:	6822      	ldr	r2, [r4, #0]
 8009cbe:	1ac0      	subs	r0, r0, r3
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	4083      	lsls	r3, r0
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	0035      	movs	r5, r6
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	e7cc      	b.n	8009c66 <_vfiprintf_r+0xbe>
 8009ccc:	9b07      	ldr	r3, [sp, #28]
 8009cce:	1d19      	adds	r1, r3, #4
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	9107      	str	r1, [sp, #28]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	db01      	blt.n	8009cdc <_vfiprintf_r+0x134>
 8009cd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cda:	e004      	b.n	8009ce6 <_vfiprintf_r+0x13e>
 8009cdc:	425b      	negs	r3, r3
 8009cde:	60e3      	str	r3, [r4, #12]
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	7833      	ldrb	r3, [r6, #0]
 8009ce8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cea:	d10c      	bne.n	8009d06 <_vfiprintf_r+0x15e>
 8009cec:	7873      	ldrb	r3, [r6, #1]
 8009cee:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cf0:	d134      	bne.n	8009d5c <_vfiprintf_r+0x1b4>
 8009cf2:	9b07      	ldr	r3, [sp, #28]
 8009cf4:	3602      	adds	r6, #2
 8009cf6:	1d1a      	adds	r2, r3, #4
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	9207      	str	r2, [sp, #28]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	da01      	bge.n	8009d04 <_vfiprintf_r+0x15c>
 8009d00:	2301      	movs	r3, #1
 8009d02:	425b      	negs	r3, r3
 8009d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d06:	4d32      	ldr	r5, [pc, #200]	@ (8009dd0 <_vfiprintf_r+0x228>)
 8009d08:	2203      	movs	r2, #3
 8009d0a:	0028      	movs	r0, r5
 8009d0c:	7831      	ldrb	r1, [r6, #0]
 8009d0e:	f000 fb37 	bl	800a380 <memchr>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d006      	beq.n	8009d24 <_vfiprintf_r+0x17c>
 8009d16:	2340      	movs	r3, #64	@ 0x40
 8009d18:	1b40      	subs	r0, r0, r5
 8009d1a:	4083      	lsls	r3, r0
 8009d1c:	6822      	ldr	r2, [r4, #0]
 8009d1e:	3601      	adds	r6, #1
 8009d20:	4313      	orrs	r3, r2
 8009d22:	6023      	str	r3, [r4, #0]
 8009d24:	7831      	ldrb	r1, [r6, #0]
 8009d26:	2206      	movs	r2, #6
 8009d28:	482a      	ldr	r0, [pc, #168]	@ (8009dd4 <_vfiprintf_r+0x22c>)
 8009d2a:	1c75      	adds	r5, r6, #1
 8009d2c:	7621      	strb	r1, [r4, #24]
 8009d2e:	f000 fb27 	bl	800a380 <memchr>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d040      	beq.n	8009db8 <_vfiprintf_r+0x210>
 8009d36:	4b28      	ldr	r3, [pc, #160]	@ (8009dd8 <_vfiprintf_r+0x230>)
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d122      	bne.n	8009d82 <_vfiprintf_r+0x1da>
 8009d3c:	2207      	movs	r2, #7
 8009d3e:	9b07      	ldr	r3, [sp, #28]
 8009d40:	3307      	adds	r3, #7
 8009d42:	4393      	bics	r3, r2
 8009d44:	3308      	adds	r3, #8
 8009d46:	9307      	str	r3, [sp, #28]
 8009d48:	6963      	ldr	r3, [r4, #20]
 8009d4a:	9a04      	ldr	r2, [sp, #16]
 8009d4c:	189b      	adds	r3, r3, r2
 8009d4e:	6163      	str	r3, [r4, #20]
 8009d50:	e762      	b.n	8009c18 <_vfiprintf_r+0x70>
 8009d52:	4343      	muls	r3, r0
 8009d54:	002e      	movs	r6, r5
 8009d56:	2101      	movs	r1, #1
 8009d58:	189b      	adds	r3, r3, r2
 8009d5a:	e7a4      	b.n	8009ca6 <_vfiprintf_r+0xfe>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	200a      	movs	r0, #10
 8009d60:	0019      	movs	r1, r3
 8009d62:	3601      	adds	r6, #1
 8009d64:	6063      	str	r3, [r4, #4]
 8009d66:	7832      	ldrb	r2, [r6, #0]
 8009d68:	1c75      	adds	r5, r6, #1
 8009d6a:	3a30      	subs	r2, #48	@ 0x30
 8009d6c:	2a09      	cmp	r2, #9
 8009d6e:	d903      	bls.n	8009d78 <_vfiprintf_r+0x1d0>
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d0c8      	beq.n	8009d06 <_vfiprintf_r+0x15e>
 8009d74:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d76:	e7c6      	b.n	8009d06 <_vfiprintf_r+0x15e>
 8009d78:	4341      	muls	r1, r0
 8009d7a:	002e      	movs	r6, r5
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	1889      	adds	r1, r1, r2
 8009d80:	e7f1      	b.n	8009d66 <_vfiprintf_r+0x1be>
 8009d82:	aa07      	add	r2, sp, #28
 8009d84:	9200      	str	r2, [sp, #0]
 8009d86:	0021      	movs	r1, r4
 8009d88:	003a      	movs	r2, r7
 8009d8a:	4b14      	ldr	r3, [pc, #80]	@ (8009ddc <_vfiprintf_r+0x234>)
 8009d8c:	9803      	ldr	r0, [sp, #12]
 8009d8e:	e000      	b.n	8009d92 <_vfiprintf_r+0x1ea>
 8009d90:	bf00      	nop
 8009d92:	9004      	str	r0, [sp, #16]
 8009d94:	9b04      	ldr	r3, [sp, #16]
 8009d96:	3301      	adds	r3, #1
 8009d98:	d1d6      	bne.n	8009d48 <_vfiprintf_r+0x1a0>
 8009d9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d9c:	07db      	lsls	r3, r3, #31
 8009d9e:	d405      	bmi.n	8009dac <_vfiprintf_r+0x204>
 8009da0:	89bb      	ldrh	r3, [r7, #12]
 8009da2:	059b      	lsls	r3, r3, #22
 8009da4:	d402      	bmi.n	8009dac <_vfiprintf_r+0x204>
 8009da6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009da8:	f7ff fd2c 	bl	8009804 <__retarget_lock_release_recursive>
 8009dac:	89bb      	ldrh	r3, [r7, #12]
 8009dae:	065b      	lsls	r3, r3, #25
 8009db0:	d500      	bpl.n	8009db4 <_vfiprintf_r+0x20c>
 8009db2:	e71e      	b.n	8009bf2 <_vfiprintf_r+0x4a>
 8009db4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009db6:	e71e      	b.n	8009bf6 <_vfiprintf_r+0x4e>
 8009db8:	aa07      	add	r2, sp, #28
 8009dba:	9200      	str	r2, [sp, #0]
 8009dbc:	0021      	movs	r1, r4
 8009dbe:	003a      	movs	r2, r7
 8009dc0:	4b06      	ldr	r3, [pc, #24]	@ (8009ddc <_vfiprintf_r+0x234>)
 8009dc2:	9803      	ldr	r0, [sp, #12]
 8009dc4:	f000 f87c 	bl	8009ec0 <_printf_i>
 8009dc8:	e7e3      	b.n	8009d92 <_vfiprintf_r+0x1ea>
 8009dca:	46c0      	nop			@ (mov r8, r8)
 8009dcc:	0800aeec 	.word	0x0800aeec
 8009dd0:	0800aef2 	.word	0x0800aef2
 8009dd4:	0800aef6 	.word	0x0800aef6
 8009dd8:	00000000 	.word	0x00000000
 8009ddc:	08009b83 	.word	0x08009b83

08009de0 <_printf_common>:
 8009de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009de2:	0016      	movs	r6, r2
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	688a      	ldr	r2, [r1, #8]
 8009de8:	690b      	ldr	r3, [r1, #16]
 8009dea:	000c      	movs	r4, r1
 8009dec:	9000      	str	r0, [sp, #0]
 8009dee:	4293      	cmp	r3, r2
 8009df0:	da00      	bge.n	8009df4 <_printf_common+0x14>
 8009df2:	0013      	movs	r3, r2
 8009df4:	0022      	movs	r2, r4
 8009df6:	6033      	str	r3, [r6, #0]
 8009df8:	3243      	adds	r2, #67	@ 0x43
 8009dfa:	7812      	ldrb	r2, [r2, #0]
 8009dfc:	2a00      	cmp	r2, #0
 8009dfe:	d001      	beq.n	8009e04 <_printf_common+0x24>
 8009e00:	3301      	adds	r3, #1
 8009e02:	6033      	str	r3, [r6, #0]
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	069b      	lsls	r3, r3, #26
 8009e08:	d502      	bpl.n	8009e10 <_printf_common+0x30>
 8009e0a:	6833      	ldr	r3, [r6, #0]
 8009e0c:	3302      	adds	r3, #2
 8009e0e:	6033      	str	r3, [r6, #0]
 8009e10:	6822      	ldr	r2, [r4, #0]
 8009e12:	2306      	movs	r3, #6
 8009e14:	0015      	movs	r5, r2
 8009e16:	401d      	ands	r5, r3
 8009e18:	421a      	tst	r2, r3
 8009e1a:	d027      	beq.n	8009e6c <_printf_common+0x8c>
 8009e1c:	0023      	movs	r3, r4
 8009e1e:	3343      	adds	r3, #67	@ 0x43
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	1e5a      	subs	r2, r3, #1
 8009e24:	4193      	sbcs	r3, r2
 8009e26:	6822      	ldr	r2, [r4, #0]
 8009e28:	0692      	lsls	r2, r2, #26
 8009e2a:	d430      	bmi.n	8009e8e <_printf_common+0xae>
 8009e2c:	0022      	movs	r2, r4
 8009e2e:	9901      	ldr	r1, [sp, #4]
 8009e30:	9800      	ldr	r0, [sp, #0]
 8009e32:	9d08      	ldr	r5, [sp, #32]
 8009e34:	3243      	adds	r2, #67	@ 0x43
 8009e36:	47a8      	blx	r5
 8009e38:	3001      	adds	r0, #1
 8009e3a:	d025      	beq.n	8009e88 <_printf_common+0xa8>
 8009e3c:	2206      	movs	r2, #6
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	2500      	movs	r5, #0
 8009e42:	4013      	ands	r3, r2
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	d105      	bne.n	8009e54 <_printf_common+0x74>
 8009e48:	6833      	ldr	r3, [r6, #0]
 8009e4a:	68e5      	ldr	r5, [r4, #12]
 8009e4c:	1aed      	subs	r5, r5, r3
 8009e4e:	43eb      	mvns	r3, r5
 8009e50:	17db      	asrs	r3, r3, #31
 8009e52:	401d      	ands	r5, r3
 8009e54:	68a3      	ldr	r3, [r4, #8]
 8009e56:	6922      	ldr	r2, [r4, #16]
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	dd01      	ble.n	8009e60 <_printf_common+0x80>
 8009e5c:	1a9b      	subs	r3, r3, r2
 8009e5e:	18ed      	adds	r5, r5, r3
 8009e60:	2600      	movs	r6, #0
 8009e62:	42b5      	cmp	r5, r6
 8009e64:	d120      	bne.n	8009ea8 <_printf_common+0xc8>
 8009e66:	2000      	movs	r0, #0
 8009e68:	e010      	b.n	8009e8c <_printf_common+0xac>
 8009e6a:	3501      	adds	r5, #1
 8009e6c:	68e3      	ldr	r3, [r4, #12]
 8009e6e:	6832      	ldr	r2, [r6, #0]
 8009e70:	1a9b      	subs	r3, r3, r2
 8009e72:	42ab      	cmp	r3, r5
 8009e74:	ddd2      	ble.n	8009e1c <_printf_common+0x3c>
 8009e76:	0022      	movs	r2, r4
 8009e78:	2301      	movs	r3, #1
 8009e7a:	9901      	ldr	r1, [sp, #4]
 8009e7c:	9800      	ldr	r0, [sp, #0]
 8009e7e:	9f08      	ldr	r7, [sp, #32]
 8009e80:	3219      	adds	r2, #25
 8009e82:	47b8      	blx	r7
 8009e84:	3001      	adds	r0, #1
 8009e86:	d1f0      	bne.n	8009e6a <_printf_common+0x8a>
 8009e88:	2001      	movs	r0, #1
 8009e8a:	4240      	negs	r0, r0
 8009e8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e8e:	2030      	movs	r0, #48	@ 0x30
 8009e90:	18e1      	adds	r1, r4, r3
 8009e92:	3143      	adds	r1, #67	@ 0x43
 8009e94:	7008      	strb	r0, [r1, #0]
 8009e96:	0021      	movs	r1, r4
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	3145      	adds	r1, #69	@ 0x45
 8009e9c:	7809      	ldrb	r1, [r1, #0]
 8009e9e:	18a2      	adds	r2, r4, r2
 8009ea0:	3243      	adds	r2, #67	@ 0x43
 8009ea2:	3302      	adds	r3, #2
 8009ea4:	7011      	strb	r1, [r2, #0]
 8009ea6:	e7c1      	b.n	8009e2c <_printf_common+0x4c>
 8009ea8:	0022      	movs	r2, r4
 8009eaa:	2301      	movs	r3, #1
 8009eac:	9901      	ldr	r1, [sp, #4]
 8009eae:	9800      	ldr	r0, [sp, #0]
 8009eb0:	9f08      	ldr	r7, [sp, #32]
 8009eb2:	321a      	adds	r2, #26
 8009eb4:	47b8      	blx	r7
 8009eb6:	3001      	adds	r0, #1
 8009eb8:	d0e6      	beq.n	8009e88 <_printf_common+0xa8>
 8009eba:	3601      	adds	r6, #1
 8009ebc:	e7d1      	b.n	8009e62 <_printf_common+0x82>
	...

08009ec0 <_printf_i>:
 8009ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec2:	b08b      	sub	sp, #44	@ 0x2c
 8009ec4:	9206      	str	r2, [sp, #24]
 8009ec6:	000a      	movs	r2, r1
 8009ec8:	3243      	adds	r2, #67	@ 0x43
 8009eca:	9307      	str	r3, [sp, #28]
 8009ecc:	9005      	str	r0, [sp, #20]
 8009ece:	9203      	str	r2, [sp, #12]
 8009ed0:	7e0a      	ldrb	r2, [r1, #24]
 8009ed2:	000c      	movs	r4, r1
 8009ed4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ed6:	2a78      	cmp	r2, #120	@ 0x78
 8009ed8:	d809      	bhi.n	8009eee <_printf_i+0x2e>
 8009eda:	2a62      	cmp	r2, #98	@ 0x62
 8009edc:	d80b      	bhi.n	8009ef6 <_printf_i+0x36>
 8009ede:	2a00      	cmp	r2, #0
 8009ee0:	d100      	bne.n	8009ee4 <_printf_i+0x24>
 8009ee2:	e0ba      	b.n	800a05a <_printf_i+0x19a>
 8009ee4:	497a      	ldr	r1, [pc, #488]	@ (800a0d0 <_printf_i+0x210>)
 8009ee6:	9104      	str	r1, [sp, #16]
 8009ee8:	2a58      	cmp	r2, #88	@ 0x58
 8009eea:	d100      	bne.n	8009eee <_printf_i+0x2e>
 8009eec:	e08e      	b.n	800a00c <_printf_i+0x14c>
 8009eee:	0025      	movs	r5, r4
 8009ef0:	3542      	adds	r5, #66	@ 0x42
 8009ef2:	702a      	strb	r2, [r5, #0]
 8009ef4:	e022      	b.n	8009f3c <_printf_i+0x7c>
 8009ef6:	0010      	movs	r0, r2
 8009ef8:	3863      	subs	r0, #99	@ 0x63
 8009efa:	2815      	cmp	r0, #21
 8009efc:	d8f7      	bhi.n	8009eee <_printf_i+0x2e>
 8009efe:	f7f6 f915 	bl	800012c <__gnu_thumb1_case_shi>
 8009f02:	0016      	.short	0x0016
 8009f04:	fff6001f 	.word	0xfff6001f
 8009f08:	fff6fff6 	.word	0xfff6fff6
 8009f0c:	001ffff6 	.word	0x001ffff6
 8009f10:	fff6fff6 	.word	0xfff6fff6
 8009f14:	fff6fff6 	.word	0xfff6fff6
 8009f18:	0036009f 	.word	0x0036009f
 8009f1c:	fff6007e 	.word	0xfff6007e
 8009f20:	00b0fff6 	.word	0x00b0fff6
 8009f24:	0036fff6 	.word	0x0036fff6
 8009f28:	fff6fff6 	.word	0xfff6fff6
 8009f2c:	0082      	.short	0x0082
 8009f2e:	0025      	movs	r5, r4
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	3542      	adds	r5, #66	@ 0x42
 8009f34:	1d11      	adds	r1, r2, #4
 8009f36:	6019      	str	r1, [r3, #0]
 8009f38:	6813      	ldr	r3, [r2, #0]
 8009f3a:	702b      	strb	r3, [r5, #0]
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e09e      	b.n	800a07e <_printf_i+0x1be>
 8009f40:	6818      	ldr	r0, [r3, #0]
 8009f42:	6809      	ldr	r1, [r1, #0]
 8009f44:	1d02      	adds	r2, r0, #4
 8009f46:	060d      	lsls	r5, r1, #24
 8009f48:	d50b      	bpl.n	8009f62 <_printf_i+0xa2>
 8009f4a:	6806      	ldr	r6, [r0, #0]
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	2e00      	cmp	r6, #0
 8009f50:	da03      	bge.n	8009f5a <_printf_i+0x9a>
 8009f52:	232d      	movs	r3, #45	@ 0x2d
 8009f54:	9a03      	ldr	r2, [sp, #12]
 8009f56:	4276      	negs	r6, r6
 8009f58:	7013      	strb	r3, [r2, #0]
 8009f5a:	4b5d      	ldr	r3, [pc, #372]	@ (800a0d0 <_printf_i+0x210>)
 8009f5c:	270a      	movs	r7, #10
 8009f5e:	9304      	str	r3, [sp, #16]
 8009f60:	e018      	b.n	8009f94 <_printf_i+0xd4>
 8009f62:	6806      	ldr	r6, [r0, #0]
 8009f64:	601a      	str	r2, [r3, #0]
 8009f66:	0649      	lsls	r1, r1, #25
 8009f68:	d5f1      	bpl.n	8009f4e <_printf_i+0x8e>
 8009f6a:	b236      	sxth	r6, r6
 8009f6c:	e7ef      	b.n	8009f4e <_printf_i+0x8e>
 8009f6e:	6808      	ldr	r0, [r1, #0]
 8009f70:	6819      	ldr	r1, [r3, #0]
 8009f72:	c940      	ldmia	r1!, {r6}
 8009f74:	0605      	lsls	r5, r0, #24
 8009f76:	d402      	bmi.n	8009f7e <_printf_i+0xbe>
 8009f78:	0640      	lsls	r0, r0, #25
 8009f7a:	d500      	bpl.n	8009f7e <_printf_i+0xbe>
 8009f7c:	b2b6      	uxth	r6, r6
 8009f7e:	6019      	str	r1, [r3, #0]
 8009f80:	4b53      	ldr	r3, [pc, #332]	@ (800a0d0 <_printf_i+0x210>)
 8009f82:	270a      	movs	r7, #10
 8009f84:	9304      	str	r3, [sp, #16]
 8009f86:	2a6f      	cmp	r2, #111	@ 0x6f
 8009f88:	d100      	bne.n	8009f8c <_printf_i+0xcc>
 8009f8a:	3f02      	subs	r7, #2
 8009f8c:	0023      	movs	r3, r4
 8009f8e:	2200      	movs	r2, #0
 8009f90:	3343      	adds	r3, #67	@ 0x43
 8009f92:	701a      	strb	r2, [r3, #0]
 8009f94:	6863      	ldr	r3, [r4, #4]
 8009f96:	60a3      	str	r3, [r4, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	db06      	blt.n	8009faa <_printf_i+0xea>
 8009f9c:	2104      	movs	r1, #4
 8009f9e:	6822      	ldr	r2, [r4, #0]
 8009fa0:	9d03      	ldr	r5, [sp, #12]
 8009fa2:	438a      	bics	r2, r1
 8009fa4:	6022      	str	r2, [r4, #0]
 8009fa6:	4333      	orrs	r3, r6
 8009fa8:	d00c      	beq.n	8009fc4 <_printf_i+0x104>
 8009faa:	9d03      	ldr	r5, [sp, #12]
 8009fac:	0030      	movs	r0, r6
 8009fae:	0039      	movs	r1, r7
 8009fb0:	f7f6 f94c 	bl	800024c <__aeabi_uidivmod>
 8009fb4:	9b04      	ldr	r3, [sp, #16]
 8009fb6:	3d01      	subs	r5, #1
 8009fb8:	5c5b      	ldrb	r3, [r3, r1]
 8009fba:	702b      	strb	r3, [r5, #0]
 8009fbc:	0033      	movs	r3, r6
 8009fbe:	0006      	movs	r6, r0
 8009fc0:	429f      	cmp	r7, r3
 8009fc2:	d9f3      	bls.n	8009fac <_printf_i+0xec>
 8009fc4:	2f08      	cmp	r7, #8
 8009fc6:	d109      	bne.n	8009fdc <_printf_i+0x11c>
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	07db      	lsls	r3, r3, #31
 8009fcc:	d506      	bpl.n	8009fdc <_printf_i+0x11c>
 8009fce:	6862      	ldr	r2, [r4, #4]
 8009fd0:	6923      	ldr	r3, [r4, #16]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	dc02      	bgt.n	8009fdc <_printf_i+0x11c>
 8009fd6:	2330      	movs	r3, #48	@ 0x30
 8009fd8:	3d01      	subs	r5, #1
 8009fda:	702b      	strb	r3, [r5, #0]
 8009fdc:	9b03      	ldr	r3, [sp, #12]
 8009fde:	1b5b      	subs	r3, r3, r5
 8009fe0:	6123      	str	r3, [r4, #16]
 8009fe2:	9b07      	ldr	r3, [sp, #28]
 8009fe4:	0021      	movs	r1, r4
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	9805      	ldr	r0, [sp, #20]
 8009fea:	9b06      	ldr	r3, [sp, #24]
 8009fec:	aa09      	add	r2, sp, #36	@ 0x24
 8009fee:	f7ff fef7 	bl	8009de0 <_printf_common>
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d148      	bne.n	800a088 <_printf_i+0x1c8>
 8009ff6:	2001      	movs	r0, #1
 8009ff8:	4240      	negs	r0, r0
 8009ffa:	b00b      	add	sp, #44	@ 0x2c
 8009ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ffe:	2220      	movs	r2, #32
 800a000:	6809      	ldr	r1, [r1, #0]
 800a002:	430a      	orrs	r2, r1
 800a004:	6022      	str	r2, [r4, #0]
 800a006:	2278      	movs	r2, #120	@ 0x78
 800a008:	4932      	ldr	r1, [pc, #200]	@ (800a0d4 <_printf_i+0x214>)
 800a00a:	9104      	str	r1, [sp, #16]
 800a00c:	0021      	movs	r1, r4
 800a00e:	3145      	adds	r1, #69	@ 0x45
 800a010:	700a      	strb	r2, [r1, #0]
 800a012:	6819      	ldr	r1, [r3, #0]
 800a014:	6822      	ldr	r2, [r4, #0]
 800a016:	c940      	ldmia	r1!, {r6}
 800a018:	0610      	lsls	r0, r2, #24
 800a01a:	d402      	bmi.n	800a022 <_printf_i+0x162>
 800a01c:	0650      	lsls	r0, r2, #25
 800a01e:	d500      	bpl.n	800a022 <_printf_i+0x162>
 800a020:	b2b6      	uxth	r6, r6
 800a022:	6019      	str	r1, [r3, #0]
 800a024:	07d3      	lsls	r3, r2, #31
 800a026:	d502      	bpl.n	800a02e <_printf_i+0x16e>
 800a028:	2320      	movs	r3, #32
 800a02a:	4313      	orrs	r3, r2
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	2e00      	cmp	r6, #0
 800a030:	d001      	beq.n	800a036 <_printf_i+0x176>
 800a032:	2710      	movs	r7, #16
 800a034:	e7aa      	b.n	8009f8c <_printf_i+0xcc>
 800a036:	2220      	movs	r2, #32
 800a038:	6823      	ldr	r3, [r4, #0]
 800a03a:	4393      	bics	r3, r2
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	e7f8      	b.n	800a032 <_printf_i+0x172>
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	680d      	ldr	r5, [r1, #0]
 800a044:	1d10      	adds	r0, r2, #4
 800a046:	6949      	ldr	r1, [r1, #20]
 800a048:	6018      	str	r0, [r3, #0]
 800a04a:	6813      	ldr	r3, [r2, #0]
 800a04c:	062e      	lsls	r6, r5, #24
 800a04e:	d501      	bpl.n	800a054 <_printf_i+0x194>
 800a050:	6019      	str	r1, [r3, #0]
 800a052:	e002      	b.n	800a05a <_printf_i+0x19a>
 800a054:	066d      	lsls	r5, r5, #25
 800a056:	d5fb      	bpl.n	800a050 <_printf_i+0x190>
 800a058:	8019      	strh	r1, [r3, #0]
 800a05a:	2300      	movs	r3, #0
 800a05c:	9d03      	ldr	r5, [sp, #12]
 800a05e:	6123      	str	r3, [r4, #16]
 800a060:	e7bf      	b.n	8009fe2 <_printf_i+0x122>
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	1d11      	adds	r1, r2, #4
 800a066:	6019      	str	r1, [r3, #0]
 800a068:	6815      	ldr	r5, [r2, #0]
 800a06a:	2100      	movs	r1, #0
 800a06c:	0028      	movs	r0, r5
 800a06e:	6862      	ldr	r2, [r4, #4]
 800a070:	f000 f986 	bl	800a380 <memchr>
 800a074:	2800      	cmp	r0, #0
 800a076:	d001      	beq.n	800a07c <_printf_i+0x1bc>
 800a078:	1b40      	subs	r0, r0, r5
 800a07a:	6060      	str	r0, [r4, #4]
 800a07c:	6863      	ldr	r3, [r4, #4]
 800a07e:	6123      	str	r3, [r4, #16]
 800a080:	2300      	movs	r3, #0
 800a082:	9a03      	ldr	r2, [sp, #12]
 800a084:	7013      	strb	r3, [r2, #0]
 800a086:	e7ac      	b.n	8009fe2 <_printf_i+0x122>
 800a088:	002a      	movs	r2, r5
 800a08a:	6923      	ldr	r3, [r4, #16]
 800a08c:	9906      	ldr	r1, [sp, #24]
 800a08e:	9805      	ldr	r0, [sp, #20]
 800a090:	9d07      	ldr	r5, [sp, #28]
 800a092:	47a8      	blx	r5
 800a094:	3001      	adds	r0, #1
 800a096:	d0ae      	beq.n	8009ff6 <_printf_i+0x136>
 800a098:	6823      	ldr	r3, [r4, #0]
 800a09a:	079b      	lsls	r3, r3, #30
 800a09c:	d415      	bmi.n	800a0ca <_printf_i+0x20a>
 800a09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0a0:	68e0      	ldr	r0, [r4, #12]
 800a0a2:	4298      	cmp	r0, r3
 800a0a4:	daa9      	bge.n	8009ffa <_printf_i+0x13a>
 800a0a6:	0018      	movs	r0, r3
 800a0a8:	e7a7      	b.n	8009ffa <_printf_i+0x13a>
 800a0aa:	0022      	movs	r2, r4
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	9906      	ldr	r1, [sp, #24]
 800a0b0:	9805      	ldr	r0, [sp, #20]
 800a0b2:	9e07      	ldr	r6, [sp, #28]
 800a0b4:	3219      	adds	r2, #25
 800a0b6:	47b0      	blx	r6
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	d09c      	beq.n	8009ff6 <_printf_i+0x136>
 800a0bc:	3501      	adds	r5, #1
 800a0be:	68e3      	ldr	r3, [r4, #12]
 800a0c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0c2:	1a9b      	subs	r3, r3, r2
 800a0c4:	42ab      	cmp	r3, r5
 800a0c6:	dcf0      	bgt.n	800a0aa <_printf_i+0x1ea>
 800a0c8:	e7e9      	b.n	800a09e <_printf_i+0x1de>
 800a0ca:	2500      	movs	r5, #0
 800a0cc:	e7f7      	b.n	800a0be <_printf_i+0x1fe>
 800a0ce:	46c0      	nop			@ (mov r8, r8)
 800a0d0:	0800aefd 	.word	0x0800aefd
 800a0d4:	0800af0e 	.word	0x0800af0e

0800a0d8 <__sflush_r>:
 800a0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0da:	220c      	movs	r2, #12
 800a0dc:	5e8b      	ldrsh	r3, [r1, r2]
 800a0de:	0005      	movs	r5, r0
 800a0e0:	000c      	movs	r4, r1
 800a0e2:	071a      	lsls	r2, r3, #28
 800a0e4:	d456      	bmi.n	800a194 <__sflush_r+0xbc>
 800a0e6:	684a      	ldr	r2, [r1, #4]
 800a0e8:	2a00      	cmp	r2, #0
 800a0ea:	dc02      	bgt.n	800a0f2 <__sflush_r+0x1a>
 800a0ec:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800a0ee:	2a00      	cmp	r2, #0
 800a0f0:	dd4e      	ble.n	800a190 <__sflush_r+0xb8>
 800a0f2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a0f4:	2f00      	cmp	r7, #0
 800a0f6:	d04b      	beq.n	800a190 <__sflush_r+0xb8>
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	2080      	movs	r0, #128	@ 0x80
 800a0fc:	682e      	ldr	r6, [r5, #0]
 800a0fe:	602a      	str	r2, [r5, #0]
 800a100:	001a      	movs	r2, r3
 800a102:	0140      	lsls	r0, r0, #5
 800a104:	6a21      	ldr	r1, [r4, #32]
 800a106:	4002      	ands	r2, r0
 800a108:	4203      	tst	r3, r0
 800a10a:	d033      	beq.n	800a174 <__sflush_r+0x9c>
 800a10c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a10e:	89a3      	ldrh	r3, [r4, #12]
 800a110:	075b      	lsls	r3, r3, #29
 800a112:	d506      	bpl.n	800a122 <__sflush_r+0x4a>
 800a114:	6863      	ldr	r3, [r4, #4]
 800a116:	1ad2      	subs	r2, r2, r3
 800a118:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <__sflush_r+0x4a>
 800a11e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a120:	1ad2      	subs	r2, r2, r3
 800a122:	2300      	movs	r3, #0
 800a124:	0028      	movs	r0, r5
 800a126:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a128:	6a21      	ldr	r1, [r4, #32]
 800a12a:	47b8      	blx	r7
 800a12c:	89a2      	ldrh	r2, [r4, #12]
 800a12e:	1c43      	adds	r3, r0, #1
 800a130:	d106      	bne.n	800a140 <__sflush_r+0x68>
 800a132:	6829      	ldr	r1, [r5, #0]
 800a134:	291d      	cmp	r1, #29
 800a136:	d846      	bhi.n	800a1c6 <__sflush_r+0xee>
 800a138:	4b29      	ldr	r3, [pc, #164]	@ (800a1e0 <__sflush_r+0x108>)
 800a13a:	40cb      	lsrs	r3, r1
 800a13c:	07db      	lsls	r3, r3, #31
 800a13e:	d542      	bpl.n	800a1c6 <__sflush_r+0xee>
 800a140:	2300      	movs	r3, #0
 800a142:	6063      	str	r3, [r4, #4]
 800a144:	6923      	ldr	r3, [r4, #16]
 800a146:	6023      	str	r3, [r4, #0]
 800a148:	04d2      	lsls	r2, r2, #19
 800a14a:	d505      	bpl.n	800a158 <__sflush_r+0x80>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d102      	bne.n	800a156 <__sflush_r+0x7e>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d100      	bne.n	800a158 <__sflush_r+0x80>
 800a156:	6560      	str	r0, [r4, #84]	@ 0x54
 800a158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a15a:	602e      	str	r6, [r5, #0]
 800a15c:	2900      	cmp	r1, #0
 800a15e:	d017      	beq.n	800a190 <__sflush_r+0xb8>
 800a160:	0023      	movs	r3, r4
 800a162:	3344      	adds	r3, #68	@ 0x44
 800a164:	4299      	cmp	r1, r3
 800a166:	d002      	beq.n	800a16e <__sflush_r+0x96>
 800a168:	0028      	movs	r0, r5
 800a16a:	f7ff fb4d 	bl	8009808 <_free_r>
 800a16e:	2300      	movs	r3, #0
 800a170:	6363      	str	r3, [r4, #52]	@ 0x34
 800a172:	e00d      	b.n	800a190 <__sflush_r+0xb8>
 800a174:	2301      	movs	r3, #1
 800a176:	0028      	movs	r0, r5
 800a178:	47b8      	blx	r7
 800a17a:	0002      	movs	r2, r0
 800a17c:	1c43      	adds	r3, r0, #1
 800a17e:	d1c6      	bne.n	800a10e <__sflush_r+0x36>
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0c3      	beq.n	800a10e <__sflush_r+0x36>
 800a186:	2b1d      	cmp	r3, #29
 800a188:	d001      	beq.n	800a18e <__sflush_r+0xb6>
 800a18a:	2b16      	cmp	r3, #22
 800a18c:	d11a      	bne.n	800a1c4 <__sflush_r+0xec>
 800a18e:	602e      	str	r6, [r5, #0]
 800a190:	2000      	movs	r0, #0
 800a192:	e01e      	b.n	800a1d2 <__sflush_r+0xfa>
 800a194:	690e      	ldr	r6, [r1, #16]
 800a196:	2e00      	cmp	r6, #0
 800a198:	d0fa      	beq.n	800a190 <__sflush_r+0xb8>
 800a19a:	680f      	ldr	r7, [r1, #0]
 800a19c:	600e      	str	r6, [r1, #0]
 800a19e:	1bba      	subs	r2, r7, r6
 800a1a0:	9201      	str	r2, [sp, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	079b      	lsls	r3, r3, #30
 800a1a6:	d100      	bne.n	800a1aa <__sflush_r+0xd2>
 800a1a8:	694a      	ldr	r2, [r1, #20]
 800a1aa:	60a2      	str	r2, [r4, #8]
 800a1ac:	9b01      	ldr	r3, [sp, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	ddee      	ble.n	800a190 <__sflush_r+0xb8>
 800a1b2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a1b4:	0032      	movs	r2, r6
 800a1b6:	001f      	movs	r7, r3
 800a1b8:	0028      	movs	r0, r5
 800a1ba:	9b01      	ldr	r3, [sp, #4]
 800a1bc:	6a21      	ldr	r1, [r4, #32]
 800a1be:	47b8      	blx	r7
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	dc07      	bgt.n	800a1d4 <__sflush_r+0xfc>
 800a1c4:	89a2      	ldrh	r2, [r4, #12]
 800a1c6:	2340      	movs	r3, #64	@ 0x40
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	b21b      	sxth	r3, r3
 800a1ce:	81a3      	strh	r3, [r4, #12]
 800a1d0:	4240      	negs	r0, r0
 800a1d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a1d4:	9b01      	ldr	r3, [sp, #4]
 800a1d6:	1836      	adds	r6, r6, r0
 800a1d8:	1a1b      	subs	r3, r3, r0
 800a1da:	9301      	str	r3, [sp, #4]
 800a1dc:	e7e6      	b.n	800a1ac <__sflush_r+0xd4>
 800a1de:	46c0      	nop			@ (mov r8, r8)
 800a1e0:	20400001 	.word	0x20400001

0800a1e4 <_fflush_r>:
 800a1e4:	690b      	ldr	r3, [r1, #16]
 800a1e6:	b570      	push	{r4, r5, r6, lr}
 800a1e8:	0005      	movs	r5, r0
 800a1ea:	000c      	movs	r4, r1
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d102      	bne.n	800a1f6 <_fflush_r+0x12>
 800a1f0:	2500      	movs	r5, #0
 800a1f2:	0028      	movs	r0, r5
 800a1f4:	bd70      	pop	{r4, r5, r6, pc}
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d004      	beq.n	800a204 <_fflush_r+0x20>
 800a1fa:	6a03      	ldr	r3, [r0, #32]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <_fflush_r+0x20>
 800a200:	f7ff f8a6 	bl	8009350 <__sinit>
 800a204:	220c      	movs	r2, #12
 800a206:	5ea3      	ldrsh	r3, [r4, r2]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d0f1      	beq.n	800a1f0 <_fflush_r+0xc>
 800a20c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a20e:	07d2      	lsls	r2, r2, #31
 800a210:	d404      	bmi.n	800a21c <_fflush_r+0x38>
 800a212:	059b      	lsls	r3, r3, #22
 800a214:	d402      	bmi.n	800a21c <_fflush_r+0x38>
 800a216:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a218:	f7ff faf3 	bl	8009802 <__retarget_lock_acquire_recursive>
 800a21c:	0028      	movs	r0, r5
 800a21e:	0021      	movs	r1, r4
 800a220:	f7ff ff5a 	bl	800a0d8 <__sflush_r>
 800a224:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a226:	0005      	movs	r5, r0
 800a228:	07db      	lsls	r3, r3, #31
 800a22a:	d4e2      	bmi.n	800a1f2 <_fflush_r+0xe>
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	059b      	lsls	r3, r3, #22
 800a230:	d4df      	bmi.n	800a1f2 <_fflush_r+0xe>
 800a232:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a234:	f7ff fae6 	bl	8009804 <__retarget_lock_release_recursive>
 800a238:	e7db      	b.n	800a1f2 <_fflush_r+0xe>
	...

0800a23c <__swhatbuf_r>:
 800a23c:	b570      	push	{r4, r5, r6, lr}
 800a23e:	000e      	movs	r6, r1
 800a240:	001d      	movs	r5, r3
 800a242:	230e      	movs	r3, #14
 800a244:	5ec9      	ldrsh	r1, [r1, r3]
 800a246:	0014      	movs	r4, r2
 800a248:	b096      	sub	sp, #88	@ 0x58
 800a24a:	2900      	cmp	r1, #0
 800a24c:	da0c      	bge.n	800a268 <__swhatbuf_r+0x2c>
 800a24e:	89b2      	ldrh	r2, [r6, #12]
 800a250:	2380      	movs	r3, #128	@ 0x80
 800a252:	0011      	movs	r1, r2
 800a254:	4019      	ands	r1, r3
 800a256:	421a      	tst	r2, r3
 800a258:	d114      	bne.n	800a284 <__swhatbuf_r+0x48>
 800a25a:	2380      	movs	r3, #128	@ 0x80
 800a25c:	00db      	lsls	r3, r3, #3
 800a25e:	2000      	movs	r0, #0
 800a260:	6029      	str	r1, [r5, #0]
 800a262:	6023      	str	r3, [r4, #0]
 800a264:	b016      	add	sp, #88	@ 0x58
 800a266:	bd70      	pop	{r4, r5, r6, pc}
 800a268:	466a      	mov	r2, sp
 800a26a:	f000 f865 	bl	800a338 <_fstat_r>
 800a26e:	2800      	cmp	r0, #0
 800a270:	dbed      	blt.n	800a24e <__swhatbuf_r+0x12>
 800a272:	23f0      	movs	r3, #240	@ 0xf0
 800a274:	9901      	ldr	r1, [sp, #4]
 800a276:	021b      	lsls	r3, r3, #8
 800a278:	4019      	ands	r1, r3
 800a27a:	4b04      	ldr	r3, [pc, #16]	@ (800a28c <__swhatbuf_r+0x50>)
 800a27c:	18c9      	adds	r1, r1, r3
 800a27e:	424b      	negs	r3, r1
 800a280:	4159      	adcs	r1, r3
 800a282:	e7ea      	b.n	800a25a <__swhatbuf_r+0x1e>
 800a284:	2100      	movs	r1, #0
 800a286:	2340      	movs	r3, #64	@ 0x40
 800a288:	e7e9      	b.n	800a25e <__swhatbuf_r+0x22>
 800a28a:	46c0      	nop			@ (mov r8, r8)
 800a28c:	ffffe000 	.word	0xffffe000

0800a290 <__smakebuf_r>:
 800a290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a292:	2602      	movs	r6, #2
 800a294:	898b      	ldrh	r3, [r1, #12]
 800a296:	0005      	movs	r5, r0
 800a298:	000c      	movs	r4, r1
 800a29a:	b085      	sub	sp, #20
 800a29c:	4233      	tst	r3, r6
 800a29e:	d007      	beq.n	800a2b0 <__smakebuf_r+0x20>
 800a2a0:	0023      	movs	r3, r4
 800a2a2:	3347      	adds	r3, #71	@ 0x47
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	6123      	str	r3, [r4, #16]
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	6163      	str	r3, [r4, #20]
 800a2ac:	b005      	add	sp, #20
 800a2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2b0:	ab03      	add	r3, sp, #12
 800a2b2:	aa02      	add	r2, sp, #8
 800a2b4:	f7ff ffc2 	bl	800a23c <__swhatbuf_r>
 800a2b8:	9f02      	ldr	r7, [sp, #8]
 800a2ba:	9001      	str	r0, [sp, #4]
 800a2bc:	0039      	movs	r1, r7
 800a2be:	0028      	movs	r0, r5
 800a2c0:	f7fe ff26 	bl	8009110 <_malloc_r>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d108      	bne.n	800a2da <__smakebuf_r+0x4a>
 800a2c8:	220c      	movs	r2, #12
 800a2ca:	5ea3      	ldrsh	r3, [r4, r2]
 800a2cc:	059a      	lsls	r2, r3, #22
 800a2ce:	d4ed      	bmi.n	800a2ac <__smakebuf_r+0x1c>
 800a2d0:	2203      	movs	r2, #3
 800a2d2:	4393      	bics	r3, r2
 800a2d4:	431e      	orrs	r6, r3
 800a2d6:	81a6      	strh	r6, [r4, #12]
 800a2d8:	e7e2      	b.n	800a2a0 <__smakebuf_r+0x10>
 800a2da:	2380      	movs	r3, #128	@ 0x80
 800a2dc:	89a2      	ldrh	r2, [r4, #12]
 800a2de:	6020      	str	r0, [r4, #0]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	81a3      	strh	r3, [r4, #12]
 800a2e4:	9b03      	ldr	r3, [sp, #12]
 800a2e6:	6120      	str	r0, [r4, #16]
 800a2e8:	6167      	str	r7, [r4, #20]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00c      	beq.n	800a308 <__smakebuf_r+0x78>
 800a2ee:	0028      	movs	r0, r5
 800a2f0:	230e      	movs	r3, #14
 800a2f2:	5ee1      	ldrsh	r1, [r4, r3]
 800a2f4:	f000 f832 	bl	800a35c <_isatty_r>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d005      	beq.n	800a308 <__smakebuf_r+0x78>
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	89a2      	ldrh	r2, [r4, #12]
 800a300:	439a      	bics	r2, r3
 800a302:	3b02      	subs	r3, #2
 800a304:	4313      	orrs	r3, r2
 800a306:	81a3      	strh	r3, [r4, #12]
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	9a01      	ldr	r2, [sp, #4]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	81a3      	strh	r3, [r4, #12]
 800a310:	e7cc      	b.n	800a2ac <__smakebuf_r+0x1c>

0800a312 <memmove>:
 800a312:	b510      	push	{r4, lr}
 800a314:	4288      	cmp	r0, r1
 800a316:	d902      	bls.n	800a31e <memmove+0xc>
 800a318:	188b      	adds	r3, r1, r2
 800a31a:	4298      	cmp	r0, r3
 800a31c:	d308      	bcc.n	800a330 <memmove+0x1e>
 800a31e:	2300      	movs	r3, #0
 800a320:	429a      	cmp	r2, r3
 800a322:	d007      	beq.n	800a334 <memmove+0x22>
 800a324:	5ccc      	ldrb	r4, [r1, r3]
 800a326:	54c4      	strb	r4, [r0, r3]
 800a328:	3301      	adds	r3, #1
 800a32a:	e7f9      	b.n	800a320 <memmove+0xe>
 800a32c:	5c8b      	ldrb	r3, [r1, r2]
 800a32e:	5483      	strb	r3, [r0, r2]
 800a330:	3a01      	subs	r2, #1
 800a332:	d2fb      	bcs.n	800a32c <memmove+0x1a>
 800a334:	bd10      	pop	{r4, pc}
	...

0800a338 <_fstat_r>:
 800a338:	2300      	movs	r3, #0
 800a33a:	b570      	push	{r4, r5, r6, lr}
 800a33c:	4d06      	ldr	r5, [pc, #24]	@ (800a358 <_fstat_r+0x20>)
 800a33e:	0004      	movs	r4, r0
 800a340:	0008      	movs	r0, r1
 800a342:	0011      	movs	r1, r2
 800a344:	602b      	str	r3, [r5, #0]
 800a346:	f7f7 f9aa 	bl	800169e <_fstat>
 800a34a:	1c43      	adds	r3, r0, #1
 800a34c:	d103      	bne.n	800a356 <_fstat_r+0x1e>
 800a34e:	682b      	ldr	r3, [r5, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d000      	beq.n	800a356 <_fstat_r+0x1e>
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	bd70      	pop	{r4, r5, r6, pc}
 800a358:	200007b0 	.word	0x200007b0

0800a35c <_isatty_r>:
 800a35c:	2300      	movs	r3, #0
 800a35e:	b570      	push	{r4, r5, r6, lr}
 800a360:	4d06      	ldr	r5, [pc, #24]	@ (800a37c <_isatty_r+0x20>)
 800a362:	0004      	movs	r4, r0
 800a364:	0008      	movs	r0, r1
 800a366:	602b      	str	r3, [r5, #0]
 800a368:	f7f7 f9a7 	bl	80016ba <_isatty>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d103      	bne.n	800a378 <_isatty_r+0x1c>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d000      	beq.n	800a378 <_isatty_r+0x1c>
 800a376:	6023      	str	r3, [r4, #0]
 800a378:	bd70      	pop	{r4, r5, r6, pc}
 800a37a:	46c0      	nop			@ (mov r8, r8)
 800a37c:	200007b0 	.word	0x200007b0

0800a380 <memchr>:
 800a380:	b2c9      	uxtb	r1, r1
 800a382:	1882      	adds	r2, r0, r2
 800a384:	4290      	cmp	r0, r2
 800a386:	d101      	bne.n	800a38c <memchr+0xc>
 800a388:	2000      	movs	r0, #0
 800a38a:	4770      	bx	lr
 800a38c:	7803      	ldrb	r3, [r0, #0]
 800a38e:	428b      	cmp	r3, r1
 800a390:	d0fb      	beq.n	800a38a <memchr+0xa>
 800a392:	3001      	adds	r0, #1
 800a394:	e7f6      	b.n	800a384 <memchr+0x4>

0800a396 <memcpy>:
 800a396:	2300      	movs	r3, #0
 800a398:	b510      	push	{r4, lr}
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d100      	bne.n	800a3a0 <memcpy+0xa>
 800a39e:	bd10      	pop	{r4, pc}
 800a3a0:	5ccc      	ldrb	r4, [r1, r3]
 800a3a2:	54c4      	strb	r4, [r0, r3]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	e7f8      	b.n	800a39a <memcpy+0x4>

0800a3a8 <_realloc_r>:
 800a3a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3aa:	0006      	movs	r6, r0
 800a3ac:	000c      	movs	r4, r1
 800a3ae:	0015      	movs	r5, r2
 800a3b0:	2900      	cmp	r1, #0
 800a3b2:	d105      	bne.n	800a3c0 <_realloc_r+0x18>
 800a3b4:	0011      	movs	r1, r2
 800a3b6:	f7fe feab 	bl	8009110 <_malloc_r>
 800a3ba:	0004      	movs	r4, r0
 800a3bc:	0020      	movs	r0, r4
 800a3be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a3c0:	2a00      	cmp	r2, #0
 800a3c2:	d103      	bne.n	800a3cc <_realloc_r+0x24>
 800a3c4:	f7ff fa20 	bl	8009808 <_free_r>
 800a3c8:	002c      	movs	r4, r5
 800a3ca:	e7f7      	b.n	800a3bc <_realloc_r+0x14>
 800a3cc:	f000 f81c 	bl	800a408 <_malloc_usable_size_r>
 800a3d0:	0007      	movs	r7, r0
 800a3d2:	4285      	cmp	r5, r0
 800a3d4:	d802      	bhi.n	800a3dc <_realloc_r+0x34>
 800a3d6:	0843      	lsrs	r3, r0, #1
 800a3d8:	42ab      	cmp	r3, r5
 800a3da:	d3ef      	bcc.n	800a3bc <_realloc_r+0x14>
 800a3dc:	0029      	movs	r1, r5
 800a3de:	0030      	movs	r0, r6
 800a3e0:	f7fe fe96 	bl	8009110 <_malloc_r>
 800a3e4:	9001      	str	r0, [sp, #4]
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d101      	bne.n	800a3ee <_realloc_r+0x46>
 800a3ea:	9c01      	ldr	r4, [sp, #4]
 800a3ec:	e7e6      	b.n	800a3bc <_realloc_r+0x14>
 800a3ee:	002a      	movs	r2, r5
 800a3f0:	42bd      	cmp	r5, r7
 800a3f2:	d900      	bls.n	800a3f6 <_realloc_r+0x4e>
 800a3f4:	003a      	movs	r2, r7
 800a3f6:	0021      	movs	r1, r4
 800a3f8:	9801      	ldr	r0, [sp, #4]
 800a3fa:	f7ff ffcc 	bl	800a396 <memcpy>
 800a3fe:	0021      	movs	r1, r4
 800a400:	0030      	movs	r0, r6
 800a402:	f7ff fa01 	bl	8009808 <_free_r>
 800a406:	e7f0      	b.n	800a3ea <_realloc_r+0x42>

0800a408 <_malloc_usable_size_r>:
 800a408:	1f0b      	subs	r3, r1, #4
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	1f18      	subs	r0, r3, #4
 800a40e:	2b00      	cmp	r3, #0
 800a410:	da01      	bge.n	800a416 <_malloc_usable_size_r+0xe>
 800a412:	580b      	ldr	r3, [r1, r0]
 800a414:	18c0      	adds	r0, r0, r3
 800a416:	4770      	bx	lr

0800a418 <_init>:
 800a418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41a:	46c0      	nop			@ (mov r8, r8)
 800a41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a41e:	bc08      	pop	{r3}
 800a420:	469e      	mov	lr, r3
 800a422:	4770      	bx	lr

0800a424 <_fini>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	46c0      	nop			@ (mov r8, r8)
 800a428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42a:	bc08      	pop	{r3}
 800a42c:	469e      	mov	lr, r3
 800a42e:	4770      	bx	lr
