
MicroSD - SPI - FatFs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a788  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b50  0800a848  0800a848  0000b848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b398  0800b398  0000d068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800b398  0800b398  0000d068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800b398  0800b398  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b398  0800b398  0000c398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b39c  0800b39c  0000c39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800b3a0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d0  20000068  0800b408  0000d068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000838  0800b408  0000d838  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3fc  00000000  00000000  0000d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b4e  00000000  00000000  0001c48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0001efe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a64  00000000  00000000  0001fd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000148dd  00000000  00000000  000207c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014453  00000000  00000000  000350a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e93b  00000000  00000000  000494f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7e2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a4  00000000  00000000  000b7e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000bb718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a830 	.word	0x0800a830

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800a830 	.word	0x0800a830

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int fd, unsigned char *buf, int len) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d002      	beq.n	8000270 <_write+0x18>
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	2b02      	cmp	r3, #2
 800026e:	d106      	bne.n	800027e <_write+0x26>
    HAL_UART_Transmit(&huart2, buf, len, 999);  // Print to the UART
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	b29a      	uxth	r2, r3
 8000274:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <_write+0x30>)
 8000276:	68b9      	ldr	r1, [r7, #8]
 8000278:	4804      	ldr	r0, [pc, #16]	@ (800028c <_write+0x34>)
 800027a:	f003 ffbb 	bl	80041f4 <HAL_UART_Transmit>
  }
  return len;
 800027e:	687b      	ldr	r3, [r7, #4]
}
 8000280:	0018      	movs	r0, r3
 8000282:	46bd      	mov	sp, r7
 8000284:	b004      	add	sp, #16
 8000286:	bd80      	pop	{r7, pc}
 8000288:	000003e7 	.word	0x000003e7
 800028c:	20000170 	.word	0x20000170

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b09b      	sub	sp, #108	@ 0x6c
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f001 fc97 	bl	8001bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f829 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f8fb 	bl	8000498 <MX_GPIO_Init>
  MX_DMA_Init();
 80002a2:	f000 f8db 	bl	800045c <MX_DMA_Init>
  MX_SPI1_Init();
 80002a6:	f000 f86b 	bl	8000380 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80002aa:	f000 f8a7 	bl	80003fc <MX_USART2_UART_Init>

  const char *writingFolder;
  char folder_path[64];
  char fileName[32];

  writingFolder = get_folder_name_and_signal_led(); //Either "Test" or "Flight"
 80002ae:	f000 fde9 	bl	8000e84 <get_folder_name_and_signal_led>
 80002b2:	0003      	movs	r3, r0
 80002b4:	667b      	str	r3, [r7, #100]	@ 0x64
  sd_mount();
 80002b6:	f000 fa6d 	bl	8000794 <sd_mount>
  sd_list_files();
 80002ba:	f000 fc6b 	bl	8000b94 <sd_list_files>

  get_folder_path(folder_path, sizeof(folder_path), writingFolder);
 80002be:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80002c0:	2424      	movs	r4, #36	@ 0x24
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	2140      	movs	r1, #64	@ 0x40
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 fe0a 	bl	8000ee0 <get_folder_path>
  get_file_name(fileName, sizeof(fileName), writingFolder, folder_path);
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80002d0:	1d38      	adds	r0, r7, #4
 80002d2:	2120      	movs	r1, #32
 80002d4:	f000 fe2a 	bl	8000f2c <get_file_name>

  sd_write_file_with_directory(fileName, "Row,Data\n1,1\n2,2\n3,3\n4,4\n5,5\n", folder_path);
 80002d8:	193a      	adds	r2, r7, r4
 80002da:	4904      	ldr	r1, [pc, #16]	@ (80002ec <main+0x5c>)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	0018      	movs	r0, r3
 80002e0:	f000 fd24 	bl	8000d2c <sd_write_file_with_directory>
  sd_unmount();
 80002e4:	f000 fb1e 	bl	8000924 <sd_unmount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e8:	46c0      	nop			@ (mov r8, r8)
 80002ea:	e7fd      	b.n	80002e8 <main+0x58>
 80002ec:	0800a848 	.word	0x0800a848

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b091      	sub	sp, #68	@ 0x44
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	2410      	movs	r4, #16
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	0018      	movs	r0, r3
 80002fc:	2330      	movs	r3, #48	@ 0x30
 80002fe:	001a      	movs	r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	f009 fbf7 	bl	8009af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000306:	003b      	movs	r3, r7
 8000308:	0018      	movs	r0, r3
 800030a:	2310      	movs	r3, #16
 800030c:	001a      	movs	r2, r3
 800030e:	2100      	movs	r1, #0
 8000310:	f009 fbf0 	bl	8009af4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000314:	0021      	movs	r1, r4
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2201      	movs	r2, #1
 800031a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2201      	movs	r2, #1
 8000320:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2202      	movs	r2, #2
 8000326:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2280      	movs	r2, #128	@ 0x80
 800032c:	0252      	lsls	r2, r2, #9
 800032e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2280      	movs	r2, #128	@ 0x80
 8000334:	0312      	lsls	r2, r2, #12
 8000336:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2200      	movs	r2, #0
 800033c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	187b      	adds	r3, r7, r1
 8000340:	0018      	movs	r0, r3
 8000342:	f002 f8a9 	bl	8002498 <HAL_RCC_OscConfig>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800034a:	f000 f903 	bl	8000554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	003b      	movs	r3, r7
 8000350:	2207      	movs	r2, #7
 8000352:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	003b      	movs	r3, r7
 8000356:	2202      	movs	r2, #2
 8000358:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	003b      	movs	r3, r7
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	003b      	movs	r3, r7
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000366:	003b      	movs	r3, r7
 8000368:	2101      	movs	r1, #1
 800036a:	0018      	movs	r0, r3
 800036c:	f002 fbae 	bl	8002acc <HAL_RCC_ClockConfig>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000374:	f000 f8ee 	bl	8000554 <Error_Handler>
  }
}
 8000378:	46c0      	nop			@ (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b011      	add	sp, #68	@ 0x44
 800037e:	bd90      	pop	{r4, r7, pc}

08000380 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000384:	4b1b      	ldr	r3, [pc, #108]	@ (80003f4 <MX_SPI1_Init+0x74>)
 8000386:	4a1c      	ldr	r2, [pc, #112]	@ (80003f8 <MX_SPI1_Init+0x78>)
 8000388:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800038a:	4b1a      	ldr	r3, [pc, #104]	@ (80003f4 <MX_SPI1_Init+0x74>)
 800038c:	2282      	movs	r2, #130	@ 0x82
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000392:	4b18      	ldr	r3, [pc, #96]	@ (80003f4 <MX_SPI1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000398:	4b16      	ldr	r3, [pc, #88]	@ (80003f4 <MX_SPI1_Init+0x74>)
 800039a:	22e0      	movs	r2, #224	@ 0xe0
 800039c:	00d2      	lsls	r2, r2, #3
 800039e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a0:	4b14      	ldr	r3, [pc, #80]	@ (80003f4 <MX_SPI1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003a6:	4b13      	ldr	r3, [pc, #76]	@ (80003f4 <MX_SPI1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ac:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <MX_SPI1_Init+0x74>)
 80003ae:	2280      	movs	r2, #128	@ 0x80
 80003b0:	0092      	lsls	r2, r2, #2
 80003b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <MX_SPI1_Init+0x74>)
 80003b6:	2218      	movs	r2, #24
 80003b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	@ (80003f4 <MX_SPI1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <MX_SPI1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	@ (80003f4 <MX_SPI1_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003cc:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <MX_SPI1_Init+0x74>)
 80003ce:	2207      	movs	r2, #7
 80003d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	@ (80003f4 <MX_SPI1_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <MX_SPI1_Init+0x74>)
 80003da:	2208      	movs	r2, #8
 80003dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003de:	4b05      	ldr	r3, [pc, #20]	@ (80003f4 <MX_SPI1_Init+0x74>)
 80003e0:	0018      	movs	r0, r3
 80003e2:	f002 fcb7 	bl	8002d54 <HAL_SPI_Init>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003ea:	f000 f8b3 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000084 	.word	0x20000084
 80003f8:	40013000 	.word	0x40013000

080003fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000400:	4b14      	ldr	r3, [pc, #80]	@ (8000454 <MX_USART2_UART_Init+0x58>)
 8000402:	4a15      	ldr	r2, [pc, #84]	@ (8000458 <MX_USART2_UART_Init+0x5c>)
 8000404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000406:	4b13      	ldr	r3, [pc, #76]	@ (8000454 <MX_USART2_UART_Init+0x58>)
 8000408:	22e1      	movs	r2, #225	@ 0xe1
 800040a:	0252      	lsls	r2, r2, #9
 800040c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800040e:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <MX_USART2_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <MX_USART2_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <MX_USART2_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000420:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <MX_USART2_UART_Init+0x58>)
 8000422:	220c      	movs	r2, #12
 8000424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <MX_USART2_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800042c:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <MX_USART2_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000432:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <MX_USART2_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <MX_USART2_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800043e:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <MX_USART2_UART_Init+0x58>)
 8000440:	0018      	movs	r0, r3
 8000442:	f003 fe83 	bl	800414c <HAL_UART_Init>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d001      	beq.n	800044e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800044a:	f000 f883 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000170 	.word	0x20000170
 8000458:	40004400 	.word	0x40004400

0800045c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_DMA_Init+0x38>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <MX_DMA_Init+0x38>)
 8000468:	2101      	movs	r1, #1
 800046a:	430a      	orrs	r2, r1
 800046c:	615a      	str	r2, [r3, #20]
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_DMA_Init+0x38>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	2201      	movs	r2, #1
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200a      	movs	r0, #10
 8000480:	f001 fcb2 	bl	8001de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000484:	200a      	movs	r0, #10
 8000486:	f001 fcc4 	bl	8001e12 <HAL_NVIC_EnableIRQ>

}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	40021000 	.word	0x40021000

08000498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b089      	sub	sp, #36	@ 0x24
 800049c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	240c      	movs	r4, #12
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	2314      	movs	r3, #20
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f009 fb23 	bl	8009af4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ae:	4b27      	ldr	r3, [pc, #156]	@ (800054c <MX_GPIO_Init+0xb4>)
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	4b26      	ldr	r3, [pc, #152]	@ (800054c <MX_GPIO_Init+0xb4>)
 80004b4:	2180      	movs	r1, #128	@ 0x80
 80004b6:	03c9      	lsls	r1, r1, #15
 80004b8:	430a      	orrs	r2, r1
 80004ba:	615a      	str	r2, [r3, #20]
 80004bc:	4b23      	ldr	r3, [pc, #140]	@ (800054c <MX_GPIO_Init+0xb4>)
 80004be:	695a      	ldr	r2, [r3, #20]
 80004c0:	2380      	movs	r3, #128	@ 0x80
 80004c2:	03db      	lsls	r3, r3, #15
 80004c4:	4013      	ands	r3, r2
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b20      	ldr	r3, [pc, #128]	@ (800054c <MX_GPIO_Init+0xb4>)
 80004cc:	695a      	ldr	r2, [r3, #20]
 80004ce:	4b1f      	ldr	r3, [pc, #124]	@ (800054c <MX_GPIO_Init+0xb4>)
 80004d0:	2180      	movs	r1, #128	@ 0x80
 80004d2:	0289      	lsls	r1, r1, #10
 80004d4:	430a      	orrs	r2, r1
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <MX_GPIO_Init+0xb4>)
 80004da:	695a      	ldr	r2, [r3, #20]
 80004dc:	2380      	movs	r3, #128	@ 0x80
 80004de:	029b      	lsls	r3, r3, #10
 80004e0:	4013      	ands	r3, r2
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80004e6:	2390      	movs	r3, #144	@ 0x90
 80004e8:	05db      	lsls	r3, r3, #23
 80004ea:	2201      	movs	r2, #1
 80004ec:	2110      	movs	r1, #16
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 ffb4 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80004f4:	0021      	movs	r1, r4
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2210      	movs	r2, #16
 80004fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2201      	movs	r2, #1
 8000500:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2203      	movs	r2, #3
 800050c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800050e:	187a      	adds	r2, r7, r1
 8000510:	2390      	movs	r3, #144	@ 0x90
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	0011      	movs	r1, r2
 8000516:	0018      	movs	r0, r3
 8000518:	f001 fe30 	bl	800217c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  RCC->AHBENR |= (1<<19); // Activar reloj de Perifericos PC
 800051c:	4b0b      	ldr	r3, [pc, #44]	@ (800054c <MX_GPIO_Init+0xb4>)
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <MX_GPIO_Init+0xb4>)
 8000522:	2180      	movs	r1, #128	@ 0x80
 8000524:	0309      	lsls	r1, r1, #12
 8000526:	430a      	orrs	r2, r1
 8000528:	615a      	str	r2, [r3, #20]

  GPIOC->MODER |= (1<<2*8); //PC8 como output, led de señal
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <MX_GPIO_Init+0xb8>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <MX_GPIO_Init+0xb8>)
 8000530:	2180      	movs	r1, #128	@ 0x80
 8000532:	0249      	lsls	r1, r1, #9
 8000534:	430a      	orrs	r2, r1
 8000536:	601a      	str	r2, [r3, #0]
  GPIOC->MODER &= ~(3<<2*0); //PC0 como input selección de modo de prueba y vuelo
 8000538:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <MX_GPIO_Init+0xb8>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b04      	ldr	r3, [pc, #16]	@ (8000550 <MX_GPIO_Init+0xb8>)
 800053e:	2103      	movs	r1, #3
 8000540:	438a      	bics	r2, r1
 8000542:	601a      	str	r2, [r3, #0]

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b009      	add	sp, #36	@ 0x24
 800054a:	bd90      	pop	{r4, r7, pc}
 800054c:	40021000 	.word	0x40021000
 8000550:	48000800 	.word	0x48000800

08000554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
}
 800055a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055c:	46c0      	nop			@ (mov r8, r8)
 800055e:	e7fd      	b.n	800055c <Error_Handler+0x8>

08000560 <SD_disk_status>:
#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"


DSTATUS SD_disk_status(BYTE drv) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	0002      	movs	r2, r0
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	701a      	strb	r2, [r3, #0]
    if (drv != 0)
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SD_disk_status+0x18>
        return STA_NOINIT;
 8000574:	2301      	movs	r3, #1
 8000576:	e000      	b.n	800057a <SD_disk_status+0x1a>
    return 0;
 8000578:	2300      	movs	r3, #0
}
 800057a:	0018      	movs	r0, r3
 800057c:	46bd      	mov	sp, r7
 800057e:	b002      	add	sp, #8
 8000580:	bd80      	pop	{r7, pc}

08000582 <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	0002      	movs	r2, r0
 800058a:	1dfb      	adds	r3, r7, #7
 800058c:	701a      	strb	r2, [r3, #0]
    if (drv != 0)
 800058e:	1dfb      	adds	r3, r7, #7
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SD_disk_initialize+0x18>
        return STA_NOINIT;
 8000596:	2301      	movs	r3, #1
 8000598:	e005      	b.n	80005a6 <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 800059a:	f000 fe1b 	bl	80011d4 <SD_SPI_Init>
 800059e:	0003      	movs	r3, r0
 80005a0:	1e5a      	subs	r2, r3, #1
 80005a2:	4193      	sbcs	r3, r2
 80005a4:	b2db      	uxtb	r3, r3
}
 80005a6:	0018      	movs	r0, r3
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b002      	add	sp, #8
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60b9      	str	r1, [r7, #8]
 80005b8:	607a      	str	r2, [r7, #4]
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	210f      	movs	r1, #15
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	1c02      	adds	r2, r0, #0
 80005c2:	701a      	strb	r2, [r3, #0]
    if (pdrv != 0 || count == 0)
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <SD_disk_read+0x22>
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d101      	bne.n	80005d6 <SD_disk_read+0x26>
        return RES_PARERR;
 80005d2:	2304      	movs	r3, #4
 80005d4:	e00f      	b.n	80005f6 <SD_disk_read+0x46>
    if (!card_initialized) return RES_NOTRDY;
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <SD_disk_read+0x50>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d101      	bne.n	80005e2 <SD_disk_read+0x32>
 80005de:	2303      	movs	r3, #3
 80005e0:	e009      	b.n	80005f6 <SD_disk_read+0x46>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	6879      	ldr	r1, [r7, #4]
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 ff25 	bl	8001438 <SD_ReadBlocks>
 80005ee:	0003      	movs	r3, r0
 80005f0:	1e5a      	subs	r2, r3, #1
 80005f2:	4193      	sbcs	r3, r2
 80005f4:	b2db      	uxtb	r3, r3
}
 80005f6:	0018      	movs	r0, r3
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b004      	add	sp, #16
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	200004b5 	.word	0x200004b5

08000604 <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  BYTE *buff, DWORD sector, UINT count) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	210f      	movs	r1, #15
 8000612:	187b      	adds	r3, r7, r1
 8000614:	1c02      	adds	r2, r0, #0
 8000616:	701a      	strb	r2, [r3, #0]
    if (pdrv || !count) return RES_PARERR;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d102      	bne.n	8000626 <SD_disk_write+0x22>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d101      	bne.n	800062a <SD_disk_write+0x26>
 8000626:	2304      	movs	r3, #4
 8000628:	e00f      	b.n	800064a <SD_disk_write+0x46>
    if (!card_initialized) return RES_NOTRDY;
 800062a:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <SD_disk_write+0x50>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d101      	bne.n	8000636 <SD_disk_write+0x32>
 8000632:	2303      	movs	r3, #3
 8000634:	e009      	b.n	800064a <SD_disk_write+0x46>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	0018      	movs	r0, r3
 800063e:	f000 ffed 	bl	800161c <SD_WriteBlocks>
 8000642:	0003      	movs	r3, r0
 8000644:	1e5a      	subs	r2, r3, #1
 8000646:	4193      	sbcs	r3, r2
 8000648:	b2db      	uxtb	r3, r3
}
 800064a:	0018      	movs	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	b004      	add	sp, #16
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	200004b5 	.word	0x200004b5

08000658 <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	603a      	str	r2, [r7, #0]
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	1c02      	adds	r2, r0, #0
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	1dbb      	adds	r3, r7, #6
 8000668:	1c0a      	adds	r2, r1, #0
 800066a:	701a      	strb	r2, [r3, #0]
    if (pdrv != 0)
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SD_disk_ioctl+0x20>
        return RES_PARERR;
 8000674:	2304      	movs	r3, #4
 8000676:	e020      	b.n	80006ba <SD_disk_ioctl+0x62>

    switch (cmd) {
 8000678:	1dbb      	adds	r3, r7, #6
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b03      	cmp	r3, #3
 800067e:	d016      	beq.n	80006ae <SD_disk_ioctl+0x56>
 8000680:	dc1a      	bgt.n	80006b8 <SD_disk_ioctl+0x60>
 8000682:	2b02      	cmp	r3, #2
 8000684:	d007      	beq.n	8000696 <SD_disk_ioctl+0x3e>
 8000686:	dc17      	bgt.n	80006b8 <SD_disk_ioctl+0x60>
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <SD_disk_ioctl+0x3a>
 800068c:	2b01      	cmp	r3, #1
 800068e:	d008      	beq.n	80006a2 <SD_disk_ioctl+0x4a>
 8000690:	e012      	b.n	80006b8 <SD_disk_ioctl+0x60>
    case CTRL_SYNC:
        return RES_OK;
 8000692:	2300      	movs	r3, #0
 8000694:	e011      	b.n	80006ba <SD_disk_ioctl+0x62>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2280      	movs	r2, #128	@ 0x80
 800069a:	0092      	lsls	r2, r2, #2
 800069c:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 800069e:	2300      	movs	r3, #0
 80006a0:	e00b      	b.n	80006ba <SD_disk_ioctl+0x62>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	2280      	movs	r2, #128	@ 0x80
 80006a6:	0252      	lsls	r2, r2, #9
 80006a8:	601a      	str	r2, [r3, #0]
        return RES_OK;
 80006aa:	2300      	movs	r3, #0
 80006ac:	e005      	b.n	80006ba <SD_disk_ioctl+0x62>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	2201      	movs	r2, #1
 80006b2:	601a      	str	r2, [r3, #0]
        return RES_OK;
 80006b4:	2300      	movs	r3, #0
 80006b6:	e000      	b.n	80006ba <SD_disk_ioctl+0x62>
    default:
        return RES_PARERR;
 80006b8:	2304      	movs	r3, #4
    }
}
 80006ba:	0018      	movs	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	b002      	add	sp, #8
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <sd_format>:
#include "ffconf.h"

char sd_path[4];
FATFS fs;

int sd_format(void) {
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
	// Pre-mount required for legacy FatFS
	f_mount(&fs, sd_path, 0);
 80006ca:	4910      	ldr	r1, [pc, #64]	@ (800070c <sd_format+0x48>)
 80006cc:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <sd_format+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	0018      	movs	r0, r3
 80006d2:	f007 f8e1 	bl	8007898 <f_mount>

	FRESULT res;
	res = f_mkfs(sd_path, 1, 0);
 80006d6:	1dfc      	adds	r4, r7, #7
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <sd_format+0x48>)
 80006da:	2200      	movs	r2, #0
 80006dc:	2101      	movs	r1, #1
 80006de:	0018      	movs	r0, r3
 80006e0:	f008 f912 	bl	8008908 <f_mkfs>
 80006e4:	0003      	movs	r3, r0
 80006e6:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) {
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d006      	beq.n	80006fe <sd_format+0x3a>
		printf("Format failed: f_mkfs returned %d\r\n", res);
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	781a      	ldrb	r2, [r3, #0]
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <sd_format+0x50>)
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f009 f869 	bl	80097d0 <iprintf>
	}
		return res;
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	781b      	ldrb	r3, [r3, #0]
}
 8000702:	0018      	movs	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	b003      	add	sp, #12
 8000708:	bd90      	pop	{r4, r7, pc}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	200001f8 	.word	0x200001f8
 8000710:	200001fc 	.word	0x200001fc
 8000714:	0800a868 	.word	0x0800a868

08000718 <sd_get_space_kb>:

int sd_get_space_kb(void) {
 8000718:	b5b0      	push	{r4, r5, r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
	FATFS *pfs;
	DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
	FRESULT res = f_getfree(sd_path, &fre_clust, &pfs);
 800071e:	251f      	movs	r5, #31
 8000720:	197c      	adds	r4, r7, r5
 8000722:	2308      	movs	r3, #8
 8000724:	18fa      	adds	r2, r7, r3
 8000726:	1d39      	adds	r1, r7, #4
 8000728:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <sd_get_space_kb+0x70>)
 800072a:	0018      	movs	r0, r3
 800072c:	f008 f808 	bl	8008740 <f_getfree>
 8000730:	0003      	movs	r3, r0
 8000732:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8000734:	197b      	adds	r3, r7, r5
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d002      	beq.n	8000742 <sd_get_space_kb+0x2a>
 800073c:	197b      	adds	r3, r7, r5
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	e01d      	b.n	800077e <sd_get_space_kb+0x66>

	tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	2385      	movs	r3, #133	@ 0x85
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	58d3      	ldr	r3, [r2, r3]
 800074a:	3b02      	subs	r3, #2
 800074c:	68ba      	ldr	r2, [r7, #8]
 800074e:	490f      	ldr	r1, [pc, #60]	@ (800078c <sd_get_space_kb+0x74>)
 8000750:	5c52      	ldrb	r2, [r2, r1]
 8000752:	4353      	muls	r3, r2
 8000754:	61bb      	str	r3, [r7, #24]
	fre_sect = fre_clust * pfs->csize;
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	4a0c      	ldr	r2, [pc, #48]	@ (800078c <sd_get_space_kb+0x74>)
 800075a:	5c9b      	ldrb	r3, [r3, r2]
 800075c:	001a      	movs	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4353      	muls	r3, r2
 8000762:	617b      	str	r3, [r7, #20]
	total_kb = tot_sect / 2;
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	085b      	lsrs	r3, r3, #1
 8000768:	613b      	str	r3, [r7, #16]
	free_kb = fre_sect / 2;
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	085b      	lsrs	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
	printf("Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb);
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	6939      	ldr	r1, [r7, #16]
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <sd_get_space_kb+0x78>)
 8000776:	0018      	movs	r0, r3
 8000778:	f009 f82a 	bl	80097d0 <iprintf>
	return FR_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	0018      	movs	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	b008      	add	sp, #32
 8000784:	bdb0      	pop	{r4, r5, r7, pc}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	200001f8 	.word	0x200001f8
 800078c:	00000202 	.word	0x00000202
 8000790:	0800a88c 	.word	0x0800a88c

08000794 <sd_mount>:

int sd_mount(void) {
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
	FRESULT res;
	extern uint8_t sd_is_sdhc(void);

	printf("Linking SD driver...\r\n");
 800079a:	4b4f      	ldr	r3, [pc, #316]	@ (80008d8 <sd_mount+0x144>)
 800079c:	0018      	movs	r0, r3
 800079e:	f009 f87d 	bl	800989c <puts>
	if (FATFS_LinkDriver(&SD_Driver, sd_path) != 0) {
 80007a2:	4a4e      	ldr	r2, [pc, #312]	@ (80008dc <sd_mount+0x148>)
 80007a4:	4b4e      	ldr	r3, [pc, #312]	@ (80008e0 <sd_mount+0x14c>)
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f008 fddb 	bl	8009364 <FATFS_LinkDriver>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d005      	beq.n	80007be <sd_mount+0x2a>
		printf("FATFS_LinkDriver failed\n");
 80007b2:	4b4c      	ldr	r3, [pc, #304]	@ (80008e4 <sd_mount+0x150>)
 80007b4:	0018      	movs	r0, r3
 80007b6:	f009 f871 	bl	800989c <puts>
		return FR_DISK_ERR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e088      	b.n	80008d0 <sd_mount+0x13c>
	}

	printf("Initializing disk...\r\n");
 80007be:	4b4a      	ldr	r3, [pc, #296]	@ (80008e8 <sd_mount+0x154>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f009 f86b 	bl	800989c <puts>
	DSTATUS stat = disk_initialize(0);
 80007c6:	1dfc      	adds	r4, r7, #7
 80007c8:	2000      	movs	r0, #0
 80007ca:	f004 f94b 	bl	8004a64 <disk_initialize>
 80007ce:	0003      	movs	r3, r0
 80007d0:	7023      	strb	r3, [r4, #0]
	if (stat != 0) {
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d00c      	beq.n	80007f4 <sd_mount+0x60>
		printf("disk_initialize failed: 0x%02X\n", stat);
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781a      	ldrb	r2, [r3, #0]
 80007de:	4b43      	ldr	r3, [pc, #268]	@ (80008ec <sd_mount+0x158>)
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f008 fff4 	bl	80097d0 <iprintf>
		printf("FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n");
 80007e8:	4b41      	ldr	r3, [pc, #260]	@ (80008f0 <sd_mount+0x15c>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f009 f856 	bl	800989c <puts>
		return FR_NOT_READY;
 80007f0:	2303      	movs	r3, #3
 80007f2:	e06d      	b.n	80008d0 <sd_mount+0x13c>
	}

	printf("Attempting mount at %s...\r\n", sd_path);
 80007f4:	4a39      	ldr	r2, [pc, #228]	@ (80008dc <sd_mount+0x148>)
 80007f6:	4b3f      	ldr	r3, [pc, #252]	@ (80008f4 <sd_mount+0x160>)
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f008 ffe8 	bl	80097d0 <iprintf>
	res = f_mount(&fs, sd_path, 1);
 8000800:	1dbc      	adds	r4, r7, #6
 8000802:	4936      	ldr	r1, [pc, #216]	@ (80008dc <sd_mount+0x148>)
 8000804:	4b3c      	ldr	r3, [pc, #240]	@ (80008f8 <sd_mount+0x164>)
 8000806:	2201      	movs	r2, #1
 8000808:	0018      	movs	r0, r3
 800080a:	f007 f845 	bl	8007898 <f_mount>
 800080e:	0003      	movs	r3, r0
 8000810:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8000812:	1dbb      	adds	r3, r7, #6
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d115      	bne.n	8000846 <sd_mount+0xb2>
	{
		printf("SD card mounted successfully at %s\r\n", sd_path);
 800081a:	4a30      	ldr	r2, [pc, #192]	@ (80008dc <sd_mount+0x148>)
 800081c:	4b37      	ldr	r3, [pc, #220]	@ (80008fc <sd_mount+0x168>)
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f008 ffd5 	bl	80097d0 <iprintf>
		printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 8000826:	f000 fccb 	bl	80011c0 <sd_is_sdhc>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <sd_mount+0x9e>
 800082e:	4b34      	ldr	r3, [pc, #208]	@ (8000900 <sd_mount+0x16c>)
 8000830:	e000      	b.n	8000834 <sd_mount+0xa0>
 8000832:	4b34      	ldr	r3, [pc, #208]	@ (8000904 <sd_mount+0x170>)
 8000834:	4a34      	ldr	r2, [pc, #208]	@ (8000908 <sd_mount+0x174>)
 8000836:	0019      	movs	r1, r3
 8000838:	0010      	movs	r0, r2
 800083a:	f008 ffc9 	bl	80097d0 <iprintf>

		// Capacity and free space reporting
		sd_get_space_kb();
 800083e:	f7ff ff6b 	bl	8000718 <sd_get_space_kb>
		return FR_OK;
 8000842:	2300      	movs	r3, #0
 8000844:	e044      	b.n	80008d0 <sd_mount+0x13c>
	}

//	 Handle no filesystem by creating one
	if (res == FR_NO_FILESYSTEM)
 8000846:	1dbb      	adds	r3, r7, #6
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b0d      	cmp	r3, #13
 800084c:	d137      	bne.n	80008be <sd_mount+0x12a>
	{
		printf("No filesystem found on SD card. Attempting format...\r\nThis will create 32MB Partition (Most Probably)\r\n");
 800084e:	4b2f      	ldr	r3, [pc, #188]	@ (800090c <sd_mount+0x178>)
 8000850:	0018      	movs	r0, r3
 8000852:	f009 f823 	bl	800989c <puts>
		printf("If you need the full sized SD card, use the computer to format into FAT32\r\n");
 8000856:	4b2e      	ldr	r3, [pc, #184]	@ (8000910 <sd_mount+0x17c>)
 8000858:	0018      	movs	r0, r3
 800085a:	f009 f81f 	bl	800989c <puts>
		sd_format();
 800085e:	f7ff ff31 	bl	80006c4 <sd_format>

		printf("Retrying mount after format...\r\n");
 8000862:	4b2c      	ldr	r3, [pc, #176]	@ (8000914 <sd_mount+0x180>)
 8000864:	0018      	movs	r0, r3
 8000866:	f009 f819 	bl	800989c <puts>
		res = f_mount(&fs, sd_path, 1);
 800086a:	1dbc      	adds	r4, r7, #6
 800086c:	491b      	ldr	r1, [pc, #108]	@ (80008dc <sd_mount+0x148>)
 800086e:	4b22      	ldr	r3, [pc, #136]	@ (80008f8 <sd_mount+0x164>)
 8000870:	2201      	movs	r2, #1
 8000872:	0018      	movs	r0, r3
 8000874:	f007 f810 	bl	8007898 <f_mount>
 8000878:	0003      	movs	r3, r0
 800087a:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800087c:	1dbb      	adds	r3, r7, #6
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d112      	bne.n	80008aa <sd_mount+0x116>
			printf("SD card formatted and mounted successfully.\r\n");
 8000884:	4b24      	ldr	r3, [pc, #144]	@ (8000918 <sd_mount+0x184>)
 8000886:	0018      	movs	r0, r3
 8000888:	f009 f808 	bl	800989c <puts>
			printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 800088c:	f000 fc98 	bl	80011c0 <sd_is_sdhc>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <sd_mount+0x104>
 8000894:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <sd_mount+0x16c>)
 8000896:	e000      	b.n	800089a <sd_mount+0x106>
 8000898:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <sd_mount+0x170>)
 800089a:	4a1b      	ldr	r2, [pc, #108]	@ (8000908 <sd_mount+0x174>)
 800089c:	0019      	movs	r1, r3
 800089e:	0010      	movs	r0, r2
 80008a0:	f008 ff96 	bl	80097d0 <iprintf>

			// Report capacity after format
			sd_get_space_kb();
 80008a4:	f7ff ff38 	bl	8000718 <sd_get_space_kb>
 80008a8:	e006      	b.n	80008b8 <sd_mount+0x124>
		}
		else {
			printf("Mount failed even after format: %d\r\n", res);
 80008aa:	1dbb      	adds	r3, r7, #6
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <sd_mount+0x188>)
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f008 ff8c 	bl	80097d0 <iprintf>
		}
		return res;
 80008b8:	1dbb      	adds	r3, r7, #6
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	e008      	b.n	80008d0 <sd_mount+0x13c>
	}

	// Any other mount error
	printf("Mount failed with code: %d\r\n", res);
 80008be:	1dbb      	adds	r3, r7, #6
 80008c0:	781a      	ldrb	r2, [r3, #0]
 80008c2:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <sd_mount+0x18c>)
 80008c4:	0011      	movs	r1, r2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f008 ff82 	bl	80097d0 <iprintf>
	return res;
 80008cc:	1dbb      	adds	r3, r7, #6
 80008ce:	781b      	ldrb	r3, [r3, #0]
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b003      	add	sp, #12
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	0800a8ac 	.word	0x0800a8ac
 80008dc:	200001f8 	.word	0x200001f8
 80008e0:	0800ad98 	.word	0x0800ad98
 80008e4:	0800a8c4 	.word	0x0800a8c4
 80008e8:	0800a8dc 	.word	0x0800a8dc
 80008ec:	0800a8f4 	.word	0x0800a8f4
 80008f0:	0800a914 	.word	0x0800a914
 80008f4:	0800a94c 	.word	0x0800a94c
 80008f8:	200001fc 	.word	0x200001fc
 80008fc:	0800a968 	.word	0x0800a968
 8000900:	0800a990 	.word	0x0800a990
 8000904:	0800a99c 	.word	0x0800a99c
 8000908:	0800a9a4 	.word	0x0800a9a4
 800090c:	0800a9b4 	.word	0x0800a9b4
 8000910:	0800aa1c 	.word	0x0800aa1c
 8000914:	0800aa68 	.word	0x0800aa68
 8000918:	0800aa88 	.word	0x0800aa88
 800091c:	0800aab8 	.word	0x0800aab8
 8000920:	0800aae0 	.word	0x0800aae0

08000924 <sd_unmount>:


int sd_unmount(void) {
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
	FRESULT res = f_mount(NULL, sd_path, 1);
 800092a:	1dfc      	adds	r4, r7, #7
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <sd_unmount+0x3c>)
 800092e:	2201      	movs	r2, #1
 8000930:	0019      	movs	r1, r3
 8000932:	2000      	movs	r0, #0
 8000934:	f006 ffb0 	bl	8007898 <f_mount>
 8000938:	0003      	movs	r3, r0
 800093a:	7023      	strb	r3, [r4, #0]
	printf("SD card unmounted: %s\r\n", (res == FR_OK) ? "OK" : "Failed");
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d101      	bne.n	8000948 <sd_unmount+0x24>
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <sd_unmount+0x40>)
 8000946:	e000      	b.n	800094a <sd_unmount+0x26>
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <sd_unmount+0x44>)
 800094a:	4a08      	ldr	r2, [pc, #32]	@ (800096c <sd_unmount+0x48>)
 800094c:	0019      	movs	r1, r3
 800094e:	0010      	movs	r0, r2
 8000950:	f008 ff3e 	bl	80097d0 <iprintf>
	return res;
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b003      	add	sp, #12
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	200001f8 	.word	0x200001f8
 8000964:	0800ab00 	.word	0x0800ab00
 8000968:	0800ab04 	.word	0x0800ab04
 800096c:	0800ab0c 	.word	0x0800ab0c

08000970 <sd_write_file>:

int sd_write_file(const char *filename, const char *text) {
 8000970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000972:	4c23      	ldr	r4, [pc, #140]	@ (8000a00 <sd_write_file+0x90>)
 8000974:	44a5      	add	sp, r4
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
	FIL file;
	UINT bw;
	FRESULT res = f_open(&file, filename, FA_CREATE_ALWAYS | FA_WRITE);
 800097c:	4d21      	ldr	r5, [pc, #132]	@ (8000a04 <sd_write_file+0x94>)
 800097e:	197c      	adds	r4, r7, r5
 8000980:	6879      	ldr	r1, [r7, #4]
 8000982:	2310      	movs	r3, #16
 8000984:	18fb      	adds	r3, r7, r3
 8000986:	220a      	movs	r2, #10
 8000988:	0018      	movs	r0, r3
 800098a:	f006 ffd5 	bl	8007938 <f_open>
 800098e:	0003      	movs	r3, r0
 8000990:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8000992:	197b      	adds	r3, r7, r5
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d002      	beq.n	80009a0 <sd_write_file+0x30>
 800099a:	197b      	adds	r3, r7, r5
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	e028      	b.n	80009f2 <sd_write_file+0x82>

	res = f_write(&file, text, strlen(text), &bw);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	0018      	movs	r0, r3
 80009a4:	f7ff fbba 	bl	800011c <strlen>
 80009a8:	0002      	movs	r2, r0
 80009aa:	4d16      	ldr	r5, [pc, #88]	@ (8000a04 <sd_write_file+0x94>)
 80009ac:	197c      	adds	r4, r7, r5
 80009ae:	230c      	movs	r3, #12
 80009b0:	18fb      	adds	r3, r7, r3
 80009b2:	6839      	ldr	r1, [r7, #0]
 80009b4:	2610      	movs	r6, #16
 80009b6:	19b8      	adds	r0, r7, r6
 80009b8:	f007 fa66 	bl	8007e88 <f_write>
 80009bc:	0003      	movs	r3, r0
 80009be:	7023      	strb	r3, [r4, #0]
	f_close(&file);
 80009c0:	19bb      	adds	r3, r7, r6
 80009c2:	0018      	movs	r0, r3
 80009c4:	f007 fd1e 	bl	8008404 <f_close>
	printf("Write %u bytes to %s\r\n", bw, filename);
 80009c8:	68f9      	ldr	r1, [r7, #12]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <sd_write_file+0x98>)
 80009ce:	0018      	movs	r0, r3
 80009d0:	f008 fefe 	bl	80097d0 <iprintf>
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
 80009d4:	197b      	adds	r3, r7, r5
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d107      	bne.n	80009ec <sd_write_file+0x7c>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff fb9c 	bl	800011c <strlen>
 80009e4:	0002      	movs	r2, r0
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d001      	beq.n	80009f0 <sd_write_file+0x80>
 80009ec:	2301      	movs	r3, #1
 80009ee:	e000      	b.n	80009f2 <sd_write_file+0x82>
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	2391      	movs	r3, #145	@ 0x91
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	449d      	add	sp, r3
 80009fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	fffffdbc 	.word	0xfffffdbc
 8000a04:	0000023f 	.word	0x0000023f
 8000a08:	0800ab24 	.word	0x0800ab24

08000a0c <sd_list_directory_recursive>:
	FRESULT res = f_mkdir(path);
	printf("Create directory %s: %s\r\n", path, (res == FR_OK ? "OK" : "Failed"));
	return res;
}

void sd_list_directory_recursive(const char *path, int depth) {
 8000a0c:	b5b0      	push	{r4, r5, r7, lr}
 8000a0e:	4c57      	ldr	r4, [pc, #348]	@ (8000b6c <sd_list_directory_recursive+0x160>)
 8000a10:	44a5      	add	sp, r4
 8000a12:	af02      	add	r7, sp, #8
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	6039      	str	r1, [r7, #0]
	DIR dir;
	FILINFO fno;
	char lfn[256];
	fno.lfname = lfn;
 8000a18:	4b55      	ldr	r3, [pc, #340]	@ (8000b70 <sd_list_directory_recursive+0x164>)
 8000a1a:	21f6      	movs	r1, #246	@ 0xf6
 8000a1c:	0089      	lsls	r1, r1, #2
 8000a1e:	185b      	adds	r3, r3, r1
 8000a20:	19db      	adds	r3, r3, r7
 8000a22:	2288      	movs	r2, #136	@ 0x88
 8000a24:	18ba      	adds	r2, r7, r2
 8000a26:	619a      	str	r2, [r3, #24]
	fno.lfsize = sizeof(lfn);
 8000a28:	4b51      	ldr	r3, [pc, #324]	@ (8000b70 <sd_list_directory_recursive+0x164>)
 8000a2a:	185b      	adds	r3, r3, r1
 8000a2c:	19db      	adds	r3, r3, r7
 8000a2e:	2280      	movs	r2, #128	@ 0x80
 8000a30:	0052      	lsls	r2, r2, #1
 8000a32:	61da      	str	r2, [r3, #28]
	FRESULT res = f_opendir(&dir, path);
 8000a34:	4d4f      	ldr	r5, [pc, #316]	@ (8000b74 <sd_list_directory_recursive+0x168>)
 8000a36:	197c      	adds	r4, r7, r5
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	23d4      	movs	r3, #212	@ 0xd4
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	0011      	movs	r1, r2
 8000a42:	0018      	movs	r0, r3
 8000a44:	f007 fd16 	bl	8008474 <f_opendir>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) {
 8000a4c:	197b      	adds	r3, r7, r5
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d007      	beq.n	8000a64 <sd_list_directory_recursive+0x58>
		printf("%*s[ERR] Cannot open: %s\r\n", depth * 2, "", path);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	0059      	lsls	r1, r3, #1
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a47      	ldr	r2, [pc, #284]	@ (8000b78 <sd_list_directory_recursive+0x16c>)
 8000a5c:	4847      	ldr	r0, [pc, #284]	@ (8000b7c <sd_list_directory_recursive+0x170>)
 8000a5e:	f008 feb7 	bl	80097d0 <iprintf>
 8000a62:	e07e      	b.n	8000b62 <sd_list_directory_recursive+0x156>
		return;
	}

	while (1) {
		res = f_readdir(&dir, &fno);
 8000a64:	4d43      	ldr	r5, [pc, #268]	@ (8000b74 <sd_list_directory_recursive+0x168>)
 8000a66:	197c      	adds	r4, r7, r5
 8000a68:	23c4      	movs	r3, #196	@ 0xc4
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	18fa      	adds	r2, r7, r3
 8000a6e:	23d4      	movs	r3, #212	@ 0xd4
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f007 fdec 	bl	8008654 <f_readdir>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK || fno.fname[0] == 0) break;
 8000a80:	197b      	adds	r3, r7, r5
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d166      	bne.n	8000b56 <sd_list_directory_recursive+0x14a>
 8000a88:	4b39      	ldr	r3, [pc, #228]	@ (8000b70 <sd_list_directory_recursive+0x164>)
 8000a8a:	22f6      	movs	r2, #246	@ 0xf6
 8000a8c:	0092      	lsls	r2, r2, #2
 8000a8e:	189b      	adds	r3, r3, r2
 8000a90:	19db      	adds	r3, r3, r7
 8000a92:	7a5b      	ldrb	r3, [r3, #9]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d05e      	beq.n	8000b56 <sd_list_directory_recursive+0x14a>

		const char *name = (*fno.lfname) ? fno.lfname : fno.fname;
 8000a98:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <sd_list_directory_recursive+0x164>)
 8000a9a:	189b      	adds	r3, r3, r2
 8000a9c:	19db      	adds	r3, r3, r7
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d004      	beq.n	8000ab0 <sd_list_directory_recursive+0xa4>
 8000aa6:	4b32      	ldr	r3, [pc, #200]	@ (8000b70 <sd_list_directory_recursive+0x164>)
 8000aa8:	189b      	adds	r3, r3, r2
 8000aaa:	19db      	adds	r3, r3, r7
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	e003      	b.n	8000ab8 <sd_list_directory_recursive+0xac>
 8000ab0:	23c4      	movs	r3, #196	@ 0xc4
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	3309      	adds	r3, #9
 8000ab8:	21f4      	movs	r1, #244	@ 0xf4
 8000aba:	0089      	lsls	r1, r1, #2
 8000abc:	187a      	adds	r2, r7, r1
 8000abe:	6013      	str	r3, [r2, #0]

		if (fno.fattrib & AM_DIR) {
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b70 <sd_list_directory_recursive+0x164>)
 8000ac2:	22f6      	movs	r2, #246	@ 0xf6
 8000ac4:	0092      	lsls	r2, r2, #2
 8000ac6:	189b      	adds	r3, r3, r2
 8000ac8:	19db      	adds	r3, r3, r7
 8000aca:	7a1b      	ldrb	r3, [r3, #8]
 8000acc:	001a      	movs	r2, r3
 8000ace:	2310      	movs	r3, #16
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	d02d      	beq.n	8000b30 <sd_list_directory_recursive+0x124>
			if (strcmp(name, ".") && strcmp(name, "..")) {
 8000ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8000b80 <sd_list_directory_recursive+0x174>)
 8000ad6:	000c      	movs	r4, r1
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	0011      	movs	r1, r2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff fb12 	bl	8000108 <strcmp>
 8000ae4:	1e03      	subs	r3, r0, #0
 8000ae6:	d0bd      	beq.n	8000a64 <sd_list_directory_recursive+0x58>
 8000ae8:	4a26      	ldr	r2, [pc, #152]	@ (8000b84 <sd_list_directory_recursive+0x178>)
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	0011      	movs	r1, r2
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff fb09 	bl	8000108 <strcmp>
 8000af6:	1e03      	subs	r3, r0, #0
 8000af8:	d0b4      	beq.n	8000a64 <sd_list_directory_recursive+0x58>
				printf("%*s ->(Folder) %s\r\n", depth * 2, "", name);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	0059      	lsls	r1, r3, #1
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a1d      	ldr	r2, [pc, #116]	@ (8000b78 <sd_list_directory_recursive+0x16c>)
 8000b04:	4820      	ldr	r0, [pc, #128]	@ (8000b88 <sd_list_directory_recursive+0x17c>)
 8000b06:	f008 fe63 	bl	80097d0 <iprintf>
				char newpath[128];
				snprintf(newpath, sizeof(newpath), "%s/%s", path, name);
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000b8c <sd_list_directory_recursive+0x180>)
 8000b0e:	2508      	movs	r5, #8
 8000b10:	1978      	adds	r0, r7, r5
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	000b      	movs	r3, r1
 8000b1a:	2180      	movs	r1, #128	@ 0x80
 8000b1c:	f008 fec8 	bl	80098b0 <sniprintf>
				sd_list_directory_recursive(newpath, depth + 1);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	197b      	adds	r3, r7, r5
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff ff6f 	bl	8000a0c <sd_list_directory_recursive>
 8000b2e:	e799      	b.n	8000a64 <sd_list_directory_recursive+0x58>
			}
		} else {
			printf("%*s 	->(Archivo) %s (%lu bytes)\r\n", depth * 2, "", name, (unsigned long)fno.fsize);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	0059      	lsls	r1, r3, #1
 8000b34:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <sd_list_directory_recursive+0x164>)
 8000b36:	22f6      	movs	r2, #246	@ 0xf6
 8000b38:	0092      	lsls	r2, r2, #2
 8000b3a:	189b      	adds	r3, r3, r2
 8000b3c:	19db      	adds	r3, r3, r7
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	22f4      	movs	r2, #244	@ 0xf4
 8000b42:	0092      	lsls	r2, r2, #2
 8000b44:	18ba      	adds	r2, r7, r2
 8000b46:	6814      	ldr	r4, [r2, #0]
 8000b48:	4a0b      	ldr	r2, [pc, #44]	@ (8000b78 <sd_list_directory_recursive+0x16c>)
 8000b4a:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <sd_list_directory_recursive+0x184>)
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	0023      	movs	r3, r4
 8000b50:	f008 fe3e 	bl	80097d0 <iprintf>
	while (1) {
 8000b54:	e786      	b.n	8000a64 <sd_list_directory_recursive+0x58>
		}
	}
	f_closedir(&dir);
 8000b56:	23d4      	movs	r3, #212	@ 0xd4
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f007 fd47 	bl	80085f0 <f_closedir>
}
 8000b62:	46bd      	mov	sp, r7
 8000b64:	23f6      	movs	r3, #246	@ 0xf6
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	449d      	add	sp, r3
 8000b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b6c:	fffffc20 	.word	0xfffffc20
 8000b70:	fffffdb0 	.word	0xfffffdb0
 8000b74:	000003d7 	.word	0x000003d7
 8000b78:	0800ac60 	.word	0x0800ac60
 8000b7c:	0800ac64 	.word	0x0800ac64
 8000b80:	0800ac80 	.word	0x0800ac80
 8000b84:	0800ac84 	.word	0x0800ac84
 8000b88:	0800ac88 	.word	0x0800ac88
 8000b8c:	0800ac9c 	.word	0x0800ac9c
 8000b90:	0800aca4 	.word	0x0800aca4

08000b94 <sd_list_files>:

void sd_list_files(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	printf("->Files on SD Card:\r\n");
 8000b98:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <sd_list_files+0x24>)
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f008 fe7e 	bl	800989c <puts>
	sd_list_directory_recursive(sd_path, 0);
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <sd_list_files+0x28>)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f7ff ff31 	bl	8000a0c <sd_list_directory_recursive>
	printf("\r\n\r\n");
 8000baa:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <sd_list_files+0x2c>)
 8000bac:	0018      	movs	r0, r3
 8000bae:	f008 fe75 	bl	800989c <puts>
}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	0800acc8 	.word	0x0800acc8
 8000bbc:	200001f8 	.word	0x200001f8
 8000bc0:	0800ace0 	.word	0x0800ace0

08000bc4 <sd_find_in_directory>:

char* sd_find_in_directory(const char *path, const char *target_name, int depth) {
 8000bc4:	b5b0      	push	{r4, r5, r7, lr}
 8000bc6:	4c50      	ldr	r4, [pc, #320]	@ (8000d08 <sd_find_in_directory+0x144>)
 8000bc8:	44a5      	add	sp, r4
 8000bca:	af02      	add	r7, sp, #8
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
	DIR dir;
	FILINFO fno;
	char lfn[256];
	static char found_path[128];  // Ruta que se devuelve si se encuentra

	fno.lfname = lfn;
 8000bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8000d0c <sd_find_in_directory+0x148>)
 8000bd4:	21d8      	movs	r1, #216	@ 0xd8
 8000bd6:	0089      	lsls	r1, r1, #2
 8000bd8:	185b      	adds	r3, r3, r1
 8000bda:	19db      	adds	r3, r3, r7
 8000bdc:	2210      	movs	r2, #16
 8000bde:	18ba      	adds	r2, r7, r2
 8000be0:	619a      	str	r2, [r3, #24]
	fno.lfsize = sizeof(lfn);
 8000be2:	4b4a      	ldr	r3, [pc, #296]	@ (8000d0c <sd_find_in_directory+0x148>)
 8000be4:	185b      	adds	r3, r3, r1
 8000be6:	19db      	adds	r3, r3, r7
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	0052      	lsls	r2, r2, #1
 8000bec:	61da      	str	r2, [r3, #28]

	FRESULT res = f_opendir(&dir, path);
 8000bee:	4d48      	ldr	r5, [pc, #288]	@ (8000d10 <sd_find_in_directory+0x14c>)
 8000bf0:	197c      	adds	r4, r7, r5
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	2398      	movs	r3, #152	@ 0x98
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f007 fc39 	bl	8008474 <f_opendir>
 8000c02:	0003      	movs	r3, r0
 8000c04:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) {
 8000c06:	197b      	adds	r3, r7, r5
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d008      	beq.n	8000c20 <sd_find_in_directory+0x5c>
		printf("%*s[ERR] Cannot open: %s\r\n", depth * 2, "", path);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	0059      	lsls	r1, r3, #1
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4a3f      	ldr	r2, [pc, #252]	@ (8000d14 <sd_find_in_directory+0x150>)
 8000c16:	4840      	ldr	r0, [pc, #256]	@ (8000d18 <sd_find_in_directory+0x154>)
 8000c18:	f008 fdda 	bl	80097d0 <iprintf>
		return NULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e06c      	b.n	8000cfa <sd_find_in_directory+0x136>
	}

	while (1) {
		res = f_readdir(&dir, &fno);
 8000c20:	4d3b      	ldr	r5, [pc, #236]	@ (8000d10 <sd_find_in_directory+0x14c>)
 8000c22:	197c      	adds	r4, r7, r5
 8000c24:	2388      	movs	r3, #136	@ 0x88
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	18fa      	adds	r2, r7, r3
 8000c2a:	2398      	movs	r3, #152	@ 0x98
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	0011      	movs	r1, r2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f007 fd0e 	bl	8008654 <f_readdir>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK || fno.fname[0] == 0) break;
 8000c3c:	197b      	adds	r3, r7, r5
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d153      	bne.n	8000cec <sd_find_in_directory+0x128>
 8000c44:	4b31      	ldr	r3, [pc, #196]	@ (8000d0c <sd_find_in_directory+0x148>)
 8000c46:	22d8      	movs	r2, #216	@ 0xd8
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	189b      	adds	r3, r3, r2
 8000c4c:	19db      	adds	r3, r3, r7
 8000c4e:	7a5b      	ldrb	r3, [r3, #9]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d04b      	beq.n	8000cec <sd_find_in_directory+0x128>

		const char *name = (*fno.lfname) ? fno.lfname : fno.fname;
 8000c54:	4b2d      	ldr	r3, [pc, #180]	@ (8000d0c <sd_find_in_directory+0x148>)
 8000c56:	189b      	adds	r3, r3, r2
 8000c58:	19db      	adds	r3, r3, r7
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d004      	beq.n	8000c6c <sd_find_in_directory+0xa8>
 8000c62:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <sd_find_in_directory+0x148>)
 8000c64:	189b      	adds	r3, r3, r2
 8000c66:	19db      	adds	r3, r3, r7
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	e003      	b.n	8000c74 <sd_find_in_directory+0xb0>
 8000c6c:	2388      	movs	r3, #136	@ 0x88
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	3309      	adds	r3, #9
 8000c74:	21d6      	movs	r1, #214	@ 0xd6
 8000c76:	0089      	lsls	r1, r1, #2
 8000c78:	187a      	adds	r2, r7, r1
 8000c7a:	6013      	str	r3, [r2, #0]

		if (fno.fattrib & AM_DIR) {
 8000c7c:	4b23      	ldr	r3, [pc, #140]	@ (8000d0c <sd_find_in_directory+0x148>)
 8000c7e:	22d8      	movs	r2, #216	@ 0xd8
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	189b      	adds	r3, r3, r2
 8000c84:	19db      	adds	r3, r3, r7
 8000c86:	7a1b      	ldrb	r3, [r3, #8]
 8000c88:	001a      	movs	r2, r3
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	d0c7      	beq.n	8000c20 <sd_find_in_directory+0x5c>
			if (strcmp(name, ".") && strcmp(name, "..")) {
 8000c90:	4a22      	ldr	r2, [pc, #136]	@ (8000d1c <sd_find_in_directory+0x158>)
 8000c92:	000c      	movs	r4, r1
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	0011      	movs	r1, r2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff fa34 	bl	8000108 <strcmp>
 8000ca0:	1e03      	subs	r3, r0, #0
 8000ca2:	d0bd      	beq.n	8000c20 <sd_find_in_directory+0x5c>
 8000ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8000d20 <sd_find_in_directory+0x15c>)
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	0011      	movs	r1, r2
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff fa2b 	bl	8000108 <strcmp>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d0b4      	beq.n	8000c20 <sd_find_in_directory+0x5c>
				if (strcmp(name, target_name) == 0) {
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	0011      	movs	r1, r2
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff fa22 	bl	8000108 <strcmp>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d1ab      	bne.n	8000c20 <sd_find_in_directory+0x5c>
					snprintf(found_path, sizeof(found_path), "%s/%s", path, name);
 8000cc8:	68f9      	ldr	r1, [r7, #12]
 8000cca:	4a16      	ldr	r2, [pc, #88]	@ (8000d24 <sd_find_in_directory+0x160>)
 8000ccc:	4816      	ldr	r0, [pc, #88]	@ (8000d28 <sd_find_in_directory+0x164>)
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	000b      	movs	r3, r1
 8000cd6:	2180      	movs	r1, #128	@ 0x80
 8000cd8:	f008 fdea 	bl	80098b0 <sniprintf>
					f_closedir(&dir);
 8000cdc:	2398      	movs	r3, #152	@ 0x98
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f007 fc84 	bl	80085f0 <f_closedir>
					return found_path;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <sd_find_in_directory+0x164>)
 8000cea:	e006      	b.n	8000cfa <sd_find_in_directory+0x136>
			}
		}
	}


	f_closedir(&dir);
 8000cec:	2398      	movs	r3, #152	@ 0x98
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f007 fc7c 	bl	80085f0 <f_closedir>
	return NULL;  // Si no se encuentra nada
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	23d8      	movs	r3, #216	@ 0xd8
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	449d      	add	sp, r3
 8000d04:	bdb0      	pop	{r4, r5, r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	fffffc98 	.word	0xfffffc98
 8000d0c:	fffffdb0 	.word	0xfffffdb0
 8000d10:	0000035f 	.word	0x0000035f
 8000d14:	0800ac60 	.word	0x0800ac60
 8000d18:	0800ac64 	.word	0x0800ac64
 8000d1c:	0800ac80 	.word	0x0800ac80
 8000d20:	0800ac84 	.word	0x0800ac84
 8000d24:	0800ac9c 	.word	0x0800ac9c
 8000d28:	2000042c 	.word	0x2000042c

08000d2c <sd_write_file_with_directory>:

uint8_t sd_write_file_with_directory(const char *filename, const char *text, const char *folder_path) {
 8000d2c:	b5b0      	push	{r4, r5, r7, lr}
 8000d2e:	b0c6      	sub	sp, #280	@ 0x118
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
    char full_path[256];
    snprintf(full_path, sizeof(full_path), "/%s/%s", folder_path, filename);
 8000d38:	687c      	ldr	r4, [r7, #4]
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d68 <sd_write_file_with_directory+0x3c>)
 8000d3c:	2380      	movs	r3, #128	@ 0x80
 8000d3e:	0059      	lsls	r1, r3, #1
 8000d40:	2510      	movs	r5, #16
 8000d42:	1978      	adds	r0, r7, r5
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	0023      	movs	r3, r4
 8000d4a:	f008 fdb1 	bl	80098b0 <sniprintf>
    return sd_write_file(full_path, text);
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	197b      	adds	r3, r7, r5
 8000d52:	0011      	movs	r1, r2
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff fe0b 	bl	8000970 <sd_write_file>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	b2db      	uxtb	r3, r3
}
 8000d5e:	0018      	movs	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b044      	add	sp, #272	@ 0x110
 8000d64:	bdb0      	pop	{r4, r5, r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	0800ace4 	.word	0x0800ace4

08000d6c <sd_file_exists_in_directory>:

uint8_t sd_file_exists_in_directory(const char *folder, const char *folder_path) {
 8000d6c:	b5b0      	push	{r4, r5, r7, lr}
 8000d6e:	4c41      	ldr	r4, [pc, #260]	@ (8000e74 <sd_file_exists_in_directory+0x108>)
 8000d70:	44a5      	add	sp, r4
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
    DIR dir;
    FILINFO fno;
    char lfn[256];

    fno.lfname = lfn;
 8000d78:	4b3f      	ldr	r3, [pc, #252]	@ (8000e78 <sd_file_exists_in_directory+0x10c>)
 8000d7a:	21d6      	movs	r1, #214	@ 0xd6
 8000d7c:	0089      	lsls	r1, r1, #2
 8000d7e:	185b      	adds	r3, r3, r1
 8000d80:	19db      	adds	r3, r3, r7
 8000d82:	2208      	movs	r2, #8
 8000d84:	18ba      	adds	r2, r7, r2
 8000d86:	619a      	str	r2, [r3, #24]
    fno.lfsize = sizeof(lfn);
 8000d88:	4b3b      	ldr	r3, [pc, #236]	@ (8000e78 <sd_file_exists_in_directory+0x10c>)
 8000d8a:	185b      	adds	r3, r3, r1
 8000d8c:	19db      	adds	r3, r3, r7
 8000d8e:	2280      	movs	r2, #128	@ 0x80
 8000d90:	0052      	lsls	r2, r2, #1
 8000d92:	61da      	str	r2, [r3, #28]

    FRESULT res = f_opendir(&dir, folder);
 8000d94:	4d39      	ldr	r5, [pc, #228]	@ (8000e7c <sd_file_exists_in_directory+0x110>)
 8000d96:	197c      	adds	r4, r7, r5
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	2394      	movs	r3, #148	@ 0x94
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	0011      	movs	r1, r2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f007 fb66 	bl	8008474 <f_opendir>
 8000da8:	0003      	movs	r3, r0
 8000daa:	7023      	strb	r3, [r4, #0]
    if (res != FR_OK) {
 8000dac:	197b      	adds	r3, r7, r5
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d008      	beq.n	8000dc6 <sd_file_exists_in_directory+0x5a>
        printf("[ERR] Cannot open directory: %s (Error: %d)\r\n", folder, res);
 8000db4:	197b      	adds	r3, r7, r5
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	4b31      	ldr	r3, [pc, #196]	@ (8000e80 <sd_file_exists_in_directory+0x114>)
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f008 fd07 	bl	80097d0 <iprintf>
        return -1;
 8000dc2:	23ff      	movs	r3, #255	@ 0xff
 8000dc4:	e04f      	b.n	8000e66 <sd_file_exists_in_directory+0xfa>
    }

    while (1) {
        res = f_readdir(&dir, &fno);
 8000dc6:	4d2d      	ldr	r5, [pc, #180]	@ (8000e7c <sd_file_exists_in_directory+0x110>)
 8000dc8:	197c      	adds	r4, r7, r5
 8000dca:	2384      	movs	r3, #132	@ 0x84
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	18fa      	adds	r2, r7, r3
 8000dd0:	2394      	movs	r3, #148	@ 0x94
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	0011      	movs	r1, r2
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f007 fc3b 	bl	8008654 <f_readdir>
 8000dde:	0003      	movs	r3, r0
 8000de0:	7023      	strb	r3, [r4, #0]
        if (res != FR_OK || fno.fname[0] == 0) break;
 8000de2:	197b      	adds	r3, r7, r5
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d136      	bne.n	8000e58 <sd_file_exists_in_directory+0xec>
 8000dea:	4b23      	ldr	r3, [pc, #140]	@ (8000e78 <sd_file_exists_in_directory+0x10c>)
 8000dec:	22d6      	movs	r2, #214	@ 0xd6
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	189b      	adds	r3, r3, r2
 8000df2:	19db      	adds	r3, r3, r7
 8000df4:	7a5b      	ldrb	r3, [r3, #9]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d02e      	beq.n	8000e58 <sd_file_exists_in_directory+0xec>

        const char *name = (*fno.lfname) ? fno.lfname : fno.fname;
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000e78 <sd_file_exists_in_directory+0x10c>)
 8000dfc:	189b      	adds	r3, r3, r2
 8000dfe:	19db      	adds	r3, r3, r7
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d004      	beq.n	8000e12 <sd_file_exists_in_directory+0xa6>
 8000e08:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <sd_file_exists_in_directory+0x10c>)
 8000e0a:	189b      	adds	r3, r3, r2
 8000e0c:	19db      	adds	r3, r3, r7
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	e003      	b.n	8000e1a <sd_file_exists_in_directory+0xae>
 8000e12:	2384      	movs	r3, #132	@ 0x84
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	3309      	adds	r3, #9
 8000e1a:	21d4      	movs	r1, #212	@ 0xd4
 8000e1c:	0089      	lsls	r1, r1, #2
 8000e1e:	187a      	adds	r2, r7, r1
 8000e20:	6013      	str	r3, [r2, #0]

        if (!(fno.fattrib & AM_DIR)) {
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <sd_file_exists_in_directory+0x10c>)
 8000e24:	22d6      	movs	r2, #214	@ 0xd6
 8000e26:	0092      	lsls	r2, r2, #2
 8000e28:	189b      	adds	r3, r3, r2
 8000e2a:	19db      	adds	r3, r3, r7
 8000e2c:	7a1b      	ldrb	r3, [r3, #8]
 8000e2e:	001a      	movs	r2, r3
 8000e30:	2310      	movs	r3, #16
 8000e32:	4013      	ands	r3, r2
 8000e34:	d1c7      	bne.n	8000dc6 <sd_file_exists_in_directory+0x5a>
            if (strcmp(name, folder_path) == 0) {
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	0011      	movs	r1, r2
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff f962 	bl	8000108 <strcmp>
 8000e44:	1e03      	subs	r3, r0, #0
 8000e46:	d1be      	bne.n	8000dc6 <sd_file_exists_in_directory+0x5a>
                f_closedir(&dir);
 8000e48:	2394      	movs	r3, #148	@ 0x94
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f007 fbce 	bl	80085f0 <f_closedir>
                return 1;  // File found
 8000e54:	2301      	movs	r3, #1
 8000e56:	e006      	b.n	8000e66 <sd_file_exists_in_directory+0xfa>
            }
        }
    }

    f_closedir(&dir);
 8000e58:	2394      	movs	r3, #148	@ 0x94
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f007 fbc6 	bl	80085f0 <f_closedir>
    return 0;  // File not found
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	23d6      	movs	r3, #214	@ 0xd6
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	449d      	add	sp, r3
 8000e70:	bdb0      	pop	{r4, r5, r7, pc}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	fffffca8 	.word	0xfffffca8
 8000e78:	fffffdb0 	.word	0xfffffdb0
 8000e7c:	00000357 	.word	0x00000357
 8000e80:	0800acec 	.word	0x0800acec

08000e84 <get_folder_name_and_signal_led>:

//Output can be either "Test" or "Flight", PC8 led as high for "Test" and low for "Flight"
const char* get_folder_name_and_signal_led() {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

	  uint8_t read; //variable para la lectura de PC0
	  const char *writingFolder; //Array para nombre de carpeta en la que se trabajara

	  read = (GPIOC->IDR & (1<<0));	//resultado de estado de PC0
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <get_folder_name_and_signal_led+0x4c>)
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	1cfb      	adds	r3, r7, #3
 8000e92:	2101      	movs	r1, #1
 8000e94:	400a      	ands	r2, r1
 8000e96:	701a      	strb	r2, [r3, #0]

	  //Switch a tierra selecciona modo de vuelo
	  //Switch a voltaje selecciona modo de vuelo y prende led de señal
	  if (read == 0) {
 8000e98:	1cfb      	adds	r3, r7, #3
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d108      	bne.n	8000eb2 <get_folder_name_and_signal_led+0x2e>
	      GPIOC->ODR &= ~(1 << 8);
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <get_folder_name_and_signal_led+0x4c>)
 8000ea2:	695a      	ldr	r2, [r3, #20]
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <get_folder_name_and_signal_led+0x4c>)
 8000ea6:	490b      	ldr	r1, [pc, #44]	@ (8000ed4 <get_folder_name_and_signal_led+0x50>)
 8000ea8:	400a      	ands	r2, r1
 8000eaa:	615a      	str	r2, [r3, #20]
	      writingFolder = "Flight";
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <get_folder_name_and_signal_led+0x54>)
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	e008      	b.n	8000ec4 <get_folder_name_and_signal_led+0x40>
	  } else {
	      GPIOC->ODR |= (1 << 8);
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <get_folder_name_and_signal_led+0x4c>)
 8000eb4:	695a      	ldr	r2, [r3, #20]
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <get_folder_name_and_signal_led+0x4c>)
 8000eb8:	2180      	movs	r1, #128	@ 0x80
 8000eba:	0049      	lsls	r1, r1, #1
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	615a      	str	r2, [r3, #20]
	      writingFolder = "Test";
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <get_folder_name_and_signal_led+0x58>)
 8000ec2:	607b      	str	r3, [r7, #4]
	  }

	  return writingFolder;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	48000800 	.word	0x48000800
 8000ed4:	fffffeff 	.word	0xfffffeff
 8000ed8:	0800ad1c 	.word	0x0800ad1c
 8000edc:	0800ad24 	.word	0x0800ad24

08000ee0 <get_folder_path>:

void get_folder_path(char *folder_path, size_t size, const char *writingFolder) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
    const char *found = sd_find_in_directory("/", writingFolder, 0);
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <get_folder_path+0x44>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff fe66 	bl	8000bc4 <sd_find_in_directory>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	617b      	str	r3, [r7, #20]
    if (found) {
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <get_folder_path+0x30>
        snprintf(folder_path, size, "%s", found);
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	4a08      	ldr	r2, [pc, #32]	@ (8000f28 <get_folder_path+0x48>)
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f008 fcd1 	bl	80098b0 <sniprintf>
    } else {
        snprintf(folder_path, size, "/");  // O algún valor por defecto
    }
}
 8000f0e:	e005      	b.n	8000f1c <get_folder_path+0x3c>
        snprintf(folder_path, size, "/");  // O algún valor por defecto
 8000f10:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <get_folder_path+0x44>)
 8000f12:	68b9      	ldr	r1, [r7, #8]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	0018      	movs	r0, r3
 8000f18:	f008 fcca 	bl	80098b0 <sniprintf>
}
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b006      	add	sp, #24
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	0800ad2c 	.word	0x0800ad2c
 8000f28:	0800ad30 	.word	0x0800ad30

08000f2c <get_file_name>:

void get_file_name(char *fileName, size_t size, const char *writingFolder, const char *folder_path) {
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	603b      	str	r3, [r7, #0]
    uint32_t iteration = 1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
    uint8_t fileNameGenerated = 0;
 8000f3e:	2313      	movs	r3, #19
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]

    do {
        snprintf(fileName, size, "%s_%lu.csv", writingFolder, iteration);
 8000f46:	687c      	ldr	r4, [r7, #4]
 8000f48:	4a10      	ldr	r2, [pc, #64]	@ (8000f8c <get_file_name+0x60>)
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	0023      	movs	r3, r4
 8000f54:	f008 fcac 	bl	80098b0 <sniprintf>

        if (sd_file_exists_in_directory(folder_path, fileName) == 0) {
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f7ff ff04 	bl	8000d6c <sd_file_exists_in_directory>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d104      	bne.n	8000f72 <get_file_name+0x46>
            fileNameGenerated = 1;  // Archivo no existe, lo puedes usar
 8000f68:	2313      	movs	r3, #19
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e002      	b.n	8000f78 <get_file_name+0x4c>
        } else {
            iteration++;  // Archivo existe, intenta con el siguiente
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
        }
    } while (!fileNameGenerated);
 8000f78:	2313      	movs	r3, #19
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0e1      	beq.n	8000f46 <get_file_name+0x1a>
}
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	46c0      	nop			@ (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b007      	add	sp, #28
 8000f8a:	bd90      	pop	{r4, r7, pc}
 8000f8c:	0800ad34 	.word	0x0800ad34

08000f90 <HAL_SPI_TxCpltCallback>:

#if USE_DMA
volatile int dma_tx_done = 0;
volatile int dma_rx_done = 0;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	if (hspi == &SD_SPI_HANDLE) dma_tx_done = 1;
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <HAL_SPI_TxCpltCallback+0x20>)
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d102      	bne.n	8000fa6 <HAL_SPI_TxCpltCallback+0x16>
 8000fa0:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <HAL_SPI_TxCpltCallback+0x24>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]
}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	20000084 	.word	0x20000084
 8000fb4:	200004ac 	.word	0x200004ac

08000fb8 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) dma_rx_done = 1;
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <HAL_SPI_TxRxCpltCallback+0x20>)
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d102      	bne.n	8000fce <HAL_SPI_TxRxCpltCallback+0x16>
 8000fc8:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <HAL_SPI_TxRxCpltCallback+0x24>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	20000084 	.word	0x20000084
 8000fdc:	200004b0 	.word	0x200004b0

08000fe0 <SD_TransmitByte>:
#endif

static void SD_TransmitByte(uint8_t data) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 8000fec:	2301      	movs	r3, #1
 8000fee:	425b      	negs	r3, r3
 8000ff0:	1df9      	adds	r1, r7, #7
 8000ff2:	4804      	ldr	r0, [pc, #16]	@ (8001004 <SD_TransmitByte+0x24>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f001 ff65 	bl	8002ec4 <HAL_SPI_Transmit>
}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	20000084 	.word	0x20000084

08001008 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	22ff      	movs	r2, #255	@ 0xff
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	1dbb      	adds	r3, r7, #6
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 800101a:	1dba      	adds	r2, r7, #6
 800101c:	1df9      	adds	r1, r7, #7
 800101e:	4806      	ldr	r0, [pc, #24]	@ (8001038 <SD_ReceiveByte+0x30>)
 8001020:	2301      	movs	r3, #1
 8001022:	425b      	negs	r3, r3
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	f002 f8ac 	bl	8003184 <HAL_SPI_TransmitReceive>
    return data;
 800102c:	1dbb      	adds	r3, r7, #6
 800102e:	781b      	ldrb	r3, [r3, #0]
}
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000084 	.word	0x20000084

0800103c <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	000a      	movs	r2, r1
 8001046:	1cbb      	adds	r3, r7, #2
 8001048:	801a      	strh	r2, [r3, #0]
#if USE_DMA
    dma_tx_done = 0;
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <SD_TransmitBuffer+0x38>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
 8001050:	1cbb      	adds	r3, r7, #2
 8001052:	881a      	ldrh	r2, [r3, #0]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <SD_TransmitBuffer+0x3c>)
 8001058:	0018      	movs	r0, r3
 800105a:	f002 fa75 	bl	8003548 <HAL_SPI_Transmit_DMA>
    while (!dma_tx_done);
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <SD_TransmitBuffer+0x38>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0fb      	beq.n	8001060 <SD_TransmitBuffer+0x24>
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
#endif
}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	200004ac 	.word	0x200004ac
 8001078:	20000084 	.word	0x20000084

0800107c <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	000a      	movs	r2, r1
 8001086:	1cbb      	adds	r3, r7, #2
 8001088:	801a      	strh	r2, [r3, #0]
#if USE_DMA
	static uint8_t tx_dummy[512];
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e007      	b.n	80010a0 <SD_ReceiveBuffer+0x24>
 8001090:	4a10      	ldr	r2, [pc, #64]	@ (80010d4 <SD_ReceiveBuffer+0x58>)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	18d3      	adds	r3, r2, r3
 8001096:	22ff      	movs	r2, #255	@ 0xff
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3301      	adds	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	1cbb      	adds	r3, r7, #2
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dbf2      	blt.n	8001090 <SD_ReceiveBuffer+0x14>
    dma_rx_done = 0;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <SD_ReceiveBuffer+0x5c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_dummy, buffer, len);
 80010b0:	1cbb      	adds	r3, r7, #2
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4907      	ldr	r1, [pc, #28]	@ (80010d4 <SD_ReceiveBuffer+0x58>)
 80010b8:	4808      	ldr	r0, [pc, #32]	@ (80010dc <SD_ReceiveBuffer+0x60>)
 80010ba:	f002 fb47 	bl	800374c <HAL_SPI_TransmitReceive_DMA>
    while (!dma_rx_done);
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SD_ReceiveBuffer+0x5c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0fb      	beq.n	80010c0 <SD_ReceiveBuffer+0x44>
#else
    for (uint16_t i = 0; i < len; i++) {
        buffer[i] = SD_ReceiveByte();
    }
#endif
}
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	200004b8 	.word	0x200004b8
 80010d8:	200004b0 	.word	0x200004b0
 80010dc:	20000084 	.word	0x20000084

080010e0 <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 80010e6:	f000 fdc9 	bl	8001c7c <HAL_GetTick>
 80010ea:	0003      	movs	r3, r0
 80010ec:	33f5      	adds	r3, #245	@ 0xf5
 80010ee:	33ff      	adds	r3, #255	@ 0xff
 80010f0:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 80010f2:	1cfc      	adds	r4, r7, #3
 80010f4:	f7ff ff88 	bl	8001008 <SD_ReceiveByte>
 80010f8:	0003      	movs	r3, r0
 80010fa:	7023      	strb	r3, [r4, #0]
        if (resp == 0xFF) return SD_OK;
 80010fc:	1cfb      	adds	r3, r7, #3
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2bff      	cmp	r3, #255	@ 0xff
 8001102:	d101      	bne.n	8001108 <SD_WaitReady+0x28>
 8001104:	2300      	movs	r3, #0
 8001106:	e006      	b.n	8001116 <SD_WaitReady+0x36>
    } while (HAL_GetTick() < timeout);
 8001108:	f000 fdb8 	bl	8001c7c <HAL_GetTick>
 800110c:	0002      	movs	r2, r0
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4293      	cmp	r3, r2
 8001112:	d8ee      	bhi.n	80010f2 <SD_WaitReady+0x12>
    return SD_ERROR;
 8001114:	2301      	movs	r3, #1
}
 8001116:	0018      	movs	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	b003      	add	sp, #12
 800111c:	bd90      	pop	{r4, r7, pc}

0800111e <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 800111e:	b5b0      	push	{r4, r5, r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	0011      	movs	r1, r2
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	1c02      	adds	r2, r0, #0
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	1dbb      	adds	r3, r7, #6
 8001130:	1c0a      	adds	r2, r1, #0
 8001132:	701a      	strb	r2, [r3, #0]
    uint8_t response, retry = 0xFF;
 8001134:	230f      	movs	r3, #15
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	22ff      	movs	r2, #255	@ 0xff
 800113a:	701a      	strb	r2, [r3, #0]

    SD_WaitReady();
 800113c:	f7ff ffd0 	bl	80010e0 <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 8001140:	1dfb      	adds	r3, r7, #7
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2240      	movs	r2, #64	@ 0x40
 8001146:	4313      	orrs	r3, r2
 8001148:	b2db      	uxtb	r3, r3
 800114a:	0018      	movs	r0, r3
 800114c:	f7ff ff48 	bl	8000fe0 <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	0e1b      	lsrs	r3, r3, #24
 8001154:	b2db      	uxtb	r3, r3
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff ff42 	bl	8000fe0 <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	0c1b      	lsrs	r3, r3, #16
 8001160:	b2db      	uxtb	r3, r3
 8001162:	0018      	movs	r0, r3
 8001164:	f7ff ff3c 	bl	8000fe0 <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	b2db      	uxtb	r3, r3
 800116e:	0018      	movs	r0, r3
 8001170:	f7ff ff36 	bl	8000fe0 <SD_TransmitByte>
    SD_TransmitByte(arg);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff ff31 	bl	8000fe0 <SD_TransmitByte>
    SD_TransmitByte(crc);
 800117e:	1dbb      	adds	r3, r7, #6
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	0018      	movs	r0, r3
 8001184:	f7ff ff2c 	bl	8000fe0 <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 8001188:	250e      	movs	r5, #14
 800118a:	197c      	adds	r4, r7, r5
 800118c:	f7ff ff3c 	bl	8001008 <SD_ReceiveByte>
 8001190:	0003      	movs	r3, r0
 8001192:	7023      	strb	r3, [r4, #0]
    } while ((response & 0x80) && --retry);
 8001194:	197b      	adds	r3, r7, r5
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b25b      	sxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	da09      	bge.n	80011b2 <SD_SendCommand+0x94>
 800119e:	210f      	movs	r1, #15
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	187a      	adds	r2, r7, r1
 80011a4:	7812      	ldrb	r2, [r2, #0]
 80011a6:	3a01      	subs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1ea      	bne.n	8001188 <SD_SendCommand+0x6a>

    return response;
 80011b2:	230e      	movs	r3, #14
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	781b      	ldrb	r3, [r3, #0]
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b004      	add	sp, #16
 80011be:	bdb0      	pop	{r4, r5, r7, pc}

080011c0 <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
    return sdhc;
 80011c4:	4b02      	ldr	r3, [pc, #8]	@ (80011d0 <sd_is_sdhc+0x10>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	200004b4 	.word	0x200004b4

080011d4 <SD_SPI_Init>:
uint8_t card_initialized = 0;

SD_Status SD_SPI_Init(void) {
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 80011da:	2390      	movs	r3, #144	@ 0x90
 80011dc:	05db      	lsls	r3, r3, #23
 80011de:	2201      	movs	r2, #1
 80011e0:	2110      	movs	r1, #16
 80011e2:	0018      	movs	r0, r3
 80011e4:	f001 f93a 	bl	800245c <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 80011e8:	230f      	movs	r3, #15
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	e008      	b.n	8001204 <SD_SPI_Init+0x30>
 80011f2:	20ff      	movs	r0, #255	@ 0xff
 80011f4:	f7ff fef4 	bl	8000fe0 <SD_TransmitByte>
 80011f8:	210f      	movs	r1, #15
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	781a      	ldrb	r2, [r3, #0]
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	3201      	adds	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
 8001204:	230f      	movs	r3, #15
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b09      	cmp	r3, #9
 800120c:	d9f1      	bls.n	80011f2 <SD_SPI_Init+0x1e>

    SD_CS_LOW();
 800120e:	2390      	movs	r3, #144	@ 0x90
 8001210:	05db      	lsls	r3, r3, #23
 8001212:	2200      	movs	r2, #0
 8001214:	2110      	movs	r1, #16
 8001216:	0018      	movs	r0, r3
 8001218:	f001 f920 	bl	800245c <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 800121c:	250e      	movs	r5, #14
 800121e:	197c      	adds	r4, r7, r5
 8001220:	2295      	movs	r2, #149	@ 0x95
 8001222:	2100      	movs	r1, #0
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff ff7a 	bl	800111e <SD_SendCommand>
 800122a:	0003      	movs	r3, r0
 800122c:	7023      	strb	r3, [r4, #0]
    SD_CS_HIGH();
 800122e:	2390      	movs	r3, #144	@ 0x90
 8001230:	05db      	lsls	r3, r3, #23
 8001232:	2201      	movs	r2, #1
 8001234:	2110      	movs	r1, #16
 8001236:	0018      	movs	r0, r3
 8001238:	f001 f910 	bl	800245c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 800123c:	20ff      	movs	r0, #255	@ 0xff
 800123e:	f7ff fecf 	bl	8000fe0 <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 8001242:	197b      	adds	r3, r7, r5
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <SD_SPI_Init+0x7a>
 800124a:	2301      	movs	r3, #1
 800124c:	e0ec      	b.n	8001428 <SD_SPI_Init+0x254>

    SD_CS_LOW();
 800124e:	2390      	movs	r3, #144	@ 0x90
 8001250:	05db      	lsls	r3, r3, #23
 8001252:	2200      	movs	r2, #0
 8001254:	2110      	movs	r1, #16
 8001256:	0018      	movs	r0, r3
 8001258:	f001 f900 	bl	800245c <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 800125c:	230e      	movs	r3, #14
 800125e:	18fc      	adds	r4, r7, r3
 8001260:	23d5      	movs	r3, #213	@ 0xd5
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2287      	movs	r2, #135	@ 0x87
 8001266:	0019      	movs	r1, r3
 8001268:	2008      	movs	r0, #8
 800126a:	f7ff ff58 	bl	800111e <SD_SendCommand>
 800126e:	0003      	movs	r3, r0
 8001270:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 8001272:	230f      	movs	r3, #15
 8001274:	18fb      	adds	r3, r7, r3
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	e00d      	b.n	8001298 <SD_SPI_Init+0xc4>
 800127c:	250f      	movs	r5, #15
 800127e:	197b      	adds	r3, r7, r5
 8001280:	781c      	ldrb	r4, [r3, #0]
 8001282:	f7ff fec1 	bl	8001008 <SD_ReceiveByte>
 8001286:	0003      	movs	r3, r0
 8001288:	001a      	movs	r2, r3
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	551a      	strb	r2, [r3, r4]
 800128e:	197b      	adds	r3, r7, r5
 8001290:	781a      	ldrb	r2, [r3, #0]
 8001292:	197b      	adds	r3, r7, r5
 8001294:	3201      	adds	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	230f      	movs	r3, #15
 800129a:	18fb      	adds	r3, r7, r3
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d9ec      	bls.n	800127c <SD_SPI_Init+0xa8>
    SD_CS_HIGH();
 80012a2:	2390      	movs	r3, #144	@ 0x90
 80012a4:	05db      	lsls	r3, r3, #23
 80012a6:	2201      	movs	r2, #1
 80012a8:	2110      	movs	r1, #16
 80012aa:	0018      	movs	r0, r3
 80012ac:	f001 f8d6 	bl	800245c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 80012b0:	20ff      	movs	r0, #255	@ 0xff
 80012b2:	f7ff fe95 	bl	8000fe0 <SD_TransmitByte>

    sdhc = 0;
 80012b6:	4b5e      	ldr	r3, [pc, #376]	@ (8001430 <SD_SPI_Init+0x25c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 80012bc:	f000 fcde 	bl	8001c7c <HAL_GetTick>
 80012c0:	0003      	movs	r3, r0
 80012c2:	22fa      	movs	r2, #250	@ 0xfa
 80012c4:	0092      	lsls	r2, r2, #2
 80012c6:	4694      	mov	ip, r2
 80012c8:	4463      	add	r3, ip
 80012ca:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 80012cc:	230e      	movs	r3, #14
 80012ce:	18fb      	adds	r3, r7, r3
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d000      	beq.n	80012d8 <SD_SPI_Init+0x104>
 80012d6:	e072      	b.n	80013be <SD_SPI_Init+0x1ea>
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	789b      	ldrb	r3, [r3, #2]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d16e      	bne.n	80013be <SD_SPI_Init+0x1ea>
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	78db      	ldrb	r3, [r3, #3]
 80012e4:	2baa      	cmp	r3, #170	@ 0xaa
 80012e6:	d16a      	bne.n	80013be <SD_SPI_Init+0x1ea>
        do {
            SD_CS_LOW();
 80012e8:	2390      	movs	r3, #144	@ 0x90
 80012ea:	05db      	lsls	r3, r3, #23
 80012ec:	2200      	movs	r2, #0
 80012ee:	2110      	movs	r1, #16
 80012f0:	0018      	movs	r0, r3
 80012f2:	f001 f8b3 	bl	800245c <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 80012f6:	22ff      	movs	r2, #255	@ 0xff
 80012f8:	2100      	movs	r1, #0
 80012fa:	2037      	movs	r0, #55	@ 0x37
 80012fc:	f7ff ff0f 	bl	800111e <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 8001300:	250e      	movs	r5, #14
 8001302:	197c      	adds	r4, r7, r5
 8001304:	2380      	movs	r3, #128	@ 0x80
 8001306:	05db      	lsls	r3, r3, #23
 8001308:	22ff      	movs	r2, #255	@ 0xff
 800130a:	0019      	movs	r1, r3
 800130c:	2029      	movs	r0, #41	@ 0x29
 800130e:	f7ff ff06 	bl	800111e <SD_SendCommand>
 8001312:	0003      	movs	r3, r0
 8001314:	7023      	strb	r3, [r4, #0]
            SD_CS_HIGH();
 8001316:	2390      	movs	r3, #144	@ 0x90
 8001318:	05db      	lsls	r3, r3, #23
 800131a:	2201      	movs	r2, #1
 800131c:	2110      	movs	r1, #16
 800131e:	0018      	movs	r0, r3
 8001320:	f001 f89c 	bl	800245c <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8001324:	20ff      	movs	r0, #255	@ 0xff
 8001326:	f7ff fe5b 	bl	8000fe0 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 800132a:	197b      	adds	r3, r7, r5
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <SD_SPI_Init+0x16a>
 8001332:	f000 fca3 	bl	8001c7c <HAL_GetTick>
 8001336:	0002      	movs	r2, r0
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4293      	cmp	r3, r2
 800133c:	d8d4      	bhi.n	80012e8 <SD_SPI_Init+0x114>

        if (response != 0x00) return SD_ERROR;
 800133e:	230e      	movs	r3, #14
 8001340:	18fb      	adds	r3, r7, r3
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SD_SPI_Init+0x178>
 8001348:	2301      	movs	r3, #1
 800134a:	e06d      	b.n	8001428 <SD_SPI_Init+0x254>

        SD_CS_LOW();
 800134c:	2390      	movs	r3, #144	@ 0x90
 800134e:	05db      	lsls	r3, r3, #23
 8001350:	2200      	movs	r2, #0
 8001352:	2110      	movs	r1, #16
 8001354:	0018      	movs	r0, r3
 8001356:	f001 f881 	bl	800245c <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 800135a:	230e      	movs	r3, #14
 800135c:	18fc      	adds	r4, r7, r3
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2100      	movs	r1, #0
 8001362:	203a      	movs	r0, #58	@ 0x3a
 8001364:	f7ff fedb 	bl	800111e <SD_SendCommand>
 8001368:	0003      	movs	r3, r0
 800136a:	7023      	strb	r3, [r4, #0]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 800136c:	230f      	movs	r3, #15
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
 8001374:	e00d      	b.n	8001392 <SD_SPI_Init+0x1be>
 8001376:	250f      	movs	r5, #15
 8001378:	197b      	adds	r3, r7, r5
 800137a:	781c      	ldrb	r4, [r3, #0]
 800137c:	f7ff fe44 	bl	8001008 <SD_ReceiveByte>
 8001380:	0003      	movs	r3, r0
 8001382:	001a      	movs	r2, r3
 8001384:	003b      	movs	r3, r7
 8001386:	551a      	strb	r2, [r3, r4]
 8001388:	197b      	adds	r3, r7, r5
 800138a:	781a      	ldrb	r2, [r3, #0]
 800138c:	197b      	adds	r3, r7, r5
 800138e:	3201      	adds	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	230f      	movs	r3, #15
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b03      	cmp	r3, #3
 800139a:	d9ec      	bls.n	8001376 <SD_SPI_Init+0x1a2>
        SD_CS_HIGH();
 800139c:	2390      	movs	r3, #144	@ 0x90
 800139e:	05db      	lsls	r3, r3, #23
 80013a0:	2201      	movs	r2, #1
 80013a2:	2110      	movs	r1, #16
 80013a4:	0018      	movs	r0, r3
 80013a6:	f001 f859 	bl	800245c <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 80013aa:	003b      	movs	r3, r7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	001a      	movs	r2, r3
 80013b0:	2340      	movs	r3, #64	@ 0x40
 80013b2:	4013      	ands	r3, r2
 80013b4:	d033      	beq.n	800141e <SD_SPI_Init+0x24a>
 80013b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001430 <SD_SPI_Init+0x25c>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 80013bc:	e02f      	b.n	800141e <SD_SPI_Init+0x24a>
    } else {
        do {
            SD_CS_LOW();
 80013be:	2390      	movs	r3, #144	@ 0x90
 80013c0:	05db      	lsls	r3, r3, #23
 80013c2:	2200      	movs	r2, #0
 80013c4:	2110      	movs	r1, #16
 80013c6:	0018      	movs	r0, r3
 80013c8:	f001 f848 	bl	800245c <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 80013cc:	22ff      	movs	r2, #255	@ 0xff
 80013ce:	2100      	movs	r1, #0
 80013d0:	2037      	movs	r0, #55	@ 0x37
 80013d2:	f7ff fea4 	bl	800111e <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 80013d6:	250e      	movs	r5, #14
 80013d8:	197c      	adds	r4, r7, r5
 80013da:	22ff      	movs	r2, #255	@ 0xff
 80013dc:	2100      	movs	r1, #0
 80013de:	2029      	movs	r0, #41	@ 0x29
 80013e0:	f7ff fe9d 	bl	800111e <SD_SendCommand>
 80013e4:	0003      	movs	r3, r0
 80013e6:	7023      	strb	r3, [r4, #0]
            SD_CS_HIGH();
 80013e8:	2390      	movs	r3, #144	@ 0x90
 80013ea:	05db      	lsls	r3, r3, #23
 80013ec:	2201      	movs	r2, #1
 80013ee:	2110      	movs	r1, #16
 80013f0:	0018      	movs	r0, r3
 80013f2:	f001 f833 	bl	800245c <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 80013f6:	20ff      	movs	r0, #255	@ 0xff
 80013f8:	f7ff fdf2 	bl	8000fe0 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 80013fc:	197b      	adds	r3, r7, r5
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <SD_SPI_Init+0x23c>
 8001404:	f000 fc3a 	bl	8001c7c <HAL_GetTick>
 8001408:	0002      	movs	r2, r0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	4293      	cmp	r3, r2
 800140e:	d8d6      	bhi.n	80013be <SD_SPI_Init+0x1ea>
        if (response != 0x00) return SD_ERROR;
 8001410:	230e      	movs	r3, #14
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <SD_SPI_Init+0x24c>
 800141a:	2301      	movs	r3, #1
 800141c:	e004      	b.n	8001428 <SD_SPI_Init+0x254>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 800141e:	46c0      	nop			@ (mov r8, r8)
    }

    card_initialized = 1;
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <SD_SPI_Init+0x260>)
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b004      	add	sp, #16
 800142e:	bdb0      	pop	{r4, r5, r7, pc}
 8001430:	200004b4 	.word	0x200004b4
 8001434:	200004b5 	.word	0x200004b5

08001438 <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <SD_ReadBlocks+0x16>
 800144a:	2301      	movs	r3, #1
 800144c:	e064      	b.n	8001518 <SD_ReadBlocks+0xe0>
    if (!sdhc) sector *= 512;
 800144e:	4b34      	ldr	r3, [pc, #208]	@ (8001520 <SD_ReadBlocks+0xe8>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <SD_ReadBlocks+0x24>
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	025b      	lsls	r3, r3, #9
 800145a:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d153      	bne.n	800150a <SD_ReadBlocks+0xd2>
        SD_CS_LOW();
 8001462:	2390      	movs	r3, #144	@ 0x90
 8001464:	05db      	lsls	r3, r3, #23
 8001466:	2200      	movs	r2, #0
 8001468:	2110      	movs	r1, #16
 800146a:	0018      	movs	r0, r3
 800146c:	f000 fff6 	bl	800245c <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	22ff      	movs	r2, #255	@ 0xff
 8001474:	0019      	movs	r1, r3
 8001476:	2011      	movs	r0, #17
 8001478:	f7ff fe51 	bl	800111e <SD_SendCommand>
 800147c:	1e03      	subs	r3, r0, #0
 800147e:	d008      	beq.n	8001492 <SD_ReadBlocks+0x5a>
            SD_CS_HIGH();
 8001480:	2390      	movs	r3, #144	@ 0x90
 8001482:	05db      	lsls	r3, r3, #23
 8001484:	2201      	movs	r2, #1
 8001486:	2110      	movs	r1, #16
 8001488:	0018      	movs	r0, r3
 800148a:	f000 ffe7 	bl	800245c <HAL_GPIO_WritePin>
            return SD_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e042      	b.n	8001518 <SD_ReadBlocks+0xe0>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001492:	f000 fbf3 	bl	8001c7c <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	33c8      	adds	r3, #200	@ 0xc8
 800149a:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 800149c:	2513      	movs	r5, #19
 800149e:	197c      	adds	r4, r7, r5
 80014a0:	f7ff fdb2 	bl	8001008 <SD_ReceiveByte>
 80014a4:	0003      	movs	r3, r0
 80014a6:	7023      	strb	r3, [r4, #0]
            if (token == 0xFE) break;
 80014a8:	197b      	adds	r3, r7, r5
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2bfe      	cmp	r3, #254	@ 0xfe
 80014ae:	d006      	beq.n	80014be <SD_ReadBlocks+0x86>
        } while (HAL_GetTick() < timeout);
 80014b0:	f000 fbe4 	bl	8001c7c <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d8ef      	bhi.n	800149c <SD_ReadBlocks+0x64>
 80014bc:	e000      	b.n	80014c0 <SD_ReadBlocks+0x88>
            if (token == 0xFE) break;
 80014be:	46c0      	nop			@ (mov r8, r8)
        if (token != 0xFE) {
 80014c0:	2313      	movs	r3, #19
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80014c8:	d008      	beq.n	80014dc <SD_ReadBlocks+0xa4>
            SD_CS_HIGH();
 80014ca:	2390      	movs	r3, #144	@ 0x90
 80014cc:	05db      	lsls	r3, r3, #23
 80014ce:	2201      	movs	r2, #1
 80014d0:	2110      	movs	r1, #16
 80014d2:	0018      	movs	r0, r3
 80014d4:	f000 ffc2 	bl	800245c <HAL_GPIO_WritePin>
            return SD_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e01d      	b.n	8001518 <SD_ReadBlocks+0xe0>
        }

        SD_ReceiveBuffer(buff, 512);
 80014dc:	2380      	movs	r3, #128	@ 0x80
 80014de:	009a      	lsls	r2, r3, #2
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	0011      	movs	r1, r2
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff fdc9 	bl	800107c <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 80014ea:	f7ff fd8d 	bl	8001008 <SD_ReceiveByte>
        SD_ReceiveByte();
 80014ee:	f7ff fd8b 	bl	8001008 <SD_ReceiveByte>
        SD_CS_HIGH();
 80014f2:	2390      	movs	r3, #144	@ 0x90
 80014f4:	05db      	lsls	r3, r3, #23
 80014f6:	2201      	movs	r2, #1
 80014f8:	2110      	movs	r1, #16
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 ffae 	bl	800245c <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8001500:	20ff      	movs	r0, #255	@ 0xff
 8001502:	f7ff fd6d 	bl	8000fe0 <SD_TransmitByte>
        return SD_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e006      	b.n	8001518 <SD_ReadBlocks+0xe0>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	0018      	movs	r0, r3
 8001512:	f000 f807 	bl	8001524 <SD_ReadMultiBlocks>
 8001516:	0003      	movs	r3, r0
    }
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b006      	add	sp, #24
 800151e:	bdb0      	pop	{r4, r5, r7, pc}
 8001520:	200004b4 	.word	0x200004b4

08001524 <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001524:	b5b0      	push	{r4, r5, r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <SD_ReadMultiBlocks+0x16>
 8001536:	2301      	movs	r3, #1
 8001538:	e069      	b.n	800160e <SD_ReadMultiBlocks+0xea>
    if (!sdhc) sector *= 512;
 800153a:	4b37      	ldr	r3, [pc, #220]	@ (8001618 <SD_ReadMultiBlocks+0xf4>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <SD_ReadMultiBlocks+0x24>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	025b      	lsls	r3, r3, #9
 8001546:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8001548:	2390      	movs	r3, #144	@ 0x90
 800154a:	05db      	lsls	r3, r3, #23
 800154c:	2200      	movs	r2, #0
 800154e:	2110      	movs	r1, #16
 8001550:	0018      	movs	r0, r3
 8001552:	f000 ff83 	bl	800245c <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	22ff      	movs	r2, #255	@ 0xff
 800155a:	0019      	movs	r1, r3
 800155c:	2012      	movs	r0, #18
 800155e:	f7ff fdde 	bl	800111e <SD_SendCommand>
 8001562:	1e03      	subs	r3, r0, #0
 8001564:	d03e      	beq.n	80015e4 <SD_ReadMultiBlocks+0xc0>
        SD_CS_HIGH();
 8001566:	2390      	movs	r3, #144	@ 0x90
 8001568:	05db      	lsls	r3, r3, #23
 800156a:	2201      	movs	r2, #1
 800156c:	2110      	movs	r1, #16
 800156e:	0018      	movs	r0, r3
 8001570:	f000 ff74 	bl	800245c <HAL_GPIO_WritePin>
        return SD_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e04a      	b.n	800160e <SD_ReadMultiBlocks+0xea>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001578:	f000 fb80 	bl	8001c7c <HAL_GetTick>
 800157c:	0003      	movs	r3, r0
 800157e:	33c8      	adds	r3, #200	@ 0xc8
 8001580:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 8001582:	2513      	movs	r5, #19
 8001584:	197c      	adds	r4, r7, r5
 8001586:	f7ff fd3f 	bl	8001008 <SD_ReceiveByte>
 800158a:	0003      	movs	r3, r0
 800158c:	7023      	strb	r3, [r4, #0]
            if (token == 0xFE) break;
 800158e:	197b      	adds	r3, r7, r5
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2bfe      	cmp	r3, #254	@ 0xfe
 8001594:	d006      	beq.n	80015a4 <SD_ReadMultiBlocks+0x80>
        } while (HAL_GetTick() < timeout);
 8001596:	f000 fb71 	bl	8001c7c <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4293      	cmp	r3, r2
 80015a0:	d8ef      	bhi.n	8001582 <SD_ReadMultiBlocks+0x5e>
 80015a2:	e000      	b.n	80015a6 <SD_ReadMultiBlocks+0x82>
            if (token == 0xFE) break;
 80015a4:	46c0      	nop			@ (mov r8, r8)

        if (token != 0xFE) {
 80015a6:	2313      	movs	r3, #19
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2bfe      	cmp	r3, #254	@ 0xfe
 80015ae:	d008      	beq.n	80015c2 <SD_ReadMultiBlocks+0x9e>
            SD_CS_HIGH();
 80015b0:	2390      	movs	r3, #144	@ 0x90
 80015b2:	05db      	lsls	r3, r3, #23
 80015b4:	2201      	movs	r2, #1
 80015b6:	2110      	movs	r1, #16
 80015b8:	0018      	movs	r0, r3
 80015ba:	f000 ff4f 	bl	800245c <HAL_GPIO_WritePin>
            return SD_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e025      	b.n	800160e <SD_ReadMultiBlocks+0xea>
        }

        SD_ReceiveBuffer(buff, 512);
 80015c2:	2380      	movs	r3, #128	@ 0x80
 80015c4:	009a      	lsls	r2, r3, #2
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	0011      	movs	r1, r2
 80015ca:	0018      	movs	r0, r3
 80015cc:	f7ff fd56 	bl	800107c <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 80015d0:	f7ff fd1a 	bl	8001008 <SD_ReceiveByte>
        SD_ReceiveByte();
 80015d4:	f7ff fd18 	bl	8001008 <SD_ReceiveByte>

        buff += 512;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2280      	movs	r2, #128	@ 0x80
 80015dc:	0092      	lsls	r2, r2, #2
 80015de:	4694      	mov	ip, r2
 80015e0:	4463      	add	r3, ip
 80015e2:	60fb      	str	r3, [r7, #12]
    while (count--) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	1e5a      	subs	r2, r3, #1
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1c4      	bne.n	8001578 <SD_ReadMultiBlocks+0x54>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 80015ee:	22ff      	movs	r2, #255	@ 0xff
 80015f0:	2100      	movs	r1, #0
 80015f2:	200c      	movs	r0, #12
 80015f4:	f7ff fd93 	bl	800111e <SD_SendCommand>
    SD_CS_HIGH();
 80015f8:	2390      	movs	r3, #144	@ 0x90
 80015fa:	05db      	lsls	r3, r3, #23
 80015fc:	2201      	movs	r2, #1
 80015fe:	2110      	movs	r1, #16
 8001600:	0018      	movs	r0, r3
 8001602:	f000 ff2b 	bl	800245c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 8001606:	20ff      	movs	r0, #255	@ 0xff
 8001608:	f7ff fcea 	bl	8000fe0 <SD_TransmitByte>

    return SD_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	0018      	movs	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	b006      	add	sp, #24
 8001614:	bdb0      	pop	{r4, r5, r7, pc}
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	200004b4 	.word	0x200004b4

0800161c <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <SD_WriteBlocks+0x16>
 800162e:	2301      	movs	r3, #1
 8001630:	e05e      	b.n	80016f0 <SD_WriteBlocks+0xd4>
    if (!sdhc) sector *= 512;
 8001632:	4b31      	ldr	r3, [pc, #196]	@ (80016f8 <SD_WriteBlocks+0xdc>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <SD_WriteBlocks+0x24>
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	025b      	lsls	r3, r3, #9
 800163e:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d14d      	bne.n	80016e2 <SD_WriteBlocks+0xc6>
        SD_CS_LOW();
 8001646:	2390      	movs	r3, #144	@ 0x90
 8001648:	05db      	lsls	r3, r3, #23
 800164a:	2200      	movs	r2, #0
 800164c:	2110      	movs	r1, #16
 800164e:	0018      	movs	r0, r3
 8001650:	f000 ff04 	bl	800245c <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	22ff      	movs	r2, #255	@ 0xff
 8001658:	0019      	movs	r1, r3
 800165a:	2018      	movs	r0, #24
 800165c:	f7ff fd5f 	bl	800111e <SD_SendCommand>
 8001660:	1e03      	subs	r3, r0, #0
 8001662:	d008      	beq.n	8001676 <SD_WriteBlocks+0x5a>
            SD_CS_HIGH();
 8001664:	2390      	movs	r3, #144	@ 0x90
 8001666:	05db      	lsls	r3, r3, #23
 8001668:	2201      	movs	r2, #1
 800166a:	2110      	movs	r1, #16
 800166c:	0018      	movs	r0, r3
 800166e:	f000 fef5 	bl	800245c <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e03c      	b.n	80016f0 <SD_WriteBlocks+0xd4>
        }

        SD_TransmitByte(0xFE);
 8001676:	20fe      	movs	r0, #254	@ 0xfe
 8001678:	f7ff fcb2 	bl	8000fe0 <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	009a      	lsls	r2, r3, #2
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	0011      	movs	r1, r2
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff fcd9 	bl	800103c <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 800168a:	20ff      	movs	r0, #255	@ 0xff
 800168c:	f7ff fca8 	bl	8000fe0 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8001690:	20ff      	movs	r0, #255	@ 0xff
 8001692:	f7ff fca5 	bl	8000fe0 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8001696:	2517      	movs	r5, #23
 8001698:	197c      	adds	r4, r7, r5
 800169a:	f7ff fcb5 	bl	8001008 <SD_ReceiveByte>
 800169e:	0003      	movs	r3, r0
 80016a0:	7023      	strb	r3, [r4, #0]
        if ((resp & 0x1F) != 0x05) {
 80016a2:	197b      	adds	r3, r7, r5
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	221f      	movs	r2, #31
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	d008      	beq.n	80016c0 <SD_WriteBlocks+0xa4>
            SD_CS_HIGH();
 80016ae:	2390      	movs	r3, #144	@ 0x90
 80016b0:	05db      	lsls	r3, r3, #23
 80016b2:	2201      	movs	r2, #1
 80016b4:	2110      	movs	r1, #16
 80016b6:	0018      	movs	r0, r3
 80016b8:	f000 fed0 	bl	800245c <HAL_GPIO_WritePin>
            return SD_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e017      	b.n	80016f0 <SD_WriteBlocks+0xd4>
        }

        while (SD_ReceiveByte() == 0);
 80016c0:	46c0      	nop			@ (mov r8, r8)
 80016c2:	f7ff fca1 	bl	8001008 <SD_ReceiveByte>
 80016c6:	1e03      	subs	r3, r0, #0
 80016c8:	d0fb      	beq.n	80016c2 <SD_WriteBlocks+0xa6>
        SD_CS_HIGH();
 80016ca:	2390      	movs	r3, #144	@ 0x90
 80016cc:	05db      	lsls	r3, r3, #23
 80016ce:	2201      	movs	r2, #1
 80016d0:	2110      	movs	r1, #16
 80016d2:	0018      	movs	r0, r3
 80016d4:	f000 fec2 	bl	800245c <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 80016d8:	20ff      	movs	r0, #255	@ 0xff
 80016da:	f7ff fc81 	bl	8000fe0 <SD_TransmitByte>

        return SD_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e006      	b.n	80016f0 <SD_WriteBlocks+0xd4>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	0018      	movs	r0, r3
 80016ea:	f000 f807 	bl	80016fc <SD_WriteMultiBlocks>
 80016ee:	0003      	movs	r3, r0
    }
}
 80016f0:	0018      	movs	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b006      	add	sp, #24
 80016f6:	bdb0      	pop	{r4, r5, r7, pc}
 80016f8:	200004b4 	.word	0x200004b4

080016fc <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 80016fc:	b5b0      	push	{r4, r5, r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <SD_WriteMultiBlocks+0x16>
 800170e:	2301      	movs	r3, #1
 8001710:	e066      	b.n	80017e0 <SD_WriteMultiBlocks+0xe4>
    if (!sdhc) sector *= 512;
 8001712:	4b35      	ldr	r3, [pc, #212]	@ (80017e8 <SD_WriteMultiBlocks+0xec>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <SD_WriteMultiBlocks+0x24>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	025b      	lsls	r3, r3, #9
 800171e:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8001720:	2390      	movs	r3, #144	@ 0x90
 8001722:	05db      	lsls	r3, r3, #23
 8001724:	2200      	movs	r2, #0
 8001726:	2110      	movs	r1, #16
 8001728:	0018      	movs	r0, r3
 800172a:	f000 fe97 	bl	800245c <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	22ff      	movs	r2, #255	@ 0xff
 8001732:	0019      	movs	r1, r3
 8001734:	2019      	movs	r0, #25
 8001736:	f7ff fcf2 	bl	800111e <SD_SendCommand>
 800173a:	1e03      	subs	r3, r0, #0
 800173c:	d038      	beq.n	80017b0 <SD_WriteMultiBlocks+0xb4>
        SD_CS_HIGH();
 800173e:	2390      	movs	r3, #144	@ 0x90
 8001740:	05db      	lsls	r3, r3, #23
 8001742:	2201      	movs	r2, #1
 8001744:	2110      	movs	r1, #16
 8001746:	0018      	movs	r0, r3
 8001748:	f000 fe88 	bl	800245c <HAL_GPIO_WritePin>
        return SD_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e047      	b.n	80017e0 <SD_WriteMultiBlocks+0xe4>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 8001750:	20fc      	movs	r0, #252	@ 0xfc
 8001752:	f7ff fc45 	bl	8000fe0 <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 8001756:	2380      	movs	r3, #128	@ 0x80
 8001758:	009a      	lsls	r2, r3, #2
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	0011      	movs	r1, r2
 800175e:	0018      	movs	r0, r3
 8001760:	f7ff fc6c 	bl	800103c <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 8001764:	20ff      	movs	r0, #255	@ 0xff
 8001766:	f7ff fc3b 	bl	8000fe0 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 800176a:	20ff      	movs	r0, #255	@ 0xff
 800176c:	f7ff fc38 	bl	8000fe0 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8001770:	2517      	movs	r5, #23
 8001772:	197c      	adds	r4, r7, r5
 8001774:	f7ff fc48 	bl	8001008 <SD_ReceiveByte>
 8001778:	0003      	movs	r3, r0
 800177a:	7023      	strb	r3, [r4, #0]
        if ((resp & 0x1F) != 0x05) {
 800177c:	197b      	adds	r3, r7, r5
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	221f      	movs	r2, #31
 8001782:	4013      	ands	r3, r2
 8001784:	2b05      	cmp	r3, #5
 8001786:	d008      	beq.n	800179a <SD_WriteMultiBlocks+0x9e>
            SD_CS_HIGH();
 8001788:	2390      	movs	r3, #144	@ 0x90
 800178a:	05db      	lsls	r3, r3, #23
 800178c:	2201      	movs	r2, #1
 800178e:	2110      	movs	r1, #16
 8001790:	0018      	movs	r0, r3
 8001792:	f000 fe63 	bl	800245c <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e022      	b.n	80017e0 <SD_WriteMultiBlocks+0xe4>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	f7ff fc34 	bl	8001008 <SD_ReceiveByte>
 80017a0:	1e03      	subs	r3, r0, #0
 80017a2:	d0fb      	beq.n	800179c <SD_WriteMultiBlocks+0xa0>
        buff += 512;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	0092      	lsls	r2, r2, #2
 80017aa:	4694      	mov	ip, r2
 80017ac:	4463      	add	r3, ip
 80017ae:	60fb      	str	r3, [r7, #12]
    while (count--) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	1e5a      	subs	r2, r3, #1
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ca      	bne.n	8001750 <SD_WriteMultiBlocks+0x54>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 80017ba:	20fd      	movs	r0, #253	@ 0xfd
 80017bc:	f7ff fc10 	bl	8000fe0 <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 80017c0:	46c0      	nop			@ (mov r8, r8)
 80017c2:	f7ff fc21 	bl	8001008 <SD_ReceiveByte>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d0fb      	beq.n	80017c2 <SD_WriteMultiBlocks+0xc6>

    SD_CS_HIGH();
 80017ca:	2390      	movs	r3, #144	@ 0x90
 80017cc:	05db      	lsls	r3, r3, #23
 80017ce:	2201      	movs	r2, #1
 80017d0:	2110      	movs	r1, #16
 80017d2:	0018      	movs	r0, r3
 80017d4:	f000 fe42 	bl	800245c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 80017d8:	20ff      	movs	r0, #255	@ 0xff
 80017da:	f7ff fc01 	bl	8000fe0 <SD_TransmitByte>

    return SD_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	0018      	movs	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b006      	add	sp, #24
 80017e6:	bdb0      	pop	{r4, r5, r7, pc}
 80017e8:	200004b4 	.word	0x200004b4

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <HAL_MspInit+0x44>)
 80017f4:	699a      	ldr	r2, [r3, #24]
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <HAL_MspInit+0x44>)
 80017f8:	2101      	movs	r1, #1
 80017fa:	430a      	orrs	r2, r1
 80017fc:	619a      	str	r2, [r3, #24]
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <HAL_MspInit+0x44>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2201      	movs	r2, #1
 8001804:	4013      	ands	r3, r2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_MspInit+0x44>)
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HAL_MspInit+0x44>)
 8001810:	2180      	movs	r1, #128	@ 0x80
 8001812:	0549      	lsls	r1, r1, #21
 8001814:	430a      	orrs	r2, r1
 8001816:	61da      	str	r2, [r3, #28]
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_MspInit+0x44>)
 800181a:	69da      	ldr	r2, [r3, #28]
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	055b      	lsls	r3, r3, #21
 8001820:	4013      	ands	r3, r2
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	46bd      	mov	sp, r7
 800182a:	b002      	add	sp, #8
 800182c:	bd80      	pop	{r7, pc}
 800182e:	46c0      	nop			@ (mov r8, r8)
 8001830:	40021000 	.word	0x40021000

08001834 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b08b      	sub	sp, #44	@ 0x2c
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	2414      	movs	r4, #20
 800183e:	193b      	adds	r3, r7, r4
 8001840:	0018      	movs	r0, r3
 8001842:	2314      	movs	r3, #20
 8001844:	001a      	movs	r2, r3
 8001846:	2100      	movs	r1, #0
 8001848:	f008 f954 	bl	8009af4 <memset>
  if(hspi->Instance==SPI1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a43      	ldr	r2, [pc, #268]	@ (8001960 <HAL_SPI_MspInit+0x12c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d000      	beq.n	8001858 <HAL_SPI_MspInit+0x24>
 8001856:	e07e      	b.n	8001956 <HAL_SPI_MspInit+0x122>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001858:	4b42      	ldr	r3, [pc, #264]	@ (8001964 <HAL_SPI_MspInit+0x130>)
 800185a:	699a      	ldr	r2, [r3, #24]
 800185c:	4b41      	ldr	r3, [pc, #260]	@ (8001964 <HAL_SPI_MspInit+0x130>)
 800185e:	2180      	movs	r1, #128	@ 0x80
 8001860:	0149      	lsls	r1, r1, #5
 8001862:	430a      	orrs	r2, r1
 8001864:	619a      	str	r2, [r3, #24]
 8001866:	4b3f      	ldr	r3, [pc, #252]	@ (8001964 <HAL_SPI_MspInit+0x130>)
 8001868:	699a      	ldr	r2, [r3, #24]
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	015b      	lsls	r3, r3, #5
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	4b3b      	ldr	r3, [pc, #236]	@ (8001964 <HAL_SPI_MspInit+0x130>)
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	4b3a      	ldr	r3, [pc, #232]	@ (8001964 <HAL_SPI_MspInit+0x130>)
 800187a:	2180      	movs	r1, #128	@ 0x80
 800187c:	0289      	lsls	r1, r1, #10
 800187e:	430a      	orrs	r2, r1
 8001880:	615a      	str	r2, [r3, #20]
 8001882:	4b38      	ldr	r3, [pc, #224]	@ (8001964 <HAL_SPI_MspInit+0x130>)
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	2380      	movs	r3, #128	@ 0x80
 8001888:	029b      	lsls	r3, r3, #10
 800188a:	4013      	ands	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001890:	0021      	movs	r1, r4
 8001892:	187b      	adds	r3, r7, r1
 8001894:	22e0      	movs	r2, #224	@ 0xe0
 8001896:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	187b      	adds	r3, r7, r1
 800189a:	2202      	movs	r2, #2
 800189c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	2203      	movs	r2, #3
 80018a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80018aa:	187b      	adds	r3, r7, r1
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	187a      	adds	r2, r7, r1
 80018b2:	2390      	movs	r3, #144	@ 0x90
 80018b4:	05db      	lsls	r3, r3, #23
 80018b6:	0011      	movs	r1, r2
 80018b8:	0018      	movs	r0, r3
 80018ba:	f000 fc5f 	bl	800217c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80018be:	4b2a      	ldr	r3, [pc, #168]	@ (8001968 <HAL_SPI_MspInit+0x134>)
 80018c0:	4a2a      	ldr	r2, [pc, #168]	@ (800196c <HAL_SPI_MspInit+0x138>)
 80018c2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c4:	4b28      	ldr	r3, [pc, #160]	@ (8001968 <HAL_SPI_MspInit+0x134>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ca:	4b27      	ldr	r3, [pc, #156]	@ (8001968 <HAL_SPI_MspInit+0x134>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018d0:	4b25      	ldr	r3, [pc, #148]	@ (8001968 <HAL_SPI_MspInit+0x134>)
 80018d2:	2280      	movs	r2, #128	@ 0x80
 80018d4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d6:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <HAL_SPI_MspInit+0x134>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018dc:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <HAL_SPI_MspInit+0x134>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80018e2:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <HAL_SPI_MspInit+0x134>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <HAL_SPI_MspInit+0x134>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80018ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001968 <HAL_SPI_MspInit+0x134>)
 80018f0:	0018      	movs	r0, r3
 80018f2:	f000 faab 	bl	8001e4c <HAL_DMA_Init>
 80018f6:	1e03      	subs	r3, r0, #0
 80018f8:	d001      	beq.n	80018fe <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80018fa:	f7fe fe2b 	bl	8000554 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a19      	ldr	r2, [pc, #100]	@ (8001968 <HAL_SPI_MspInit+0x134>)
 8001902:	659a      	str	r2, [r3, #88]	@ 0x58
 8001904:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <HAL_SPI_MspInit+0x134>)
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	625a      	str	r2, [r3, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800190a:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <HAL_SPI_MspInit+0x13c>)
 800190c:	4a19      	ldr	r2, [pc, #100]	@ (8001974 <HAL_SPI_MspInit+0x140>)
 800190e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001910:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <HAL_SPI_MspInit+0x13c>)
 8001912:	2210      	movs	r2, #16
 8001914:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001916:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <HAL_SPI_MspInit+0x13c>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800191c:	4b14      	ldr	r3, [pc, #80]	@ (8001970 <HAL_SPI_MspInit+0x13c>)
 800191e:	2280      	movs	r2, #128	@ 0x80
 8001920:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001922:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <HAL_SPI_MspInit+0x13c>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_SPI_MspInit+0x13c>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_SPI_MspInit+0x13c>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001934:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <HAL_SPI_MspInit+0x13c>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800193a:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <HAL_SPI_MspInit+0x13c>)
 800193c:	0018      	movs	r0, r3
 800193e:	f000 fa85 	bl	8001e4c <HAL_DMA_Init>
 8001942:	1e03      	subs	r3, r0, #0
 8001944:	d001      	beq.n	800194a <HAL_SPI_MspInit+0x116>
    {
      Error_Handler();
 8001946:	f7fe fe05 	bl	8000554 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <HAL_SPI_MspInit+0x13c>)
 800194e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001950:	4b07      	ldr	r3, [pc, #28]	@ (8001970 <HAL_SPI_MspInit+0x13c>)
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b00b      	add	sp, #44	@ 0x2c
 800195c:	bd90      	pop	{r4, r7, pc}
 800195e:	46c0      	nop			@ (mov r8, r8)
 8001960:	40013000 	.word	0x40013000
 8001964:	40021000 	.word	0x40021000
 8001968:	200000e8 	.word	0x200000e8
 800196c:	4002001c 	.word	0x4002001c
 8001970:	2000012c 	.word	0x2000012c
 8001974:	40020030 	.word	0x40020030

08001978 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b08b      	sub	sp, #44	@ 0x2c
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	2414      	movs	r4, #20
 8001982:	193b      	adds	r3, r7, r4
 8001984:	0018      	movs	r0, r3
 8001986:	2314      	movs	r3, #20
 8001988:	001a      	movs	r2, r3
 800198a:	2100      	movs	r1, #0
 800198c:	f008 f8b2 	bl	8009af4 <memset>
  if(huart->Instance==USART2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a1c      	ldr	r2, [pc, #112]	@ (8001a08 <HAL_UART_MspInit+0x90>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d132      	bne.n	8001a00 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800199a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <HAL_UART_MspInit+0x94>)
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <HAL_UART_MspInit+0x94>)
 80019a0:	2180      	movs	r1, #128	@ 0x80
 80019a2:	0289      	lsls	r1, r1, #10
 80019a4:	430a      	orrs	r2, r1
 80019a6:	61da      	str	r2, [r3, #28]
 80019a8:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <HAL_UART_MspInit+0x94>)
 80019aa:	69da      	ldr	r2, [r3, #28]
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	029b      	lsls	r3, r3, #10
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_UART_MspInit+0x94>)
 80019b8:	695a      	ldr	r2, [r3, #20]
 80019ba:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <HAL_UART_MspInit+0x94>)
 80019bc:	2180      	movs	r1, #128	@ 0x80
 80019be:	0289      	lsls	r1, r1, #10
 80019c0:	430a      	orrs	r2, r1
 80019c2:	615a      	str	r2, [r3, #20]
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <HAL_UART_MspInit+0x94>)
 80019c6:	695a      	ldr	r2, [r3, #20]
 80019c8:	2380      	movs	r3, #128	@ 0x80
 80019ca:	029b      	lsls	r3, r3, #10
 80019cc:	4013      	ands	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019d2:	0021      	movs	r1, r4
 80019d4:	187b      	adds	r3, r7, r1
 80019d6:	220c      	movs	r2, #12
 80019d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	187b      	adds	r3, r7, r1
 80019dc:	2202      	movs	r2, #2
 80019de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	187b      	adds	r3, r7, r1
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	2203      	movs	r2, #3
 80019ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	2201      	movs	r2, #1
 80019f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	187a      	adds	r2, r7, r1
 80019f4:	2390      	movs	r3, #144	@ 0x90
 80019f6:	05db      	lsls	r3, r3, #23
 80019f8:	0011      	movs	r1, r2
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 fbbe 	bl	800217c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a00:	46c0      	nop			@ (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b00b      	add	sp, #44	@ 0x2c
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	40004400 	.word	0x40004400
 8001a0c:	40021000 	.word	0x40021000

08001a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a14:	46c0      	nop			@ (mov r8, r8)
 8001a16:	e7fd      	b.n	8001a14 <NMI_Handler+0x4>

08001a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1c:	46c0      	nop			@ (mov r8, r8)
 8001a1e:	e7fd      	b.n	8001a1c <HardFault_Handler+0x4>

08001a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a24:	46c0      	nop			@ (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a38:	f000 f90e 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3c:	46c0      	nop			@ (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f000 faac 	bl	8001fa8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a50:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 faa8 	bl	8001fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001a58:	46c0      	nop			@ (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	200000e8 	.word	0x200000e8
 8001a64:	2000012c 	.word	0x2000012c

08001a68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	e00a      	b.n	8001a90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a7a:	e000      	b.n	8001a7e <_read+0x16>
 8001a7c:	bf00      	nop
 8001a7e:	0001      	movs	r1, r0
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	60ba      	str	r2, [r7, #8]
 8001a86:	b2ca      	uxtb	r2, r1
 8001a88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dbf0      	blt.n	8001a7a <_read+0x12>
  }

  return len;
 8001a98:	687b      	ldr	r3, [r7, #4]
}
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b006      	add	sp, #24
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	425b      	negs	r3, r3
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2280      	movs	r2, #128	@ 0x80
 8001ac4:	0192      	lsls	r2, r2, #6
 8001ac6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	0018      	movs	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b002      	add	sp, #8
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_isatty>:

int _isatty(int file)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b004      	add	sp, #16
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b04:	4a14      	ldr	r2, [pc, #80]	@ (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b18:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	@ (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	18d3      	adds	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b2c:	f008 f84a 	bl	8009bc4 <__errno>
 8001b30:	0003      	movs	r3, r0
 8001b32:	220c      	movs	r2, #12
 8001b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	425b      	negs	r3, r3
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b42:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	18d2      	adds	r2, r2, r3
 8001b4a:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <_sbrk+0x64>)
 8001b4c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	0018      	movs	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b006      	add	sp, #24
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20002000 	.word	0x20002000
 8001b5c:	00000400 	.word	0x00000400
 8001b60:	200006b8 	.word	0x200006b8
 8001b64:	20000838 	.word	0x20000838

08001b68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b6c:	46c0      	nop			@ (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b74:	480d      	ldr	r0, [pc, #52]	@ (8001bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b76:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001b78:	f7ff fff6 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b7c:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b7e:	490d      	ldr	r1, [pc, #52]	@ (8001bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <LoopForever+0xe>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b94:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc0 <LoopForever+0x16>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ba2:	f008 f815 	bl	8009bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ba6:	f7fe fb73 	bl	8000290 <main>

08001baa <LoopForever>:

LoopForever:
    b LoopForever
 8001baa:	e7fe      	b.n	8001baa <LoopForever>
  ldr   r0, =_estack
 8001bac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001bb8:	0800b3a0 	.word	0x0800b3a0
  ldr r2, =_sbss
 8001bbc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001bc0:	20000838 	.word	0x20000838

08001bc4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC1_COMP_IRQHandler>
	...

08001bc8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <HAL_Init+0x24>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_Init+0x24>)
 8001bd2:	2110      	movs	r1, #16
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 f809 	bl	8001bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bde:	f7ff fe05 	bl	80017ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	40022000 	.word	0x40022000

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf8:	4b14      	ldr	r3, [pc, #80]	@ (8001c4c <HAL_InitTick+0x5c>)
 8001bfa:	681c      	ldr	r4, [r3, #0]
 8001bfc:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <HAL_InitTick+0x60>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	0019      	movs	r1, r3
 8001c02:	23fa      	movs	r3, #250	@ 0xfa
 8001c04:	0098      	lsls	r0, r3, #2
 8001c06:	f7fe fa9b 	bl	8000140 <__udivsi3>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	0020      	movs	r0, r4
 8001c10:	f7fe fa96 	bl	8000140 <__udivsi3>
 8001c14:	0003      	movs	r3, r0
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 f90b 	bl	8001e32 <HAL_SYSTICK_Config>
 8001c1c:	1e03      	subs	r3, r0, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e00f      	b.n	8001c44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d80b      	bhi.n	8001c42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	425b      	negs	r3, r3
 8001c30:	2200      	movs	r2, #0
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 f8d8 	bl	8001de8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_InitTick+0x64>)
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b003      	add	sp, #12
 8001c4a:	bd90      	pop	{r4, r7, pc}
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000008 	.word	0x20000008
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_IncTick+0x1c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	001a      	movs	r2, r3
 8001c62:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HAL_IncTick+0x20>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	18d2      	adds	r2, r2, r3
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <HAL_IncTick+0x20>)
 8001c6a:	601a      	str	r2, [r3, #0]
}
 8001c6c:	46c0      	nop			@ (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			@ (mov r8, r8)
 8001c74:	20000008 	.word	0x20000008
 8001c78:	200006bc 	.word	0x200006bc

08001c7c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b02      	ldr	r3, [pc, #8]	@ (8001c8c <HAL_GetTick+0x10>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	200006bc 	.word	0x200006bc

08001c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	0002      	movs	r2, r0
 8001c98:	1dfb      	adds	r3, r7, #7
 8001c9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ca2:	d809      	bhi.n	8001cb8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca4:	1dfb      	adds	r3, r7, #7
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	001a      	movs	r2, r3
 8001caa:	231f      	movs	r3, #31
 8001cac:	401a      	ands	r2, r3
 8001cae:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <__NVIC_EnableIRQ+0x30>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4091      	lsls	r1, r2
 8001cb4:	000a      	movs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
  }
}
 8001cb8:	46c0      	nop			@ (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b002      	add	sp, #8
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	0002      	movs	r2, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	1dfb      	adds	r3, r7, #7
 8001cd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cd2:	1dfb      	adds	r3, r7, #7
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cd8:	d828      	bhi.n	8001d2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cda:	4a2f      	ldr	r2, [pc, #188]	@ (8001d98 <__NVIC_SetPriority+0xd4>)
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	33c0      	adds	r3, #192	@ 0xc0
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	589b      	ldr	r3, [r3, r2]
 8001cea:	1dfa      	adds	r2, r7, #7
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	0011      	movs	r1, r2
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	00d2      	lsls	r2, r2, #3
 8001cf6:	21ff      	movs	r1, #255	@ 0xff
 8001cf8:	4091      	lsls	r1, r2
 8001cfa:	000a      	movs	r2, r1
 8001cfc:	43d2      	mvns	r2, r2
 8001cfe:	401a      	ands	r2, r3
 8001d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	019b      	lsls	r3, r3, #6
 8001d06:	22ff      	movs	r2, #255	@ 0xff
 8001d08:	401a      	ands	r2, r3
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	2303      	movs	r3, #3
 8001d12:	4003      	ands	r3, r0
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d18:	481f      	ldr	r0, [pc, #124]	@ (8001d98 <__NVIC_SetPriority+0xd4>)
 8001d1a:	1dfb      	adds	r3, r7, #7
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	430a      	orrs	r2, r1
 8001d24:	33c0      	adds	r3, #192	@ 0xc0
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d2a:	e031      	b.n	8001d90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d9c <__NVIC_SetPriority+0xd8>)
 8001d2e:	1dfb      	adds	r3, r7, #7
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	0019      	movs	r1, r3
 8001d34:	230f      	movs	r3, #15
 8001d36:	400b      	ands	r3, r1
 8001d38:	3b08      	subs	r3, #8
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3306      	adds	r3, #6
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	18d3      	adds	r3, r2, r3
 8001d42:	3304      	adds	r3, #4
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	1dfa      	adds	r2, r7, #7
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	0011      	movs	r1, r2
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	400a      	ands	r2, r1
 8001d50:	00d2      	lsls	r2, r2, #3
 8001d52:	21ff      	movs	r1, #255	@ 0xff
 8001d54:	4091      	lsls	r1, r2
 8001d56:	000a      	movs	r2, r1
 8001d58:	43d2      	mvns	r2, r2
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	019b      	lsls	r3, r3, #6
 8001d62:	22ff      	movs	r2, #255	@ 0xff
 8001d64:	401a      	ands	r2, r3
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	4003      	ands	r3, r0
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d74:	4809      	ldr	r0, [pc, #36]	@ (8001d9c <__NVIC_SetPriority+0xd8>)
 8001d76:	1dfb      	adds	r3, r7, #7
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	001c      	movs	r4, r3
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	4023      	ands	r3, r4
 8001d80:	3b08      	subs	r3, #8
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	430a      	orrs	r2, r1
 8001d86:	3306      	adds	r3, #6
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	18c3      	adds	r3, r0, r3
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	601a      	str	r2, [r3, #0]
}
 8001d90:	46c0      	nop			@ (mov r8, r8)
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b003      	add	sp, #12
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	1e5a      	subs	r2, r3, #1
 8001dac:	2380      	movs	r3, #128	@ 0x80
 8001dae:	045b      	lsls	r3, r3, #17
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d301      	bcc.n	8001db8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db4:	2301      	movs	r3, #1
 8001db6:	e010      	b.n	8001dda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db8:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <SysTick_Config+0x44>)
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	425b      	negs	r3, r3
 8001dc4:	2103      	movs	r1, #3
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff ff7c 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <SysTick_Config+0x44>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	@ (8001de4 <SysTick_Config+0x44>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	210f      	movs	r1, #15
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	1c02      	adds	r2, r0, #0
 8001df8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	187b      	adds	r3, r7, r1
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	0011      	movs	r1, r2
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff ff5d 	bl	8001cc4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b004      	add	sp, #16
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	0002      	movs	r2, r0
 8001e1a:	1dfb      	adds	r3, r7, #7
 8001e1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff ff33 	bl	8001c90 <__NVIC_EnableIRQ>
}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b002      	add	sp, #8
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff ffaf 	bl	8001da0 <SysTick_Config>
 8001e42:	0003      	movs	r3, r0
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e036      	b.n	8001ed0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2221      	movs	r2, #33	@ 0x21
 8001e66:	2102      	movs	r1, #2
 8001e68:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4a18      	ldr	r2, [pc, #96]	@ (8001ed8 <HAL_DMA_Init+0x8c>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 f946 	bl	8002144 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2221      	movs	r2, #33	@ 0x21
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	2100      	movs	r1, #0
 8001ecc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b004      	add	sp, #16
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	ffffc00f 	.word	0xffffc00f

08001edc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eea:	2317      	movs	r3, #23
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	5c9b      	ldrb	r3, [r3, r2]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_DMA_Start_IT+0x24>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e04f      	b.n	8001fa0 <HAL_DMA_Start_IT+0xc4>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2220      	movs	r2, #32
 8001f04:	2101      	movs	r1, #1
 8001f06:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2221      	movs	r2, #33	@ 0x21
 8001f0c:	5c9b      	ldrb	r3, [r3, r2]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d13a      	bne.n	8001f8a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2221      	movs	r2, #33	@ 0x21
 8001f18:	2102      	movs	r1, #2
 8001f1a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	438a      	bics	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f8d7 	bl	80020ec <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	210e      	movs	r1, #14
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e00f      	b.n	8001f78 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	210a      	movs	r1, #10
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2104      	movs	r1, #4
 8001f74:	438a      	bics	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2101      	movs	r1, #1
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e007      	b.n	8001f9a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	2100      	movs	r1, #0
 8001f90:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f92:	2317      	movs	r3, #23
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	2202      	movs	r2, #2
 8001f98:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001f9a:	2317      	movs	r3, #23
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	781b      	ldrb	r3, [r3, #0]
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b006      	add	sp, #24
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	0013      	movs	r3, r2
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d024      	beq.n	800201a <HAL_DMA_IRQHandler+0x72>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d020      	beq.n	800201a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d107      	bne.n	8001ff4 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2104      	movs	r1, #4
 8001ff0:	438a      	bics	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	4091      	lsls	r1, r2
 8002000:	000a      	movs	r2, r1
 8002002:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002008:	2b00      	cmp	r3, #0
 800200a:	d100      	bne.n	800200e <HAL_DMA_IRQHandler+0x66>
 800200c:	e06a      	b.n	80020e4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	0010      	movs	r0, r2
 8002016:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002018:	e064      	b.n	80020e4 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	2202      	movs	r2, #2
 8002020:	409a      	lsls	r2, r3
 8002022:	0013      	movs	r3, r2
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4013      	ands	r3, r2
 8002028:	d02b      	beq.n	8002082 <HAL_DMA_IRQHandler+0xda>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2202      	movs	r2, #2
 800202e:	4013      	ands	r3, r2
 8002030:	d027      	beq.n	8002082 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2220      	movs	r2, #32
 800203a:	4013      	ands	r3, r2
 800203c:	d10b      	bne.n	8002056 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	210a      	movs	r1, #10
 800204a:	438a      	bics	r2, r1
 800204c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2221      	movs	r2, #33	@ 0x21
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800205e:	2102      	movs	r1, #2
 8002060:	4091      	lsls	r1, r2
 8002062:	000a      	movs	r2, r1
 8002064:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2220      	movs	r2, #32
 800206a:	2100      	movs	r1, #0
 800206c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002072:	2b00      	cmp	r3, #0
 8002074:	d036      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	0010      	movs	r0, r2
 800207e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002080:	e030      	b.n	80020e4 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	2208      	movs	r2, #8
 8002088:	409a      	lsls	r2, r3
 800208a:	0013      	movs	r3, r2
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	d028      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x13c>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2208      	movs	r2, #8
 8002096:	4013      	ands	r3, r2
 8002098:	d024      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	210e      	movs	r1, #14
 80020a6:	438a      	bics	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b2:	2101      	movs	r1, #1
 80020b4:	4091      	lsls	r1, r2
 80020b6:	000a      	movs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2221      	movs	r2, #33	@ 0x21
 80020c4:	2101      	movs	r1, #1
 80020c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	2100      	movs	r1, #0
 80020ce:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	0010      	movs	r0, r2
 80020e0:	4798      	blx	r3
    }
  }
}
 80020e2:	e7ff      	b.n	80020e4 <HAL_DMA_IRQHandler+0x13c>
 80020e4:	46c0      	nop			@ (mov r8, r8)
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b004      	add	sp, #16
 80020ea:	bd80      	pop	{r7, pc}

080020ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002102:	2101      	movs	r1, #1
 8002104:	4091      	lsls	r1, r2
 8002106:	000a      	movs	r2, r1
 8002108:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b10      	cmp	r3, #16
 8002118:	d108      	bne.n	800212c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800212a:	e007      	b.n	800213c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	60da      	str	r2, [r3, #12]
}
 800213c:	46c0      	nop			@ (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b004      	add	sp, #16
 8002142:	bd80      	pop	{r7, pc}

08002144 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a08      	ldr	r2, [pc, #32]	@ (8002174 <DMA_CalcBaseAndBitshift+0x30>)
 8002152:	4694      	mov	ip, r2
 8002154:	4463      	add	r3, ip
 8002156:	2114      	movs	r1, #20
 8002158:	0018      	movs	r0, r3
 800215a:	f7fd fff1 	bl	8000140 <__udivsi3>
 800215e:	0003      	movs	r3, r0
 8002160:	009a      	lsls	r2, r3, #2
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a03      	ldr	r2, [pc, #12]	@ (8002178 <DMA_CalcBaseAndBitshift+0x34>)
 800216a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800216c:	46c0      	nop			@ (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	b002      	add	sp, #8
 8002172:	bd80      	pop	{r7, pc}
 8002174:	bffdfff8 	.word	0xbffdfff8
 8002178:	40020000 	.word	0x40020000

0800217c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218a:	e14f      	b.n	800242c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2101      	movs	r1, #1
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4091      	lsls	r1, r2
 8002196:	000a      	movs	r2, r1
 8002198:	4013      	ands	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d100      	bne.n	80021a4 <HAL_GPIO_Init+0x28>
 80021a2:	e140      	b.n	8002426 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2203      	movs	r2, #3
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d005      	beq.n	80021bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2203      	movs	r2, #3
 80021b6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d130      	bne.n	800221e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	409a      	lsls	r2, r3
 80021ca:	0013      	movs	r3, r2
 80021cc:	43da      	mvns	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	409a      	lsls	r2, r3
 80021de:	0013      	movs	r3, r2
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f2:	2201      	movs	r2, #1
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
 80021f8:	0013      	movs	r3, r2
 80021fa:	43da      	mvns	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	2201      	movs	r2, #1
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
 8002210:	0013      	movs	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2203      	movs	r2, #3
 8002224:	4013      	ands	r3, r2
 8002226:	2b03      	cmp	r3, #3
 8002228:	d017      	beq.n	800225a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	409a      	lsls	r2, r3
 8002238:	0013      	movs	r3, r2
 800223a:	43da      	mvns	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	409a      	lsls	r2, r3
 800224c:	0013      	movs	r3, r2
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2203      	movs	r2, #3
 8002260:	4013      	ands	r3, r2
 8002262:	2b02      	cmp	r3, #2
 8002264:	d123      	bne.n	80022ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	08da      	lsrs	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3208      	adds	r2, #8
 800226e:	0092      	lsls	r2, r2, #2
 8002270:	58d3      	ldr	r3, [r2, r3]
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2207      	movs	r2, #7
 8002278:	4013      	ands	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	409a      	lsls	r2, r3
 8002280:	0013      	movs	r3, r2
 8002282:	43da      	mvns	r2, r3
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2107      	movs	r1, #7
 8002292:	400b      	ands	r3, r1
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	409a      	lsls	r2, r3
 8002298:	0013      	movs	r3, r2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	08da      	lsrs	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3208      	adds	r2, #8
 80022a8:	0092      	lsls	r2, r2, #2
 80022aa:	6939      	ldr	r1, [r7, #16]
 80022ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	409a      	lsls	r2, r3
 80022bc:	0013      	movs	r3, r2
 80022be:	43da      	mvns	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2203      	movs	r2, #3
 80022cc:	401a      	ands	r2, r3
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	409a      	lsls	r2, r3
 80022d4:	0013      	movs	r3, r2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	23c0      	movs	r3, #192	@ 0xc0
 80022e8:	029b      	lsls	r3, r3, #10
 80022ea:	4013      	ands	r3, r2
 80022ec:	d100      	bne.n	80022f0 <HAL_GPIO_Init+0x174>
 80022ee:	e09a      	b.n	8002426 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f0:	4b54      	ldr	r3, [pc, #336]	@ (8002444 <HAL_GPIO_Init+0x2c8>)
 80022f2:	699a      	ldr	r2, [r3, #24]
 80022f4:	4b53      	ldr	r3, [pc, #332]	@ (8002444 <HAL_GPIO_Init+0x2c8>)
 80022f6:	2101      	movs	r1, #1
 80022f8:	430a      	orrs	r2, r1
 80022fa:	619a      	str	r2, [r3, #24]
 80022fc:	4b51      	ldr	r3, [pc, #324]	@ (8002444 <HAL_GPIO_Init+0x2c8>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2201      	movs	r2, #1
 8002302:	4013      	ands	r3, r2
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002308:	4a4f      	ldr	r2, [pc, #316]	@ (8002448 <HAL_GPIO_Init+0x2cc>)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3302      	adds	r3, #2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	589b      	ldr	r3, [r3, r2]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2203      	movs	r2, #3
 800231a:	4013      	ands	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	220f      	movs	r2, #15
 8002320:	409a      	lsls	r2, r3
 8002322:	0013      	movs	r3, r2
 8002324:	43da      	mvns	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	2390      	movs	r3, #144	@ 0x90
 8002330:	05db      	lsls	r3, r3, #23
 8002332:	429a      	cmp	r2, r3
 8002334:	d013      	beq.n	800235e <HAL_GPIO_Init+0x1e2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a44      	ldr	r2, [pc, #272]	@ (800244c <HAL_GPIO_Init+0x2d0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00d      	beq.n	800235a <HAL_GPIO_Init+0x1de>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a43      	ldr	r2, [pc, #268]	@ (8002450 <HAL_GPIO_Init+0x2d4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x1da>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a42      	ldr	r2, [pc, #264]	@ (8002454 <HAL_GPIO_Init+0x2d8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_GPIO_Init+0x1d6>
 800234e:	2303      	movs	r3, #3
 8002350:	e006      	b.n	8002360 <HAL_GPIO_Init+0x1e4>
 8002352:	2305      	movs	r3, #5
 8002354:	e004      	b.n	8002360 <HAL_GPIO_Init+0x1e4>
 8002356:	2302      	movs	r3, #2
 8002358:	e002      	b.n	8002360 <HAL_GPIO_Init+0x1e4>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_GPIO_Init+0x1e4>
 800235e:	2300      	movs	r3, #0
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	2103      	movs	r1, #3
 8002364:	400a      	ands	r2, r1
 8002366:	0092      	lsls	r2, r2, #2
 8002368:	4093      	lsls	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002370:	4935      	ldr	r1, [pc, #212]	@ (8002448 <HAL_GPIO_Init+0x2cc>)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800237e:	4b36      	ldr	r3, [pc, #216]	@ (8002458 <HAL_GPIO_Init+0x2dc>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	43da      	mvns	r2, r3
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	035b      	lsls	r3, r3, #13
 8002396:	4013      	ands	r3, r2
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002458 <HAL_GPIO_Init+0x2dc>)
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80023a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002458 <HAL_GPIO_Init+0x2dc>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	43da      	mvns	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	2380      	movs	r3, #128	@ 0x80
 80023be:	039b      	lsls	r3, r3, #14
 80023c0:	4013      	ands	r3, r2
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023cc:	4b22      	ldr	r3, [pc, #136]	@ (8002458 <HAL_GPIO_Init+0x2dc>)
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80023d2:	4b21      	ldr	r3, [pc, #132]	@ (8002458 <HAL_GPIO_Init+0x2dc>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	43da      	mvns	r2, r3
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	2380      	movs	r3, #128	@ 0x80
 80023e8:	029b      	lsls	r3, r3, #10
 80023ea:	4013      	ands	r3, r2
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023f6:	4b18      	ldr	r3, [pc, #96]	@ (8002458 <HAL_GPIO_Init+0x2dc>)
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80023fc:	4b16      	ldr	r3, [pc, #88]	@ (8002458 <HAL_GPIO_Init+0x2dc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	43da      	mvns	r2, r3
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	2380      	movs	r3, #128	@ 0x80
 8002412:	025b      	lsls	r3, r3, #9
 8002414:	4013      	ands	r3, r2
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002420:	4b0d      	ldr	r3, [pc, #52]	@ (8002458 <HAL_GPIO_Init+0x2dc>)
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	40da      	lsrs	r2, r3
 8002434:	1e13      	subs	r3, r2, #0
 8002436:	d000      	beq.n	800243a <HAL_GPIO_Init+0x2be>
 8002438:	e6a8      	b.n	800218c <HAL_GPIO_Init+0x10>
  } 
}
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	46c0      	nop			@ (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b006      	add	sp, #24
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	40010000 	.word	0x40010000
 800244c:	48000400 	.word	0x48000400
 8002450:	48000800 	.word	0x48000800
 8002454:	48000c00 	.word	0x48000c00
 8002458:	40010400 	.word	0x40010400

0800245c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	0008      	movs	r0, r1
 8002466:	0011      	movs	r1, r2
 8002468:	1cbb      	adds	r3, r7, #2
 800246a:	1c02      	adds	r2, r0, #0
 800246c:	801a      	strh	r2, [r3, #0]
 800246e:	1c7b      	adds	r3, r7, #1
 8002470:	1c0a      	adds	r2, r1, #0
 8002472:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002474:	1c7b      	adds	r3, r7, #1
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800247c:	1cbb      	adds	r3, r7, #2
 800247e:	881a      	ldrh	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002484:	e003      	b.n	800248e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002486:	1cbb      	adds	r3, r7, #2
 8002488:	881a      	ldrh	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800248e:	46c0      	nop			@ (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b002      	add	sp, #8
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e301      	b.n	8002aae <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2201      	movs	r2, #1
 80024b0:	4013      	ands	r3, r2
 80024b2:	d100      	bne.n	80024b6 <HAL_RCC_OscConfig+0x1e>
 80024b4:	e08d      	b.n	80025d2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024b6:	4bc3      	ldr	r3, [pc, #780]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	220c      	movs	r2, #12
 80024bc:	4013      	ands	r3, r2
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d00e      	beq.n	80024e0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c2:	4bc0      	ldr	r3, [pc, #768]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	220c      	movs	r2, #12
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d116      	bne.n	80024fc <HAL_RCC_OscConfig+0x64>
 80024ce:	4bbd      	ldr	r3, [pc, #756]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	2380      	movs	r3, #128	@ 0x80
 80024d4:	025b      	lsls	r3, r3, #9
 80024d6:	401a      	ands	r2, r3
 80024d8:	2380      	movs	r3, #128	@ 0x80
 80024da:	025b      	lsls	r3, r3, #9
 80024dc:	429a      	cmp	r2, r3
 80024de:	d10d      	bne.n	80024fc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	4bb8      	ldr	r3, [pc, #736]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2380      	movs	r3, #128	@ 0x80
 80024e6:	029b      	lsls	r3, r3, #10
 80024e8:	4013      	ands	r3, r2
 80024ea:	d100      	bne.n	80024ee <HAL_RCC_OscConfig+0x56>
 80024ec:	e070      	b.n	80025d0 <HAL_RCC_OscConfig+0x138>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d000      	beq.n	80024f8 <HAL_RCC_OscConfig+0x60>
 80024f6:	e06b      	b.n	80025d0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e2d8      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d107      	bne.n	8002514 <HAL_RCC_OscConfig+0x7c>
 8002504:	4baf      	ldr	r3, [pc, #700]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4bae      	ldr	r3, [pc, #696]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 800250a:	2180      	movs	r1, #128	@ 0x80
 800250c:	0249      	lsls	r1, r1, #9
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e02f      	b.n	8002574 <HAL_RCC_OscConfig+0xdc>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10c      	bne.n	8002536 <HAL_RCC_OscConfig+0x9e>
 800251c:	4ba9      	ldr	r3, [pc, #676]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4ba8      	ldr	r3, [pc, #672]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002522:	49a9      	ldr	r1, [pc, #676]	@ (80027c8 <HAL_RCC_OscConfig+0x330>)
 8002524:	400a      	ands	r2, r1
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	4ba6      	ldr	r3, [pc, #664]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4ba5      	ldr	r3, [pc, #660]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 800252e:	49a7      	ldr	r1, [pc, #668]	@ (80027cc <HAL_RCC_OscConfig+0x334>)
 8002530:	400a      	ands	r2, r1
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e01e      	b.n	8002574 <HAL_RCC_OscConfig+0xdc>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b05      	cmp	r3, #5
 800253c:	d10e      	bne.n	800255c <HAL_RCC_OscConfig+0xc4>
 800253e:	4ba1      	ldr	r3, [pc, #644]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4ba0      	ldr	r3, [pc, #640]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002544:	2180      	movs	r1, #128	@ 0x80
 8002546:	02c9      	lsls	r1, r1, #11
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	4b9d      	ldr	r3, [pc, #628]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b9c      	ldr	r3, [pc, #624]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002552:	2180      	movs	r1, #128	@ 0x80
 8002554:	0249      	lsls	r1, r1, #9
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e00b      	b.n	8002574 <HAL_RCC_OscConfig+0xdc>
 800255c:	4b99      	ldr	r3, [pc, #612]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b98      	ldr	r3, [pc, #608]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002562:	4999      	ldr	r1, [pc, #612]	@ (80027c8 <HAL_RCC_OscConfig+0x330>)
 8002564:	400a      	ands	r2, r1
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	4b96      	ldr	r3, [pc, #600]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b95      	ldr	r3, [pc, #596]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 800256e:	4997      	ldr	r1, [pc, #604]	@ (80027cc <HAL_RCC_OscConfig+0x334>)
 8002570:	400a      	ands	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d014      	beq.n	80025a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7ff fb7e 	bl	8001c7c <HAL_GetTick>
 8002580:	0003      	movs	r3, r0
 8002582:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002586:	f7ff fb79 	bl	8001c7c <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b64      	cmp	r3, #100	@ 0x64
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e28a      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002598:	4b8a      	ldr	r3, [pc, #552]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2380      	movs	r3, #128	@ 0x80
 800259e:	029b      	lsls	r3, r3, #10
 80025a0:	4013      	ands	r3, r2
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0xee>
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7ff fb69 	bl	8001c7c <HAL_GetTick>
 80025aa:	0003      	movs	r3, r0
 80025ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b0:	f7ff fb64 	bl	8001c7c <HAL_GetTick>
 80025b4:	0002      	movs	r2, r0
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	@ 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e275      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	4b80      	ldr	r3, [pc, #512]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	@ 0x80
 80025c8:	029b      	lsls	r3, r3, #10
 80025ca:	4013      	ands	r3, r2
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x118>
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2202      	movs	r2, #2
 80025d8:	4013      	ands	r3, r2
 80025da:	d100      	bne.n	80025de <HAL_RCC_OscConfig+0x146>
 80025dc:	e069      	b.n	80026b2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025de:	4b79      	ldr	r3, [pc, #484]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	220c      	movs	r2, #12
 80025e4:	4013      	ands	r3, r2
 80025e6:	d00b      	beq.n	8002600 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025e8:	4b76      	ldr	r3, [pc, #472]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	220c      	movs	r2, #12
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d11c      	bne.n	800262e <HAL_RCC_OscConfig+0x196>
 80025f4:	4b73      	ldr	r3, [pc, #460]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	025b      	lsls	r3, r3, #9
 80025fc:	4013      	ands	r3, r2
 80025fe:	d116      	bne.n	800262e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002600:	4b70      	ldr	r3, [pc, #448]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2202      	movs	r2, #2
 8002606:	4013      	ands	r3, r2
 8002608:	d005      	beq.n	8002616 <HAL_RCC_OscConfig+0x17e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e24b      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002616:	4b6b      	ldr	r3, [pc, #428]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	22f8      	movs	r2, #248	@ 0xf8
 800261c:	4393      	bics	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	00da      	lsls	r2, r3, #3
 8002626:	4b67      	ldr	r3, [pc, #412]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262c:	e041      	b.n	80026b2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d024      	beq.n	8002680 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002636:	4b63      	ldr	r3, [pc, #396]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b62      	ldr	r3, [pc, #392]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 800263c:	2101      	movs	r1, #1
 800263e:	430a      	orrs	r2, r1
 8002640:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002642:	f7ff fb1b 	bl	8001c7c <HAL_GetTick>
 8002646:	0003      	movs	r3, r0
 8002648:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264c:	f7ff fb16 	bl	8001c7c <HAL_GetTick>
 8002650:	0002      	movs	r2, r0
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e227      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265e:	4b59      	ldr	r3, [pc, #356]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2202      	movs	r2, #2
 8002664:	4013      	ands	r3, r2
 8002666:	d0f1      	beq.n	800264c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002668:	4b56      	ldr	r3, [pc, #344]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	22f8      	movs	r2, #248	@ 0xf8
 800266e:	4393      	bics	r3, r2
 8002670:	0019      	movs	r1, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	00da      	lsls	r2, r3, #3
 8002678:	4b52      	ldr	r3, [pc, #328]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 800267a:	430a      	orrs	r2, r1
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e018      	b.n	80026b2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002680:	4b50      	ldr	r3, [pc, #320]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b4f      	ldr	r3, [pc, #316]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002686:	2101      	movs	r1, #1
 8002688:	438a      	bics	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7ff faf6 	bl	8001c7c <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002696:	f7ff faf1 	bl	8001c7c <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e202      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a8:	4b46      	ldr	r3, [pc, #280]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2202      	movs	r2, #2
 80026ae:	4013      	ands	r3, r2
 80026b0:	d1f1      	bne.n	8002696 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2208      	movs	r2, #8
 80026b8:	4013      	ands	r3, r2
 80026ba:	d036      	beq.n	800272a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d019      	beq.n	80026f8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c4:	4b3f      	ldr	r3, [pc, #252]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80026c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026c8:	4b3e      	ldr	r3, [pc, #248]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80026ca:	2101      	movs	r1, #1
 80026cc:	430a      	orrs	r2, r1
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d0:	f7ff fad4 	bl	8001c7c <HAL_GetTick>
 80026d4:	0003      	movs	r3, r0
 80026d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026da:	f7ff facf 	bl	8001c7c <HAL_GetTick>
 80026de:	0002      	movs	r2, r0
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e1e0      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ec:	4b35      	ldr	r3, [pc, #212]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	2202      	movs	r2, #2
 80026f2:	4013      	ands	r3, r2
 80026f4:	d0f1      	beq.n	80026da <HAL_RCC_OscConfig+0x242>
 80026f6:	e018      	b.n	800272a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f8:	4b32      	ldr	r3, [pc, #200]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80026fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026fc:	4b31      	ldr	r3, [pc, #196]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80026fe:	2101      	movs	r1, #1
 8002700:	438a      	bics	r2, r1
 8002702:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002704:	f7ff faba 	bl	8001c7c <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270e:	f7ff fab5 	bl	8001c7c <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1c6      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	4b28      	ldr	r3, [pc, #160]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	2202      	movs	r2, #2
 8002726:	4013      	ands	r3, r2
 8002728:	d1f1      	bne.n	800270e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2204      	movs	r2, #4
 8002730:	4013      	ands	r3, r2
 8002732:	d100      	bne.n	8002736 <HAL_RCC_OscConfig+0x29e>
 8002734:	e0b4      	b.n	80028a0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002736:	201f      	movs	r0, #31
 8002738:	183b      	adds	r3, r7, r0
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273e:	4b21      	ldr	r3, [pc, #132]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002740:	69da      	ldr	r2, [r3, #28]
 8002742:	2380      	movs	r3, #128	@ 0x80
 8002744:	055b      	lsls	r3, r3, #21
 8002746:	4013      	ands	r3, r2
 8002748:	d110      	bne.n	800276c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	4b1e      	ldr	r3, [pc, #120]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	4b1d      	ldr	r3, [pc, #116]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 8002750:	2180      	movs	r1, #128	@ 0x80
 8002752:	0549      	lsls	r1, r1, #21
 8002754:	430a      	orrs	r2, r1
 8002756:	61da      	str	r2, [r3, #28]
 8002758:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	2380      	movs	r3, #128	@ 0x80
 800275e:	055b      	lsls	r3, r3, #21
 8002760:	4013      	ands	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002766:	183b      	adds	r3, r7, r0
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	4b18      	ldr	r3, [pc, #96]	@ (80027d0 <HAL_RCC_OscConfig+0x338>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	2380      	movs	r3, #128	@ 0x80
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4013      	ands	r3, r2
 8002776:	d11a      	bne.n	80027ae <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002778:	4b15      	ldr	r3, [pc, #84]	@ (80027d0 <HAL_RCC_OscConfig+0x338>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b14      	ldr	r3, [pc, #80]	@ (80027d0 <HAL_RCC_OscConfig+0x338>)
 800277e:	2180      	movs	r1, #128	@ 0x80
 8002780:	0049      	lsls	r1, r1, #1
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002786:	f7ff fa79 	bl	8001c7c <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002790:	f7ff fa74 	bl	8001c7c <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	@ 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e185      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <HAL_RCC_OscConfig+0x338>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	2380      	movs	r3, #128	@ 0x80
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4013      	ands	r3, r2
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d10e      	bne.n	80027d4 <HAL_RCC_OscConfig+0x33c>
 80027b6:	4b03      	ldr	r3, [pc, #12]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80027b8:	6a1a      	ldr	r2, [r3, #32]
 80027ba:	4b02      	ldr	r3, [pc, #8]	@ (80027c4 <HAL_RCC_OscConfig+0x32c>)
 80027bc:	2101      	movs	r1, #1
 80027be:	430a      	orrs	r2, r1
 80027c0:	621a      	str	r2, [r3, #32]
 80027c2:	e035      	b.n	8002830 <HAL_RCC_OscConfig+0x398>
 80027c4:	40021000 	.word	0x40021000
 80027c8:	fffeffff 	.word	0xfffeffff
 80027cc:	fffbffff 	.word	0xfffbffff
 80027d0:	40007000 	.word	0x40007000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10c      	bne.n	80027f6 <HAL_RCC_OscConfig+0x35e>
 80027dc:	4bb6      	ldr	r3, [pc, #728]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80027de:	6a1a      	ldr	r2, [r3, #32]
 80027e0:	4bb5      	ldr	r3, [pc, #724]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80027e2:	2101      	movs	r1, #1
 80027e4:	438a      	bics	r2, r1
 80027e6:	621a      	str	r2, [r3, #32]
 80027e8:	4bb3      	ldr	r3, [pc, #716]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80027ea:	6a1a      	ldr	r2, [r3, #32]
 80027ec:	4bb2      	ldr	r3, [pc, #712]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80027ee:	2104      	movs	r1, #4
 80027f0:	438a      	bics	r2, r1
 80027f2:	621a      	str	r2, [r3, #32]
 80027f4:	e01c      	b.n	8002830 <HAL_RCC_OscConfig+0x398>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x380>
 80027fe:	4bae      	ldr	r3, [pc, #696]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002800:	6a1a      	ldr	r2, [r3, #32]
 8002802:	4bad      	ldr	r3, [pc, #692]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002804:	2104      	movs	r1, #4
 8002806:	430a      	orrs	r2, r1
 8002808:	621a      	str	r2, [r3, #32]
 800280a:	4bab      	ldr	r3, [pc, #684]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 800280c:	6a1a      	ldr	r2, [r3, #32]
 800280e:	4baa      	ldr	r3, [pc, #680]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002810:	2101      	movs	r1, #1
 8002812:	430a      	orrs	r2, r1
 8002814:	621a      	str	r2, [r3, #32]
 8002816:	e00b      	b.n	8002830 <HAL_RCC_OscConfig+0x398>
 8002818:	4ba7      	ldr	r3, [pc, #668]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 800281a:	6a1a      	ldr	r2, [r3, #32]
 800281c:	4ba6      	ldr	r3, [pc, #664]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 800281e:	2101      	movs	r1, #1
 8002820:	438a      	bics	r2, r1
 8002822:	621a      	str	r2, [r3, #32]
 8002824:	4ba4      	ldr	r3, [pc, #656]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002826:	6a1a      	ldr	r2, [r3, #32]
 8002828:	4ba3      	ldr	r3, [pc, #652]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 800282a:	2104      	movs	r1, #4
 800282c:	438a      	bics	r2, r1
 800282e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d014      	beq.n	8002862 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002838:	f7ff fa20 	bl	8001c7c <HAL_GetTick>
 800283c:	0003      	movs	r3, r0
 800283e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002840:	e009      	b.n	8002856 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7ff fa1b 	bl	8001c7c <HAL_GetTick>
 8002846:	0002      	movs	r2, r0
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	4a9b      	ldr	r2, [pc, #620]	@ (8002abc <HAL_RCC_OscConfig+0x624>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e12b      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002856:	4b98      	ldr	r3, [pc, #608]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	2202      	movs	r2, #2
 800285c:	4013      	ands	r3, r2
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x3aa>
 8002860:	e013      	b.n	800288a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7ff fa0b 	bl	8001c7c <HAL_GetTick>
 8002866:	0003      	movs	r3, r0
 8002868:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286a:	e009      	b.n	8002880 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7ff fa06 	bl	8001c7c <HAL_GetTick>
 8002870:	0002      	movs	r2, r0
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	4a91      	ldr	r2, [pc, #580]	@ (8002abc <HAL_RCC_OscConfig+0x624>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e116      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002880:	4b8d      	ldr	r3, [pc, #564]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	2202      	movs	r2, #2
 8002886:	4013      	ands	r3, r2
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800288a:	231f      	movs	r3, #31
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002894:	4b88      	ldr	r3, [pc, #544]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002896:	69da      	ldr	r2, [r3, #28]
 8002898:	4b87      	ldr	r3, [pc, #540]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 800289a:	4989      	ldr	r1, [pc, #548]	@ (8002ac0 <HAL_RCC_OscConfig+0x628>)
 800289c:	400a      	ands	r2, r1
 800289e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2210      	movs	r2, #16
 80028a6:	4013      	ands	r3, r2
 80028a8:	d063      	beq.n	8002972 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d12a      	bne.n	8002908 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028b2:	4b81      	ldr	r3, [pc, #516]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80028b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028b6:	4b80      	ldr	r3, [pc, #512]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80028b8:	2104      	movs	r1, #4
 80028ba:	430a      	orrs	r2, r1
 80028bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80028be:	4b7e      	ldr	r3, [pc, #504]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80028c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028c2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80028c4:	2101      	movs	r1, #1
 80028c6:	430a      	orrs	r2, r1
 80028c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ca:	f7ff f9d7 	bl	8001c7c <HAL_GetTick>
 80028ce:	0003      	movs	r3, r0
 80028d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028d4:	f7ff f9d2 	bl	8001c7c <HAL_GetTick>
 80028d8:	0002      	movs	r2, r0
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0e3      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028e6:	4b74      	ldr	r3, [pc, #464]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80028e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ea:	2202      	movs	r2, #2
 80028ec:	4013      	ands	r3, r2
 80028ee:	d0f1      	beq.n	80028d4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028f0:	4b71      	ldr	r3, [pc, #452]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80028f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f4:	22f8      	movs	r2, #248	@ 0xf8
 80028f6:	4393      	bics	r3, r2
 80028f8:	0019      	movs	r1, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	00da      	lsls	r2, r3, #3
 8002900:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002902:	430a      	orrs	r2, r1
 8002904:	635a      	str	r2, [r3, #52]	@ 0x34
 8002906:	e034      	b.n	8002972 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	3305      	adds	r3, #5
 800290e:	d111      	bne.n	8002934 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002910:	4b69      	ldr	r3, [pc, #420]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002912:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002914:	4b68      	ldr	r3, [pc, #416]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002916:	2104      	movs	r1, #4
 8002918:	438a      	bics	r2, r1
 800291a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800291c:	4b66      	ldr	r3, [pc, #408]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 800291e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002920:	22f8      	movs	r2, #248	@ 0xf8
 8002922:	4393      	bics	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	00da      	lsls	r2, r3, #3
 800292c:	4b62      	ldr	r3, [pc, #392]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 800292e:	430a      	orrs	r2, r1
 8002930:	635a      	str	r2, [r3, #52]	@ 0x34
 8002932:	e01e      	b.n	8002972 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002934:	4b60      	ldr	r3, [pc, #384]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002938:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 800293a:	2104      	movs	r1, #4
 800293c:	430a      	orrs	r2, r1
 800293e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002940:	4b5d      	ldr	r3, [pc, #372]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002944:	4b5c      	ldr	r3, [pc, #368]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002946:	2101      	movs	r1, #1
 8002948:	438a      	bics	r2, r1
 800294a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294c:	f7ff f996 	bl	8001c7c <HAL_GetTick>
 8002950:	0003      	movs	r3, r0
 8002952:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002956:	f7ff f991 	bl	8001c7c <HAL_GetTick>
 800295a:	0002      	movs	r2, r0
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e0a2      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002968:	4b53      	ldr	r3, [pc, #332]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 800296a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296c:	2202      	movs	r2, #2
 800296e:	4013      	ands	r3, r2
 8002970:	d1f1      	bne.n	8002956 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d100      	bne.n	800297c <HAL_RCC_OscConfig+0x4e4>
 800297a:	e097      	b.n	8002aac <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800297c:	4b4e      	ldr	r3, [pc, #312]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	220c      	movs	r2, #12
 8002982:	4013      	ands	r3, r2
 8002984:	2b08      	cmp	r3, #8
 8002986:	d100      	bne.n	800298a <HAL_RCC_OscConfig+0x4f2>
 8002988:	e06b      	b.n	8002a62 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d14c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b49      	ldr	r3, [pc, #292]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b48      	ldr	r3, [pc, #288]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002998:	494a      	ldr	r1, [pc, #296]	@ (8002ac4 <HAL_RCC_OscConfig+0x62c>)
 800299a:	400a      	ands	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7ff f96d 	bl	8001c7c <HAL_GetTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a8:	f7ff f968 	bl	8001c7c <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e079      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ba:	4b3f      	ldr	r3, [pc, #252]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	049b      	lsls	r3, r3, #18
 80029c2:	4013      	ands	r3, r2
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80029c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ca:	220f      	movs	r2, #15
 80029cc:	4393      	bics	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029d4:	4b38      	ldr	r3, [pc, #224]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80029d6:	430a      	orrs	r2, r1
 80029d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029da:	4b37      	ldr	r3, [pc, #220]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4a3a      	ldr	r2, [pc, #232]	@ (8002ac8 <HAL_RCC_OscConfig+0x630>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	0019      	movs	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	431a      	orrs	r2, r3
 80029ee:	4b32      	ldr	r3, [pc, #200]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f4:	4b30      	ldr	r3, [pc, #192]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b2f      	ldr	r3, [pc, #188]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 80029fa:	2180      	movs	r1, #128	@ 0x80
 80029fc:	0449      	lsls	r1, r1, #17
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7ff f93b 	bl	8001c7c <HAL_GetTick>
 8002a06:	0003      	movs	r3, r0
 8002a08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0c:	f7ff f936 	bl	8001c7c <HAL_GetTick>
 8002a10:	0002      	movs	r2, r0
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e047      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a1e:	4b26      	ldr	r3, [pc, #152]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	@ 0x80
 8002a24:	049b      	lsls	r3, r3, #18
 8002a26:	4013      	ands	r3, r2
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x574>
 8002a2a:	e03f      	b.n	8002aac <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2c:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b21      	ldr	r3, [pc, #132]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002a32:	4924      	ldr	r1, [pc, #144]	@ (8002ac4 <HAL_RCC_OscConfig+0x62c>)
 8002a34:	400a      	ands	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7ff f920 	bl	8001c7c <HAL_GetTick>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a42:	f7ff f91b 	bl	8001c7c <HAL_GetTick>
 8002a46:	0002      	movs	r2, r0
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e02c      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a54:	4b18      	ldr	r3, [pc, #96]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	2380      	movs	r3, #128	@ 0x80
 8002a5a:	049b      	lsls	r3, r3, #18
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x5aa>
 8002a60:	e024      	b.n	8002aac <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e01f      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a6e:	4b12      	ldr	r3, [pc, #72]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a74:	4b10      	ldr	r3, [pc, #64]	@ (8002ab8 <HAL_RCC_OscConfig+0x620>)
 8002a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a78:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	2380      	movs	r3, #128	@ 0x80
 8002a7e:	025b      	lsls	r3, r3, #9
 8002a80:	401a      	ands	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d10e      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	401a      	ands	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	23f0      	movs	r3, #240	@ 0xf0
 8002a9c:	039b      	lsls	r3, r3, #14
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b008      	add	sp, #32
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	00001388 	.word	0x00001388
 8002ac0:	efffffff 	.word	0xefffffff
 8002ac4:	feffffff 	.word	0xfeffffff
 8002ac8:	ffc2ffff 	.word	0xffc2ffff

08002acc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0b3      	b.n	8002c48 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b5b      	ldr	r3, [pc, #364]	@ (8002c50 <HAL_RCC_ClockConfig+0x184>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d911      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b58      	ldr	r3, [pc, #352]	@ (8002c50 <HAL_RCC_ClockConfig+0x184>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2201      	movs	r2, #1
 8002af4:	4393      	bics	r3, r2
 8002af6:	0019      	movs	r1, r3
 8002af8:	4b55      	ldr	r3, [pc, #340]	@ (8002c50 <HAL_RCC_ClockConfig+0x184>)
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b00:	4b53      	ldr	r3, [pc, #332]	@ (8002c50 <HAL_RCC_ClockConfig+0x184>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2201      	movs	r2, #1
 8002b06:	4013      	ands	r3, r2
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e09a      	b.n	8002c48 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2202      	movs	r2, #2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d015      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2204      	movs	r2, #4
 8002b22:	4013      	ands	r3, r2
 8002b24:	d006      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b26:	4b4b      	ldr	r3, [pc, #300]	@ (8002c54 <HAL_RCC_ClockConfig+0x188>)
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c54 <HAL_RCC_ClockConfig+0x188>)
 8002b2c:	21e0      	movs	r1, #224	@ 0xe0
 8002b2e:	00c9      	lsls	r1, r1, #3
 8002b30:	430a      	orrs	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b34:	4b47      	ldr	r3, [pc, #284]	@ (8002c54 <HAL_RCC_ClockConfig+0x188>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	22f0      	movs	r2, #240	@ 0xf0
 8002b3a:	4393      	bics	r3, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	4b44      	ldr	r3, [pc, #272]	@ (8002c54 <HAL_RCC_ClockConfig+0x188>)
 8002b44:	430a      	orrs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d040      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c54 <HAL_RCC_ClockConfig+0x188>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	2380      	movs	r3, #128	@ 0x80
 8002b60:	029b      	lsls	r3, r3, #10
 8002b62:	4013      	ands	r3, r2
 8002b64:	d114      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e06e      	b.n	8002c48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b72:	4b38      	ldr	r3, [pc, #224]	@ (8002c54 <HAL_RCC_ClockConfig+0x188>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	2380      	movs	r3, #128	@ 0x80
 8002b78:	049b      	lsls	r3, r3, #18
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d108      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e062      	b.n	8002c48 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b82:	4b34      	ldr	r3, [pc, #208]	@ (8002c54 <HAL_RCC_ClockConfig+0x188>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2202      	movs	r2, #2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e05b      	b.n	8002c48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b90:	4b30      	ldr	r3, [pc, #192]	@ (8002c54 <HAL_RCC_ClockConfig+0x188>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2203      	movs	r2, #3
 8002b96:	4393      	bics	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c54 <HAL_RCC_ClockConfig+0x188>)
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba4:	f7ff f86a 	bl	8001c7c <HAL_GetTick>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bac:	e009      	b.n	8002bc2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bae:	f7ff f865 	bl	8001c7c <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	4a27      	ldr	r2, [pc, #156]	@ (8002c58 <HAL_RCC_ClockConfig+0x18c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e042      	b.n	8002c48 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b24      	ldr	r3, [pc, #144]	@ (8002c54 <HAL_RCC_ClockConfig+0x188>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	220c      	movs	r2, #12
 8002bc8:	401a      	ands	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1ec      	bne.n	8002bae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c50 <HAL_RCC_ClockConfig+0x184>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	4013      	ands	r3, r2
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d211      	bcs.n	8002c06 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <HAL_RCC_ClockConfig+0x184>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2201      	movs	r2, #1
 8002be8:	4393      	bics	r3, r2
 8002bea:	0019      	movs	r1, r3
 8002bec:	4b18      	ldr	r3, [pc, #96]	@ (8002c50 <HAL_RCC_ClockConfig+0x184>)
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf4:	4b16      	ldr	r3, [pc, #88]	@ (8002c50 <HAL_RCC_ClockConfig+0x184>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e020      	b.n	8002c48 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d009      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c10:	4b10      	ldr	r3, [pc, #64]	@ (8002c54 <HAL_RCC_ClockConfig+0x188>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a11      	ldr	r2, [pc, #68]	@ (8002c5c <HAL_RCC_ClockConfig+0x190>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	0019      	movs	r1, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c54 <HAL_RCC_ClockConfig+0x188>)
 8002c20:	430a      	orrs	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c24:	f000 f820 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8002c28:	0001      	movs	r1, r0
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <HAL_RCC_ClockConfig+0x188>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	220f      	movs	r2, #15
 8002c32:	4013      	ands	r3, r2
 8002c34:	4a0a      	ldr	r2, [pc, #40]	@ (8002c60 <HAL_RCC_ClockConfig+0x194>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	000a      	movs	r2, r1
 8002c3a:	40da      	lsrs	r2, r3
 8002c3c:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <HAL_RCC_ClockConfig+0x198>)
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c40:	2003      	movs	r0, #3
 8002c42:	f7fe ffd5 	bl	8001bf0 <HAL_InitTick>
  
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b004      	add	sp, #16
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40022000 	.word	0x40022000
 8002c54:	40021000 	.word	0x40021000
 8002c58:	00001388 	.word	0x00001388
 8002c5c:	fffff8ff 	.word	0xfffff8ff
 8002c60:	0800adac 	.word	0x0800adac
 8002c64:	20000000 	.word	0x20000000

08002c68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c82:	4b20      	ldr	r3, [pc, #128]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	220c      	movs	r2, #12
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d002      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x30>
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d003      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0x36>
 8002c96:	e02c      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c98:	4b1b      	ldr	r3, [pc, #108]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c9a:	613b      	str	r3, [r7, #16]
      break;
 8002c9c:	e02c      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	0c9b      	lsrs	r3, r3, #18
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	4a19      	ldr	r2, [pc, #100]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ca8:	5cd3      	ldrb	r3, [r2, r3]
 8002caa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002cac:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	4a16      	ldr	r2, [pc, #88]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	2380      	movs	r3, #128	@ 0x80
 8002cbe:	025b      	lsls	r3, r3, #9
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d009      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	4810      	ldr	r0, [pc, #64]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cc8:	f7fd fa3a 	bl	8000140 <__udivsi3>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	001a      	movs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4353      	muls	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e009      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	000a      	movs	r2, r1
 8002cdc:	0152      	lsls	r2, r2, #5
 8002cde:	1a52      	subs	r2, r2, r1
 8002ce0:	0193      	lsls	r3, r2, #6
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	185b      	adds	r3, r3, r1
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	613b      	str	r3, [r7, #16]
      break;
 8002cf0:	e002      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cf2:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cf4:	613b      	str	r3, [r7, #16]
      break;
 8002cf6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002cf8:	693b      	ldr	r3, [r7, #16]
}
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b006      	add	sp, #24
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	40021000 	.word	0x40021000
 8002d08:	007a1200 	.word	0x007a1200
 8002d0c:	0800adc4 	.word	0x0800adc4
 8002d10:	0800add4 	.word	0x0800add4

08002d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d18:	4b02      	ldr	r3, [pc, #8]	@ (8002d24 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	20000000 	.word	0x20000000

08002d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d2c:	f7ff fff2 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d30:	0001      	movs	r1, r0
 8002d32:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	2207      	movs	r2, #7
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	4a04      	ldr	r2, [pc, #16]	@ (8002d50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	40d9      	lsrs	r1, r3
 8002d42:	000b      	movs	r3, r1
}    
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	0800adbc 	.word	0x0800adbc

08002d54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0a8      	b.n	8002eb8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	2382      	movs	r3, #130	@ 0x82
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d009      	beq.n	8002d8e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	61da      	str	r2, [r3, #28]
 8002d80:	e005      	b.n	8002d8e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	225d      	movs	r2, #93	@ 0x5d
 8002d98:	5c9b      	ldrb	r3, [r3, r2]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d107      	bne.n	8002db0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	225c      	movs	r2, #92	@ 0x5c
 8002da4:	2100      	movs	r1, #0
 8002da6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	0018      	movs	r0, r3
 8002dac:	f7fe fd42 	bl	8001834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	225d      	movs	r2, #93	@ 0x5d
 8002db4:	2102      	movs	r1, #2
 8002db6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2140      	movs	r1, #64	@ 0x40
 8002dc4:	438a      	bics	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	23e0      	movs	r3, #224	@ 0xe0
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d902      	bls.n	8002dda <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e002      	b.n	8002de0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002dda:	2380      	movs	r3, #128	@ 0x80
 8002ddc:	015b      	lsls	r3, r3, #5
 8002dde:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	23f0      	movs	r3, #240	@ 0xf0
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d008      	beq.n	8002dfe <HAL_SPI_Init+0xaa>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	23e0      	movs	r3, #224	@ 0xe0
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d002      	beq.n	8002dfe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	2382      	movs	r3, #130	@ 0x82
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	401a      	ands	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6899      	ldr	r1, [r3, #8]
 8002e0c:	2384      	movs	r3, #132	@ 0x84
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	400b      	ands	r3, r1
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2102      	movs	r1, #2
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	2101      	movs	r1, #1
 8002e24:	400b      	ands	r3, r1
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6999      	ldr	r1, [r3, #24]
 8002e2c:	2380      	movs	r3, #128	@ 0x80
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	400b      	ands	r3, r1
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	2138      	movs	r1, #56	@ 0x38
 8002e3a:	400b      	ands	r3, r1
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	2180      	movs	r1, #128	@ 0x80
 8002e44:	400b      	ands	r3, r1
 8002e46:	431a      	orrs	r2, r3
 8002e48:	0011      	movs	r1, r2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e4e:	2380      	movs	r3, #128	@ 0x80
 8002e50:	019b      	lsls	r3, r3, #6
 8002e52:	401a      	ands	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	2204      	movs	r2, #4
 8002e64:	401a      	ands	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	2110      	movs	r1, #16
 8002e6c:	400b      	ands	r3, r1
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e74:	2108      	movs	r1, #8
 8002e76:	400b      	ands	r3, r1
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68d9      	ldr	r1, [r3, #12]
 8002e7e:	23f0      	movs	r3, #240	@ 0xf0
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	400b      	ands	r3, r1
 8002e84:	431a      	orrs	r2, r3
 8002e86:	0011      	movs	r1, r2
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	2380      	movs	r3, #128	@ 0x80
 8002e8c:	015b      	lsls	r3, r3, #5
 8002e8e:	401a      	ands	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4907      	ldr	r1, [pc, #28]	@ (8002ec0 <HAL_SPI_Init+0x16c>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	225d      	movs	r2, #93	@ 0x5d
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b004      	add	sp, #16
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	fffff7ff 	.word	0xfffff7ff

08002ec4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	1dbb      	adds	r3, r7, #6
 8002ed2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ed4:	231f      	movs	r3, #31
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	225c      	movs	r2, #92	@ 0x5c
 8002ee0:	5c9b      	ldrb	r3, [r3, r2]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_SPI_Transmit+0x26>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e147      	b.n	800317a <HAL_SPI_Transmit+0x2b6>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	225c      	movs	r2, #92	@ 0x5c
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ef2:	f7fe fec3 	bl	8001c7c <HAL_GetTick>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002efa:	2316      	movs	r3, #22
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	1dba      	adds	r2, r7, #6
 8002f00:	8812      	ldrh	r2, [r2, #0]
 8002f02:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	225d      	movs	r2, #93	@ 0x5d
 8002f08:	5c9b      	ldrb	r3, [r3, r2]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d004      	beq.n	8002f1a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002f10:	231f      	movs	r3, #31
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	2202      	movs	r2, #2
 8002f16:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f18:	e128      	b.n	800316c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_SPI_Transmit+0x64>
 8002f20:	1dbb      	adds	r3, r7, #6
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d104      	bne.n	8002f32 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002f28:	231f      	movs	r3, #31
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f30:	e11c      	b.n	800316c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	225d      	movs	r2, #93	@ 0x5d
 8002f36:	2103      	movs	r1, #3
 8002f38:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1dba      	adds	r2, r7, #6
 8002f4a:	8812      	ldrh	r2, [r2, #0]
 8002f4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1dba      	adds	r2, r7, #6
 8002f52:	8812      	ldrh	r2, [r2, #0]
 8002f54:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2244      	movs	r2, #68	@ 0x44
 8002f60:	2100      	movs	r1, #0
 8002f62:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2246      	movs	r2, #70	@ 0x46
 8002f68:	2100      	movs	r1, #0
 8002f6a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	2380      	movs	r3, #128	@ 0x80
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d110      	bne.n	8002fa6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2140      	movs	r1, #64	@ 0x40
 8002f90:	438a      	bics	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2180      	movs	r1, #128	@ 0x80
 8002fa0:	01c9      	lsls	r1, r1, #7
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2240      	movs	r2, #64	@ 0x40
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b40      	cmp	r3, #64	@ 0x40
 8002fb2:	d007      	beq.n	8002fc4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2140      	movs	r1, #64	@ 0x40
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	23e0      	movs	r3, #224	@ 0xe0
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d952      	bls.n	8003076 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d004      	beq.n	8002fe2 <HAL_SPI_Transmit+0x11e>
 8002fd8:	2316      	movs	r3, #22
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d143      	bne.n	800306a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe6:	881a      	ldrh	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff2:	1c9a      	adds	r2, r3, #2
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003006:	e030      	b.n	800306a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2202      	movs	r2, #2
 8003010:	4013      	ands	r3, r2
 8003012:	2b02      	cmp	r3, #2
 8003014:	d112      	bne.n	800303c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301a:	881a      	ldrh	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003026:	1c9a      	adds	r2, r3, #2
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800303a:	e016      	b.n	800306a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800303c:	f7fe fe1e 	bl	8001c7c <HAL_GetTick>
 8003040:	0002      	movs	r2, r0
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d802      	bhi.n	8003052 <HAL_SPI_Transmit+0x18e>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	d102      	bne.n	8003058 <HAL_SPI_Transmit+0x194>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d108      	bne.n	800306a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003058:	231f      	movs	r3, #31
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2203      	movs	r2, #3
 800305e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	225d      	movs	r2, #93	@ 0x5d
 8003064:	2101      	movs	r1, #1
 8003066:	5499      	strb	r1, [r3, r2]
          goto error;
 8003068:	e080      	b.n	800316c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1c9      	bne.n	8003008 <HAL_SPI_Transmit+0x144>
 8003074:	e053      	b.n	800311e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d004      	beq.n	8003088 <HAL_SPI_Transmit+0x1c4>
 800307e:	2316      	movs	r3, #22
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d145      	bne.n	8003114 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	7812      	ldrb	r2, [r2, #0]
 8003094:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80030ae:	e031      	b.n	8003114 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2202      	movs	r2, #2
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d113      	bne.n	80030e6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	330c      	adds	r3, #12
 80030c8:	7812      	ldrb	r2, [r2, #0]
 80030ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030e4:	e016      	b.n	8003114 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030e6:	f7fe fdc9 	bl	8001c7c <HAL_GetTick>
 80030ea:	0002      	movs	r2, r0
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d802      	bhi.n	80030fc <HAL_SPI_Transmit+0x238>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	d102      	bne.n	8003102 <HAL_SPI_Transmit+0x23e>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d108      	bne.n	8003114 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003102:	231f      	movs	r3, #31
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	2203      	movs	r2, #3
 8003108:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	225d      	movs	r2, #93	@ 0x5d
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]
          goto error;
 8003112:	e02b      	b.n	800316c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1c8      	bne.n	80030b0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	6839      	ldr	r1, [r7, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	0018      	movs	r0, r3
 8003126:	f000 ffcb 	bl	80040c0 <SPI_EndRxTxTransaction>
 800312a:	1e03      	subs	r3, r0, #0
 800312c:	d002      	beq.n	8003134 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800313c:	2300      	movs	r3, #0
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003156:	2b00      	cmp	r3, #0
 8003158:	d004      	beq.n	8003164 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800315a:	231f      	movs	r3, #31
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e003      	b.n	800316c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	225d      	movs	r2, #93	@ 0x5d
 8003168:	2101      	movs	r1, #1
 800316a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	225c      	movs	r2, #92	@ 0x5c
 8003170:	2100      	movs	r1, #0
 8003172:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003174:	231f      	movs	r3, #31
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	781b      	ldrb	r3, [r3, #0]
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	b008      	add	sp, #32
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	@ 0x28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	001a      	movs	r2, r3
 8003192:	1cbb      	adds	r3, r7, #2
 8003194:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003196:	2301      	movs	r3, #1
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800319a:	2323      	movs	r3, #35	@ 0x23
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	225c      	movs	r2, #92	@ 0x5c
 80031a6:	5c9b      	ldrb	r3, [r3, r2]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x2c>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e1c4      	b.n	800353a <HAL_SPI_TransmitReceive+0x3b6>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	225c      	movs	r2, #92	@ 0x5c
 80031b4:	2101      	movs	r1, #1
 80031b6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031b8:	f7fe fd60 	bl	8001c7c <HAL_GetTick>
 80031bc:	0003      	movs	r3, r0
 80031be:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031c0:	201b      	movs	r0, #27
 80031c2:	183b      	adds	r3, r7, r0
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	215d      	movs	r1, #93	@ 0x5d
 80031c8:	5c52      	ldrb	r2, [r2, r1]
 80031ca:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80031d2:	2312      	movs	r3, #18
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	1cba      	adds	r2, r7, #2
 80031d8:	8812      	ldrh	r2, [r2, #0]
 80031da:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031dc:	183b      	adds	r3, r7, r0
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d011      	beq.n	8003208 <HAL_SPI_TransmitReceive+0x84>
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	2382      	movs	r3, #130	@ 0x82
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d107      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x7a>
 80031f6:	183b      	adds	r3, r7, r0
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d004      	beq.n	8003208 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80031fe:	2323      	movs	r3, #35	@ 0x23
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	2202      	movs	r2, #2
 8003204:	701a      	strb	r2, [r3, #0]
    goto error;
 8003206:	e191      	b.n	800352c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d006      	beq.n	800321c <HAL_SPI_TransmitReceive+0x98>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_SPI_TransmitReceive+0x98>
 8003214:	1cbb      	adds	r3, r7, #2
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d104      	bne.n	8003226 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800321c:	2323      	movs	r3, #35	@ 0x23
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
    goto error;
 8003224:	e182      	b.n	800352c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	225d      	movs	r2, #93	@ 0x5d
 800322a:	5c9b      	ldrb	r3, [r3, r2]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b04      	cmp	r3, #4
 8003230:	d003      	beq.n	800323a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	225d      	movs	r2, #93	@ 0x5d
 8003236:	2105      	movs	r1, #5
 8003238:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1cba      	adds	r2, r7, #2
 800324a:	2146      	movs	r1, #70	@ 0x46
 800324c:	8812      	ldrh	r2, [r2, #0]
 800324e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1cba      	adds	r2, r7, #2
 8003254:	2144      	movs	r1, #68	@ 0x44
 8003256:	8812      	ldrh	r2, [r2, #0]
 8003258:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1cba      	adds	r2, r7, #2
 8003264:	8812      	ldrh	r2, [r2, #0]
 8003266:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1cba      	adds	r2, r7, #2
 800326c:	8812      	ldrh	r2, [r2, #0]
 800326e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	23e0      	movs	r3, #224	@ 0xe0
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	429a      	cmp	r2, r3
 8003286:	d908      	bls.n	800329a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	49ac      	ldr	r1, [pc, #688]	@ (8003544 <HAL_SPI_TransmitReceive+0x3c0>)
 8003294:	400a      	ands	r2, r1
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	e008      	b.n	80032ac <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2180      	movs	r1, #128	@ 0x80
 80032a6:	0149      	lsls	r1, r1, #5
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2240      	movs	r2, #64	@ 0x40
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b40      	cmp	r3, #64	@ 0x40
 80032b8:	d007      	beq.n	80032ca <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2140      	movs	r1, #64	@ 0x40
 80032c6:	430a      	orrs	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	23e0      	movs	r3, #224	@ 0xe0
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d800      	bhi.n	80032d8 <HAL_SPI_TransmitReceive+0x154>
 80032d6:	e083      	b.n	80033e0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_SPI_TransmitReceive+0x168>
 80032e0:	2312      	movs	r3, #18
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d000      	beq.n	80032ec <HAL_SPI_TransmitReceive+0x168>
 80032ea:	e06d      	b.n	80033c8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	1c9a      	adds	r2, r3, #2
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003310:	e05a      	b.n	80033c8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2202      	movs	r2, #2
 800331a:	4013      	ands	r3, r2
 800331c:	2b02      	cmp	r3, #2
 800331e:	d11b      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x1d4>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d016      	beq.n	8003358 <HAL_SPI_TransmitReceive+0x1d4>
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	2b01      	cmp	r3, #1
 800332e:	d113      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003334:	881a      	ldrh	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	1c9a      	adds	r2, r3, #2
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2201      	movs	r2, #1
 8003360:	4013      	ands	r3, r2
 8003362:	2b01      	cmp	r3, #1
 8003364:	d11c      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x21c>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2246      	movs	r2, #70	@ 0x46
 800336a:	5a9b      	ldrh	r3, [r3, r2]
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d016      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	b292      	uxth	r2, r2
 800337e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	1c9a      	adds	r2, r3, #2
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2246      	movs	r2, #70	@ 0x46
 800338e:	5a9b      	ldrh	r3, [r3, r2]
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b299      	uxth	r1, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2246      	movs	r2, #70	@ 0x46
 800339a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800339c:	2301      	movs	r3, #1
 800339e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033a0:	f7fe fc6c 	bl	8001c7c <HAL_GetTick>
 80033a4:	0002      	movs	r2, r0
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d80b      	bhi.n	80033c8 <HAL_SPI_TransmitReceive+0x244>
 80033b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b2:	3301      	adds	r3, #1
 80033b4:	d008      	beq.n	80033c8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80033b6:	2323      	movs	r3, #35	@ 0x23
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	2203      	movs	r2, #3
 80033bc:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	225d      	movs	r2, #93	@ 0x5d
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]
        goto error;
 80033c6:	e0b1      	b.n	800352c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d19f      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x18e>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2246      	movs	r2, #70	@ 0x46
 80033d6:	5a9b      	ldrh	r3, [r3, r2]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d199      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x18e>
 80033de:	e089      	b.n	80034f4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0x270>
 80033e8:	2312      	movs	r3, #18
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d000      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0x270>
 80033f2:	e074      	b.n	80034de <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	7812      	ldrb	r2, [r2, #0]
 8003400:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800341a:	e060      	b.n	80034de <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2202      	movs	r2, #2
 8003424:	4013      	ands	r3, r2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d11c      	bne.n	8003464 <HAL_SPI_TransmitReceive+0x2e0>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d017      	beq.n	8003464 <HAL_SPI_TransmitReceive+0x2e0>
 8003434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003436:	2b01      	cmp	r3, #1
 8003438:	d114      	bne.n	8003464 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	330c      	adds	r3, #12
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2201      	movs	r2, #1
 800346c:	4013      	ands	r3, r2
 800346e:	2b01      	cmp	r3, #1
 8003470:	d11e      	bne.n	80034b0 <HAL_SPI_TransmitReceive+0x32c>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2246      	movs	r2, #70	@ 0x46
 8003476:	5a9b      	ldrh	r3, [r3, r2]
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d018      	beq.n	80034b0 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	001a      	movs	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	7812      	ldrb	r2, [r2, #0]
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2246      	movs	r2, #70	@ 0x46
 800349e:	5a9b      	ldrh	r3, [r3, r2]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b299      	uxth	r1, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2246      	movs	r2, #70	@ 0x46
 80034aa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034ac:	2301      	movs	r3, #1
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034b0:	f7fe fbe4 	bl	8001c7c <HAL_GetTick>
 80034b4:	0002      	movs	r2, r0
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034bc:	429a      	cmp	r2, r3
 80034be:	d802      	bhi.n	80034c6 <HAL_SPI_TransmitReceive+0x342>
 80034c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c2:	3301      	adds	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_SPI_TransmitReceive+0x348>
 80034c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d108      	bne.n	80034de <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80034cc:	2323      	movs	r3, #35	@ 0x23
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	2203      	movs	r2, #3
 80034d2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	225d      	movs	r2, #93	@ 0x5d
 80034d8:	2101      	movs	r1, #1
 80034da:	5499      	strb	r1, [r3, r2]
        goto error;
 80034dc:	e026      	b.n	800352c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d199      	bne.n	800341c <HAL_SPI_TransmitReceive+0x298>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2246      	movs	r2, #70	@ 0x46
 80034ec:	5a9b      	ldrh	r3, [r3, r2]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d193      	bne.n	800341c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f000 fde0 	bl	80040c0 <SPI_EndRxTxTransaction>
 8003500:	1e03      	subs	r3, r0, #0
 8003502:	d006      	beq.n	8003512 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003504:	2323      	movs	r3, #35	@ 0x23
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800351a:	2323      	movs	r3, #35	@ 0x23
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	2201      	movs	r2, #1
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	e003      	b.n	800352c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	225d      	movs	r2, #93	@ 0x5d
 8003528:	2101      	movs	r1, #1
 800352a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	225c      	movs	r2, #92	@ 0x5c
 8003530:	2100      	movs	r1, #0
 8003532:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003534:	2323      	movs	r3, #35	@ 0x23
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	781b      	ldrb	r3, [r3, #0]
}
 800353a:	0018      	movs	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	b00a      	add	sp, #40	@ 0x28
 8003540:	bd80      	pop	{r7, pc}
 8003542:	46c0      	nop			@ (mov r8, r8)
 8003544:	ffffefff 	.word	0xffffefff

08003548 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	1dbb      	adds	r3, r7, #6
 8003554:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003556:	2317      	movs	r3, #23
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	225c      	movs	r2, #92	@ 0x5c
 8003562:	5c9b      	ldrb	r3, [r3, r2]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_SPI_Transmit_DMA+0x24>
 8003568:	2302      	movs	r3, #2
 800356a:	e0e3      	b.n	8003734 <HAL_SPI_Transmit_DMA+0x1ec>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	225c      	movs	r2, #92	@ 0x5c
 8003570:	2101      	movs	r1, #1
 8003572:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	225d      	movs	r2, #93	@ 0x5d
 8003578:	5c9b      	ldrb	r3, [r3, r2]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	d004      	beq.n	800358a <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8003580:	2317      	movs	r3, #23
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	2202      	movs	r2, #2
 8003586:	701a      	strb	r2, [r3, #0]
    goto error;
 8003588:	e0cd      	b.n	8003726 <HAL_SPI_Transmit_DMA+0x1de>
  }

  if ((pData == NULL) || (Size == 0U))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_SPI_Transmit_DMA+0x50>
 8003590:	1dbb      	adds	r3, r7, #6
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8003598:	2317      	movs	r3, #23
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
    goto error;
 80035a0:	e0c1      	b.n	8003726 <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	225d      	movs	r2, #93	@ 0x5d
 80035a6:	2103      	movs	r1, #3
 80035a8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1dba      	adds	r2, r7, #6
 80035ba:	8812      	ldrh	r2, [r2, #0]
 80035bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1dba      	adds	r2, r7, #6
 80035c2:	8812      	ldrh	r2, [r2, #0]
 80035c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2244      	movs	r2, #68	@ 0x44
 80035dc:	2100      	movs	r1, #0
 80035de:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2246      	movs	r2, #70	@ 0x46
 80035e4:	2100      	movs	r1, #0
 80035e6:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	2380      	movs	r3, #128	@ 0x80
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d110      	bne.n	8003616 <HAL_SPI_Transmit_DMA+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2140      	movs	r1, #64	@ 0x40
 8003600:	438a      	bics	r2, r1
 8003602:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2180      	movs	r1, #128	@ 0x80
 8003610:	01c9      	lsls	r1, r1, #7
 8003612:	430a      	orrs	r2, r1
 8003614:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361a:	4a48      	ldr	r2, [pc, #288]	@ (800373c <HAL_SPI_Transmit_DMA+0x1f4>)
 800361c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003622:	4a47      	ldr	r2, [pc, #284]	@ (8003740 <HAL_SPI_Transmit_DMA+0x1f8>)
 8003624:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362a:	4a46      	ldr	r2, [pc, #280]	@ (8003744 <HAL_SPI_Transmit_DMA+0x1fc>)
 800362c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003632:	2200      	movs	r2, #0
 8003634:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4941      	ldr	r1, [pc, #260]	@ (8003748 <HAL_SPI_Transmit_DMA+0x200>)
 8003642:	400a      	ands	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	23e0      	movs	r3, #224	@ 0xe0
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	429a      	cmp	r2, r3
 8003650:	d82f      	bhi.n	80036b2 <HAL_SPI_Transmit_DMA+0x16a>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	2380      	movs	r3, #128	@ 0x80
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	429a      	cmp	r2, r3
 800365e:	d128      	bne.n	80036b2 <HAL_SPI_Transmit_DMA+0x16a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003664:	b29b      	uxth	r3, r3
 8003666:	001a      	movs	r2, r3
 8003668:	2301      	movs	r3, #1
 800366a:	4013      	ands	r3, r2
 800366c:	d10f      	bne.n	800368e <HAL_SPI_Transmit_DMA+0x146>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4933      	ldr	r1, [pc, #204]	@ (8003748 <HAL_SPI_Transmit_DMA+0x200>)
 800367a:	400a      	ands	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003682:	b29b      	uxth	r3, r3
 8003684:	085b      	lsrs	r3, r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800368c:	e011      	b.n	80036b2 <HAL_SPI_Transmit_DMA+0x16a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2180      	movs	r1, #128	@ 0x80
 800369a:	01c9      	lsls	r1, r1, #7
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3301      	adds	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ba:	0019      	movs	r1, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80036ca:	f7fe fc07 	bl	8001edc <HAL_DMA_Start_IT>
 80036ce:	1e03      	subs	r3, r0, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d6:	2210      	movs	r2, #16
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80036de:	2317      	movs	r3, #23
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]

    goto error;
 80036e6:	e01e      	b.n	8003726 <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2240      	movs	r2, #64	@ 0x40
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b40      	cmp	r3, #64	@ 0x40
 80036f4:	d007      	beq.n	8003706 <HAL_SPI_Transmit_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2140      	movs	r1, #64	@ 0x40
 8003702:	430a      	orrs	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2120      	movs	r1, #32
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2102      	movs	r1, #2
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	225c      	movs	r2, #92	@ 0x5c
 800372a:	2100      	movs	r1, #0
 800372c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800372e:	2317      	movs	r3, #23
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	781b      	ldrb	r3, [r3, #0]
}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b006      	add	sp, #24
 800373a:	bd80      	pop	{r7, pc}
 800373c:	08003d07 	.word	0x08003d07
 8003740:	08003b15 	.word	0x08003b15
 8003744:	08003d61 	.word	0x08003d61
 8003748:	ffffbfff 	.word	0xffffbfff

0800374c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	001a      	movs	r2, r3
 800375a:	1cbb      	adds	r3, r7, #2
 800375c:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800375e:	2317      	movs	r3, #23
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	2200      	movs	r2, #0
 8003764:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	225c      	movs	r2, #92	@ 0x5c
 800376a:	5c9b      	ldrb	r3, [r3, r2]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_SPI_TransmitReceive_DMA+0x28>
 8003770:	2302      	movs	r3, #2
 8003772:	e190      	b.n	8003a96 <HAL_SPI_TransmitReceive_DMA+0x34a>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	225c      	movs	r2, #92	@ 0x5c
 8003778:	2101      	movs	r1, #1
 800377a:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800377c:	2016      	movs	r0, #22
 800377e:	183b      	adds	r3, r7, r0
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	215d      	movs	r1, #93	@ 0x5d
 8003784:	5c52      	ldrb	r2, [r2, r1]
 8003786:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800378e:	0001      	movs	r1, r0
 8003790:	187b      	adds	r3, r7, r1
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d011      	beq.n	80037bc <HAL_SPI_TransmitReceive_DMA+0x70>
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	2382      	movs	r3, #130	@ 0x82
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	429a      	cmp	r2, r3
 80037a0:	d107      	bne.n	80037b2 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d103      	bne.n	80037b2 <HAL_SPI_TransmitReceive_DMA+0x66>
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d004      	beq.n	80037bc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80037b2:	2317      	movs	r3, #23
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	2202      	movs	r2, #2
 80037b8:	701a      	strb	r2, [r3, #0]
    goto error;
 80037ba:	e165      	b.n	8003a88 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d006      	beq.n	80037d0 <HAL_SPI_TransmitReceive_DMA+0x84>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_SPI_TransmitReceive_DMA+0x84>
 80037c8:	1cbb      	adds	r3, r7, #2
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d104      	bne.n	80037da <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 80037d0:	2317      	movs	r3, #23
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	2201      	movs	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80037d8:	e156      	b.n	8003a88 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	225d      	movs	r2, #93	@ 0x5d
 80037de:	5c9b      	ldrb	r3, [r3, r2]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d003      	beq.n	80037ee <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	225d      	movs	r2, #93	@ 0x5d
 80037ea:	2105      	movs	r1, #5
 80037ec:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1cba      	adds	r2, r7, #2
 80037fe:	8812      	ldrh	r2, [r2, #0]
 8003800:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1cba      	adds	r2, r7, #2
 8003806:	8812      	ldrh	r2, [r2, #0]
 8003808:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1cba      	adds	r2, r7, #2
 8003814:	2144      	movs	r1, #68	@ 0x44
 8003816:	8812      	ldrh	r2, [r2, #0]
 8003818:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1cba      	adds	r2, r7, #2
 800381e:	2146      	movs	r1, #70	@ 0x46
 8003820:	8812      	ldrh	r2, [r2, #0]
 8003822:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
#endif /* USE_SPI_CRC */

#if defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F051x8) || defined (STM32F058xx)
  /* Packing mode management is enabled by the DMA settings */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	23e0      	movs	r3, #224	@ 0xe0
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	429a      	cmp	r2, r3
 800383a:	d80b      	bhi.n	8003854 <HAL_SPI_TransmitReceive_DMA+0x108>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	2380      	movs	r3, #128	@ 0x80
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	429a      	cmp	r2, r3
 8003848:	d104      	bne.n	8003854 <HAL_SPI_TransmitReceive_DMA+0x108>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800384a:	2317      	movs	r3, #23
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	2201      	movs	r2, #1
 8003850:	701a      	strb	r2, [r3, #0]
    goto error;
 8003852:	e119      	b.n	8003a88 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }
#endif /* STM32F030x6 || STM32F030x8 || STM32F031x6 || STM32F038xx || STM32F051x8 || STM32F058xx */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4990      	ldr	r1, [pc, #576]	@ (8003aa0 <HAL_SPI_TransmitReceive_DMA+0x354>)
 8003860:	400a      	ands	r2, r1
 8003862:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	23e0      	movs	r3, #224	@ 0xe0
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	429a      	cmp	r2, r3
 800386e:	d908      	bls.n	8003882 <HAL_SPI_TransmitReceive_DMA+0x136>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	498a      	ldr	r1, [pc, #552]	@ (8003aa4 <HAL_SPI_TransmitReceive_DMA+0x358>)
 800387c:	400a      	ands	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	e074      	b.n	800396c <HAL_SPI_TransmitReceive_DMA+0x220>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2180      	movs	r1, #128	@ 0x80
 800388e:	0149      	lsls	r1, r1, #5
 8003890:	430a      	orrs	r2, r1
 8003892:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	2380      	movs	r3, #128	@ 0x80
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	429a      	cmp	r2, r3
 80038a0:	d127      	bne.n	80038f2 <HAL_SPI_TransmitReceive_DMA+0x1a6>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80038a6:	001a      	movs	r2, r3
 80038a8:	2301      	movs	r3, #1
 80038aa:	4013      	ands	r3, r2
 80038ac:	d10f      	bne.n	80038ce <HAL_SPI_TransmitReceive_DMA+0x182>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	497b      	ldr	r1, [pc, #492]	@ (8003aa8 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 80038ba:	400a      	ands	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038cc:	e011      	b.n	80038f2 <HAL_SPI_TransmitReceive_DMA+0x1a6>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2180      	movs	r1, #128	@ 0x80
 80038da:	01c9      	lsls	r1, r1, #7
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3301      	adds	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	2380      	movs	r3, #128	@ 0x80
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d135      	bne.n	800396c <HAL_SPI_TransmitReceive_DMA+0x220>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4966      	ldr	r1, [pc, #408]	@ (8003aa4 <HAL_SPI_TransmitReceive_DMA+0x358>)
 800390c:	400a      	ands	r2, r1
 800390e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2246      	movs	r2, #70	@ 0x46
 8003914:	5a9b      	ldrh	r3, [r3, r2]
 8003916:	b29b      	uxth	r3, r3
 8003918:	001a      	movs	r2, r3
 800391a:	2301      	movs	r3, #1
 800391c:	4013      	ands	r3, r2
 800391e:	d111      	bne.n	8003944 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4960      	ldr	r1, [pc, #384]	@ (8003aac <HAL_SPI_TransmitReceive_DMA+0x360>)
 800392c:	400a      	ands	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2246      	movs	r2, #70	@ 0x46
 8003934:	5a9b      	ldrh	r3, [r3, r2]
 8003936:	b29b      	uxth	r3, r3
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	b299      	uxth	r1, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2246      	movs	r2, #70	@ 0x46
 8003940:	5299      	strh	r1, [r3, r2]
 8003942:	e013      	b.n	800396c <HAL_SPI_TransmitReceive_DMA+0x220>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2180      	movs	r1, #128	@ 0x80
 8003950:	0189      	lsls	r1, r1, #6
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2246      	movs	r2, #70	@ 0x46
 800395a:	5a9b      	ldrh	r3, [r3, r2]
 800395c:	b29b      	uxth	r3, r3
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	b29b      	uxth	r3, r3
 8003962:	3301      	adds	r3, #1
 8003964:	b299      	uxth	r1, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2246      	movs	r2, #70	@ 0x46
 800396a:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	225d      	movs	r2, #93	@ 0x5d
 8003970:	5c9b      	ldrb	r3, [r3, r2]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b04      	cmp	r3, #4
 8003976:	d108      	bne.n	800398a <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397c:	4a4c      	ldr	r2, [pc, #304]	@ (8003ab0 <HAL_SPI_TransmitReceive_DMA+0x364>)
 800397e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003984:	4a4b      	ldr	r2, [pc, #300]	@ (8003ab4 <HAL_SPI_TransmitReceive_DMA+0x368>)
 8003986:	629a      	str	r2, [r3, #40]	@ 0x28
 8003988:	e007      	b.n	800399a <HAL_SPI_TransmitReceive_DMA+0x24e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398e:	4a4a      	ldr	r2, [pc, #296]	@ (8003ab8 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8003990:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003996:	4a49      	ldr	r2, [pc, #292]	@ (8003abc <HAL_SPI_TransmitReceive_DMA+0x370>)
 8003998:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399e:	4a48      	ldr	r2, [pc, #288]	@ (8003ac0 <HAL_SPI_TransmitReceive_DMA+0x374>)
 80039a0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a6:	2200      	movs	r2, #0
 80039a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	0019      	movs	r1, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2246      	movs	r2, #70	@ 0x46
 80039c0:	5a9b      	ldrh	r3, [r3, r2]
 80039c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80039c4:	0022      	movs	r2, r4
 80039c6:	f7fe fa89 	bl	8001edc <HAL_DMA_Start_IT>
 80039ca:	1e03      	subs	r3, r0, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_SPI_TransmitReceive_DMA+0x298>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d2:	2210      	movs	r2, #16
 80039d4:	431a      	orrs	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80039da:	2317      	movs	r3, #23
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]

    goto error;
 80039e2:	e051      	b.n	8003a88 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2101      	movs	r1, #1
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f8:	2200      	movs	r2, #0
 80039fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a00:	2200      	movs	r2, #0
 8003a02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a10:	2200      	movs	r2, #0
 8003a12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003a2c:	f7fe fa56 	bl	8001edc <HAL_DMA_Start_IT>
 8003a30:	1e03      	subs	r3, r0, #0
 8003a32:	d00a      	beq.n	8003a4a <HAL_SPI_TransmitReceive_DMA+0x2fe>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a38:	2210      	movs	r2, #16
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003a40:	2317      	movs	r3, #23
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]

    goto error;
 8003a48:	e01e      	b.n	8003a88 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2240      	movs	r2, #64	@ 0x40
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b40      	cmp	r3, #64	@ 0x40
 8003a56:	d007      	beq.n	8003a68 <HAL_SPI_TransmitReceive_DMA+0x31c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2140      	movs	r1, #64	@ 0x40
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2120      	movs	r1, #32
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2102      	movs	r1, #2
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	225c      	movs	r2, #92	@ 0x5c
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003a90:	2317      	movs	r3, #23
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	781b      	ldrb	r3, [r3, #0]
}
 8003a96:	0018      	movs	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b007      	add	sp, #28
 8003a9c:	bd90      	pop	{r4, r7, pc}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	ffff9fff 	.word	0xffff9fff
 8003aa4:	ffffefff 	.word	0xffffefff
 8003aa8:	ffffbfff 	.word	0xffffbfff
 8003aac:	ffffdfff 	.word	0xffffdfff
 8003ab0:	08003d25 	.word	0x08003d25
 8003ab4:	08003bc1 	.word	0x08003bc1
 8003ab8:	08003d43 	.word	0x08003d43
 8003abc:	08003c71 	.word	0x08003c71
 8003ac0:	08003d61 	.word	0x08003d61

08003ac4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003acc:	46c0      	nop			@ (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003adc:	46c0      	nop			@ (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b002      	add	sp, #8
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003aec:	46c0      	nop			@ (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b002      	add	sp, #8
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003afc:	46c0      	nop			@ (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b002      	add	sp, #8
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003b0c:	46c0      	nop			@ (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b002      	add	sp, #8
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b22:	f7fe f8ab 	bl	8001c7c <HAL_GetTick>
 8003b26:	0003      	movs	r3, r0
 8003b28:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2220      	movs	r2, #32
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d03c      	beq.n	8003bb2 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2120      	movs	r1, #32
 8003b44:	438a      	bics	r2, r1
 8003b46:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2102      	movs	r1, #2
 8003b54:	438a      	bics	r2, r1
 8003b56:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2164      	movs	r1, #100	@ 0x64
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f000 faae 	bl	80040c0 <SPI_EndRxTxTransaction>
 8003b64:	1e03      	subs	r3, r0, #0
 8003b66:	d005      	beq.n	8003b74 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2200      	movs	r2, #0
 8003b96:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	225d      	movs	r2, #93	@ 0x5d
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d004      	beq.n	8003bb2 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7ff ffaa 	bl	8003b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003bb0:	e003      	b.n	8003bba <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7fd f9eb 	bl	8000f90 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b006      	add	sp, #24
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bce:	f7fe f855 	bl	8001c7c <HAL_GetTick>
 8003bd2:	0003      	movs	r3, r0
 8003bd4:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d03e      	beq.n	8003c62 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2120      	movs	r1, #32
 8003bf0:	438a      	bics	r2, r1
 8003bf2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10e      	bne.n	8003c1a <SPI_DMAReceiveCplt+0x5a>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	2382      	movs	r3, #130	@ 0x82
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d108      	bne.n	8003c1a <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2103      	movs	r1, #3
 8003c14:	438a      	bics	r2, r1
 8003c16:	605a      	str	r2, [r3, #4]
 8003c18:	e007      	b.n	8003c2a <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2101      	movs	r1, #1
 8003c26:	438a      	bics	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2164      	movs	r1, #100	@ 0x64
 8003c30:	0018      	movs	r0, r3
 8003c32:	f000 f9e7 	bl	8004004 <SPI_EndRxTransaction>
 8003c36:	1e03      	subs	r3, r0, #0
 8003c38:	d002      	beq.n	8003c40 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2246      	movs	r2, #70	@ 0x46
 8003c44:	2100      	movs	r1, #0
 8003c46:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	225d      	movs	r2, #93	@ 0x5d
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d004      	beq.n	8003c62 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f7ff ff52 	bl	8003b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003c60:	e003      	b.n	8003c6a <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7ff ff2d 	bl	8003ac4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b004      	add	sp, #16
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c7e:	f7fd fffd 	bl	8001c7c <HAL_GetTick>
 8003c82:	0003      	movs	r3, r0
 8003c84:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d031      	beq.n	8003cf8 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2120      	movs	r1, #32
 8003ca0:	438a      	bics	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2164      	movs	r1, #100	@ 0x64
 8003caa:	0018      	movs	r0, r3
 8003cac:	f000 fa08 	bl	80040c0 <SPI_EndRxTxTransaction>
 8003cb0:	1e03      	subs	r3, r0, #0
 8003cb2:	d005      	beq.n	8003cc0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb8:	2220      	movs	r2, #32
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2103      	movs	r1, #3
 8003ccc:	438a      	bics	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2246      	movs	r2, #70	@ 0x46
 8003cda:	2100      	movs	r1, #0
 8003cdc:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	225d      	movs	r2, #93	@ 0x5d
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7ff ff07 	bl	8003b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003cf6:	e003      	b.n	8003d00 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f7fd f95c 	bl	8000fb8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b004      	add	sp, #16
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	0018      	movs	r0, r3
 8003d18:	f7ff fedc 	bl	8003ad4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d1c:	46c0      	nop			@ (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b004      	add	sp, #16
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7ff fed5 	bl	8003ae4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b004      	add	sp, #16
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7ff fece 	bl	8003af4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d58:	46c0      	nop			@ (mov r8, r8)
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b004      	add	sp, #16
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2103      	movs	r1, #3
 8003d7a:	438a      	bics	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d82:	2210      	movs	r2, #16
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	225d      	movs	r2, #93	@ 0x5d
 8003d8e:	2101      	movs	r1, #1
 8003d90:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7ff feb5 	bl	8003b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d9a:	46c0      	nop			@ (mov r8, r8)
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b004      	add	sp, #16
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	1dfb      	adds	r3, r7, #7
 8003db2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003db4:	f7fd ff62 	bl	8001c7c <HAL_GetTick>
 8003db8:	0002      	movs	r2, r0
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	18d3      	adds	r3, r2, r3
 8003dc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dc4:	f7fd ff5a 	bl	8001c7c <HAL_GetTick>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8003eb8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	015b      	lsls	r3, r3, #5
 8003dd2:	0d1b      	lsrs	r3, r3, #20
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	4353      	muls	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dda:	e058      	b.n	8003e8e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	d055      	beq.n	8003e8e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003de2:	f7fd ff4b 	bl	8001c7c <HAL_GetTick>
 8003de6:	0002      	movs	r2, r0
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d902      	bls.n	8003df8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d142      	bne.n	8003e7e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	21e0      	movs	r1, #224	@ 0xe0
 8003e04:	438a      	bics	r2, r1
 8003e06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	2382      	movs	r3, #130	@ 0x82
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d113      	bne.n	8003e3c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	2380      	movs	r3, #128	@ 0x80
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d005      	beq.n	8003e2c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	2380      	movs	r3, #128	@ 0x80
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d107      	bne.n	8003e3c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2140      	movs	r1, #64	@ 0x40
 8003e38:	438a      	bics	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e40:	2380      	movs	r3, #128	@ 0x80
 8003e42:	019b      	lsls	r3, r3, #6
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d110      	bne.n	8003e6a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	491a      	ldr	r1, [pc, #104]	@ (8003ebc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003e54:	400a      	ands	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2180      	movs	r1, #128	@ 0x80
 8003e64:	0189      	lsls	r1, r1, #6
 8003e66:	430a      	orrs	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	225d      	movs	r2, #93	@ 0x5d
 8003e6e:	2101      	movs	r1, #1
 8003e70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	225c      	movs	r2, #92	@ 0x5c
 8003e76:	2100      	movs	r1, #0
 8003e78:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e017      	b.n	8003eae <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	4013      	ands	r3, r2
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	425a      	negs	r2, r3
 8003e9e:	4153      	adcs	r3, r2
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	001a      	movs	r2, r3
 8003ea4:	1dfb      	adds	r3, r7, #7
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d197      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	0018      	movs	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b008      	add	sp, #32
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	46c0      	nop			@ (mov r8, r8)
 8003eb8:	20000000 	.word	0x20000000
 8003ebc:	ffffdfff 	.word	0xffffdfff

08003ec0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	@ 0x28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ece:	2317      	movs	r3, #23
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ed6:	f7fd fed1 	bl	8001c7c <HAL_GetTick>
 8003eda:	0002      	movs	r2, r0
 8003edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	18d3      	adds	r3, r2, r3
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003ee6:	f7fd fec9 	bl	8001c7c <HAL_GetTick>
 8003eea:	0003      	movs	r3, r0
 8003eec:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ef6:	4b41      	ldr	r3, [pc, #260]	@ (8003ffc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	0013      	movs	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	189b      	adds	r3, r3, r2
 8003f00:	00da      	lsls	r2, r3, #3
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	0d1b      	lsrs	r3, r3, #20
 8003f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f08:	4353      	muls	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f0c:	e068      	b.n	8003fe0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	23c0      	movs	r3, #192	@ 0xc0
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d10a      	bne.n	8003f2e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d107      	bne.n	8003f2e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	2117      	movs	r1, #23
 8003f26:	187b      	adds	r3, r7, r1
 8003f28:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	3301      	adds	r3, #1
 8003f32:	d055      	beq.n	8003fe0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f34:	f7fd fea2 	bl	8001c7c <HAL_GetTick>
 8003f38:	0002      	movs	r2, r0
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d902      	bls.n	8003f4a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d142      	bne.n	8003fd0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	21e0      	movs	r1, #224	@ 0xe0
 8003f56:	438a      	bics	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	2382      	movs	r3, #130	@ 0x82
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d113      	bne.n	8003f8e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	2380      	movs	r3, #128	@ 0x80
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d005      	beq.n	8003f7e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	2380      	movs	r3, #128	@ 0x80
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d107      	bne.n	8003f8e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2140      	movs	r1, #64	@ 0x40
 8003f8a:	438a      	bics	r2, r1
 8003f8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f92:	2380      	movs	r3, #128	@ 0x80
 8003f94:	019b      	lsls	r3, r3, #6
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d110      	bne.n	8003fbc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4916      	ldr	r1, [pc, #88]	@ (8004000 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003fa6:	400a      	ands	r2, r1
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2180      	movs	r1, #128	@ 0x80
 8003fb6:	0189      	lsls	r1, r1, #6
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	225d      	movs	r2, #93	@ 0x5d
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	225c      	movs	r2, #92	@ 0x5c
 8003fc8:	2100      	movs	r1, #0
 8003fca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e010      	b.n	8003ff2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d18e      	bne.n	8003f0e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b00a      	add	sp, #40	@ 0x28
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	20000000 	.word	0x20000000
 8004000:	ffffdfff 	.word	0xffffdfff

08004004 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	2382      	movs	r3, #130	@ 0x82
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	429a      	cmp	r2, r3
 800401a:	d113      	bne.n	8004044 <SPI_EndRxTransaction+0x40>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	2380      	movs	r3, #128	@ 0x80
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	429a      	cmp	r2, r3
 8004026:	d005      	beq.n	8004034 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	2380      	movs	r3, #128	@ 0x80
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	429a      	cmp	r2, r3
 8004032:	d107      	bne.n	8004044 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2140      	movs	r1, #64	@ 0x40
 8004040:	438a      	bics	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	0013      	movs	r3, r2
 800404e:	2200      	movs	r2, #0
 8004050:	2180      	movs	r1, #128	@ 0x80
 8004052:	f7ff fea7 	bl	8003da4 <SPI_WaitFlagStateUntilTimeout>
 8004056:	1e03      	subs	r3, r0, #0
 8004058:	d007      	beq.n	800406a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800405e:	2220      	movs	r2, #32
 8004060:	431a      	orrs	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e026      	b.n	80040b8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	2382      	movs	r3, #130	@ 0x82
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	429a      	cmp	r2, r3
 8004074:	d11f      	bne.n	80040b6 <SPI_EndRxTransaction+0xb2>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	2380      	movs	r3, #128	@ 0x80
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	429a      	cmp	r2, r3
 8004080:	d005      	beq.n	800408e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	2380      	movs	r3, #128	@ 0x80
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	429a      	cmp	r2, r3
 800408c:	d113      	bne.n	80040b6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	23c0      	movs	r3, #192	@ 0xc0
 8004092:	00d9      	lsls	r1, r3, #3
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	0013      	movs	r3, r2
 800409c:	2200      	movs	r2, #0
 800409e:	f7ff ff0f 	bl	8003ec0 <SPI_WaitFifoStateUntilTimeout>
 80040a2:	1e03      	subs	r3, r0, #0
 80040a4:	d007      	beq.n	80040b6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040aa:	2220      	movs	r2, #32
 80040ac:	431a      	orrs	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e000      	b.n	80040b8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	0018      	movs	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b004      	add	sp, #16
 80040be:	bd80      	pop	{r7, pc}

080040c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	23c0      	movs	r3, #192	@ 0xc0
 80040d0:	0159      	lsls	r1, r3, #5
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	0013      	movs	r3, r2
 80040da:	2200      	movs	r2, #0
 80040dc:	f7ff fef0 	bl	8003ec0 <SPI_WaitFifoStateUntilTimeout>
 80040e0:	1e03      	subs	r3, r0, #0
 80040e2:	d007      	beq.n	80040f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e8:	2220      	movs	r2, #32
 80040ea:	431a      	orrs	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e027      	b.n	8004144 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	0013      	movs	r3, r2
 80040fe:	2200      	movs	r2, #0
 8004100:	2180      	movs	r1, #128	@ 0x80
 8004102:	f7ff fe4f 	bl	8003da4 <SPI_WaitFlagStateUntilTimeout>
 8004106:	1e03      	subs	r3, r0, #0
 8004108:	d007      	beq.n	800411a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410e:	2220      	movs	r2, #32
 8004110:	431a      	orrs	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e014      	b.n	8004144 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	23c0      	movs	r3, #192	@ 0xc0
 800411e:	00d9      	lsls	r1, r3, #3
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	0013      	movs	r3, r2
 8004128:	2200      	movs	r2, #0
 800412a:	f7ff fec9 	bl	8003ec0 <SPI_WaitFifoStateUntilTimeout>
 800412e:	1e03      	subs	r3, r0, #0
 8004130:	d007      	beq.n	8004142 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004136:	2220      	movs	r2, #32
 8004138:	431a      	orrs	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e000      	b.n	8004144 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	b004      	add	sp, #16
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e044      	b.n	80041e8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d107      	bne.n	8004176 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2278      	movs	r2, #120	@ 0x78
 800416a:	2100      	movs	r1, #0
 800416c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	0018      	movs	r0, r3
 8004172:	f7fd fc01 	bl	8001978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2224      	movs	r2, #36	@ 0x24
 800417a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2101      	movs	r1, #1
 8004188:	438a      	bics	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	0018      	movs	r0, r3
 8004198:	f000 fa0c 	bl	80045b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	0018      	movs	r0, r3
 80041a0:	f000 f8c8 	bl	8004334 <UART_SetConfig>
 80041a4:	0003      	movs	r3, r0
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e01c      	b.n	80041e8 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	490d      	ldr	r1, [pc, #52]	@ (80041f0 <HAL_UART_Init+0xa4>)
 80041ba:	400a      	ands	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	212a      	movs	r1, #42	@ 0x2a
 80041ca:	438a      	bics	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2101      	movs	r1, #1
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	0018      	movs	r0, r3
 80041e2:	f000 fa9b 	bl	800471c <UART_CheckIdleState>
 80041e6:	0003      	movs	r3, r0
}
 80041e8:	0018      	movs	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b002      	add	sp, #8
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	ffffb7ff 	.word	0xffffb7ff

080041f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	@ 0x28
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	1dbb      	adds	r3, r7, #6
 8004202:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004208:	2b20      	cmp	r3, #32
 800420a:	d000      	beq.n	800420e <HAL_UART_Transmit+0x1a>
 800420c:	e08c      	b.n	8004328 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_UART_Transmit+0x28>
 8004214:	1dbb      	adds	r3, r7, #6
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e084      	b.n	800432a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	2380      	movs	r3, #128	@ 0x80
 8004226:	015b      	lsls	r3, r3, #5
 8004228:	429a      	cmp	r2, r3
 800422a:	d109      	bne.n	8004240 <HAL_UART_Transmit+0x4c>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d105      	bne.n	8004240 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2201      	movs	r2, #1
 8004238:	4013      	ands	r3, r2
 800423a:	d001      	beq.n	8004240 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e074      	b.n	800432a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2284      	movs	r2, #132	@ 0x84
 8004244:	2100      	movs	r1, #0
 8004246:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2221      	movs	r2, #33	@ 0x21
 800424c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800424e:	f7fd fd15 	bl	8001c7c <HAL_GetTick>
 8004252:	0003      	movs	r3, r0
 8004254:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1dba      	adds	r2, r7, #6
 800425a:	2150      	movs	r1, #80	@ 0x50
 800425c:	8812      	ldrh	r2, [r2, #0]
 800425e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	1dba      	adds	r2, r7, #6
 8004264:	2152      	movs	r1, #82	@ 0x52
 8004266:	8812      	ldrh	r2, [r2, #0]
 8004268:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	2380      	movs	r3, #128	@ 0x80
 8004270:	015b      	lsls	r3, r3, #5
 8004272:	429a      	cmp	r2, r3
 8004274:	d108      	bne.n	8004288 <HAL_UART_Transmit+0x94>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d104      	bne.n	8004288 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	e003      	b.n	8004290 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800428c:	2300      	movs	r3, #0
 800428e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004290:	e02f      	b.n	80042f2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	0013      	movs	r3, r2
 800429c:	2200      	movs	r2, #0
 800429e:	2180      	movs	r1, #128	@ 0x80
 80042a0:	f000 fae4 	bl	800486c <UART_WaitOnFlagUntilTimeout>
 80042a4:	1e03      	subs	r3, r0, #0
 80042a6:	d004      	beq.n	80042b2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e03b      	b.n	800432a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	881a      	ldrh	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	05d2      	lsls	r2, r2, #23
 80042c2:	0dd2      	lsrs	r2, r2, #23
 80042c4:	b292      	uxth	r2, r2
 80042c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	3302      	adds	r3, #2
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	e007      	b.n	80042e0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3301      	adds	r3, #1
 80042de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2252      	movs	r2, #82	@ 0x52
 80042e4:	5a9b      	ldrh	r3, [r3, r2]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b299      	uxth	r1, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2252      	movs	r2, #82	@ 0x52
 80042f0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2252      	movs	r2, #82	@ 0x52
 80042f6:	5a9b      	ldrh	r3, [r3, r2]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1c9      	bne.n	8004292 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	0013      	movs	r3, r2
 8004308:	2200      	movs	r2, #0
 800430a:	2140      	movs	r1, #64	@ 0x40
 800430c:	f000 faae 	bl	800486c <UART_WaitOnFlagUntilTimeout>
 8004310:	1e03      	subs	r3, r0, #0
 8004312:	d004      	beq.n	800431e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e005      	b.n	800432a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	0018      	movs	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	b008      	add	sp, #32
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800433c:	231e      	movs	r3, #30
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a8d      	ldr	r2, [pc, #564]	@ (8004598 <UART_SetConfig+0x264>)
 8004364:	4013      	ands	r3, r2
 8004366:	0019      	movs	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	430a      	orrs	r2, r1
 8004370:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	4a88      	ldr	r2, [pc, #544]	@ (800459c <UART_SetConfig+0x268>)
 800437a:	4013      	ands	r3, r2
 800437c:	0019      	movs	r1, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4a7f      	ldr	r2, [pc, #508]	@ (80045a0 <UART_SetConfig+0x26c>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	0019      	movs	r1, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a7b      	ldr	r2, [pc, #492]	@ (80045a4 <UART_SetConfig+0x270>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d127      	bne.n	800440a <UART_SetConfig+0xd6>
 80043ba:	4b7b      	ldr	r3, [pc, #492]	@ (80045a8 <UART_SetConfig+0x274>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043be:	2203      	movs	r2, #3
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d00d      	beq.n	80043e2 <UART_SetConfig+0xae>
 80043c6:	d81b      	bhi.n	8004400 <UART_SetConfig+0xcc>
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d014      	beq.n	80043f6 <UART_SetConfig+0xc2>
 80043cc:	d818      	bhi.n	8004400 <UART_SetConfig+0xcc>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <UART_SetConfig+0xa4>
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d00a      	beq.n	80043ec <UART_SetConfig+0xb8>
 80043d6:	e013      	b.n	8004400 <UART_SetConfig+0xcc>
 80043d8:	231f      	movs	r3, #31
 80043da:	18fb      	adds	r3, r7, r3
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	e021      	b.n	8004426 <UART_SetConfig+0xf2>
 80043e2:	231f      	movs	r3, #31
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	2202      	movs	r2, #2
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	e01c      	b.n	8004426 <UART_SetConfig+0xf2>
 80043ec:	231f      	movs	r3, #31
 80043ee:	18fb      	adds	r3, r7, r3
 80043f0:	2204      	movs	r2, #4
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	e017      	b.n	8004426 <UART_SetConfig+0xf2>
 80043f6:	231f      	movs	r3, #31
 80043f8:	18fb      	adds	r3, r7, r3
 80043fa:	2208      	movs	r2, #8
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e012      	b.n	8004426 <UART_SetConfig+0xf2>
 8004400:	231f      	movs	r3, #31
 8004402:	18fb      	adds	r3, r7, r3
 8004404:	2210      	movs	r2, #16
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	e00d      	b.n	8004426 <UART_SetConfig+0xf2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a67      	ldr	r2, [pc, #412]	@ (80045ac <UART_SetConfig+0x278>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d104      	bne.n	800441e <UART_SetConfig+0xea>
 8004414:	231f      	movs	r3, #31
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	e003      	b.n	8004426 <UART_SetConfig+0xf2>
 800441e:	231f      	movs	r3, #31
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	2210      	movs	r2, #16
 8004424:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69da      	ldr	r2, [r3, #28]
 800442a:	2380      	movs	r3, #128	@ 0x80
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	429a      	cmp	r2, r3
 8004430:	d15c      	bne.n	80044ec <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004432:	231f      	movs	r3, #31
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d015      	beq.n	8004468 <UART_SetConfig+0x134>
 800443c:	dc18      	bgt.n	8004470 <UART_SetConfig+0x13c>
 800443e:	2b04      	cmp	r3, #4
 8004440:	d00d      	beq.n	800445e <UART_SetConfig+0x12a>
 8004442:	dc15      	bgt.n	8004470 <UART_SetConfig+0x13c>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <UART_SetConfig+0x11a>
 8004448:	2b02      	cmp	r3, #2
 800444a:	d005      	beq.n	8004458 <UART_SetConfig+0x124>
 800444c:	e010      	b.n	8004470 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800444e:	f7fe fc6b 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 8004452:	0003      	movs	r3, r0
 8004454:	61bb      	str	r3, [r7, #24]
        break;
 8004456:	e012      	b.n	800447e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004458:	4b55      	ldr	r3, [pc, #340]	@ (80045b0 <UART_SetConfig+0x27c>)
 800445a:	61bb      	str	r3, [r7, #24]
        break;
 800445c:	e00f      	b.n	800447e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445e:	f7fe fc03 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8004462:	0003      	movs	r3, r0
 8004464:	61bb      	str	r3, [r7, #24]
        break;
 8004466:	e00a      	b.n	800447e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004468:	2380      	movs	r3, #128	@ 0x80
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	61bb      	str	r3, [r7, #24]
        break;
 800446e:	e006      	b.n	800447e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004474:	231e      	movs	r3, #30
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]
        break;
 800447c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d100      	bne.n	8004486 <UART_SetConfig+0x152>
 8004484:	e07a      	b.n	800457c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	005a      	lsls	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	085b      	lsrs	r3, r3, #1
 8004490:	18d2      	adds	r2, r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	0019      	movs	r1, r3
 8004498:	0010      	movs	r0, r2
 800449a:	f7fb fe51 	bl	8000140 <__udivsi3>
 800449e:	0003      	movs	r3, r0
 80044a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b0f      	cmp	r3, #15
 80044a6:	d91c      	bls.n	80044e2 <UART_SetConfig+0x1ae>
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	2380      	movs	r3, #128	@ 0x80
 80044ac:	025b      	lsls	r3, r3, #9
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d217      	bcs.n	80044e2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	200e      	movs	r0, #14
 80044b8:	183b      	adds	r3, r7, r0
 80044ba:	210f      	movs	r1, #15
 80044bc:	438a      	bics	r2, r1
 80044be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2207      	movs	r2, #7
 80044c8:	4013      	ands	r3, r2
 80044ca:	b299      	uxth	r1, r3
 80044cc:	183b      	adds	r3, r7, r0
 80044ce:	183a      	adds	r2, r7, r0
 80044d0:	8812      	ldrh	r2, [r2, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	183a      	adds	r2, r7, r0
 80044dc:	8812      	ldrh	r2, [r2, #0]
 80044de:	60da      	str	r2, [r3, #12]
 80044e0:	e04c      	b.n	800457c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80044e2:	231e      	movs	r3, #30
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	e047      	b.n	800457c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044ec:	231f      	movs	r3, #31
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d015      	beq.n	8004522 <UART_SetConfig+0x1ee>
 80044f6:	dc18      	bgt.n	800452a <UART_SetConfig+0x1f6>
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d00d      	beq.n	8004518 <UART_SetConfig+0x1e4>
 80044fc:	dc15      	bgt.n	800452a <UART_SetConfig+0x1f6>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <UART_SetConfig+0x1d4>
 8004502:	2b02      	cmp	r3, #2
 8004504:	d005      	beq.n	8004512 <UART_SetConfig+0x1de>
 8004506:	e010      	b.n	800452a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004508:	f7fe fc0e 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 800450c:	0003      	movs	r3, r0
 800450e:	61bb      	str	r3, [r7, #24]
        break;
 8004510:	e012      	b.n	8004538 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004512:	4b27      	ldr	r3, [pc, #156]	@ (80045b0 <UART_SetConfig+0x27c>)
 8004514:	61bb      	str	r3, [r7, #24]
        break;
 8004516:	e00f      	b.n	8004538 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004518:	f7fe fba6 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 800451c:	0003      	movs	r3, r0
 800451e:	61bb      	str	r3, [r7, #24]
        break;
 8004520:	e00a      	b.n	8004538 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004522:	2380      	movs	r3, #128	@ 0x80
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	61bb      	str	r3, [r7, #24]
        break;
 8004528:	e006      	b.n	8004538 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800452e:	231e      	movs	r3, #30
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
        break;
 8004536:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01e      	beq.n	800457c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	085a      	lsrs	r2, r3, #1
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	18d2      	adds	r2, r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	0019      	movs	r1, r3
 800454e:	0010      	movs	r0, r2
 8004550:	f7fb fdf6 	bl	8000140 <__udivsi3>
 8004554:	0003      	movs	r3, r0
 8004556:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	2b0f      	cmp	r3, #15
 800455c:	d90a      	bls.n	8004574 <UART_SetConfig+0x240>
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	2380      	movs	r3, #128	@ 0x80
 8004562:	025b      	lsls	r3, r3, #9
 8004564:	429a      	cmp	r2, r3
 8004566:	d205      	bcs.n	8004574 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	b29a      	uxth	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60da      	str	r2, [r3, #12]
 8004572:	e003      	b.n	800457c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004574:	231e      	movs	r3, #30
 8004576:	18fb      	adds	r3, r7, r3
 8004578:	2201      	movs	r2, #1
 800457a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004588:	231e      	movs	r3, #30
 800458a:	18fb      	adds	r3, r7, r3
 800458c:	781b      	ldrb	r3, [r3, #0]
}
 800458e:	0018      	movs	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	b008      	add	sp, #32
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	ffff69f3 	.word	0xffff69f3
 800459c:	ffffcfff 	.word	0xffffcfff
 80045a0:	fffff4ff 	.word	0xfffff4ff
 80045a4:	40013800 	.word	0x40013800
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40004400 	.word	0x40004400
 80045b0:	007a1200 	.word	0x007a1200

080045b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c0:	2208      	movs	r2, #8
 80045c2:	4013      	ands	r3, r2
 80045c4:	d00b      	beq.n	80045de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4a4a      	ldr	r2, [pc, #296]	@ (80046f8 <UART_AdvFeatureConfig+0x144>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	0019      	movs	r1, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	2201      	movs	r2, #1
 80045e4:	4013      	ands	r3, r2
 80045e6:	d00b      	beq.n	8004600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4a43      	ldr	r2, [pc, #268]	@ (80046fc <UART_AdvFeatureConfig+0x148>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	0019      	movs	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	2202      	movs	r2, #2
 8004606:	4013      	ands	r3, r2
 8004608:	d00b      	beq.n	8004622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a3b      	ldr	r2, [pc, #236]	@ (8004700 <UART_AdvFeatureConfig+0x14c>)
 8004612:	4013      	ands	r3, r2
 8004614:	0019      	movs	r1, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004626:	2204      	movs	r2, #4
 8004628:	4013      	ands	r3, r2
 800462a:	d00b      	beq.n	8004644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	4a34      	ldr	r2, [pc, #208]	@ (8004704 <UART_AdvFeatureConfig+0x150>)
 8004634:	4013      	ands	r3, r2
 8004636:	0019      	movs	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004648:	2210      	movs	r2, #16
 800464a:	4013      	ands	r3, r2
 800464c:	d00b      	beq.n	8004666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4a2c      	ldr	r2, [pc, #176]	@ (8004708 <UART_AdvFeatureConfig+0x154>)
 8004656:	4013      	ands	r3, r2
 8004658:	0019      	movs	r1, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	2220      	movs	r2, #32
 800466c:	4013      	ands	r3, r2
 800466e:	d00b      	beq.n	8004688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	4a25      	ldr	r2, [pc, #148]	@ (800470c <UART_AdvFeatureConfig+0x158>)
 8004678:	4013      	ands	r3, r2
 800467a:	0019      	movs	r1, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	2240      	movs	r2, #64	@ 0x40
 800468e:	4013      	ands	r3, r2
 8004690:	d01d      	beq.n	80046ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4a1d      	ldr	r2, [pc, #116]	@ (8004710 <UART_AdvFeatureConfig+0x15c>)
 800469a:	4013      	ands	r3, r2
 800469c:	0019      	movs	r1, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046ae:	2380      	movs	r3, #128	@ 0x80
 80046b0:	035b      	lsls	r3, r3, #13
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d10b      	bne.n	80046ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4a15      	ldr	r2, [pc, #84]	@ (8004714 <UART_AdvFeatureConfig+0x160>)
 80046be:	4013      	ands	r3, r2
 80046c0:	0019      	movs	r1, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	2280      	movs	r2, #128	@ 0x80
 80046d4:	4013      	ands	r3, r2
 80046d6:	d00b      	beq.n	80046f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4a0e      	ldr	r2, [pc, #56]	@ (8004718 <UART_AdvFeatureConfig+0x164>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	0019      	movs	r1, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }
}
 80046f0:	46c0      	nop			@ (mov r8, r8)
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b002      	add	sp, #8
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	ffff7fff 	.word	0xffff7fff
 80046fc:	fffdffff 	.word	0xfffdffff
 8004700:	fffeffff 	.word	0xfffeffff
 8004704:	fffbffff 	.word	0xfffbffff
 8004708:	ffffefff 	.word	0xffffefff
 800470c:	ffffdfff 	.word	0xffffdfff
 8004710:	ffefffff 	.word	0xffefffff
 8004714:	ff9fffff 	.word	0xff9fffff
 8004718:	fff7ffff 	.word	0xfff7ffff

0800471c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b092      	sub	sp, #72	@ 0x48
 8004720:	af02      	add	r7, sp, #8
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2284      	movs	r2, #132	@ 0x84
 8004728:	2100      	movs	r1, #0
 800472a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800472c:	f7fd faa6 	bl	8001c7c <HAL_GetTick>
 8004730:	0003      	movs	r3, r0
 8004732:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2208      	movs	r2, #8
 800473c:	4013      	ands	r3, r2
 800473e:	2b08      	cmp	r3, #8
 8004740:	d12c      	bne.n	800479c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004744:	2280      	movs	r2, #128	@ 0x80
 8004746:	0391      	lsls	r1, r2, #14
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	4a46      	ldr	r2, [pc, #280]	@ (8004864 <UART_CheckIdleState+0x148>)
 800474c:	9200      	str	r2, [sp, #0]
 800474e:	2200      	movs	r2, #0
 8004750:	f000 f88c 	bl	800486c <UART_WaitOnFlagUntilTimeout>
 8004754:	1e03      	subs	r3, r0, #0
 8004756:	d021      	beq.n	800479c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004758:	f3ef 8310 	mrs	r3, PRIMASK
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004760:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004762:	2301      	movs	r3, #1
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004768:	f383 8810 	msr	PRIMASK, r3
}
 800476c:	46c0      	nop			@ (mov r8, r8)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2180      	movs	r1, #128	@ 0x80
 800477a:	438a      	bics	r2, r1
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004784:	f383 8810 	msr	PRIMASK, r3
}
 8004788:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2278      	movs	r2, #120	@ 0x78
 8004794:	2100      	movs	r1, #0
 8004796:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e05f      	b.n	800485c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2204      	movs	r2, #4
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d146      	bne.n	8004838 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047ac:	2280      	movs	r2, #128	@ 0x80
 80047ae:	03d1      	lsls	r1, r2, #15
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004864 <UART_CheckIdleState+0x148>)
 80047b4:	9200      	str	r2, [sp, #0]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f000 f858 	bl	800486c <UART_WaitOnFlagUntilTimeout>
 80047bc:	1e03      	subs	r3, r0, #0
 80047be:	d03b      	beq.n	8004838 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c0:	f3ef 8310 	mrs	r3, PRIMASK
 80047c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80047c6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ca:	2301      	movs	r3, #1
 80047cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f383 8810 	msr	PRIMASK, r3
}
 80047d4:	46c0      	nop			@ (mov r8, r8)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4921      	ldr	r1, [pc, #132]	@ (8004868 <UART_CheckIdleState+0x14c>)
 80047e2:	400a      	ands	r2, r1
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f383 8810 	msr	PRIMASK, r3
}
 80047f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f2:	f3ef 8310 	mrs	r3, PRIMASK
 80047f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80047f8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80047fc:	2301      	movs	r3, #1
 80047fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f383 8810 	msr	PRIMASK, r3
}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2101      	movs	r1, #1
 8004814:	438a      	bics	r2, r1
 8004816:	609a      	str	r2, [r3, #8]
 8004818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	f383 8810 	msr	PRIMASK, r3
}
 8004822:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2280      	movs	r2, #128	@ 0x80
 8004828:	2120      	movs	r1, #32
 800482a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2278      	movs	r2, #120	@ 0x78
 8004830:	2100      	movs	r1, #0
 8004832:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e011      	b.n	800485c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2280      	movs	r2, #128	@ 0x80
 8004842:	2120      	movs	r1, #32
 8004844:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2278      	movs	r2, #120	@ 0x78
 8004856:	2100      	movs	r1, #0
 8004858:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	0018      	movs	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	b010      	add	sp, #64	@ 0x40
 8004862:	bd80      	pop	{r7, pc}
 8004864:	01ffffff 	.word	0x01ffffff
 8004868:	fffffedf 	.word	0xfffffedf

0800486c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	1dfb      	adds	r3, r7, #7
 800487a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487c:	e051      	b.n	8004922 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	3301      	adds	r3, #1
 8004882:	d04e      	beq.n	8004922 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004884:	f7fd f9fa 	bl	8001c7c <HAL_GetTick>
 8004888:	0002      	movs	r2, r0
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	429a      	cmp	r2, r3
 8004892:	d302      	bcc.n	800489a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e051      	b.n	8004942 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2204      	movs	r2, #4
 80048a6:	4013      	ands	r3, r2
 80048a8:	d03b      	beq.n	8004922 <UART_WaitOnFlagUntilTimeout+0xb6>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b80      	cmp	r3, #128	@ 0x80
 80048ae:	d038      	beq.n	8004922 <UART_WaitOnFlagUntilTimeout+0xb6>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b40      	cmp	r3, #64	@ 0x40
 80048b4:	d035      	beq.n	8004922 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	2208      	movs	r2, #8
 80048be:	4013      	ands	r3, r2
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d111      	bne.n	80048e8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2208      	movs	r2, #8
 80048ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	0018      	movs	r0, r3
 80048d0:	f000 f83c 	bl	800494c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2284      	movs	r2, #132	@ 0x84
 80048d8:	2108      	movs	r1, #8
 80048da:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2278      	movs	r2, #120	@ 0x78
 80048e0:	2100      	movs	r1, #0
 80048e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e02c      	b.n	8004942 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69da      	ldr	r2, [r3, #28]
 80048ee:	2380      	movs	r3, #128	@ 0x80
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	401a      	ands	r2, r3
 80048f4:	2380      	movs	r3, #128	@ 0x80
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d112      	bne.n	8004922 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2280      	movs	r2, #128	@ 0x80
 8004902:	0112      	lsls	r2, r2, #4
 8004904:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	0018      	movs	r0, r3
 800490a:	f000 f81f 	bl	800494c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2284      	movs	r2, #132	@ 0x84
 8004912:	2120      	movs	r1, #32
 8004914:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2278      	movs	r2, #120	@ 0x78
 800491a:	2100      	movs	r1, #0
 800491c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e00f      	b.n	8004942 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	4013      	ands	r3, r2
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	425a      	negs	r2, r3
 8004932:	4153      	adcs	r3, r2
 8004934:	b2db      	uxtb	r3, r3
 8004936:	001a      	movs	r2, r3
 8004938:	1dfb      	adds	r3, r7, #7
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d09e      	beq.n	800487e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	b004      	add	sp, #16
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08e      	sub	sp, #56	@ 0x38
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004954:	f3ef 8310 	mrs	r3, PRIMASK
 8004958:	617b      	str	r3, [r7, #20]
  return(result);
 800495a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800495c:	637b      	str	r3, [r7, #52]	@ 0x34
 800495e:	2301      	movs	r3, #1
 8004960:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	f383 8810 	msr	PRIMASK, r3
}
 8004968:	46c0      	nop			@ (mov r8, r8)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4926      	ldr	r1, [pc, #152]	@ (8004a10 <UART_EndRxTransfer+0xc4>)
 8004976:	400a      	ands	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800497c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f383 8810 	msr	PRIMASK, r3
}
 8004984:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004986:	f3ef 8310 	mrs	r3, PRIMASK
 800498a:	623b      	str	r3, [r7, #32]
  return(result);
 800498c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004990:	2301      	movs	r3, #1
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	f383 8810 	msr	PRIMASK, r3
}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2101      	movs	r1, #1
 80049a8:	438a      	bics	r2, r1
 80049aa:	609a      	str	r2, [r3, #8]
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b2:	f383 8810 	msr	PRIMASK, r3
}
 80049b6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d118      	bne.n	80049f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c0:	f3ef 8310 	mrs	r3, PRIMASK
 80049c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80049c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ca:	2301      	movs	r3, #1
 80049cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f383 8810 	msr	PRIMASK, r3
}
 80049d4:	46c0      	nop			@ (mov r8, r8)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2110      	movs	r1, #16
 80049e2:	438a      	bics	r2, r1
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f383 8810 	msr	PRIMASK, r3
}
 80049f0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2280      	movs	r2, #128	@ 0x80
 80049f6:	2120      	movs	r1, #32
 80049f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a06:	46c0      	nop			@ (mov r8, r8)
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b00e      	add	sp, #56	@ 0x38
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
 8004a10:	fffffedf 	.word	0xfffffedf

08004a14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004a18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004a20:	b5b0      	push	{r4, r5, r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	0002      	movs	r2, r0
 8004a28:	1dfb      	adds	r3, r7, #7
 8004a2a:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004a2c:	1dfb      	adds	r3, r7, #7
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	4a0b      	ldr	r2, [pc, #44]	@ (8004a60 <disk_status+0x40>)
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	18d3      	adds	r3, r2, r3
 8004a36:	3304      	adds	r3, #4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	1dfa      	adds	r2, r7, #7
 8004a3e:	7812      	ldrb	r2, [r2, #0]
 8004a40:	4907      	ldr	r1, [pc, #28]	@ (8004a60 <disk_status+0x40>)
 8004a42:	188a      	adds	r2, r1, r2
 8004a44:	7a12      	ldrb	r2, [r2, #8]
 8004a46:	250f      	movs	r5, #15
 8004a48:	197c      	adds	r4, r7, r5
 8004a4a:	0010      	movs	r0, r2
 8004a4c:	4798      	blx	r3
 8004a4e:	0003      	movs	r3, r0
 8004a50:	7023      	strb	r3, [r4, #0]
  return stat;
 8004a52:	197b      	adds	r3, r7, r5
 8004a54:	781b      	ldrb	r3, [r3, #0]
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b004      	add	sp, #16
 8004a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	200006e0 	.word	0x200006e0

08004a64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004a64:	b590      	push	{r4, r7, lr}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	0002      	movs	r2, r0
 8004a6c:	1dfb      	adds	r3, r7, #7
 8004a6e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8004a70:	200f      	movs	r0, #15
 8004a72:	183b      	adds	r3, r7, r0
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 8004a78:	1dfb      	adds	r3, r7, #7
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	4a10      	ldr	r2, [pc, #64]	@ (8004ac0 <disk_initialize+0x5c>)
 8004a7e:	5cd3      	ldrb	r3, [r2, r3]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d116      	bne.n	8004ab2 <disk_initialize+0x4e>
  { 
    disk.is_initialized[pdrv] = 1;
 8004a84:	1dfb      	adds	r3, r7, #7
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	4a0d      	ldr	r2, [pc, #52]	@ (8004ac0 <disk_initialize+0x5c>)
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004a8e:	1dfb      	adds	r3, r7, #7
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	4a0b      	ldr	r2, [pc, #44]	@ (8004ac0 <disk_initialize+0x5c>)
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	18d3      	adds	r3, r2, r3
 8004a98:	3304      	adds	r3, #4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	1dfa      	adds	r2, r7, #7
 8004aa0:	7812      	ldrb	r2, [r2, #0]
 8004aa2:	4907      	ldr	r1, [pc, #28]	@ (8004ac0 <disk_initialize+0x5c>)
 8004aa4:	188a      	adds	r2, r1, r2
 8004aa6:	7a12      	ldrb	r2, [r2, #8]
 8004aa8:	183c      	adds	r4, r7, r0
 8004aaa:	0010      	movs	r0, r2
 8004aac:	4798      	blx	r3
 8004aae:	0003      	movs	r3, r0
 8004ab0:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8004ab2:	230f      	movs	r3, #15
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	781b      	ldrb	r3, [r3, #0]
}
 8004ab8:	0018      	movs	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	b005      	add	sp, #20
 8004abe:	bd90      	pop	{r4, r7, pc}
 8004ac0:	200006e0 	.word	0x200006e0

08004ac4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	607a      	str	r2, [r7, #4]
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	210f      	movs	r1, #15
 8004ad2:	187b      	adds	r3, r7, r1
 8004ad4:	1c02      	adds	r2, r0, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004ad8:	187b      	adds	r3, r7, r1
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	4a0c      	ldr	r2, [pc, #48]	@ (8004b10 <disk_read+0x4c>)
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	18d3      	adds	r3, r2, r3
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689d      	ldr	r5, [r3, #8]
 8004ae8:	187b      	adds	r3, r7, r1
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	4a08      	ldr	r2, [pc, #32]	@ (8004b10 <disk_read+0x4c>)
 8004aee:	18d3      	adds	r3, r2, r3
 8004af0:	7a18      	ldrb	r0, [r3, #8]
 8004af2:	2617      	movs	r6, #23
 8004af4:	19bc      	adds	r4, r7, r6
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	47a8      	blx	r5
 8004afe:	0003      	movs	r3, r0
 8004b00:	7023      	strb	r3, [r4, #0]
  return res;
 8004b02:	19bb      	adds	r3, r7, r6
 8004b04:	781b      	ldrb	r3, [r3, #0]
}
 8004b06:	0018      	movs	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b007      	add	sp, #28
 8004b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b0e:	46c0      	nop			@ (mov r8, r8)
 8004b10:	200006e0 	.word	0x200006e0

08004b14 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	210f      	movs	r1, #15
 8004b22:	187b      	adds	r3, r7, r1
 8004b24:	1c02      	adds	r2, r0, #0
 8004b26:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004b28:	187b      	adds	r3, r7, r1
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b60 <disk_write+0x4c>)
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	18d3      	adds	r3, r2, r3
 8004b32:	3304      	adds	r3, #4
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68dd      	ldr	r5, [r3, #12]
 8004b38:	187b      	adds	r3, r7, r1
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	4a08      	ldr	r2, [pc, #32]	@ (8004b60 <disk_write+0x4c>)
 8004b3e:	18d3      	adds	r3, r2, r3
 8004b40:	7a18      	ldrb	r0, [r3, #8]
 8004b42:	2617      	movs	r6, #23
 8004b44:	19bc      	adds	r4, r7, r6
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	47a8      	blx	r5
 8004b4e:	0003      	movs	r3, r0
 8004b50:	7023      	strb	r3, [r4, #0]
  return res;
 8004b52:	19bb      	adds	r3, r7, r6
 8004b54:	781b      	ldrb	r3, [r3, #0]
}
 8004b56:	0018      	movs	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b007      	add	sp, #28
 8004b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	200006e0 	.word	0x200006e0

08004b64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	603a      	str	r2, [r7, #0]
 8004b6c:	1dfb      	adds	r3, r7, #7
 8004b6e:	1c02      	adds	r2, r0, #0
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	1dbb      	adds	r3, r7, #6
 8004b74:	1c0a      	adds	r2, r1, #0
 8004b76:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004b78:	1dfb      	adds	r3, r7, #7
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8004bb0 <disk_ioctl+0x4c>)
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	18d3      	adds	r3, r2, r3
 8004b82:	3304      	adds	r3, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	1dfa      	adds	r2, r7, #7
 8004b8a:	7812      	ldrb	r2, [r2, #0]
 8004b8c:	4908      	ldr	r1, [pc, #32]	@ (8004bb0 <disk_ioctl+0x4c>)
 8004b8e:	188a      	adds	r2, r1, r2
 8004b90:	7a10      	ldrb	r0, [r2, #8]
 8004b92:	260f      	movs	r6, #15
 8004b94:	19bc      	adds	r4, r7, r6
 8004b96:	683d      	ldr	r5, [r7, #0]
 8004b98:	1dba      	adds	r2, r7, #6
 8004b9a:	7811      	ldrb	r1, [r2, #0]
 8004b9c:	002a      	movs	r2, r5
 8004b9e:	4798      	blx	r3
 8004ba0:	0003      	movs	r3, r0
 8004ba2:	7023      	strb	r3, [r4, #0]
  return res;
 8004ba4:	19bb      	adds	r3, r7, r6
 8004ba6:	781b      	ldrb	r3, [r3, #0]
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b005      	add	sp, #20
 8004bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb0:	200006e0 	.word	0x200006e0

08004bb4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004bc8:	e007      	b.n	8004bda <mem_cpy+0x26>
		*d++ = *s++;
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	1c53      	adds	r3, r2, #1
 8004bce:	613b      	str	r3, [r7, #16]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	1c59      	adds	r1, r3, #1
 8004bd4:	6179      	str	r1, [r7, #20]
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	1e5a      	subs	r2, r3, #1
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f2      	bne.n	8004bca <mem_cpy+0x16>
}
 8004be4:	46c0      	nop			@ (mov r8, r8)
 8004be6:	46c0      	nop			@ (mov r8, r8)
 8004be8:	46bd      	mov	sp, r7
 8004bea:	b006      	add	sp, #24
 8004bec:	bd80      	pop	{r7, pc}

08004bee <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004bfe:	e005      	b.n	8004c0c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	617a      	str	r2, [r7, #20]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	1e5a      	subs	r2, r3, #1
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f4      	bne.n	8004c00 <mem_set+0x12>
}
 8004c16:	46c0      	nop			@ (mov r8, r8)
 8004c18:	46c0      	nop			@ (mov r8, r8)
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b006      	add	sp, #24
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004c38:	46c0      	nop			@ (mov r8, r8)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	1e5a      	subs	r2, r3, #1
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00d      	beq.n	8004c60 <mem_cmp+0x40>
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	61fa      	str	r2, [r7, #28]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	0019      	movs	r1, r3
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	61ba      	str	r2, [r7, #24]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	1acb      	subs	r3, r1, r3
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0ec      	beq.n	8004c3a <mem_cmp+0x1a>
	return r;
 8004c60:	697b      	ldr	r3, [r7, #20]
}
 8004c62:	0018      	movs	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b008      	add	sp, #32
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b082      	sub	sp, #8
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004c74:	e002      	b.n	8004c7c <chk_chr+0x12>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	607b      	str	r3, [r7, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <chk_chr+0x26>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	001a      	movs	r2, r3
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d1f2      	bne.n	8004c76 <chk_chr+0xc>
	return *str;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	781b      	ldrb	r3, [r3, #0]
}
 8004c94:	0018      	movs	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b002      	add	sp, #8
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	e038      	b.n	8004d22 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8004cb0:	492f      	ldr	r1, [pc, #188]	@ (8004d70 <chk_lock+0xd4>)
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	0013      	movs	r3, r2
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	189b      	adds	r3, r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	585b      	ldr	r3, [r3, r1]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d02a      	beq.n	8004d18 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004cc2:	492b      	ldr	r1, [pc, #172]	@ (8004d70 <chk_lock+0xd4>)
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	0013      	movs	r3, r2
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	189b      	adds	r3, r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	585a      	ldr	r2, [r3, r1]
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	2380      	movs	r3, #128	@ 0x80
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	58cb      	ldr	r3, [r1, r3]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d11f      	bne.n	8004d1c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8004cdc:	4924      	ldr	r1, [pc, #144]	@ (8004d70 <chk_lock+0xd4>)
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	0013      	movs	r3, r2
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	189b      	adds	r3, r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	18cb      	adds	r3, r1, r3
 8004cea:	3304      	adds	r3, #4
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	2382      	movs	r3, #130	@ 0x82
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	58cb      	ldr	r3, [r1, r3]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d110      	bne.n	8004d1c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004cfa:	491d      	ldr	r1, [pc, #116]	@ (8004d70 <chk_lock+0xd4>)
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	0013      	movs	r3, r2
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	189b      	adds	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	18cb      	adds	r3, r1, r3
 8004d08:	3308      	adds	r3, #8
 8004d0a:	881a      	ldrh	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4919      	ldr	r1, [pc, #100]	@ (8004d74 <chk_lock+0xd8>)
 8004d10:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d102      	bne.n	8004d1c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004d16:	e007      	b.n	8004d28 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d9c3      	bls.n	8004cb0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d109      	bne.n	8004d42 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <chk_lock+0x9e>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d101      	bne.n	8004d3e <chk_lock+0xa2>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	e014      	b.n	8004d68 <chk_lock+0xcc>
 8004d3e:	2312      	movs	r3, #18
 8004d40:	e012      	b.n	8004d68 <chk_lock+0xcc>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10c      	bne.n	8004d62 <chk_lock+0xc6>
 8004d48:	4909      	ldr	r1, [pc, #36]	@ (8004d70 <chk_lock+0xd4>)
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	0013      	movs	r3, r2
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	189b      	adds	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	18cb      	adds	r3, r1, r3
 8004d56:	330a      	adds	r3, #10
 8004d58:	881a      	ldrh	r2, [r3, #0]
 8004d5a:	2380      	movs	r3, #128	@ 0x80
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d101      	bne.n	8004d66 <chk_lock+0xca>
 8004d62:	2310      	movs	r3, #16
 8004d64:	e000      	b.n	8004d68 <chk_lock+0xcc>
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b004      	add	sp, #16
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	200006c8 	.word	0x200006c8
 8004d74:	00000206 	.word	0x00000206

08004d78 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	e002      	b.n	8004d8a <enq_lock+0x12>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3301      	adds	r3, #1
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d808      	bhi.n	8004da2 <enq_lock+0x2a>
 8004d90:	4908      	ldr	r1, [pc, #32]	@ (8004db4 <enq_lock+0x3c>)
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	0013      	movs	r3, r2
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	189b      	adds	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	585b      	ldr	r3, [r3, r1]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3b02      	subs	r3, #2
 8004da6:	1e5a      	subs	r2, r3, #1
 8004da8:	4193      	sbcs	r3, r2
 8004daa:	b2db      	uxtb	r3, r3
}
 8004dac:	0018      	movs	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b002      	add	sp, #8
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	200006c8 	.word	0x200006c8

08004db8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e02c      	b.n	8004e22 <inc_lock+0x6a>
		if (Files[i].fs == dp->fs &&
 8004dc8:	4955      	ldr	r1, [pc, #340]	@ (8004f20 <inc_lock+0x168>)
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	0013      	movs	r3, r2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	189b      	adds	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	585a      	ldr	r2, [r3, r1]
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	2380      	movs	r3, #128	@ 0x80
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	58cb      	ldr	r3, [r1, r3]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d11c      	bne.n	8004e1c <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 8004de2:	494f      	ldr	r1, [pc, #316]	@ (8004f20 <inc_lock+0x168>)
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	0013      	movs	r3, r2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	189b      	adds	r3, r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	18cb      	adds	r3, r1, r3
 8004df0:	3304      	adds	r3, #4
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	2382      	movs	r3, #130	@ 0x82
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	58cb      	ldr	r3, [r1, r3]
		if (Files[i].fs == dp->fs &&
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d10d      	bne.n	8004e1c <inc_lock+0x64>
			Files[i].idx == dp->index) break;
 8004e00:	4947      	ldr	r1, [pc, #284]	@ (8004f20 <inc_lock+0x168>)
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	0013      	movs	r3, r2
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	189b      	adds	r3, r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	18cb      	adds	r3, r1, r3
 8004e0e:	3308      	adds	r3, #8
 8004e10:	881a      	ldrh	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4943      	ldr	r1, [pc, #268]	@ (8004f24 <inc_lock+0x16c>)
 8004e16:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d006      	beq.n	8004e2a <inc_lock+0x72>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d9cf      	bls.n	8004dc8 <inc_lock+0x10>
 8004e28:	e000      	b.n	8004e2c <inc_lock+0x74>
			Files[i].idx == dp->index) break;
 8004e2a:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d145      	bne.n	8004ebe <inc_lock+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	e002      	b.n	8004e3e <inc_lock+0x86>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d808      	bhi.n	8004e56 <inc_lock+0x9e>
 8004e44:	4936      	ldr	r1, [pc, #216]	@ (8004f20 <inc_lock+0x168>)
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	0013      	movs	r3, r2
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	189b      	adds	r3, r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	585b      	ldr	r3, [r3, r1]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d101      	bne.n	8004e60 <inc_lock+0xa8>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e05a      	b.n	8004f16 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	2380      	movs	r3, #128	@ 0x80
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	58d0      	ldr	r0, [r2, r3]
 8004e68:	492d      	ldr	r1, [pc, #180]	@ (8004f20 <inc_lock+0x168>)
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	0013      	movs	r3, r2
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	189b      	adds	r3, r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	2382      	movs	r3, #130	@ 0x82
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	58d1      	ldr	r1, [r2, r3]
 8004e7e:	4828      	ldr	r0, [pc, #160]	@ (8004f20 <inc_lock+0x168>)
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	0013      	movs	r3, r2
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	18c3      	adds	r3, r0, r3
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a24      	ldr	r2, [pc, #144]	@ (8004f24 <inc_lock+0x16c>)
 8004e94:	5a98      	ldrh	r0, [r3, r2]
 8004e96:	4922      	ldr	r1, [pc, #136]	@ (8004f20 <inc_lock+0x168>)
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	0013      	movs	r3, r2
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	189b      	adds	r3, r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	18cb      	adds	r3, r1, r3
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	1c02      	adds	r2, r0, #0
 8004ea8:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004eaa:	491d      	ldr	r1, [pc, #116]	@ (8004f20 <inc_lock+0x168>)
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	0013      	movs	r3, r2
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	189b      	adds	r3, r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	18cb      	adds	r3, r1, r3
 8004eb8:	330a      	adds	r3, #10
 8004eba:	2200      	movs	r2, #0
 8004ebc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00c      	beq.n	8004ede <inc_lock+0x126>
 8004ec4:	4916      	ldr	r1, [pc, #88]	@ (8004f20 <inc_lock+0x168>)
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	0013      	movs	r3, r2
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	189b      	adds	r3, r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	18cb      	adds	r3, r1, r3
 8004ed2:	330a      	adds	r3, #10
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <inc_lock+0x126>
 8004eda:	2300      	movs	r3, #0
 8004edc:	e01b      	b.n	8004f16 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10b      	bne.n	8004efc <inc_lock+0x144>
 8004ee4:	490e      	ldr	r1, [pc, #56]	@ (8004f20 <inc_lock+0x168>)
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	0013      	movs	r3, r2
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	189b      	adds	r3, r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	18cb      	adds	r3, r1, r3
 8004ef2:	330a      	adds	r3, #10
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	e001      	b.n	8004f00 <inc_lock+0x148>
 8004efc:	2380      	movs	r3, #128	@ 0x80
 8004efe:	005a      	lsls	r2, r3, #1
 8004f00:	4807      	ldr	r0, [pc, #28]	@ (8004f20 <inc_lock+0x168>)
 8004f02:	68f9      	ldr	r1, [r7, #12]
 8004f04:	000b      	movs	r3, r1
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	185b      	adds	r3, r3, r1
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	18c3      	adds	r3, r0, r3
 8004f0e:	330a      	adds	r3, #10
 8004f10:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3301      	adds	r3, #1
}
 8004f16:	0018      	movs	r0, r3
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	b004      	add	sp, #16
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	46c0      	nop			@ (mov r8, r8)
 8004f20:	200006c8 	.word	0x200006c8
 8004f24:	00000206 	.word	0x00000206

08004f28 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004f28:	b590      	push	{r4, r7, lr}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	607b      	str	r3, [r7, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d83b      	bhi.n	8004fb4 <dec_lock+0x8c>
		n = Files[i].ctr;
 8004f3c:	240e      	movs	r4, #14
 8004f3e:	1939      	adds	r1, r7, r4
 8004f40:	4822      	ldr	r0, [pc, #136]	@ (8004fcc <dec_lock+0xa4>)
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	0013      	movs	r3, r2
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	189b      	adds	r3, r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	18c3      	adds	r3, r0, r3
 8004f4e:	330a      	adds	r3, #10
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	800b      	strh	r3, [r1, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004f54:	193b      	adds	r3, r7, r4
 8004f56:	881a      	ldrh	r2, [r3, #0]
 8004f58:	2380      	movs	r3, #128	@ 0x80
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d102      	bne.n	8004f66 <dec_lock+0x3e>
 8004f60:	193b      	adds	r3, r7, r4
 8004f62:	2200      	movs	r2, #0
 8004f64:	801a      	strh	r2, [r3, #0]
		if (n) n--;					/* Decrement read mode open count */
 8004f66:	210e      	movs	r1, #14
 8004f68:	187b      	adds	r3, r7, r1
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d004      	beq.n	8004f7a <dec_lock+0x52>
 8004f70:	187b      	adds	r3, r7, r1
 8004f72:	881a      	ldrh	r2, [r3, #0]
 8004f74:	187b      	adds	r3, r7, r1
 8004f76:	3a01      	subs	r2, #1
 8004f78:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8004f7a:	4914      	ldr	r1, [pc, #80]	@ (8004fcc <dec_lock+0xa4>)
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	0013      	movs	r3, r2
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	189b      	adds	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	18cb      	adds	r3, r1, r3
 8004f88:	330a      	adds	r3, #10
 8004f8a:	210e      	movs	r1, #14
 8004f8c:	187a      	adds	r2, r7, r1
 8004f8e:	8812      	ldrh	r2, [r2, #0]
 8004f90:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004f92:	187b      	adds	r3, r7, r1
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d107      	bne.n	8004faa <dec_lock+0x82>
 8004f9a:	490c      	ldr	r1, [pc, #48]	@ (8004fcc <dec_lock+0xa4>)
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	0013      	movs	r3, r2
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	189b      	adds	r3, r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	505a      	str	r2, [r3, r1]
		res = FR_OK;
 8004faa:	230d      	movs	r3, #13
 8004fac:	18fb      	adds	r3, r7, r3
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	e003      	b.n	8004fbc <dec_lock+0x94>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004fb4:	230d      	movs	r3, #13
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	2202      	movs	r2, #2
 8004fba:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8004fbc:	230d      	movs	r3, #13
 8004fbe:	18fb      	adds	r3, r7, r3
 8004fc0:	781b      	ldrb	r3, [r3, #0]
}
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b005      	add	sp, #20
 8004fc8:	bd90      	pop	{r4, r7, pc}
 8004fca:	46c0      	nop			@ (mov r8, r8)
 8004fcc:	200006c8 	.word	0x200006c8

08004fd0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e014      	b.n	8005008 <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004fde:	490e      	ldr	r1, [pc, #56]	@ (8005018 <clear_lock+0x48>)
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	0013      	movs	r3, r2
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	189b      	adds	r3, r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	585b      	ldr	r3, [r3, r1]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d107      	bne.n	8005002 <clear_lock+0x32>
 8004ff2:	4909      	ldr	r1, [pc, #36]	@ (8005018 <clear_lock+0x48>)
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	0013      	movs	r3, r2
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	189b      	adds	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	2200      	movs	r2, #0
 8005000:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3301      	adds	r3, #1
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d9e7      	bls.n	8004fde <clear_lock+0xe>
	}
}
 800500e:	46c0      	nop			@ (mov r8, r8)
 8005010:	46c0      	nop			@ (mov r8, r8)
 8005012:	46bd      	mov	sp, r7
 8005014:	b004      	add	sp, #16
 8005016:	bd80      	pop	{r7, pc}
 8005018:	200006c8 	.word	0x200006c8

0800501c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800501c:	b590      	push	{r4, r7, lr}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005024:	240f      	movs	r4, #15
 8005026:	193b      	adds	r3, r7, r4
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	2381      	movs	r3, #129	@ 0x81
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	5cd3      	ldrb	r3, [r2, r3]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d03d      	beq.n	80050b4 <sync_window+0x98>
		wsect = fs->winsect;	/* Current sector number */
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	238b      	movs	r3, #139	@ 0x8b
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	58d3      	ldr	r3, [r2, r3]
 8005040:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a1f      	ldr	r2, [pc, #124]	@ (80050c4 <sync_window+0xa8>)
 8005046:	5c98      	ldrb	r0, [r3, r2]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	2301      	movs	r3, #1
 800504e:	f7ff fd61 	bl	8004b14 <disk_write>
 8005052:	1e03      	subs	r3, r0, #0
 8005054:	d003      	beq.n	800505e <sync_window+0x42>
			res = FR_DISK_ERR;
 8005056:	193b      	adds	r3, r7, r4
 8005058:	2201      	movs	r2, #1
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	e02a      	b.n	80050b4 <sync_window+0x98>
		} else {
			fs->wflag = 0;
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	2381      	movs	r3, #129	@ 0x81
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	2100      	movs	r1, #0
 8005066:	54d1      	strb	r1, [r2, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	2388      	movs	r3, #136	@ 0x88
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	58d3      	ldr	r3, [r2, r3]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	1ad2      	subs	r2, r2, r3
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	2386      	movs	r3, #134	@ 0x86
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	58cb      	ldr	r3, [r1, r3]
 800507c:	429a      	cmp	r2, r3
 800507e:	d219      	bcs.n	80050b4 <sync_window+0x98>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a11      	ldr	r2, [pc, #68]	@ (80050c8 <sync_window+0xac>)
 8005084:	5c9b      	ldrb	r3, [r3, r2]
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	e011      	b.n	80050ae <sync_window+0x92>
					wsect += fs->fsize;
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	2386      	movs	r3, #134	@ 0x86
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	58d3      	ldr	r3, [r2, r3]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	18d3      	adds	r3, r2, r3
 8005096:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a0a      	ldr	r2, [pc, #40]	@ (80050c4 <sync_window+0xa8>)
 800509c:	5c98      	ldrb	r0, [r3, r2]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	2301      	movs	r3, #1
 80050a4:	f7ff fd36 	bl	8004b14 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d8ea      	bhi.n	800508a <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80050b4:	230f      	movs	r3, #15
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	781b      	ldrb	r3, [r3, #0]
}
 80050ba:	0018      	movs	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	b007      	add	sp, #28
 80050c0:	bd90      	pop	{r4, r7, pc}
 80050c2:	46c0      	nop			@ (mov r8, r8)
 80050c4:	00000201 	.word	0x00000201
 80050c8:	00000203 	.word	0x00000203

080050cc <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80050cc:	b5b0      	push	{r4, r5, r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80050d6:	240f      	movs	r4, #15
 80050d8:	193b      	adds	r3, r7, r4
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	238b      	movs	r3, #139	@ 0x8b
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	58d3      	ldr	r3, [r2, r3]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d021      	beq.n	8005130 <move_window+0x64>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80050ec:	0025      	movs	r5, r4
 80050ee:	193c      	adds	r4, r7, r4
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	0018      	movs	r0, r3
 80050f4:	f7ff ff92 	bl	800501c <sync_window>
 80050f8:	0003      	movs	r3, r0
 80050fa:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80050fc:	002c      	movs	r4, r5
 80050fe:	193b      	adds	r3, r7, r4
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d114      	bne.n	8005130 <move_window+0x64>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a0d      	ldr	r2, [pc, #52]	@ (8005140 <move_window+0x74>)
 800510a:	5c98      	ldrb	r0, [r3, r2]
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	2301      	movs	r3, #1
 8005112:	f7ff fcd7 	bl	8004ac4 <disk_read>
 8005116:	1e03      	subs	r3, r0, #0
 8005118:	d005      	beq.n	8005126 <move_window+0x5a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800511a:	2301      	movs	r3, #1
 800511c:	425b      	negs	r3, r3
 800511e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005120:	193b      	adds	r3, r7, r4
 8005122:	2201      	movs	r2, #1
 8005124:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	238b      	movs	r3, #139	@ 0x8b
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	50d1      	str	r1, [r2, r3]
		}
	}
	return res;
 8005130:	230f      	movs	r3, #15
 8005132:	18fb      	adds	r3, r7, r3
 8005134:	781b      	ldrb	r3, [r3, #0]
}
 8005136:	0018      	movs	r0, r3
 8005138:	46bd      	mov	sp, r7
 800513a:	b004      	add	sp, #16
 800513c:	bdb0      	pop	{r4, r5, r7, pc}
 800513e:	46c0      	nop			@ (mov r8, r8)
 8005140:	00000201 	.word	0x00000201

08005144 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005144:	b5b0      	push	{r4, r5, r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800514c:	250f      	movs	r5, #15
 800514e:	197c      	adds	r4, r7, r5
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	0018      	movs	r0, r3
 8005154:	f7ff ff62 	bl	800501c <sync_window>
 8005158:	0003      	movs	r3, r0
 800515a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800515c:	197b      	adds	r3, r7, r5
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d000      	beq.n	8005166 <sync_fs+0x22>
 8005164:	e0b4      	b.n	80052d0 <sync_fs+0x18c>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	2380      	movs	r3, #128	@ 0x80
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	5cd3      	ldrb	r3, [r2, r3]
 800516e:	2b03      	cmp	r3, #3
 8005170:	d000      	beq.n	8005174 <sync_fs+0x30>
 8005172:	e09f      	b.n	80052b4 <sync_fs+0x170>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a5a      	ldr	r2, [pc, #360]	@ (80052e0 <sync_fs+0x19c>)
 8005178:	5c9b      	ldrb	r3, [r3, r2]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d000      	beq.n	8005180 <sync_fs+0x3c>
 800517e:	e099      	b.n	80052b4 <sync_fs+0x170>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2280      	movs	r2, #128	@ 0x80
 8005184:	0092      	lsls	r2, r2, #2
 8005186:	2100      	movs	r1, #0
 8005188:	0018      	movs	r0, r3
 800518a:	f7ff fd30 	bl	8004bee <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	23ff      	movs	r3, #255	@ 0xff
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	2155      	movs	r1, #85	@ 0x55
 8005196:	54d1      	strb	r1, [r2, r3]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a52      	ldr	r2, [pc, #328]	@ (80052e4 <sync_fs+0x1a0>)
 800519c:	21aa      	movs	r1, #170	@ 0xaa
 800519e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2252      	movs	r2, #82	@ 0x52
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2252      	movs	r2, #82	@ 0x52
 80051aa:	705a      	strb	r2, [r3, #1]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2261      	movs	r2, #97	@ 0x61
 80051b0:	709a      	strb	r2, [r3, #2]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2241      	movs	r2, #65	@ 0x41
 80051b6:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	23f2      	movs	r3, #242	@ 0xf2
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	2172      	movs	r1, #114	@ 0x72
 80051c0:	54d1      	strb	r1, [r2, r3]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	23e6      	movs	r3, #230	@ 0xe6
 80051c6:	33ff      	adds	r3, #255	@ 0xff
 80051c8:	2172      	movs	r1, #114	@ 0x72
 80051ca:	54d1      	strb	r1, [r2, r3]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	23f3      	movs	r3, #243	@ 0xf3
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	2141      	movs	r1, #65	@ 0x41
 80051d4:	54d1      	strb	r1, [r2, r3]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	23e8      	movs	r3, #232	@ 0xe8
 80051da:	33ff      	adds	r3, #255	@ 0xff
 80051dc:	2161      	movs	r1, #97	@ 0x61
 80051de:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	2384      	movs	r3, #132	@ 0x84
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	58d3      	ldr	r3, [r2, r3]
 80051e8:	b2d9      	uxtb	r1, r3
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	23f4      	movs	r3, #244	@ 0xf4
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	54d1      	strb	r1, [r2, r3]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	2384      	movs	r3, #132	@ 0x84
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	58d3      	ldr	r3, [r2, r3]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	0a1b      	lsrs	r3, r3, #8
 80051fe:	b29b      	uxth	r3, r3
 8005200:	b2d9      	uxtb	r1, r3
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	23ea      	movs	r3, #234	@ 0xea
 8005206:	33ff      	adds	r3, #255	@ 0xff
 8005208:	54d1      	strb	r1, [r2, r3]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	2384      	movs	r3, #132	@ 0x84
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	58d3      	ldr	r3, [r2, r3]
 8005212:	0c1b      	lsrs	r3, r3, #16
 8005214:	b2d9      	uxtb	r1, r3
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	23f5      	movs	r3, #245	@ 0xf5
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	54d1      	strb	r1, [r2, r3]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	2384      	movs	r3, #132	@ 0x84
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	58d3      	ldr	r3, [r2, r3]
 8005226:	0e1b      	lsrs	r3, r3, #24
 8005228:	b2d9      	uxtb	r1, r3
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	23ec      	movs	r3, #236	@ 0xec
 800522e:	33ff      	adds	r3, #255	@ 0xff
 8005230:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	2383      	movs	r3, #131	@ 0x83
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	58d3      	ldr	r3, [r2, r3]
 800523a:	b2d9      	uxtb	r1, r3
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	23f6      	movs	r3, #246	@ 0xf6
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	54d1      	strb	r1, [r2, r3]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	2383      	movs	r3, #131	@ 0x83
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	58d3      	ldr	r3, [r2, r3]
 800524c:	b29b      	uxth	r3, r3
 800524e:	0a1b      	lsrs	r3, r3, #8
 8005250:	b29b      	uxth	r3, r3
 8005252:	b2d9      	uxtb	r1, r3
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	23ee      	movs	r3, #238	@ 0xee
 8005258:	33ff      	adds	r3, #255	@ 0xff
 800525a:	54d1      	strb	r1, [r2, r3]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	2383      	movs	r3, #131	@ 0x83
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	58d3      	ldr	r3, [r2, r3]
 8005264:	0c1b      	lsrs	r3, r3, #16
 8005266:	b2d9      	uxtb	r1, r3
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	23f7      	movs	r3, #247	@ 0xf7
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	54d1      	strb	r1, [r2, r3]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	2383      	movs	r3, #131	@ 0x83
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	58d3      	ldr	r3, [r2, r3]
 8005278:	0e1b      	lsrs	r3, r3, #24
 800527a:	b2d9      	uxtb	r1, r3
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	23f0      	movs	r3, #240	@ 0xf0
 8005280:	33ff      	adds	r3, #255	@ 0xff
 8005282:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	2387      	movs	r3, #135	@ 0x87
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	58d3      	ldr	r3, [r2, r3]
 800528c:	1c59      	adds	r1, r3, #1
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	238b      	movs	r3, #139	@ 0x8b
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	50d1      	str	r1, [r2, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a13      	ldr	r2, [pc, #76]	@ (80052e8 <sync_fs+0x1a4>)
 800529a:	5c98      	ldrb	r0, [r3, r2]
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	238b      	movs	r3, #139	@ 0x8b
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	58d2      	ldr	r2, [r2, r3]
 80052a6:	2301      	movs	r3, #1
 80052a8:	f7ff fc34 	bl	8004b14 <disk_write>
			fs->fsi_flag = 0;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a0c      	ldr	r2, [pc, #48]	@ (80052e0 <sync_fs+0x19c>)
 80052b0:	2100      	movs	r1, #0
 80052b2:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a0c      	ldr	r2, [pc, #48]	@ (80052e8 <sync_fs+0x1a4>)
 80052b8:	5c9b      	ldrb	r3, [r3, r2]
 80052ba:	2200      	movs	r2, #0
 80052bc:	2100      	movs	r1, #0
 80052be:	0018      	movs	r0, r3
 80052c0:	f7ff fc50 	bl	8004b64 <disk_ioctl>
 80052c4:	1e03      	subs	r3, r0, #0
 80052c6:	d003      	beq.n	80052d0 <sync_fs+0x18c>
			res = FR_DISK_ERR;
 80052c8:	230f      	movs	r3, #15
 80052ca:	18fb      	adds	r3, r7, r3
 80052cc:	2201      	movs	r2, #1
 80052ce:	701a      	strb	r2, [r3, #0]
	}

	return res;
 80052d0:	230f      	movs	r3, #15
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	781b      	ldrb	r3, [r3, #0]
}
 80052d6:	0018      	movs	r0, r3
 80052d8:	46bd      	mov	sp, r7
 80052da:	b004      	add	sp, #16
 80052dc:	bdb0      	pop	{r4, r5, r7, pc}
 80052de:	46c0      	nop			@ (mov r8, r8)
 80052e0:	00000205 	.word	0x00000205
 80052e4:	000001ff 	.word	0x000001ff
 80052e8:	00000201 	.word	0x00000201

080052ec <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	3b02      	subs	r3, #2
 80052fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	2385      	movs	r3, #133	@ 0x85
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	58d3      	ldr	r3, [r2, r3]
 8005304:	3b02      	subs	r3, #2
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d301      	bcc.n	8005310 <clust2sect+0x24>
 800530c:	2300      	movs	r3, #0
 800530e:	e00a      	b.n	8005326 <clust2sect+0x3a>
	return clst * fs->csize + fs->database;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a07      	ldr	r2, [pc, #28]	@ (8005330 <clust2sect+0x44>)
 8005314:	5c9b      	ldrb	r3, [r3, r2]
 8005316:	001a      	movs	r2, r3
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	435a      	muls	r2, r3
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	238a      	movs	r3, #138	@ 0x8a
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	58cb      	ldr	r3, [r1, r3]
 8005324:	18d3      	adds	r3, r2, r3
}
 8005326:	0018      	movs	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	b002      	add	sp, #8
 800532c:	bd80      	pop	{r7, pc}
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	00000202 	.word	0x00000202

08005334 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d906      	bls.n	8005352 <get_fat+0x1e>
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	2385      	movs	r3, #133	@ 0x85
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	58d3      	ldr	r3, [r2, r3]
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d302      	bcc.n	8005358 <get_fat+0x24>
		val = 1;	/* Internal error */
 8005352:	2301      	movs	r3, #1
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e0aa      	b.n	80054ae <get_fat+0x17a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005358:	2301      	movs	r3, #1
 800535a:	425b      	negs	r3, r3
 800535c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	2380      	movs	r3, #128	@ 0x80
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	5cd3      	ldrb	r3, [r2, r3]
 8005366:	2b03      	cmp	r3, #3
 8005368:	d100      	bne.n	800536c <get_fat+0x38>
 800536a:	e06b      	b.n	8005444 <get_fat+0x110>
 800536c:	dd00      	ble.n	8005370 <get_fat+0x3c>
 800536e:	e094      	b.n	800549a <get_fat+0x166>
 8005370:	2b01      	cmp	r3, #1
 8005372:	d002      	beq.n	800537a <get_fat+0x46>
 8005374:	2b02      	cmp	r3, #2
 8005376:	d041      	beq.n	80053fc <get_fat+0xc8>
 8005378:	e08f      	b.n	800549a <get_fat+0x166>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	18d3      	adds	r3, r2, r3
 8005386:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	2388      	movs	r3, #136	@ 0x88
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	58d2      	ldr	r2, [r2, r3]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	0a5b      	lsrs	r3, r3, #9
 8005394:	18d2      	adds	r2, r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	0011      	movs	r1, r2
 800539a:	0018      	movs	r0, r3
 800539c:	f7ff fe96 	bl	80050cc <move_window>
 80053a0:	1e03      	subs	r3, r0, #0
 80053a2:	d000      	beq.n	80053a6 <get_fat+0x72>
 80053a4:	e07c      	b.n	80054a0 <get_fat+0x16c>
			wc = fs->win.d8[bc++ % SS(fs)];
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	60fa      	str	r2, [r7, #12]
 80053ac:	05db      	lsls	r3, r3, #23
 80053ae:	0ddb      	lsrs	r3, r3, #23
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	5cd3      	ldrb	r3, [r2, r3]
 80053b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	2388      	movs	r3, #136	@ 0x88
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	58d2      	ldr	r2, [r2, r3]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	0a5b      	lsrs	r3, r3, #9
 80053c2:	18d2      	adds	r2, r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	0011      	movs	r1, r2
 80053c8:	0018      	movs	r0, r3
 80053ca:	f7ff fe7f 	bl	80050cc <move_window>
 80053ce:	1e03      	subs	r3, r0, #0
 80053d0:	d168      	bne.n	80054a4 <get_fat+0x170>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	05db      	lsls	r3, r3, #23
 80053d6:	0ddb      	lsrs	r3, r3, #23
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	5cd3      	ldrb	r3, [r2, r3]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2201      	movs	r2, #1
 80053e8:	4013      	ands	r3, r2
 80053ea:	d002      	beq.n	80053f2 <get_fat+0xbe>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	091b      	lsrs	r3, r3, #4
 80053f0:	e002      	b.n	80053f8 <get_fat+0xc4>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	051b      	lsls	r3, r3, #20
 80053f6:	0d1b      	lsrs	r3, r3, #20
 80053f8:	617b      	str	r3, [r7, #20]
			break;
 80053fa:	e058      	b.n	80054ae <get_fat+0x17a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	2388      	movs	r3, #136	@ 0x88
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	58d2      	ldr	r2, [r2, r3]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	0a1b      	lsrs	r3, r3, #8
 8005408:	18d2      	adds	r2, r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	0011      	movs	r1, r2
 800540e:	0018      	movs	r0, r3
 8005410:	f7ff fe5c 	bl	80050cc <move_window>
 8005414:	1e03      	subs	r3, r0, #0
 8005416:	d147      	bne.n	80054a8 <get_fat+0x174>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	005a      	lsls	r2, r3, #1
 800541c:	23ff      	movs	r3, #255	@ 0xff
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	4013      	ands	r3, r2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	18d3      	adds	r3, r2, r3
 8005426:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	3301      	adds	r3, #1
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	b21b      	sxth	r3, r3
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	b21a      	sxth	r2, r3
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	b21b      	sxth	r3, r3
 800543a:	4313      	orrs	r3, r2
 800543c:	b21b      	sxth	r3, r3
 800543e:	b29b      	uxth	r3, r3
 8005440:	617b      	str	r3, [r7, #20]
			break;
 8005442:	e034      	b.n	80054ae <get_fat+0x17a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	2388      	movs	r3, #136	@ 0x88
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	58d2      	ldr	r2, [r2, r3]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	09db      	lsrs	r3, r3, #7
 8005450:	18d2      	adds	r2, r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	0011      	movs	r1, r2
 8005456:	0018      	movs	r0, r3
 8005458:	f7ff fe38 	bl	80050cc <move_window>
 800545c:	1e03      	subs	r3, r0, #0
 800545e:	d125      	bne.n	80054ac <get_fat+0x178>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	009a      	lsls	r2, r3, #2
 8005464:	23fe      	movs	r3, #254	@ 0xfe
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	4013      	ands	r3, r2
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	18d3      	adds	r3, r2, r3
 800546e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	3303      	adds	r3, #3
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	061a      	lsls	r2, r3, #24
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	3302      	adds	r3, #2
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	041b      	lsls	r3, r3, #16
 8005480:	431a      	orrs	r2, r3
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	3301      	adds	r3, #1
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	4313      	orrs	r3, r2
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	7812      	ldrb	r2, [r2, #0]
 8005490:	4313      	orrs	r3, r2
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	617b      	str	r3, [r7, #20]
			break;
 8005498:	e009      	b.n	80054ae <get_fat+0x17a>

		default:
			val = 1;	/* Internal error */
 800549a:	2301      	movs	r3, #1
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	e006      	b.n	80054ae <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054a0:	46c0      	nop			@ (mov r8, r8)
 80054a2:	e004      	b.n	80054ae <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054a4:	46c0      	nop			@ (mov r8, r8)
 80054a6:	e002      	b.n	80054ae <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054a8:	46c0      	nop			@ (mov r8, r8)
 80054aa:	e000      	b.n	80054ae <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054ac:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 80054ae:	697b      	ldr	r3, [r7, #20]
}
 80054b0:	0018      	movs	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b006      	add	sp, #24
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80054b8:	b5b0      	push	{r4, r5, r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d906      	bls.n	80054d8 <put_fat+0x20>
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	2385      	movs	r3, #133	@ 0x85
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	58d3      	ldr	r3, [r2, r3]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d304      	bcc.n	80054e2 <put_fat+0x2a>
		res = FR_INT_ERR;
 80054d8:	231f      	movs	r3, #31
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	2202      	movs	r2, #2
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	e111      	b.n	8005706 <put_fat+0x24e>

	} else {
		switch (fs->fs_type) {
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	2380      	movs	r3, #128	@ 0x80
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	5cd3      	ldrb	r3, [r2, r3]
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d100      	bne.n	80054f0 <put_fat+0x38>
 80054ee:	e0ae      	b.n	800564e <put_fat+0x196>
 80054f0:	dd00      	ble.n	80054f4 <put_fat+0x3c>
 80054f2:	e0fc      	b.n	80056ee <put_fat+0x236>
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d003      	beq.n	8005500 <put_fat+0x48>
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d100      	bne.n	80054fe <put_fat+0x46>
 80054fc:	e079      	b.n	80055f2 <put_fat+0x13a>
 80054fe:	e0f6      	b.n	80056ee <put_fat+0x236>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	18d3      	adds	r3, r2, r3
 800550c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	2388      	movs	r3, #136	@ 0x88
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	58d2      	ldr	r2, [r2, r3]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	0a5b      	lsrs	r3, r3, #9
 800551a:	18d2      	adds	r2, r2, r3
 800551c:	251f      	movs	r5, #31
 800551e:	197c      	adds	r4, r7, r5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	0011      	movs	r1, r2
 8005524:	0018      	movs	r0, r3
 8005526:	f7ff fdd1 	bl	80050cc <move_window>
 800552a:	0003      	movs	r3, r0
 800552c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800552e:	197b      	adds	r3, r7, r5
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d000      	beq.n	8005538 <put_fat+0x80>
 8005536:	e0df      	b.n	80056f8 <put_fat+0x240>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	617a      	str	r2, [r7, #20]
 800553e:	05db      	lsls	r3, r3, #23
 8005540:	0ddb      	lsrs	r3, r3, #23
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	18d3      	adds	r3, r2, r3
 8005546:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2201      	movs	r2, #1
 800554c:	4013      	ands	r3, r2
 800554e:	d00d      	beq.n	800556c <put_fat+0xb4>
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	b25b      	sxtb	r3, r3
 8005556:	220f      	movs	r2, #15
 8005558:	4013      	ands	r3, r2
 800555a:	b25a      	sxtb	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	b25b      	sxtb	r3, r3
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	b25b      	sxtb	r3, r3
 8005564:	4313      	orrs	r3, r2
 8005566:	b25b      	sxtb	r3, r3
 8005568:	b2db      	uxtb	r3, r3
 800556a:	e001      	b.n	8005570 <put_fat+0xb8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	2381      	movs	r3, #129	@ 0x81
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	2101      	movs	r1, #1
 800557c:	54d1      	strb	r1, [r2, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	2388      	movs	r3, #136	@ 0x88
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	58d2      	ldr	r2, [r2, r3]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	0a5b      	lsrs	r3, r3, #9
 800558a:	18d2      	adds	r2, r2, r3
 800558c:	251f      	movs	r5, #31
 800558e:	197c      	adds	r4, r7, r5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	0011      	movs	r1, r2
 8005594:	0018      	movs	r0, r3
 8005596:	f7ff fd99 	bl	80050cc <move_window>
 800559a:	0003      	movs	r3, r0
 800559c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800559e:	197b      	adds	r3, r7, r5
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d000      	beq.n	80055a8 <put_fat+0xf0>
 80055a6:	e0a9      	b.n	80056fc <put_fat+0x244>
			p = &fs->win.d8[bc % SS(fs)];
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	05db      	lsls	r3, r3, #23
 80055ac:	0ddb      	lsrs	r3, r3, #23
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	18d3      	adds	r3, r2, r3
 80055b2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2201      	movs	r2, #1
 80055b8:	4013      	ands	r3, r2
 80055ba:	d003      	beq.n	80055c4 <put_fat+0x10c>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	091b      	lsrs	r3, r3, #4
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e00e      	b.n	80055e2 <put_fat+0x12a>
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	b25b      	sxtb	r3, r3
 80055ca:	220f      	movs	r2, #15
 80055cc:	4393      	bics	r3, r2
 80055ce:	b25a      	sxtb	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	b25b      	sxtb	r3, r3
 80055d6:	210f      	movs	r1, #15
 80055d8:	400b      	ands	r3, r1
 80055da:	b25b      	sxtb	r3, r3
 80055dc:	4313      	orrs	r3, r2
 80055de:	b25b      	sxtb	r3, r3
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	2381      	movs	r3, #129	@ 0x81
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	2101      	movs	r1, #1
 80055ee:	54d1      	strb	r1, [r2, r3]
			break;
 80055f0:	e089      	b.n	8005706 <put_fat+0x24e>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	2388      	movs	r3, #136	@ 0x88
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	58d2      	ldr	r2, [r2, r3]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	0a1b      	lsrs	r3, r3, #8
 80055fe:	18d2      	adds	r2, r2, r3
 8005600:	251f      	movs	r5, #31
 8005602:	197c      	adds	r4, r7, r5
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	0011      	movs	r1, r2
 8005608:	0018      	movs	r0, r3
 800560a:	f7ff fd5f 	bl	80050cc <move_window>
 800560e:	0003      	movs	r3, r0
 8005610:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005612:	197b      	adds	r3, r7, r5
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d172      	bne.n	8005700 <put_fat+0x248>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	005a      	lsls	r2, r3, #1
 800561e:	23ff      	movs	r3, #255	@ 0xff
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	4013      	ands	r3, r2
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	18d3      	adds	r3, r2, r3
 8005628:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	b2da      	uxtb	r2, r3
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	b29b      	uxth	r3, r3
 8005636:	0a1b      	lsrs	r3, r3, #8
 8005638:	b29a      	uxth	r2, r3
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	3301      	adds	r3, #1
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	2381      	movs	r3, #129	@ 0x81
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	2101      	movs	r1, #1
 800564a:	54d1      	strb	r1, [r2, r3]
			break;
 800564c:	e05b      	b.n	8005706 <put_fat+0x24e>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	2388      	movs	r3, #136	@ 0x88
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	58d2      	ldr	r2, [r2, r3]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	09db      	lsrs	r3, r3, #7
 800565a:	18d2      	adds	r2, r2, r3
 800565c:	251f      	movs	r5, #31
 800565e:	197c      	adds	r4, r7, r5
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	0011      	movs	r1, r2
 8005664:	0018      	movs	r0, r3
 8005666:	f7ff fd31 	bl	80050cc <move_window>
 800566a:	0003      	movs	r3, r0
 800566c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800566e:	197b      	adds	r3, r7, r5
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d146      	bne.n	8005704 <put_fat+0x24c>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	009a      	lsls	r2, r3, #2
 800567a:	23fe      	movs	r3, #254	@ 0xfe
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	4013      	ands	r3, r2
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	18d3      	adds	r3, r2, r3
 8005684:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	3303      	adds	r3, #3
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	061a      	lsls	r2, r3, #24
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	3302      	adds	r3, #2
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	041b      	lsls	r3, r3, #16
 8005696:	431a      	orrs	r2, r3
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	3301      	adds	r3, #1
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	021b      	lsls	r3, r3, #8
 80056a0:	4313      	orrs	r3, r2
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	7812      	ldrb	r2, [r2, #0]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	0f1b      	lsrs	r3, r3, #28
 80056aa:	071b      	lsls	r3, r3, #28
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	b29b      	uxth	r3, r3
 80056be:	0a1b      	lsrs	r3, r3, #8
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	3301      	adds	r3, #1
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	0c1a      	lsrs	r2, r3, #16
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	3302      	adds	r3, #2
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	0e1a      	lsrs	r2, r3, #24
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	3303      	adds	r3, #3
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	2381      	movs	r3, #129	@ 0x81
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	2101      	movs	r1, #1
 80056ea:	54d1      	strb	r1, [r2, r3]
			break;
 80056ec:	e00b      	b.n	8005706 <put_fat+0x24e>

		default :
			res = FR_INT_ERR;
 80056ee:	231f      	movs	r3, #31
 80056f0:	18fb      	adds	r3, r7, r3
 80056f2:	2202      	movs	r2, #2
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	e006      	b.n	8005706 <put_fat+0x24e>
			if (res != FR_OK) break;
 80056f8:	46c0      	nop			@ (mov r8, r8)
 80056fa:	e004      	b.n	8005706 <put_fat+0x24e>
			if (res != FR_OK) break;
 80056fc:	46c0      	nop			@ (mov r8, r8)
 80056fe:	e002      	b.n	8005706 <put_fat+0x24e>
			if (res != FR_OK) break;
 8005700:	46c0      	nop			@ (mov r8, r8)
 8005702:	e000      	b.n	8005706 <put_fat+0x24e>
			if (res != FR_OK) break;
 8005704:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return res;
 8005706:	231f      	movs	r3, #31
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	781b      	ldrb	r3, [r3, #0]
}
 800570c:	0018      	movs	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	b008      	add	sp, #32
 8005712:	bdb0      	pop	{r4, r5, r7, pc}

08005714 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005714:	b5b0      	push	{r4, r5, r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d906      	bls.n	8005732 <remove_chain+0x1e>
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	2385      	movs	r3, #133	@ 0x85
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	58d3      	ldr	r3, [r2, r3]
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d304      	bcc.n	800573c <remove_chain+0x28>
		res = FR_INT_ERR;
 8005732:	230f      	movs	r3, #15
 8005734:	18fb      	adds	r3, r7, r3
 8005736:	2202      	movs	r2, #2
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	e052      	b.n	80057e2 <remove_chain+0xce>

	} else {
		res = FR_OK;
 800573c:	230f      	movs	r3, #15
 800573e:	18fb      	adds	r3, r7, r3
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005744:	e042      	b.n	80057cc <remove_chain+0xb8>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	0011      	movs	r1, r2
 800574c:	0018      	movs	r0, r3
 800574e:	f7ff fdf1 	bl	8005334 <get_fat>
 8005752:	0003      	movs	r3, r0
 8005754:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d03f      	beq.n	80057dc <remove_chain+0xc8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d104      	bne.n	800576c <remove_chain+0x58>
 8005762:	230f      	movs	r3, #15
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	2202      	movs	r2, #2
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	e03a      	b.n	80057e2 <remove_chain+0xce>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	3301      	adds	r3, #1
 8005770:	d104      	bne.n	800577c <remove_chain+0x68>
 8005772:	230f      	movs	r3, #15
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	2201      	movs	r2, #1
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	e032      	b.n	80057e2 <remove_chain+0xce>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800577c:	250f      	movs	r5, #15
 800577e:	197c      	adds	r4, r7, r5
 8005780:	6839      	ldr	r1, [r7, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	0018      	movs	r0, r3
 8005788:	f7ff fe96 	bl	80054b8 <put_fat>
 800578c:	0003      	movs	r3, r0
 800578e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005790:	197b      	adds	r3, r7, r5
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d123      	bne.n	80057e0 <remove_chain+0xcc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	2384      	movs	r3, #132	@ 0x84
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	58d3      	ldr	r3, [r2, r3]
 80057a0:	3301      	adds	r3, #1
 80057a2:	d011      	beq.n	80057c8 <remove_chain+0xb4>
				fs->free_clust++;
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	2384      	movs	r3, #132	@ 0x84
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	58d3      	ldr	r3, [r2, r3]
 80057ac:	1c59      	adds	r1, r3, #1
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	2384      	movs	r3, #132	@ 0x84
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	50d1      	str	r1, [r2, r3]
				fs->fsi_flag |= 1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a0d      	ldr	r2, [pc, #52]	@ (80057f0 <remove_chain+0xdc>)
 80057ba:	5c9b      	ldrb	r3, [r3, r2]
 80057bc:	2201      	movs	r2, #1
 80057be:	4313      	orrs	r3, r2
 80057c0:	b2d9      	uxtb	r1, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a0a      	ldr	r2, [pc, #40]	@ (80057f0 <remove_chain+0xdc>)
 80057c6:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	2385      	movs	r3, #133	@ 0x85
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	58d3      	ldr	r3, [r2, r3]
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d3b5      	bcc.n	8005746 <remove_chain+0x32>
 80057da:	e002      	b.n	80057e2 <remove_chain+0xce>
			if (nxt == 0) break;				/* Empty cluster? */
 80057dc:	46c0      	nop			@ (mov r8, r8)
 80057de:	e000      	b.n	80057e2 <remove_chain+0xce>
			if (res != FR_OK) break;
 80057e0:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return res;
 80057e2:	230f      	movs	r3, #15
 80057e4:	18fb      	adds	r3, r7, r3
 80057e6:	781b      	ldrb	r3, [r3, #0]
}
 80057e8:	0018      	movs	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	b004      	add	sp, #16
 80057ee:	bdb0      	pop	{r4, r5, r7, pc}
 80057f0:	00000205 	.word	0x00000205

080057f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80057f4:	b5b0      	push	{r4, r5, r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d111      	bne.n	8005828 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	2383      	movs	r3, #131	@ 0x83
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	58d3      	ldr	r3, [r2, r3]
 800580c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d006      	beq.n	8005822 <create_chain+0x2e>
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	2385      	movs	r3, #133	@ 0x85
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	58d3      	ldr	r3, [r2, r3]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	429a      	cmp	r2, r3
 8005820:	d31f      	bcc.n	8005862 <create_chain+0x6e>
 8005822:	2301      	movs	r3, #1
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	e01c      	b.n	8005862 <create_chain+0x6e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	0011      	movs	r1, r2
 800582e:	0018      	movs	r0, r3
 8005830:	f7ff fd80 	bl	8005334 <get_fat>
 8005834:	0003      	movs	r3, r0
 8005836:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d801      	bhi.n	8005842 <create_chain+0x4e>
 800583e:	2301      	movs	r3, #1
 8005840:	e085      	b.n	800594e <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	3301      	adds	r3, #1
 8005846:	d101      	bne.n	800584c <create_chain+0x58>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	e080      	b.n	800594e <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	2385      	movs	r3, #133	@ 0x85
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	58d3      	ldr	r3, [r2, r3]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	429a      	cmp	r2, r3
 8005858:	d201      	bcs.n	800585e <create_chain+0x6a>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	e077      	b.n	800594e <create_chain+0x15a>
		scl = clst;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	3301      	adds	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	2385      	movs	r3, #133	@ 0x85
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	58d3      	ldr	r3, [r2, r3]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	429a      	cmp	r2, r3
 8005878:	d307      	bcc.n	800588a <create_chain+0x96>
			ncl = 2;
 800587a:	2302      	movs	r3, #2
 800587c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	429a      	cmp	r2, r3
 8005884:	d901      	bls.n	800588a <create_chain+0x96>
 8005886:	2300      	movs	r3, #0
 8005888:	e061      	b.n	800594e <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	0011      	movs	r1, r2
 8005890:	0018      	movs	r0, r3
 8005892:	f7ff fd4f 	bl	8005334 <get_fat>
 8005896:	0003      	movs	r3, r0
 8005898:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	3301      	adds	r3, #1
 80058a4:	d002      	beq.n	80058ac <create_chain+0xb8>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <create_chain+0xbc>
			return cs;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	e04e      	b.n	800594e <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d1d6      	bne.n	8005866 <create_chain+0x72>
 80058b8:	2300      	movs	r3, #0
 80058ba:	e048      	b.n	800594e <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 80058bc:	46c0      	nop			@ (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80058be:	250f      	movs	r5, #15
 80058c0:	197c      	adds	r4, r7, r5
 80058c2:	4a25      	ldr	r2, [pc, #148]	@ (8005958 <create_chain+0x164>)
 80058c4:	6979      	ldr	r1, [r7, #20]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7ff fdf5 	bl	80054b8 <put_fat>
 80058ce:	0003      	movs	r3, r0
 80058d0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 80058d2:	197b      	adds	r3, r7, r5
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10b      	bne.n	80058f2 <create_chain+0xfe>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <create_chain+0xfe>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80058e0:	197c      	adds	r4, r7, r5
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	0018      	movs	r0, r3
 80058ea:	f7ff fde5 	bl	80054b8 <put_fat>
 80058ee:	0003      	movs	r3, r0
 80058f0:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 80058f2:	230f      	movs	r3, #15
 80058f4:	18fb      	adds	r3, r7, r3
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d11d      	bne.n	8005938 <create_chain+0x144>
		fs->last_clust = ncl;			/* Update FSINFO */
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	2383      	movs	r3, #131	@ 0x83
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	6979      	ldr	r1, [r7, #20]
 8005904:	50d1      	str	r1, [r2, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	2384      	movs	r3, #132	@ 0x84
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	58d3      	ldr	r3, [r2, r3]
 800590e:	3301      	adds	r3, #1
 8005910:	d01c      	beq.n	800594c <create_chain+0x158>
			fs->free_clust--;
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	2384      	movs	r3, #132	@ 0x84
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	58d3      	ldr	r3, [r2, r3]
 800591a:	1e59      	subs	r1, r3, #1
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	2384      	movs	r3, #132	@ 0x84
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a0d      	ldr	r2, [pc, #52]	@ (800595c <create_chain+0x168>)
 8005928:	5c9b      	ldrb	r3, [r3, r2]
 800592a:	2201      	movs	r2, #1
 800592c:	4313      	orrs	r3, r2
 800592e:	b2d9      	uxtb	r1, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a0a      	ldr	r2, [pc, #40]	@ (800595c <create_chain+0x168>)
 8005934:	5499      	strb	r1, [r3, r2]
 8005936:	e009      	b.n	800594c <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005938:	230f      	movs	r3, #15
 800593a:	18fb      	adds	r3, r7, r3
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d102      	bne.n	8005948 <create_chain+0x154>
 8005942:	2301      	movs	r3, #1
 8005944:	425b      	negs	r3, r3
 8005946:	e000      	b.n	800594a <create_chain+0x156>
 8005948:	2301      	movs	r3, #1
 800594a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800594c:	697b      	ldr	r3, [r7, #20]
}
 800594e:	0018      	movs	r0, r3
 8005950:	46bd      	mov	sp, r7
 8005952:	b006      	add	sp, #24
 8005954:	bdb0      	pop	{r4, r5, r7, pc}
 8005956:	46c0      	nop			@ (mov r8, r8)
 8005958:	0fffffff 	.word	0x0fffffff
 800595c:	00000205 	.word	0x00000205

08005960 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	2389      	movs	r3, #137	@ 0x89
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	58d3      	ldr	r3, [r2, r3]
 8005972:	3304      	adds	r3, #4
 8005974:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	0a58      	lsrs	r0, r3, #9
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	2380      	movs	r3, #128	@ 0x80
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	58d3      	ldr	r3, [r2, r3]
 8005982:	4a13      	ldr	r2, [pc, #76]	@ (80059d0 <clmt_clust+0x70>)
 8005984:	5c9b      	ldrb	r3, [r3, r2]
 8005986:	0019      	movs	r1, r3
 8005988:	f7fa fbda 	bl	8000140 <__udivsi3>
 800598c:	0003      	movs	r3, r0
 800598e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1d1a      	adds	r2, r3, #4
 8005994:	613a      	str	r2, [r7, #16]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <clmt_clust+0x44>
 80059a0:	2300      	movs	r3, #0
 80059a2:	e010      	b.n	80059c6 <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d307      	bcc.n	80059bc <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	3304      	adds	r3, #4
 80059b8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80059ba:	e7e9      	b.n	8005990 <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 80059bc:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	18d3      	adds	r3, r2, r3
}
 80059c6:	0018      	movs	r0, r3
 80059c8:	46bd      	mov	sp, r7
 80059ca:	b006      	add	sp, #24
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	46c0      	nop			@ (mov r8, r8)
 80059d0:	00000202 	.word	0x00000202

080059d4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	b299      	uxth	r1, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a51      	ldr	r2, [pc, #324]	@ (8005b2c <dir_sdi+0x158>)
 80059e6:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	2382      	movs	r3, #130	@ 0x82
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	58d3      	ldr	r3, [r2, r3]
 80059f0:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d009      	beq.n	8005a0c <dir_sdi+0x38>
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	2380      	movs	r3, #128	@ 0x80
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	58d2      	ldr	r2, [r2, r3]
 8005a00:	2385      	movs	r3, #133	@ 0x85
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	58d3      	ldr	r3, [r2, r3]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d301      	bcc.n	8005a10 <dir_sdi+0x3c>
		return FR_INT_ERR;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e088      	b.n	8005b22 <dir_sdi+0x14e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d110      	bne.n	8005a38 <dir_sdi+0x64>
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	2380      	movs	r3, #128	@ 0x80
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	58d2      	ldr	r2, [r2, r3]
 8005a1e:	2380      	movs	r3, #128	@ 0x80
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	5cd3      	ldrb	r3, [r2, r3]
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d107      	bne.n	8005a38 <dir_sdi+0x64>
		clst = dp->fs->dirbase;
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	2380      	movs	r3, #128	@ 0x80
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	58d2      	ldr	r2, [r2, r3]
 8005a30:	2389      	movs	r3, #137	@ 0x89
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	58d3      	ldr	r3, [r2, r3]
 8005a36:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d115      	bne.n	8005a6a <dir_sdi+0x96>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	2380      	movs	r3, #128	@ 0x80
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	58d2      	ldr	r2, [r2, r3]
 8005a46:	2382      	movs	r3, #130	@ 0x82
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	5ad3      	ldrh	r3, [r2, r3]
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d301      	bcc.n	8005a58 <dir_sdi+0x84>
			return FR_INT_ERR;
 8005a54:	2302      	movs	r3, #2
 8005a56:	e064      	b.n	8005b22 <dir_sdi+0x14e>
		sect = dp->fs->dirbase;
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	2380      	movs	r3, #128	@ 0x80
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	58d2      	ldr	r2, [r2, r3]
 8005a60:	2389      	movs	r3, #137	@ 0x89
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	58d3      	ldr	r3, [r2, r3]
 8005a66:	613b      	str	r3, [r7, #16]
 8005a68:	e03a      	b.n	8005ae0 <dir_sdi+0x10c>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	2380      	movs	r3, #128	@ 0x80
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	58d3      	ldr	r3, [r2, r3]
 8005a72:	4a2f      	ldr	r2, [pc, #188]	@ (8005b30 <dir_sdi+0x15c>)
 8005a74:	5c9b      	ldrb	r3, [r3, r2]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005a7a:	e022      	b.n	8005ac2 <dir_sdi+0xee>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	2380      	movs	r3, #128	@ 0x80
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	58d3      	ldr	r3, [r2, r3]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	0011      	movs	r1, r2
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f7ff fc53 	bl	8005334 <get_fat>
 8005a8e:	0003      	movs	r3, r0
 8005a90:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	3301      	adds	r3, #1
 8005a96:	d101      	bne.n	8005a9c <dir_sdi+0xc8>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e042      	b.n	8005b22 <dir_sdi+0x14e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d909      	bls.n	8005ab6 <dir_sdi+0xe2>
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	2380      	movs	r3, #128	@ 0x80
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	58d2      	ldr	r2, [r2, r3]
 8005aaa:	2385      	movs	r3, #133	@ 0x85
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	58d3      	ldr	r3, [r2, r3]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d301      	bcc.n	8005aba <dir_sdi+0xe6>
				return FR_INT_ERR;
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e033      	b.n	8005b22 <dir_sdi+0x14e>
			idx -= ic;
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d2d8      	bcs.n	8005a7c <dir_sdi+0xa8>
		}
		sect = clust2sect(dp->fs, clst);
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	2380      	movs	r3, #128	@ 0x80
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	58d3      	ldr	r3, [r2, r3]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	0011      	movs	r1, r2
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f7ff fc08 	bl	80052ec <clust2sect>
 8005adc:	0003      	movs	r3, r0
 8005ade:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	2383      	movs	r3, #131	@ 0x83
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	6979      	ldr	r1, [r7, #20]
 8005ae8:	50d1      	str	r1, [r2, r3]
	if (!sect) return FR_INT_ERR;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <dir_sdi+0x120>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e016      	b.n	8005b22 <dir_sdi+0x14e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	091a      	lsrs	r2, r3, #4
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	18d1      	adds	r1, r2, r3
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	2384      	movs	r3, #132	@ 0x84
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	50d1      	str	r1, [r2, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	2380      	movs	r3, #128	@ 0x80
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	58d3      	ldr	r3, [r2, r3]
 8005b0c:	0019      	movs	r1, r3
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	220f      	movs	r2, #15
 8005b12:	4013      	ands	r3, r2
 8005b14:	015b      	lsls	r3, r3, #5
 8005b16:	18c9      	adds	r1, r1, r3
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	2385      	movs	r3, #133	@ 0x85
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	0018      	movs	r0, r3
 8005b24:	46bd      	mov	sp, r7
 8005b26:	b006      	add	sp, #24
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	46c0      	nop			@ (mov r8, r8)
 8005b2c:	00000206 	.word	0x00000206
 8005b30:	00000202 	.word	0x00000202

08005b34 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005b34:	b590      	push	{r4, r7, lr}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a87      	ldr	r2, [pc, #540]	@ (8005d60 <dir_next+0x22c>)
 8005b42:	5a9b      	ldrh	r3, [r3, r2]
 8005b44:	3301      	adds	r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	d005      	beq.n	8005b5c <dir_next+0x28>
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	2384      	movs	r3, #132	@ 0x84
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	58d3      	ldr	r3, [r2, r3]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <dir_next+0x2c>
		return FR_NO_FILE;
 8005b5c:	2304      	movs	r3, #4
 8005b5e:	e0fb      	b.n	8005d58 <dir_next+0x224>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	220f      	movs	r2, #15
 8005b64:	4013      	ands	r3, r2
 8005b66:	d000      	beq.n	8005b6a <dir_next+0x36>
 8005b68:	e0e2      	b.n	8005d30 <dir_next+0x1fc>
		dp->sect++;					/* Next sector */
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	2384      	movs	r3, #132	@ 0x84
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	58d3      	ldr	r3, [r2, r3]
 8005b72:	1c59      	adds	r1, r3, #1
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	2384      	movs	r3, #132	@ 0x84
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	50d1      	str	r1, [r2, r3]

		if (!dp->clust) {		/* Static table */
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	2383      	movs	r3, #131	@ 0x83
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	58d3      	ldr	r3, [r2, r3]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10d      	bne.n	8005ba4 <dir_next+0x70>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	2380      	movs	r3, #128	@ 0x80
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	58d2      	ldr	r2, [r2, r3]
 8005b90:	2382      	movs	r3, #130	@ 0x82
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	5ad3      	ldrh	r3, [r2, r3]
 8005b96:	001a      	movs	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d200      	bcs.n	8005ba0 <dir_next+0x6c>
 8005b9e:	e0c7      	b.n	8005d30 <dir_next+0x1fc>
				return FR_NO_FILE;
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	e0d9      	b.n	8005d58 <dir_next+0x224>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	091b      	lsrs	r3, r3, #4
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	2280      	movs	r2, #128	@ 0x80
 8005bac:	0092      	lsls	r2, r2, #2
 8005bae:	588a      	ldr	r2, [r1, r2]
 8005bb0:	496c      	ldr	r1, [pc, #432]	@ (8005d64 <dir_next+0x230>)
 8005bb2:	5c52      	ldrb	r2, [r2, r1]
 8005bb4:	3a01      	subs	r2, #1
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d000      	beq.n	8005bbc <dir_next+0x88>
 8005bba:	e0b9      	b.n	8005d30 <dir_next+0x1fc>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	2380      	movs	r3, #128	@ 0x80
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	58d0      	ldr	r0, [r2, r3]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	2383      	movs	r3, #131	@ 0x83
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	58d3      	ldr	r3, [r2, r3]
 8005bcc:	0019      	movs	r1, r3
 8005bce:	f7ff fbb1 	bl	8005334 <get_fat>
 8005bd2:	0003      	movs	r3, r0
 8005bd4:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d801      	bhi.n	8005be0 <dir_next+0xac>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e0bb      	b.n	8005d58 <dir_next+0x224>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	3301      	adds	r3, #1
 8005be4:	d101      	bne.n	8005bea <dir_next+0xb6>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e0b6      	b.n	8005d58 <dir_next+0x224>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	2380      	movs	r3, #128	@ 0x80
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	58d2      	ldr	r2, [r2, r3]
 8005bf2:	2385      	movs	r3, #133	@ 0x85
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	58d3      	ldr	r3, [r2, r3]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d200      	bcs.n	8005c00 <dir_next+0xcc>
 8005bfe:	e084      	b.n	8005d0a <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <dir_next+0xd6>
 8005c06:	2304      	movs	r3, #4
 8005c08:	e0a6      	b.n	8005d58 <dir_next+0x224>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	2380      	movs	r3, #128	@ 0x80
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	58d0      	ldr	r0, [r2, r3]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	2383      	movs	r3, #131	@ 0x83
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	58d3      	ldr	r3, [r2, r3]
 8005c1a:	0019      	movs	r1, r3
 8005c1c:	f7ff fdea 	bl	80057f4 <create_chain>
 8005c20:	0003      	movs	r3, r0
 8005c22:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <dir_next+0xfa>
 8005c2a:	2307      	movs	r3, #7
 8005c2c:	e094      	b.n	8005d58 <dir_next+0x224>
					if (clst == 1) return FR_INT_ERR;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <dir_next+0x104>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e08f      	b.n	8005d58 <dir_next+0x224>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <dir_next+0x10e>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e08a      	b.n	8005d58 <dir_next+0x224>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	2380      	movs	r3, #128	@ 0x80
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	58d3      	ldr	r3, [r2, r3]
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f7ff f9e6 	bl	800501c <sync_window>
 8005c50:	1e03      	subs	r3, r0, #0
 8005c52:	d001      	beq.n	8005c58 <dir_next+0x124>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e07f      	b.n	8005d58 <dir_next+0x224>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	2380      	movs	r3, #128	@ 0x80
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	58d3      	ldr	r3, [r2, r3]
 8005c60:	0018      	movs	r0, r3
 8005c62:	2380      	movs	r3, #128	@ 0x80
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	001a      	movs	r2, r3
 8005c68:	2100      	movs	r1, #0
 8005c6a:	f7fe ffc0 	bl	8004bee <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	2380      	movs	r3, #128	@ 0x80
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	58d0      	ldr	r0, [r2, r3]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	2380      	movs	r3, #128	@ 0x80
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	58d4      	ldr	r4, [r2, r3]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	0019      	movs	r1, r3
 8005c82:	f7ff fb33 	bl	80052ec <clust2sect>
 8005c86:	0002      	movs	r2, r0
 8005c88:	238b      	movs	r3, #139	@ 0x8b
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	50e2      	str	r2, [r4, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005c8e:	2300      	movs	r3, #0
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	e020      	b.n	8005cd6 <dir_next+0x1a2>
						dp->fs->wflag = 1;
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	2380      	movs	r3, #128	@ 0x80
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	58d2      	ldr	r2, [r2, r3]
 8005c9c:	2381      	movs	r3, #129	@ 0x81
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	54d1      	strb	r1, [r2, r3]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	2380      	movs	r3, #128	@ 0x80
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	58d3      	ldr	r3, [r2, r3]
 8005cac:	0018      	movs	r0, r3
 8005cae:	f7ff f9b5 	bl	800501c <sync_window>
 8005cb2:	1e03      	subs	r3, r0, #0
 8005cb4:	d001      	beq.n	8005cba <dir_next+0x186>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e04e      	b.n	8005d58 <dir_next+0x224>
						dp->fs->winsect++;
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	2380      	movs	r3, #128	@ 0x80
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	58d3      	ldr	r3, [r2, r3]
 8005cc2:	228b      	movs	r2, #139	@ 0x8b
 8005cc4:	0092      	lsls	r2, r2, #2
 8005cc6:	589a      	ldr	r2, [r3, r2]
 8005cc8:	1c51      	adds	r1, r2, #1
 8005cca:	228b      	movs	r2, #139	@ 0x8b
 8005ccc:	0092      	lsls	r2, r2, #2
 8005cce:	5099      	str	r1, [r3, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	2380      	movs	r3, #128	@ 0x80
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	58d3      	ldr	r3, [r2, r3]
 8005cde:	4a21      	ldr	r2, [pc, #132]	@ (8005d64 <dir_next+0x230>)
 8005ce0:	5c9b      	ldrb	r3, [r3, r2]
 8005ce2:	001a      	movs	r2, r3
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d3d4      	bcc.n	8005c94 <dir_next+0x160>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	2380      	movs	r3, #128	@ 0x80
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	58d2      	ldr	r2, [r2, r3]
 8005cf2:	238b      	movs	r3, #139	@ 0x8b
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	58d1      	ldr	r1, [r2, r3]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	2380      	movs	r3, #128	@ 0x80
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	58d2      	ldr	r2, [r2, r3]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ac9      	subs	r1, r1, r3
 8005d04:	238b      	movs	r3, #139	@ 0x8b
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	50d1      	str	r1, [r2, r3]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	2383      	movs	r3, #131	@ 0x83
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	6979      	ldr	r1, [r7, #20]
 8005d12:	50d1      	str	r1, [r2, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	2380      	movs	r3, #128	@ 0x80
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	58d3      	ldr	r3, [r2, r3]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	0011      	movs	r1, r2
 8005d20:	0018      	movs	r0, r3
 8005d22:	f7ff fae3 	bl	80052ec <clust2sect>
 8005d26:	0001      	movs	r1, r0
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	2384      	movs	r3, #132	@ 0x84
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	50d1      	str	r1, [r2, r3]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	b299      	uxth	r1, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a0a      	ldr	r2, [pc, #40]	@ (8005d60 <dir_next+0x22c>)
 8005d38:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	2380      	movs	r3, #128	@ 0x80
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	58d3      	ldr	r3, [r2, r3]
 8005d42:	0019      	movs	r1, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	220f      	movs	r2, #15
 8005d48:	4013      	ands	r3, r2
 8005d4a:	015b      	lsls	r3, r3, #5
 8005d4c:	18c9      	adds	r1, r1, r3
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	2385      	movs	r3, #133	@ 0x85
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	0018      	movs	r0, r3
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b007      	add	sp, #28
 8005d5e:	bd90      	pop	{r4, r7, pc}
 8005d60:	00000206 	.word	0x00000206
 8005d64:	00000202 	.word	0x00000202

08005d68 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005d68:	b5b0      	push	{r4, r5, r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005d72:	250f      	movs	r5, #15
 8005d74:	197c      	adds	r4, r7, r5
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2100      	movs	r1, #0
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	f7ff fe2a 	bl	80059d4 <dir_sdi>
 8005d80:	0003      	movs	r3, r0
 8005d82:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005d84:	197b      	adds	r3, r7, r5
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d13b      	bne.n	8005e04 <dir_alloc+0x9c>
		n = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	2380      	movs	r3, #128	@ 0x80
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	58d0      	ldr	r0, [r2, r3]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	2384      	movs	r3, #132	@ 0x84
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	58d3      	ldr	r3, [r2, r3]
 8005da0:	250f      	movs	r5, #15
 8005da2:	197c      	adds	r4, r7, r5
 8005da4:	0019      	movs	r1, r3
 8005da6:	f7ff f991 	bl	80050cc <move_window>
 8005daa:	0003      	movs	r3, r0
 8005dac:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005dae:	197b      	adds	r3, r7, r5
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d125      	bne.n	8005e02 <dir_alloc+0x9a>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	2385      	movs	r3, #133	@ 0x85
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	58d3      	ldr	r3, [r2, r3]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2be5      	cmp	r3, #229	@ 0xe5
 8005dc2:	d006      	beq.n	8005dd2 <dir_alloc+0x6a>
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	2385      	movs	r3, #133	@ 0x85
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	58d3      	ldr	r3, [r2, r3]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d107      	bne.n	8005de2 <dir_alloc+0x7a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60bb      	str	r3, [r7, #8]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d102      	bne.n	8005de6 <dir_alloc+0x7e>
 8005de0:	e010      	b.n	8005e04 <dir_alloc+0x9c>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005de2:	2300      	movs	r3, #0
 8005de4:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005de6:	250f      	movs	r5, #15
 8005de8:	197c      	adds	r4, r7, r5
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2101      	movs	r1, #1
 8005dee:	0018      	movs	r0, r3
 8005df0:	f7ff fea0 	bl	8005b34 <dir_next>
 8005df4:	0003      	movs	r3, r0
 8005df6:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 8005df8:	197b      	adds	r3, r7, r5
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0c7      	beq.n	8005d90 <dir_alloc+0x28>
 8005e00:	e000      	b.n	8005e04 <dir_alloc+0x9c>
			if (res != FR_OK) break;
 8005e02:	46c0      	nop			@ (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005e04:	220f      	movs	r2, #15
 8005e06:	18bb      	adds	r3, r7, r2
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d102      	bne.n	8005e14 <dir_alloc+0xac>
 8005e0e:	18bb      	adds	r3, r7, r2
 8005e10:	2207      	movs	r2, #7
 8005e12:	701a      	strb	r2, [r3, #0]
	return res;
 8005e14:	230f      	movs	r3, #15
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	781b      	ldrb	r3, [r3, #0]
}
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b004      	add	sp, #16
 8005e20:	bdb0      	pop	{r4, r5, r7, pc}

08005e22 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	331b      	adds	r3, #27
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	b21b      	sxth	r3, r3
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	b21a      	sxth	r2, r3
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	331a      	adds	r3, #26
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	b21b      	sxth	r3, r3
 8005e40:	4313      	orrs	r3, r2
 8005e42:	b21b      	sxth	r3, r3
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	2380      	movs	r3, #128	@ 0x80
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	5cd3      	ldrb	r3, [r2, r3]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d110      	bne.n	8005e76 <ld_clust+0x54>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	3315      	adds	r3, #21
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	b21b      	sxth	r3, r3
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	b21a      	sxth	r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	3314      	adds	r3, #20
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	b21b      	sxth	r3, r3
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	b21b      	sxth	r3, r3
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	041b      	lsls	r3, r3, #16
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]

	return cl;
 8005e76:	68fb      	ldr	r3, [r7, #12]
}
 8005e78:	0018      	movs	r0, r3
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	b004      	add	sp, #16
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	331a      	adds	r3, #26
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	0a1b      	lsrs	r3, r3, #8
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	331b      	adds	r3, #27
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	0c1a      	lsrs	r2, r3, #16
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3314      	adds	r3, #20
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	0c1b      	lsrs	r3, r3, #16
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	0a1b      	lsrs	r3, r3, #8
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3315      	adds	r3, #21
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]
}
 8005ec2:	46c0      	nop			@ (mov r8, r8)
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	b002      	add	sp, #8
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8005ecc:	b5b0      	push	{r4, r5, r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	001a      	movs	r2, r3
 8005edc:	2340      	movs	r3, #64	@ 0x40
 8005ede:	439a      	bics	r2, r3
 8005ee0:	0013      	movs	r3, r2
 8005ee2:	1e5a      	subs	r2, r3, #1
 8005ee4:	0013      	movs	r3, r2
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	189b      	adds	r3, r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	189b      	adds	r3, r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	613b      	str	r3, [r7, #16]
 8005ef4:	230e      	movs	r3, #14
 8005ef6:	18fb      	adds	r3, r7, r3
 8005ef8:	2201      	movs	r2, #1
 8005efa:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8005efc:	4a30      	ldr	r2, [pc, #192]	@ (8005fc0 <cmp_lfn+0xf4>)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	18d3      	adds	r3, r2, r3
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	3301      	adds	r3, #1
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	18d3      	adds	r3, r2, r3
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	b21b      	sxth	r3, r3
 8005f0e:	021b      	lsls	r3, r3, #8
 8005f10:	b21a      	sxth	r2, r3
 8005f12:	492b      	ldr	r1, [pc, #172]	@ (8005fc0 <cmp_lfn+0xf4>)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	18cb      	adds	r3, r1, r3
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	185b      	adds	r3, r3, r1
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	b21b      	sxth	r3, r3
 8005f24:	4313      	orrs	r3, r2
 8005f26:	b21a      	sxth	r2, r3
 8005f28:	210c      	movs	r1, #12
 8005f2a:	187b      	adds	r3, r7, r1
 8005f2c:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last character has not been processed */
 8005f2e:	250e      	movs	r5, #14
 8005f30:	197b      	adds	r3, r7, r5
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01c      	beq.n	8005f72 <cmp_lfn+0xa6>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8005f38:	197c      	adds	r4, r7, r5
 8005f3a:	187b      	adds	r3, r7, r1
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f003 fa72 	bl	8009428 <ff_wtoupper>
 8005f44:	0003      	movs	r3, r0
 8005f46:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2bfe      	cmp	r3, #254	@ 0xfe
 8005f4c:	d80f      	bhi.n	8005f6e <cmp_lfn+0xa2>
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	617a      	str	r2, [r7, #20]
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	18d3      	adds	r3, r2, r3
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f003 fa63 	bl	8009428 <ff_wtoupper>
 8005f62:	0003      	movs	r3, r0
 8005f64:	001a      	movs	r2, r3
 8005f66:	197b      	adds	r3, r7, r5
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d009      	beq.n	8005f82 <cmp_lfn+0xb6>
				return 0;				/* Not matched */
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e022      	b.n	8005fb8 <cmp_lfn+0xec>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005f72:	230c      	movs	r3, #12
 8005f74:	18fb      	adds	r3, r7, r3
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	4a12      	ldr	r2, [pc, #72]	@ (8005fc4 <cmp_lfn+0xf8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d001      	beq.n	8005f82 <cmp_lfn+0xb6>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e01a      	b.n	8005fb8 <cmp_lfn+0xec>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	3301      	adds	r3, #1
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	2b0c      	cmp	r3, #12
 8005f8c:	d9b6      	bls.n	8005efc <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	001a      	movs	r2, r3
 8005f94:	2340      	movs	r3, #64	@ 0x40
 8005f96:	4013      	ands	r3, r2
 8005f98:	d00d      	beq.n	8005fb6 <cmp_lfn+0xea>
 8005f9a:	230e      	movs	r3, #14
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d008      	beq.n	8005fb6 <cmp_lfn+0xea>
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	18d3      	adds	r3, r2, r3
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <cmp_lfn+0xea>
		return 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e000      	b.n	8005fb8 <cmp_lfn+0xec>

	return 1;						/* The part of LFN matched */
 8005fb6:	2301      	movs	r3, #1
}
 8005fb8:	0018      	movs	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b006      	add	sp, #24
 8005fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8005fc0:	0800ae64 	.word	0x0800ae64
 8005fc4:	0000ffff 	.word	0x0000ffff

08005fc8 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	001a      	movs	r2, r3
 8005fd8:	233f      	movs	r3, #63	@ 0x3f
 8005fda:	4013      	ands	r3, r2
 8005fdc:	1e5a      	subs	r2, r3, #1
 8005fde:	0013      	movs	r3, r2
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	189b      	adds	r3, r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	189b      	adds	r3, r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 8005fea:	2300      	movs	r3, #0
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	230e      	movs	r3, #14
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 8005ff6:	4a2b      	ldr	r2, [pc, #172]	@ (80060a4 <pick_lfn+0xdc>)
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	18d3      	adds	r3, r2, r3
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	3301      	adds	r3, #1
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	18d3      	adds	r3, r2, r3
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	b21b      	sxth	r3, r3
 8006008:	021b      	lsls	r3, r3, #8
 800600a:	b21a      	sxth	r2, r3
 800600c:	4925      	ldr	r1, [pc, #148]	@ (80060a4 <pick_lfn+0xdc>)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	18cb      	adds	r3, r1, r3
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	0019      	movs	r1, r3
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	185b      	adds	r3, r3, r1
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	b21b      	sxth	r3, r3
 800601e:	4313      	orrs	r3, r2
 8006020:	b21a      	sxth	r2, r3
 8006022:	230c      	movs	r3, #12
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last character has not been processed */
 8006028:	230e      	movs	r3, #14
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d014      	beq.n	800605c <pick_lfn+0x94>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2bfe      	cmp	r3, #254	@ 0xfe
 8006036:	d901      	bls.n	800603c <pick_lfn+0x74>
 8006038:	2300      	movs	r3, #0
 800603a:	e02f      	b.n	800609c <pick_lfn+0xd4>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800603c:	210e      	movs	r1, #14
 800603e:	187b      	adds	r3, r7, r1
 8006040:	220c      	movs	r2, #12
 8006042:	18ba      	adds	r2, r7, r2
 8006044:	8812      	ldrh	r2, [r2, #0]
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	617a      	str	r2, [r7, #20]
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	18d3      	adds	r3, r2, r3
 8006054:	187a      	adds	r2, r7, r1
 8006056:	8812      	ldrh	r2, [r2, #0]
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	e007      	b.n	800606c <pick_lfn+0xa4>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800605c:	230c      	movs	r3, #12
 800605e:	18fb      	adds	r3, r7, r3
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	4a11      	ldr	r2, [pc, #68]	@ (80060a8 <pick_lfn+0xe0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d001      	beq.n	800606c <pick_lfn+0xa4>
 8006068:	2300      	movs	r3, #0
 800606a:	e017      	b.n	800609c <pick_lfn+0xd4>
		}
	} while (++s < 13);						/* Read all character in the entry */
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	3301      	adds	r3, #1
 8006070:	613b      	str	r3, [r7, #16]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b0c      	cmp	r3, #12
 8006076:	d9be      	bls.n	8005ff6 <pick_lfn+0x2e>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	001a      	movs	r2, r3
 800607e:	2340      	movs	r3, #64	@ 0x40
 8006080:	4013      	ands	r3, r2
 8006082:	d00a      	beq.n	800609a <pick_lfn+0xd2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2bfe      	cmp	r3, #254	@ 0xfe
 8006088:	d901      	bls.n	800608e <pick_lfn+0xc6>
 800608a:	2300      	movs	r3, #0
 800608c:	e006      	b.n	800609c <pick_lfn+0xd4>
		lfnbuf[i] = 0;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	18d3      	adds	r3, r2, r3
 8006096:	2200      	movs	r2, #0
 8006098:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 800609a:	2301      	movs	r3, #1
}
 800609c:	0018      	movs	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	b006      	add	sp, #24
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	0800ae64 	.word	0x0800ae64
 80060a8:	0000ffff 	.word	0x0000ffff

080060ac <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	0019      	movs	r1, r3
 80060b8:	1dfb      	adds	r3, r7, #7
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	1dbb      	adds	r3, r7, #6
 80060be:	1c0a      	adds	r2, r1, #0
 80060c0:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	330d      	adds	r3, #13
 80060c6:	1dba      	adds	r2, r7, #6
 80060c8:	7812      	ldrb	r2, [r2, #0]
 80060ca:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	330b      	adds	r3, #11
 80060d0:	220f      	movs	r2, #15
 80060d2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	330c      	adds	r3, #12
 80060d8:	2200      	movs	r2, #0
 80060da:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	331a      	adds	r3, #26
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	331b      	adds	r3, #27
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80060ec:	1dfb      	adds	r3, r7, #7
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	1e5a      	subs	r2, r3, #1
 80060f2:	0013      	movs	r3, r2
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	189b      	adds	r3, r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	189b      	adds	r3, r3, r2
 80060fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80060fe:	2316      	movs	r3, #22
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	2200      	movs	r2, #0
 8006104:	801a      	strh	r2, [r3, #0]
 8006106:	2300      	movs	r3, #0
 8006108:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800610a:	2116      	movs	r1, #22
 800610c:	187b      	adds	r3, r7, r1
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	4a26      	ldr	r2, [pc, #152]	@ (80061ac <fit_lfn+0x100>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d008      	beq.n	8006128 <fit_lfn+0x7c>
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	61fa      	str	r2, [r7, #28]
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	18d2      	adds	r2, r2, r3
 8006122:	187b      	adds	r3, r7, r1
 8006124:	8812      	ldrh	r2, [r2, #0]
 8006126:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8006128:	4a21      	ldr	r2, [pc, #132]	@ (80061b0 <fit_lfn+0x104>)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	18d3      	adds	r3, r2, r3
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	001a      	movs	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	189b      	adds	r3, r3, r2
 8006136:	2016      	movs	r0, #22
 8006138:	183a      	adds	r2, r7, r0
 800613a:	8812      	ldrh	r2, [r2, #0]
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	183b      	adds	r3, r7, r0
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	0a1b      	lsrs	r3, r3, #8
 8006146:	b299      	uxth	r1, r3
 8006148:	4a19      	ldr	r2, [pc, #100]	@ (80061b0 <fit_lfn+0x104>)
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	18d3      	adds	r3, r2, r3
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	3301      	adds	r3, #1
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	18d3      	adds	r3, r2, r3
 8006156:	b2ca      	uxtb	r2, r1
 8006158:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800615a:	183b      	adds	r3, r7, r0
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d103      	bne.n	800616a <fit_lfn+0xbe>
 8006162:	183b      	adds	r3, r7, r0
 8006164:	2201      	movs	r2, #1
 8006166:	4252      	negs	r2, r2
 8006168:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	3301      	adds	r3, #1
 800616e:	61bb      	str	r3, [r7, #24]
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	2b0c      	cmp	r3, #12
 8006174:	d9c9      	bls.n	800610a <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006176:	2316      	movs	r3, #22
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	4a0b      	ldr	r2, [pc, #44]	@ (80061ac <fit_lfn+0x100>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d006      	beq.n	8006190 <fit_lfn+0xe4>
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	18d3      	adds	r3, r2, r3
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d105      	bne.n	800619c <fit_lfn+0xf0>
 8006190:	1dfb      	adds	r3, r7, #7
 8006192:	1dfa      	adds	r2, r7, #7
 8006194:	7812      	ldrb	r2, [r2, #0]
 8006196:	2140      	movs	r1, #64	@ 0x40
 8006198:	430a      	orrs	r2, r1
 800619a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	1dfa      	adds	r2, r7, #7
 80061a0:	7812      	ldrb	r2, [r2, #0]
 80061a2:	701a      	strb	r2, [r3, #0]
}
 80061a4:	46c0      	nop			@ (mov r8, r8)
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b008      	add	sp, #32
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	0000ffff 	.word	0x0000ffff
 80061b0:	0800ae64 	.word	0x0800ae64

080061b4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08c      	sub	sp, #48	@ 0x30
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	220b      	movs	r2, #11
 80061c8:	0018      	movs	r0, r3
 80061ca:	f7fe fcf3 	bl	8004bb4 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b05      	cmp	r3, #5
 80061d2:	d92f      	bls.n	8006234 <gen_numname+0x80>
		sr = seq;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80061d8:	e026      	b.n	8006228 <gen_numname+0x74>
			wc = *lfn++;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	1c9a      	adds	r2, r3, #2
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	2222      	movs	r2, #34	@ 0x22
 80061e2:	18ba      	adds	r2, r7, r2
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 80061e8:	2300      	movs	r3, #0
 80061ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ec:	e019      	b.n	8006222 <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	005a      	lsls	r2, r3, #1
 80061f2:	2022      	movs	r0, #34	@ 0x22
 80061f4:	183b      	adds	r3, r7, r0
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	2101      	movs	r1, #1
 80061fa:	400b      	ands	r3, r1
 80061fc:	18d3      	adds	r3, r2, r3
 80061fe:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006200:	183b      	adds	r3, r7, r0
 8006202:	183a      	adds	r2, r7, r0
 8006204:	8812      	ldrh	r2, [r2, #0]
 8006206:	0852      	lsrs	r2, r2, #1
 8006208:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	2380      	movs	r3, #128	@ 0x80
 800620e:	025b      	lsls	r3, r3, #9
 8006210:	4013      	ands	r3, r2
 8006212:	d003      	beq.n	800621c <gen_numname+0x68>
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	4a30      	ldr	r2, [pc, #192]	@ (80062d8 <gen_numname+0x124>)
 8006218:	4053      	eors	r3, r2
 800621a:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800621c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621e:	3301      	adds	r3, #1
 8006220:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006224:	2b0f      	cmp	r3, #15
 8006226:	d9e2      	bls.n	80061ee <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1d4      	bne.n	80061da <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006234:	2307      	movs	r3, #7
 8006236:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	b2db      	uxtb	r3, r3
 800623c:	220f      	movs	r2, #15
 800623e:	4013      	ands	r3, r2
 8006240:	b2da      	uxtb	r2, r3
 8006242:	212f      	movs	r1, #47	@ 0x2f
 8006244:	187b      	adds	r3, r7, r1
 8006246:	3230      	adds	r2, #48	@ 0x30
 8006248:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 800624a:	187b      	adds	r3, r7, r1
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b39      	cmp	r3, #57	@ 0x39
 8006250:	d904      	bls.n	800625c <gen_numname+0xa8>
 8006252:	187b      	adds	r3, r7, r1
 8006254:	187a      	adds	r2, r7, r1
 8006256:	7812      	ldrb	r2, [r2, #0]
 8006258:	3207      	adds	r2, #7
 800625a:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 800625c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625e:	1e5a      	subs	r2, r3, #1
 8006260:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006262:	2014      	movs	r0, #20
 8006264:	183a      	adds	r2, r7, r0
 8006266:	212f      	movs	r1, #47	@ 0x2f
 8006268:	1879      	adds	r1, r7, r1
 800626a:	7809      	ldrb	r1, [r1, #0]
 800626c:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	091b      	lsrs	r3, r3, #4
 8006272:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1de      	bne.n	8006238 <gen_numname+0x84>
	ns[i] = '~';
 800627a:	183a      	adds	r2, r7, r0
 800627c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627e:	18d3      	adds	r3, r2, r3
 8006280:	227e      	movs	r2, #126	@ 0x7e
 8006282:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006284:	2300      	movs	r3, #0
 8006286:	627b      	str	r3, [r7, #36]	@ 0x24
 8006288:	e002      	b.n	8006290 <gen_numname+0xdc>
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	3301      	adds	r3, #1
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006294:	429a      	cmp	r2, r3
 8006296:	d205      	bcs.n	80062a4 <gen_numname+0xf0>
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	18d3      	adds	r3, r2, r3
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b20      	cmp	r3, #32
 80062a2:	d1f2      	bne.n	800628a <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80062a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a6:	2b07      	cmp	r3, #7
 80062a8:	d806      	bhi.n	80062b8 <gen_numname+0x104>
 80062aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 80062b0:	2214      	movs	r2, #20
 80062b2:	18ba      	adds	r2, r7, r2
 80062b4:	5cd1      	ldrb	r1, [r2, r3]
 80062b6:	e000      	b.n	80062ba <gen_numname+0x106>
 80062b8:	2120      	movs	r1, #32
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	627a      	str	r2, [r7, #36]	@ 0x24
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	18d3      	adds	r3, r2, r3
 80062c4:	1c0a      	adds	r2, r1, #0
 80062c6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80062c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ca:	2b07      	cmp	r3, #7
 80062cc:	d9ea      	bls.n	80062a4 <gen_numname+0xf0>
}
 80062ce:	46c0      	nop			@ (mov r8, r8)
 80062d0:	46c0      	nop			@ (mov r8, r8)
 80062d2:	46bd      	mov	sp, r7
 80062d4:	b00c      	add	sp, #48	@ 0x30
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	00011021 	.word	0x00011021

080062dc <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80062e4:	230f      	movs	r3, #15
 80062e6:	18fb      	adds	r3, r7, r3
 80062e8:	2200      	movs	r2, #0
 80062ea:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 80062ec:	230b      	movs	r3, #11
 80062ee:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80062f0:	200f      	movs	r0, #15
 80062f2:	183b      	adds	r3, r7, r0
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	0852      	lsrs	r2, r2, #1
 80062fa:	01db      	lsls	r3, r3, #7
 80062fc:	4313      	orrs	r3, r2
 80062fe:	b2d9      	uxtb	r1, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	607a      	str	r2, [r7, #4]
 8006306:	781a      	ldrb	r2, [r3, #0]
 8006308:	183b      	adds	r3, r7, r0
 800630a:	188a      	adds	r2, r1, r2
 800630c:	701a      	strb	r2, [r3, #0]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	3b01      	subs	r3, #1
 8006312:	60bb      	str	r3, [r7, #8]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1ea      	bne.n	80062f0 <sum_sfn+0x14>
	return sum;
 800631a:	183b      	adds	r3, r7, r0
 800631c:	781b      	ldrb	r3, [r3, #0]
}
 800631e:	0018      	movs	r0, r3
 8006320:	46bd      	mov	sp, r7
 8006322:	b004      	add	sp, #16
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006328:	b5b0      	push	{r4, r5, r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006330:	2517      	movs	r5, #23
 8006332:	197c      	adds	r4, r7, r5
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2100      	movs	r1, #0
 8006338:	0018      	movs	r0, r3
 800633a:	f7ff fb4b 	bl	80059d4 <dir_sdi>
 800633e:	0003      	movs	r3, r0
 8006340:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8006342:	197b      	adds	r3, r7, r5
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <dir_find+0x28>
 800634a:	197b      	adds	r3, r7, r5
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	e0ea      	b.n	8006526 <dir_find+0x1fe>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006350:	2114      	movs	r1, #20
 8006352:	187b      	adds	r3, r7, r1
 8006354:	22ff      	movs	r2, #255	@ 0xff
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	2315      	movs	r3, #21
 800635a:	18fb      	adds	r3, r7, r3
 800635c:	187a      	adds	r2, r7, r1
 800635e:	7812      	ldrb	r2, [r2, #0]
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	2389      	movs	r3, #137	@ 0x89
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	2101      	movs	r1, #1
 800636a:	4249      	negs	r1, r1
 800636c:	52d1      	strh	r1, [r2, r3]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	2380      	movs	r3, #128	@ 0x80
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	58d0      	ldr	r0, [r2, r3]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	2384      	movs	r3, #132	@ 0x84
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	58d3      	ldr	r3, [r2, r3]
 800637e:	2517      	movs	r5, #23
 8006380:	197c      	adds	r4, r7, r5
 8006382:	0019      	movs	r1, r3
 8006384:	f7fe fea2 	bl	80050cc <move_window>
 8006388:	0003      	movs	r3, r0
 800638a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800638c:	0029      	movs	r1, r5
 800638e:	187b      	adds	r3, r7, r1
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d000      	beq.n	8006398 <dir_find+0x70>
 8006396:	e0be      	b.n	8006516 <dir_find+0x1ee>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	2385      	movs	r3, #133	@ 0x85
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	58d3      	ldr	r3, [r2, r3]
 80063a0:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80063a2:	2016      	movs	r0, #22
 80063a4:	183b      	adds	r3, r7, r0
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	7812      	ldrb	r2, [r2, #0]
 80063aa:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80063ac:	183b      	adds	r3, r7, r0
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d103      	bne.n	80063bc <dir_find+0x94>
 80063b4:	187b      	adds	r3, r7, r1
 80063b6:	2204      	movs	r2, #4
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	e0b1      	b.n	8006520 <dir_find+0x1f8>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	330b      	adds	r3, #11
 80063c0:	781a      	ldrb	r2, [r3, #0]
 80063c2:	200f      	movs	r0, #15
 80063c4:	183b      	adds	r3, r7, r0
 80063c6:	213f      	movs	r1, #63	@ 0x3f
 80063c8:	400a      	ands	r2, r1
 80063ca:	701a      	strb	r2, [r3, #0]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80063cc:	2316      	movs	r3, #22
 80063ce:	18fb      	adds	r3, r7, r3
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2be5      	cmp	r3, #229	@ 0xe5
 80063d4:	d008      	beq.n	80063e8 <dir_find+0xc0>
 80063d6:	183b      	adds	r3, r7, r0
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2208      	movs	r2, #8
 80063dc:	4013      	ands	r3, r2
 80063de:	d00e      	beq.n	80063fe <dir_find+0xd6>
 80063e0:	183b      	adds	r3, r7, r0
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b0f      	cmp	r3, #15
 80063e6:	d00a      	beq.n	80063fe <dir_find+0xd6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80063e8:	2315      	movs	r3, #21
 80063ea:	18fb      	adds	r3, r7, r3
 80063ec:	22ff      	movs	r2, #255	@ 0xff
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	2389      	movs	r3, #137	@ 0x89
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	2101      	movs	r1, #1
 80063f8:	4249      	negs	r1, r1
 80063fa:	52d1      	strh	r1, [r2, r3]
 80063fc:	e07c      	b.n	80064f8 <dir_find+0x1d0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80063fe:	230f      	movs	r3, #15
 8006400:	18fb      	adds	r3, r7, r3
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2b0f      	cmp	r3, #15
 8006406:	d148      	bne.n	800649a <dir_find+0x172>
				if (dp->lfn) {
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	2388      	movs	r3, #136	@ 0x88
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	58d3      	ldr	r3, [r2, r3]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d100      	bne.n	8006416 <dir_find+0xee>
 8006414:	e070      	b.n	80064f8 <dir_find+0x1d0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006416:	2016      	movs	r0, #22
 8006418:	183b      	adds	r3, r7, r0
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2240      	movs	r2, #64	@ 0x40
 800641e:	4013      	ands	r3, r2
 8006420:	d016      	beq.n	8006450 <dir_find+0x128>
						sum = dir[LDIR_Chksum];
 8006422:	2314      	movs	r3, #20
 8006424:	18fb      	adds	r3, r7, r3
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	7b52      	ldrb	r2, [r2, #13]
 800642a:	701a      	strb	r2, [r3, #0]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800642c:	183b      	adds	r3, r7, r0
 800642e:	183a      	adds	r2, r7, r0
 8006430:	7812      	ldrb	r2, [r2, #0]
 8006432:	2140      	movs	r1, #64	@ 0x40
 8006434:	438a      	bics	r2, r1
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	2315      	movs	r3, #21
 800643a:	18fb      	adds	r3, r7, r3
 800643c:	183a      	adds	r2, r7, r0
 800643e:	7812      	ldrb	r2, [r2, #0]
 8006440:	701a      	strb	r2, [r3, #0]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a3a      	ldr	r2, [pc, #232]	@ (8006530 <dir_find+0x208>)
 8006446:	5a99      	ldrh	r1, [r3, r2]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	2389      	movs	r3, #137	@ 0x89
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	52d1      	strh	r1, [r2, r3]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006450:	2316      	movs	r3, #22
 8006452:	18fa      	adds	r2, r7, r3
 8006454:	2415      	movs	r4, #21
 8006456:	193b      	adds	r3, r7, r4
 8006458:	7812      	ldrb	r2, [r2, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d117      	bne.n	8006490 <dir_find+0x168>
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	330d      	adds	r3, #13
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2214      	movs	r2, #20
 8006468:	18ba      	adds	r2, r7, r2
 800646a:	7812      	ldrb	r2, [r2, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d10f      	bne.n	8006490 <dir_find+0x168>
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	2388      	movs	r3, #136	@ 0x88
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	58d3      	ldr	r3, [r2, r3]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	0011      	movs	r1, r2
 800647c:	0018      	movs	r0, r3
 800647e:	f7ff fd25 	bl	8005ecc <cmp_lfn>
 8006482:	1e03      	subs	r3, r0, #0
 8006484:	d004      	beq.n	8006490 <dir_find+0x168>
 8006486:	193b      	adds	r3, r7, r4
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	3b01      	subs	r3, #1
 800648c:	b2da      	uxtb	r2, r3
 800648e:	e000      	b.n	8006492 <dir_find+0x16a>
 8006490:	22ff      	movs	r2, #255	@ 0xff
 8006492:	2315      	movs	r3, #21
 8006494:	18fb      	adds	r3, r7, r3
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	e02e      	b.n	80064f8 <dir_find+0x1d0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800649a:	2315      	movs	r3, #21
 800649c:	18fb      	adds	r3, r7, r3
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10a      	bne.n	80064ba <dir_find+0x192>
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	0018      	movs	r0, r3
 80064a8:	f7ff ff18 	bl	80062dc <sum_sfn>
 80064ac:	0003      	movs	r3, r0
 80064ae:	001a      	movs	r2, r3
 80064b0:	2314      	movs	r3, #20
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d02f      	beq.n	800651a <dir_find+0x1f2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	2386      	movs	r3, #134	@ 0x86
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	58d3      	ldr	r3, [r2, r3]
 80064c2:	330b      	adds	r3, #11
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	001a      	movs	r2, r3
 80064c8:	2301      	movs	r3, #1
 80064ca:	4013      	ands	r3, r2
 80064cc:	d10a      	bne.n	80064e4 <dir_find+0x1bc>
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	2386      	movs	r3, #134	@ 0x86
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	58d1      	ldr	r1, [r2, r3]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	220b      	movs	r2, #11
 80064da:	0018      	movs	r0, r3
 80064dc:	f7fe fba0 	bl	8004c20 <mem_cmp>
 80064e0:	1e03      	subs	r3, r0, #0
 80064e2:	d01c      	beq.n	800651e <dir_find+0x1f6>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80064e4:	2315      	movs	r3, #21
 80064e6:	18fb      	adds	r3, r7, r3
 80064e8:	22ff      	movs	r2, #255	@ 0xff
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	2389      	movs	r3, #137	@ 0x89
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	2101      	movs	r1, #1
 80064f4:	4249      	negs	r1, r1
 80064f6:	52d1      	strh	r1, [r2, r3]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80064f8:	2517      	movs	r5, #23
 80064fa:	197c      	adds	r4, r7, r5
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2100      	movs	r1, #0
 8006500:	0018      	movs	r0, r3
 8006502:	f7ff fb17 	bl	8005b34 <dir_next>
 8006506:	0003      	movs	r3, r0
 8006508:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 800650a:	197b      	adds	r3, r7, r5
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d100      	bne.n	8006514 <dir_find+0x1ec>
 8006512:	e72c      	b.n	800636e <dir_find+0x46>
 8006514:	e004      	b.n	8006520 <dir_find+0x1f8>
		if (res != FR_OK) break;
 8006516:	46c0      	nop			@ (mov r8, r8)
 8006518:	e002      	b.n	8006520 <dir_find+0x1f8>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800651a:	46c0      	nop			@ (mov r8, r8)
 800651c:	e000      	b.n	8006520 <dir_find+0x1f8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800651e:	46c0      	nop			@ (mov r8, r8)

	return res;
 8006520:	2317      	movs	r3, #23
 8006522:	18fb      	adds	r3, r7, r3
 8006524:	781b      	ldrb	r3, [r3, #0]
}
 8006526:	0018      	movs	r0, r3
 8006528:	46bd      	mov	sp, r7
 800652a:	b006      	add	sp, #24
 800652c:	bdb0      	pop	{r4, r5, r7, pc}
 800652e:	46c0      	nop			@ (mov r8, r8)
 8006530:	00000206 	.word	0x00000206

08006534 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006534:	b5b0      	push	{r4, r5, r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 800653e:	2315      	movs	r3, #21
 8006540:	18fb      	adds	r3, r7, r3
 8006542:	22ff      	movs	r2, #255	@ 0xff
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	2314      	movs	r3, #20
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	22ff      	movs	r2, #255	@ 0xff
 800654c:	701a      	strb	r2, [r3, #0]
#endif

	res = FR_NO_FILE;
 800654e:	2317      	movs	r3, #23
 8006550:	18fb      	adds	r3, r7, r3
 8006552:	2204      	movs	r2, #4
 8006554:	701a      	strb	r2, [r3, #0]
	while (dp->sect) {
 8006556:	e0b3      	b.n	80066c0 <dir_read+0x18c>
		res = move_window(dp->fs, dp->sect);
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	2380      	movs	r3, #128	@ 0x80
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	58d0      	ldr	r0, [r2, r3]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	2384      	movs	r3, #132	@ 0x84
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	58d3      	ldr	r3, [r2, r3]
 8006568:	2517      	movs	r5, #23
 800656a:	197c      	adds	r4, r7, r5
 800656c:	0019      	movs	r1, r3
 800656e:	f7fe fdad 	bl	80050cc <move_window>
 8006572:	0003      	movs	r3, r0
 8006574:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8006576:	0029      	movs	r1, r5
 8006578:	187b      	adds	r3, r7, r1
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d000      	beq.n	8006582 <dir_read+0x4e>
 8006580:	e0a6      	b.n	80066d0 <dir_read+0x19c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	2385      	movs	r3, #133	@ 0x85
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	58d3      	ldr	r3, [r2, r3]
 800658a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800658c:	2016      	movs	r0, #22
 800658e:	183b      	adds	r3, r7, r0
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	7812      	ldrb	r2, [r2, #0]
 8006594:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006596:	183b      	adds	r3, r7, r0
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d103      	bne.n	80065a6 <dir_read+0x72>
 800659e:	187b      	adds	r3, r7, r1
 80065a0:	2204      	movs	r2, #4
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	e099      	b.n	80066da <dir_read+0x1a6>
		a = dir[DIR_Attr] & AM_MASK;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	330b      	adds	r3, #11
 80065aa:	781a      	ldrb	r2, [r3, #0]
 80065ac:	200f      	movs	r0, #15
 80065ae:	183b      	adds	r3, r7, r0
 80065b0:	213f      	movs	r1, #63	@ 0x3f
 80065b2:	400a      	ands	r2, r1
 80065b4:	701a      	strb	r2, [r3, #0]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80065b6:	2216      	movs	r2, #22
 80065b8:	18bb      	adds	r3, r7, r2
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2be5      	cmp	r3, #229	@ 0xe5
 80065be:	d00f      	beq.n	80065e0 <dir_read+0xac>
 80065c0:	18bb      	adds	r3, r7, r2
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80065c6:	d00b      	beq.n	80065e0 <dir_read+0xac>
 80065c8:	183b      	adds	r3, r7, r0
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2220      	movs	r2, #32
 80065ce:	4393      	bics	r3, r2
 80065d0:	3b08      	subs	r3, #8
 80065d2:	425a      	negs	r2, r3
 80065d4:	4153      	adcs	r3, r2
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	001a      	movs	r2, r3
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	4293      	cmp	r3, r2
 80065de:	d004      	beq.n	80065ea <dir_read+0xb6>
			ord = 0xFF;
 80065e0:	2315      	movs	r3, #21
 80065e2:	18fb      	adds	r3, r7, r3
 80065e4:	22ff      	movs	r2, #255	@ 0xff
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	e05d      	b.n	80066a6 <dir_read+0x172>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80065ea:	230f      	movs	r3, #15
 80065ec:	18fb      	adds	r3, r7, r3
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b0f      	cmp	r3, #15
 80065f2:	d141      	bne.n	8006678 <dir_read+0x144>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 80065f4:	2016      	movs	r0, #22
 80065f6:	183b      	adds	r3, r7, r0
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2240      	movs	r2, #64	@ 0x40
 80065fc:	4013      	ands	r3, r2
 80065fe:	d016      	beq.n	800662e <dir_read+0xfa>
					sum = dir[LDIR_Chksum];
 8006600:	2314      	movs	r3, #20
 8006602:	18fb      	adds	r3, r7, r3
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	7b52      	ldrb	r2, [r2, #13]
 8006608:	701a      	strb	r2, [r3, #0]
					c &= ~LLEF; ord = c;
 800660a:	183b      	adds	r3, r7, r0
 800660c:	183a      	adds	r2, r7, r0
 800660e:	7812      	ldrb	r2, [r2, #0]
 8006610:	2140      	movs	r1, #64	@ 0x40
 8006612:	438a      	bics	r2, r1
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	2315      	movs	r3, #21
 8006618:	18fb      	adds	r3, r7, r3
 800661a:	183a      	adds	r2, r7, r0
 800661c:	7812      	ldrb	r2, [r2, #0]
 800661e:	701a      	strb	r2, [r3, #0]
					dp->lfn_idx = dp->index;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a36      	ldr	r2, [pc, #216]	@ (80066fc <dir_read+0x1c8>)
 8006624:	5a99      	ldrh	r1, [r3, r2]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	2389      	movs	r3, #137	@ 0x89
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	52d1      	strh	r1, [r2, r3]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800662e:	2316      	movs	r3, #22
 8006630:	18fa      	adds	r2, r7, r3
 8006632:	2415      	movs	r4, #21
 8006634:	193b      	adds	r3, r7, r4
 8006636:	7812      	ldrb	r2, [r2, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d117      	bne.n	800666e <dir_read+0x13a>
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	330d      	adds	r3, #13
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2214      	movs	r2, #20
 8006646:	18ba      	adds	r2, r7, r2
 8006648:	7812      	ldrb	r2, [r2, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d10f      	bne.n	800666e <dir_read+0x13a>
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	2388      	movs	r3, #136	@ 0x88
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	58d3      	ldr	r3, [r2, r3]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	0011      	movs	r1, r2
 800665a:	0018      	movs	r0, r3
 800665c:	f7ff fcb4 	bl	8005fc8 <pick_lfn>
 8006660:	1e03      	subs	r3, r0, #0
 8006662:	d004      	beq.n	800666e <dir_read+0x13a>
 8006664:	193b      	adds	r3, r7, r4
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	3b01      	subs	r3, #1
 800666a:	b2da      	uxtb	r2, r3
 800666c:	e000      	b.n	8006670 <dir_read+0x13c>
 800666e:	22ff      	movs	r2, #255	@ 0xff
 8006670:	2315      	movs	r3, #21
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	e016      	b.n	80066a6 <dir_read+0x172>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 8006678:	2315      	movs	r3, #21
 800667a:	18fb      	adds	r3, r7, r3
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <dir_read+0x164>
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	0018      	movs	r0, r3
 8006686:	f7ff fe29 	bl	80062dc <sum_sfn>
 800668a:	0003      	movs	r3, r0
 800668c:	001a      	movs	r2, r3
 800668e:	2314      	movs	r3, #20
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	4293      	cmp	r3, r2
 8006696:	d01d      	beq.n	80066d4 <dir_read+0x1a0>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	2389      	movs	r3, #137	@ 0x89
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	2101      	movs	r1, #1
 80066a0:	4249      	negs	r1, r1
 80066a2:	52d1      	strh	r1, [r2, r3]
				break;
 80066a4:	e016      	b.n	80066d4 <dir_read+0x1a0>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 80066a6:	2517      	movs	r5, #23
 80066a8:	197c      	adds	r4, r7, r5
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2100      	movs	r1, #0
 80066ae:	0018      	movs	r0, r3
 80066b0:	f7ff fa40 	bl	8005b34 <dir_next>
 80066b4:	0003      	movs	r3, r0
 80066b6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 80066b8:	197b      	adds	r3, r7, r5
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10b      	bne.n	80066d8 <dir_read+0x1a4>
	while (dp->sect) {
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	2384      	movs	r3, #132	@ 0x84
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	58d3      	ldr	r3, [r2, r3]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d000      	beq.n	80066ce <dir_read+0x19a>
 80066cc:	e744      	b.n	8006558 <dir_read+0x24>
 80066ce:	e004      	b.n	80066da <dir_read+0x1a6>
		if (res != FR_OK) break;
 80066d0:	46c0      	nop			@ (mov r8, r8)
 80066d2:	e002      	b.n	80066da <dir_read+0x1a6>
				break;
 80066d4:	46c0      	nop			@ (mov r8, r8)
 80066d6:	e000      	b.n	80066da <dir_read+0x1a6>
		if (res != FR_OK) break;
 80066d8:	46c0      	nop			@ (mov r8, r8)
	}

	if (res != FR_OK) dp->sect = 0;
 80066da:	2317      	movs	r3, #23
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <dir_read+0x1ba>
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	2384      	movs	r3, #132	@ 0x84
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	2100      	movs	r1, #0
 80066ec:	50d1      	str	r1, [r2, r3]

	return res;
 80066ee:	2317      	movs	r3, #23
 80066f0:	18fb      	adds	r3, r7, r3
 80066f2:	781b      	ldrb	r3, [r3, #0]
}
 80066f4:	0018      	movs	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b006      	add	sp, #24
 80066fa:	bdb0      	pop	{r4, r5, r7, pc}
 80066fc:	00000206 	.word	0x00000206

08006700 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006700:	b5b0      	push	{r4, r5, r7, lr}
 8006702:	b08c      	sub	sp, #48	@ 0x30
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	2386      	movs	r3, #134	@ 0x86
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	58d3      	ldr	r3, [r2, r3]
 8006710:	623b      	str	r3, [r7, #32]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	2388      	movs	r3, #136	@ 0x88
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	58d3      	ldr	r3, [r2, r3]
 800671a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800671c:	6a39      	ldr	r1, [r7, #32]
 800671e:	240c      	movs	r4, #12
 8006720:	193b      	adds	r3, r7, r4
 8006722:	220c      	movs	r2, #12
 8006724:	0018      	movs	r0, r3
 8006726:	f7fe fa45 	bl	8004bb4 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800672a:	193b      	adds	r3, r7, r4
 800672c:	7adb      	ldrb	r3, [r3, #11]
 800672e:	001a      	movs	r2, r3
 8006730:	2301      	movs	r3, #1
 8006732:	4013      	ands	r3, r2
 8006734:	d03e      	beq.n	80067b4 <dir_register+0xb4>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	330b      	adds	r3, #11
 800673a:	2200      	movs	r2, #0
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	2388      	movs	r3, #136	@ 0x88
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	2100      	movs	r1, #0
 8006746:	50d1      	str	r1, [r2, r3]
		for (n = 1; n < 100; n++) {
 8006748:	2301      	movs	r3, #1
 800674a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800674c:	e015      	b.n	800677a <dir_register+0x7a>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800674e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	210c      	movs	r1, #12
 8006754:	1879      	adds	r1, r7, r1
 8006756:	6a38      	ldr	r0, [r7, #32]
 8006758:	f7ff fd2c 	bl	80061b4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800675c:	252f      	movs	r5, #47	@ 0x2f
 800675e:	197c      	adds	r4, r7, r5
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	0018      	movs	r0, r3
 8006764:	f7ff fde0 	bl	8006328 <dir_find>
 8006768:	0003      	movs	r3, r0
 800676a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800676c:	197b      	adds	r3, r7, r5
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d106      	bne.n	8006782 <dir_register+0x82>
		for (n = 1; n < 100; n++) {
 8006774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006776:	3301      	adds	r3, #1
 8006778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677c:	2b63      	cmp	r3, #99	@ 0x63
 800677e:	d9e6      	bls.n	800674e <dir_register+0x4e>
 8006780:	e000      	b.n	8006784 <dir_register+0x84>
			if (res != FR_OK) break;
 8006782:	46c0      	nop			@ (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006786:	2b64      	cmp	r3, #100	@ 0x64
 8006788:	d101      	bne.n	800678e <dir_register+0x8e>
 800678a:	2307      	movs	r3, #7
 800678c:	e0eb      	b.n	8006966 <dir_register+0x266>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800678e:	222f      	movs	r2, #47	@ 0x2f
 8006790:	18bb      	adds	r3, r7, r2
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b04      	cmp	r3, #4
 8006796:	d002      	beq.n	800679e <dir_register+0x9e>
 8006798:	18bb      	adds	r3, r7, r2
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	e0e3      	b.n	8006966 <dir_register+0x266>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	330b      	adds	r3, #11
 80067a2:	220c      	movs	r2, #12
 80067a4:	18ba      	adds	r2, r7, r2
 80067a6:	7ad2      	ldrb	r2, [r2, #11]
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	2388      	movs	r3, #136	@ 0x88
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	69f9      	ldr	r1, [r7, #28]
 80067b2:	50d1      	str	r1, [r2, r3]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80067b4:	230c      	movs	r3, #12
 80067b6:	18fb      	adds	r3, r7, r3
 80067b8:	7adb      	ldrb	r3, [r3, #11]
 80067ba:	001a      	movs	r2, r3
 80067bc:	2302      	movs	r3, #2
 80067be:	4013      	ands	r3, r2
 80067c0:	d015      	beq.n	80067ee <dir_register+0xee>
		for (n = 0; lfn[n]; n++) ;
 80067c2:	2300      	movs	r3, #0
 80067c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067c6:	e002      	b.n	80067ce <dir_register+0xce>
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	3301      	adds	r3, #1
 80067cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	18d3      	adds	r3, r2, r3
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1f5      	bne.n	80067c8 <dir_register+0xc8>
		nent = (n + 25) / 13;
 80067dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067de:	3319      	adds	r3, #25
 80067e0:	210d      	movs	r1, #13
 80067e2:	0018      	movs	r0, r3
 80067e4:	f7f9 fcac 	bl	8000140 <__udivsi3>
 80067e8:	0003      	movs	r3, r0
 80067ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ec:	e001      	b.n	80067f2 <dir_register+0xf2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80067ee:	2301      	movs	r3, #1
 80067f0:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80067f2:	252f      	movs	r5, #47	@ 0x2f
 80067f4:	197c      	adds	r4, r7, r5
 80067f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	0011      	movs	r1, r2
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7ff fab3 	bl	8005d68 <dir_alloc>
 8006802:	0003      	movs	r3, r0
 8006804:	7023      	strb	r3, [r4, #0]

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006806:	0029      	movs	r1, r5
 8006808:	187b      	adds	r3, r7, r1
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d163      	bne.n	80068d8 <dir_register+0x1d8>
 8006810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006812:	3b01      	subs	r3, #1
 8006814:	627b      	str	r3, [r7, #36]	@ 0x24
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	2b00      	cmp	r3, #0
 800681a:	d05d      	beq.n	80068d8 <dir_register+0x1d8>
		res = dir_sdi(dp, dp->index - nent);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a54      	ldr	r2, [pc, #336]	@ (8006970 <dir_register+0x270>)
 8006820:	5a9b      	ldrh	r3, [r3, r2]
 8006822:	001a      	movs	r2, r3
 8006824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006826:	1ad2      	subs	r2, r2, r3
 8006828:	000d      	movs	r5, r1
 800682a:	187c      	adds	r4, r7, r1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	0011      	movs	r1, r2
 8006830:	0018      	movs	r0, r3
 8006832:	f7ff f8cf 	bl	80059d4 <dir_sdi>
 8006836:	0003      	movs	r3, r0
 8006838:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800683a:	197b      	adds	r3, r7, r5
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d14a      	bne.n	80068d8 <dir_register+0x1d8>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	2386      	movs	r3, #134	@ 0x86
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	58d3      	ldr	r3, [r2, r3]
 800684a:	221b      	movs	r2, #27
 800684c:	18bc      	adds	r4, r7, r2
 800684e:	0018      	movs	r0, r3
 8006850:	f7ff fd44 	bl	80062dc <sum_sfn>
 8006854:	0003      	movs	r3, r0
 8006856:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	2380      	movs	r3, #128	@ 0x80
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	58d0      	ldr	r0, [r2, r3]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	2384      	movs	r3, #132	@ 0x84
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	58d3      	ldr	r3, [r2, r3]
 8006868:	252f      	movs	r5, #47	@ 0x2f
 800686a:	197c      	adds	r4, r7, r5
 800686c:	0019      	movs	r1, r3
 800686e:	f7fe fc2d 	bl	80050cc <move_window>
 8006872:	0003      	movs	r3, r0
 8006874:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 8006876:	002c      	movs	r4, r5
 8006878:	193b      	adds	r3, r7, r4
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d12a      	bne.n	80068d6 <dir_register+0x1d6>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	2388      	movs	r3, #136	@ 0x88
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	58d0      	ldr	r0, [r2, r3]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	2385      	movs	r3, #133	@ 0x85
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	58d1      	ldr	r1, [r2, r3]
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	b2da      	uxtb	r2, r3
 8006894:	231b      	movs	r3, #27
 8006896:	18fb      	adds	r3, r7, r3
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	f7ff fc07 	bl	80060ac <fit_lfn>
				dp->fs->wflag = 1;
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	2380      	movs	r3, #128	@ 0x80
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	58d2      	ldr	r2, [r2, r3]
 80068a6:	2381      	movs	r3, #129	@ 0x81
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	2101      	movs	r1, #1
 80068ac:	54d1      	strb	r1, [r2, r3]
				res = dir_next(dp, 0);	/* Next entry */
 80068ae:	0025      	movs	r5, r4
 80068b0:	193c      	adds	r4, r7, r4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2100      	movs	r1, #0
 80068b6:	0018      	movs	r0, r3
 80068b8:	f7ff f93c 	bl	8005b34 <dir_next>
 80068bc:	0003      	movs	r3, r0
 80068be:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 80068c0:	197b      	adds	r3, r7, r5
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d107      	bne.n	80068d8 <dir_register+0x1d8>
 80068c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ca:	3b01      	subs	r3, #1
 80068cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1c1      	bne.n	8006858 <dir_register+0x158>
 80068d4:	e000      	b.n	80068d8 <dir_register+0x1d8>
				if (res != FR_OK) break;
 80068d6:	46c0      	nop			@ (mov r8, r8)
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80068d8:	212f      	movs	r1, #47	@ 0x2f
 80068da:	187b      	adds	r3, r7, r1
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d13e      	bne.n	8006960 <dir_register+0x260>
		res = move_window(dp->fs, dp->sect);
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	2380      	movs	r3, #128	@ 0x80
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	58d0      	ldr	r0, [r2, r3]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	2384      	movs	r3, #132	@ 0x84
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	58d3      	ldr	r3, [r2, r3]
 80068f2:	000d      	movs	r5, r1
 80068f4:	187c      	adds	r4, r7, r1
 80068f6:	0019      	movs	r1, r3
 80068f8:	f7fe fbe8 	bl	80050cc <move_window>
 80068fc:	0003      	movs	r3, r0
 80068fe:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8006900:	197b      	adds	r3, r7, r5
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d12b      	bne.n	8006960 <dir_register+0x260>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	2385      	movs	r3, #133	@ 0x85
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	58d3      	ldr	r3, [r2, r3]
 8006910:	2220      	movs	r2, #32
 8006912:	2100      	movs	r1, #0
 8006914:	0018      	movs	r0, r3
 8006916:	f7fe f96a 	bl	8004bee <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	2385      	movs	r3, #133	@ 0x85
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	58d0      	ldr	r0, [r2, r3]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	2386      	movs	r3, #134	@ 0x86
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	58d3      	ldr	r3, [r2, r3]
 800692a:	220b      	movs	r2, #11
 800692c:	0019      	movs	r1, r3
 800692e:	f7fe f941 	bl	8004bb4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	2386      	movs	r3, #134	@ 0x86
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	58d3      	ldr	r3, [r2, r3]
 800693a:	330b      	adds	r3, #11
 800693c:	781a      	ldrb	r2, [r3, #0]
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	2385      	movs	r3, #133	@ 0x85
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	58cb      	ldr	r3, [r1, r3]
 8006946:	330c      	adds	r3, #12
 8006948:	2118      	movs	r1, #24
 800694a:	400a      	ands	r2, r1
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	2380      	movs	r3, #128	@ 0x80
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	58d2      	ldr	r2, [r2, r3]
 8006958:	2381      	movs	r3, #129	@ 0x81
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	2101      	movs	r1, #1
 800695e:	54d1      	strb	r1, [r2, r3]
		}
	}

	return res;
 8006960:	232f      	movs	r3, #47	@ 0x2f
 8006962:	18fb      	adds	r3, r7, r3
 8006964:	781b      	ldrb	r3, [r3, #0]
}
 8006966:	0018      	movs	r0, r3
 8006968:	46bd      	mov	sp, r7
 800696a:	b00c      	add	sp, #48	@ 0x30
 800696c:	bdb0      	pop	{r4, r5, r7, pc}
 800696e:	46c0      	nop			@ (mov r8, r8)
 8006970:	00000206 	.word	0x00000206

08006974 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006974:	b5b0      	push	{r4, r5, r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	3309      	adds	r3, #9
 8006982:	61bb      	str	r3, [r7, #24]
	if (dp->sect) {		/* Get SFN */
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	2384      	movs	r3, #132	@ 0x84
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	58d3      	ldr	r3, [r2, r3]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d100      	bne.n	8006992 <get_fileinfo+0x1e>
 8006990:	e081      	b.n	8006a96 <get_fileinfo+0x122>
		dir = dp->dir;
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	2385      	movs	r3, #133	@ 0x85
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	58d3      	ldr	r3, [r2, r3]
 800699a:	60fb      	str	r3, [r7, #12]
		i = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	61fb      	str	r3, [r7, #28]
		while (i < 11) {		/* Copy name body and extension */
 80069a0:	e040      	b.n	8006a24 <get_fileinfo+0xb0>
			c = (TCHAR)dir[i++];
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	61fa      	str	r2, [r7, #28]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	18d2      	adds	r2, r2, r3
 80069ac:	2117      	movs	r1, #23
 80069ae:	187b      	adds	r3, r7, r1
 80069b0:	7812      	ldrb	r2, [r2, #0]
 80069b2:	701a      	strb	r2, [r3, #0]
			if (c == ' ') continue;				/* Skip padding spaces */
 80069b4:	000a      	movs	r2, r1
 80069b6:	18bb      	adds	r3, r7, r2
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b20      	cmp	r3, #32
 80069bc:	d031      	beq.n	8006a22 <get_fileinfo+0xae>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80069be:	18bb      	adds	r3, r7, r2
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	d102      	bne.n	80069cc <get_fileinfo+0x58>
 80069c6:	18bb      	adds	r3, r7, r2
 80069c8:	22e5      	movs	r2, #229	@ 0xe5
 80069ca:	701a      	strb	r2, [r3, #0]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	2b09      	cmp	r3, #9
 80069d0:	d104      	bne.n	80069dc <get_fileinfo+0x68>
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	61ba      	str	r2, [r7, #24]
 80069d8:	222e      	movs	r2, #46	@ 0x2e
 80069da:	701a      	strb	r2, [r3, #0]
#if _USE_LFN
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 80069dc:	2217      	movs	r2, #23
 80069de:	18bb      	adds	r3, r7, r2
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	2b40      	cmp	r3, #64	@ 0x40
 80069e4:	d915      	bls.n	8006a12 <get_fileinfo+0x9e>
 80069e6:	18bb      	adds	r3, r7, r2
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b5a      	cmp	r3, #90	@ 0x5a
 80069ec:	d811      	bhi.n	8006a12 <get_fileinfo+0x9e>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	330c      	adds	r3, #12
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	001a      	movs	r2, r3
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d901      	bls.n	8006a00 <get_fileinfo+0x8c>
 80069fc:	2310      	movs	r3, #16
 80069fe:	e000      	b.n	8006a02 <get_fileinfo+0x8e>
 8006a00:	2308      	movs	r3, #8
 8006a02:	4013      	ands	r3, r2
 8006a04:	d005      	beq.n	8006a12 <get_fileinfo+0x9e>
				c += 0x20;			/* To lower */
 8006a06:	2217      	movs	r2, #23
 8006a08:	18bb      	adds	r3, r7, r2
 8006a0a:	18ba      	adds	r2, r7, r2
 8006a0c:	7812      	ldrb	r2, [r2, #0]
 8006a0e:	3220      	adds	r2, #32
 8006a10:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	61ba      	str	r2, [r7, #24]
 8006a18:	2217      	movs	r2, #23
 8006a1a:	18ba      	adds	r2, r7, r2
 8006a1c:	7812      	ldrb	r2, [r2, #0]
 8006a1e:	701a      	strb	r2, [r3, #0]
 8006a20:	e000      	b.n	8006a24 <get_fileinfo+0xb0>
			if (c == ' ') continue;				/* Skip padding spaces */
 8006a22:	46c0      	nop			@ (mov r8, r8)
		while (i < 11) {		/* Copy name body and extension */
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	2b0a      	cmp	r3, #10
 8006a28:	d9bb      	bls.n	80069a2 <get_fileinfo+0x2e>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	7ada      	ldrb	r2, [r3, #11]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	331f      	adds	r3, #31
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	061a      	lsls	r2, r3, #24
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	331e      	adds	r3, #30
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	041b      	lsls	r3, r3, #16
 8006a42:	431a      	orrs	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	331d      	adds	r3, #29
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	021b      	lsls	r3, r3, #8
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	321c      	adds	r2, #28
 8006a52:	7812      	ldrb	r2, [r2, #0]
 8006a54:	431a      	orrs	r2, r3
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3319      	adds	r3, #25
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	b21b      	sxth	r3, r3
 8006a62:	021b      	lsls	r3, r3, #8
 8006a64:	b21a      	sxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3318      	adds	r3, #24
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	b21b      	sxth	r3, r3
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	b21b      	sxth	r3, r3
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3317      	adds	r3, #23
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	b21b      	sxth	r3, r3
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	b21a      	sxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	3316      	adds	r3, #22
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	b21b      	sxth	r3, r3
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	b21b      	sxth	r3, r3
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname) {
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d04f      	beq.n	8006b44 <get_fileinfo+0x1d0>
		i = 0; p = fno->lfname;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	61bb      	str	r3, [r7, #24]
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	2384      	movs	r3, #132	@ 0x84
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	58d3      	ldr	r3, [r2, r3]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d03f      	beq.n	8006b3a <get_fileinfo+0x1c6>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d03b      	beq.n	8006b3a <get_fileinfo+0x1c6>
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	2389      	movs	r3, #137	@ 0x89
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	5ad3      	ldrh	r3, [r2, r3]
 8006aca:	4a20      	ldr	r2, [pc, #128]	@ (8006b4c <get_fileinfo+0x1d8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d034      	beq.n	8006b3a <get_fileinfo+0x1c6>
			lfn = dp->lfn;
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	2388      	movs	r3, #136	@ 0x88
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	58d3      	ldr	r3, [r2, r3]
 8006ad8:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8006ada:	e023      	b.n	8006b24 <get_fileinfo+0x1b0>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8006adc:	250a      	movs	r5, #10
 8006ade:	197c      	adds	r4, r7, r5
 8006ae0:	197b      	adds	r3, r7, r5
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	f002 fc4c 	bl	8009384 <ff_convert>
 8006aec:	0003      	movs	r3, r0
 8006aee:	8023      	strh	r3, [r4, #0]
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 8006af0:	197b      	adds	r3, r7, r5
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <get_fileinfo+0x18a>
 8006af8:	2300      	movs	r3, #0
 8006afa:	61fb      	str	r3, [r7, #28]
 8006afc:	e01d      	b.n	8006b3a <get_fileinfo+0x1c6>
				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					p[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	3b01      	subs	r3, #1
 8006b04:	69fa      	ldr	r2, [r7, #28]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d302      	bcc.n	8006b10 <get_fileinfo+0x19c>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	e014      	b.n	8006b3a <get_fileinfo+0x1c6>
				p[i++] = (TCHAR)w;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	61fa      	str	r2, [r7, #28]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	18d3      	adds	r3, r2, r3
 8006b1a:	220a      	movs	r2, #10
 8006b1c:	18ba      	adds	r2, r7, r2
 8006b1e:	8812      	ldrh	r2, [r2, #0]
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	1c9a      	adds	r2, r3, #2
 8006b28:	613a      	str	r2, [r7, #16]
 8006b2a:	210a      	movs	r1, #10
 8006b2c:	187a      	adds	r2, r7, r1
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	8013      	strh	r3, [r2, #0]
 8006b32:	187b      	adds	r3, r7, r1
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1d0      	bne.n	8006adc <get_fileinfo+0x168>
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	18d3      	adds	r3, r2, r3
 8006b40:	2200      	movs	r2, #0
 8006b42:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 8006b44:	46c0      	nop			@ (mov r8, r8)
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b008      	add	sp, #32
 8006b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8006b4c:	0000ffff 	.word	0x0000ffff

08006b50 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006b50:	b5b0      	push	{r4, r5, r7, lr}
 8006b52:	b08a      	sub	sp, #40	@ 0x28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	e002      	b.n	8006b68 <create_name+0x18>
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	3301      	adds	r3, #1
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006b6e:	d0f8      	beq.n	8006b62 <create_name+0x12>
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b76:	d0f4      	beq.n	8006b62 <create_name+0x12>
	lfn = dp->lfn;
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	2388      	movs	r3, #136	@ 0x88
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	58d3      	ldr	r3, [r2, r3]
 8006b80:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	61ba      	str	r2, [r7, #24]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	18d3      	adds	r3, r2, r3
 8006b94:	781a      	ldrb	r2, [r3, #0]
 8006b96:	2124      	movs	r1, #36	@ 0x24
 8006b98:	187b      	adds	r3, r7, r1
 8006b9a:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006b9c:	000a      	movs	r2, r1
 8006b9e:	18bb      	adds	r3, r7, r2
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	2b1f      	cmp	r3, #31
 8006ba4:	d93d      	bls.n	8006c22 <create_name+0xd2>
 8006ba6:	18bb      	adds	r3, r7, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	2b2f      	cmp	r3, #47	@ 0x2f
 8006bac:	d039      	beq.n	8006c22 <create_name+0xd2>
 8006bae:	18bb      	adds	r3, r7, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	2b5c      	cmp	r3, #92	@ 0x5c
 8006bb4:	d035      	beq.n	8006c22 <create_name+0xd2>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2bfe      	cmp	r3, #254	@ 0xfe
 8006bba:	d901      	bls.n	8006bc0 <create_name+0x70>
			return FR_INVALID_NAME;
 8006bbc:	2306      	movs	r3, #6
 8006bbe:	e1cb      	b.n	8006f58 <create_name+0x408>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006bc0:	2524      	movs	r5, #36	@ 0x24
 8006bc2:	197b      	adds	r3, r7, r5
 8006bc4:	197a      	adds	r2, r7, r5
 8006bc6:	8812      	ldrh	r2, [r2, #0]
 8006bc8:	21ff      	movs	r1, #255	@ 0xff
 8006bca:	400a      	ands	r2, r1
 8006bcc:	801a      	strh	r2, [r3, #0]
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006bce:	197c      	adds	r4, r7, r5
 8006bd0:	197b      	adds	r3, r7, r5
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f002 fbd4 	bl	8009384 <ff_convert>
 8006bdc:	0003      	movs	r3, r0
 8006bde:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006be0:	197b      	adds	r3, r7, r5
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <create_name+0x9c>
 8006be8:	2306      	movs	r3, #6
 8006bea:	e1b5      	b.n	8006f58 <create_name+0x408>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006bec:	2224      	movs	r2, #36	@ 0x24
 8006bee:	18bb      	adds	r3, r7, r2
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bf4:	d80a      	bhi.n	8006c0c <create_name+0xbc>
 8006bf6:	18bb      	adds	r3, r7, r2
 8006bf8:	881a      	ldrh	r2, [r3, #0]
 8006bfa:	4ba8      	ldr	r3, [pc, #672]	@ (8006e9c <create_name+0x34c>)
 8006bfc:	0011      	movs	r1, r2
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f7fe f833 	bl	8004c6a <chk_chr>
 8006c04:	1e03      	subs	r3, r0, #0
 8006c06:	d001      	beq.n	8006c0c <create_name+0xbc>
			return FR_INVALID_NAME;
 8006c08:	2306      	movs	r3, #6
 8006c0a:	e1a5      	b.n	8006f58 <create_name+0x408>
		lfn[di++] = w;					/* Store the Unicode character */
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	617a      	str	r2, [r7, #20]
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	18d3      	adds	r3, r2, r3
 8006c18:	2224      	movs	r2, #36	@ 0x24
 8006c1a:	18ba      	adds	r2, r7, r2
 8006c1c:	8812      	ldrh	r2, [r2, #0]
 8006c1e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006c20:	e7b3      	b.n	8006b8a <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	18d2      	adds	r2, r2, r3
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006c2c:	2324      	movs	r3, #36	@ 0x24
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	2b1f      	cmp	r3, #31
 8006c34:	d801      	bhi.n	8006c3a <create_name+0xea>
 8006c36:	2204      	movs	r2, #4
 8006c38:	e000      	b.n	8006c3c <create_name+0xec>
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2327      	movs	r3, #39	@ 0x27
 8006c3e:	18fb      	adds	r3, r7, r3
 8006c40:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006c42:	e016      	b.n	8006c72 <create_name+0x122>
		w = lfn[di - 1];
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	4a96      	ldr	r2, [pc, #600]	@ (8006ea0 <create_name+0x350>)
 8006c48:	4694      	mov	ip, r2
 8006c4a:	4463      	add	r3, ip
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	18d2      	adds	r2, r2, r3
 8006c52:	2124      	movs	r1, #36	@ 0x24
 8006c54:	187b      	adds	r3, r7, r1
 8006c56:	8812      	ldrh	r2, [r2, #0]
 8006c58:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 8006c5a:	000a      	movs	r2, r1
 8006c5c:	18bb      	adds	r3, r7, r2
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	2b20      	cmp	r3, #32
 8006c62:	d003      	beq.n	8006c6c <create_name+0x11c>
 8006c64:	18bb      	adds	r3, r7, r2
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c6a:	d106      	bne.n	8006c7a <create_name+0x12a>
		di--;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e5      	bne.n	8006c44 <create_name+0xf4>
 8006c78:	e000      	b.n	8006c7c <create_name+0x12c>
		if (w != ' ' && w != '.') break;
 8006c7a:	46c0      	nop			@ (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <create_name+0x136>
 8006c82:	2306      	movs	r3, #6
 8006c84:	e168      	b.n	8006f58 <create_name+0x408>

	lfn[di] = 0;						/* LFN is created */
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	18d3      	adds	r3, r2, r3
 8006c8e:	2200      	movs	r2, #0
 8006c90:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	2386      	movs	r3, #134	@ 0x86
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	58d3      	ldr	r3, [r2, r3]
 8006c9a:	220b      	movs	r2, #11
 8006c9c:	2120      	movs	r1, #32
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f7fd ffa5 	bl	8004bee <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	e002      	b.n	8006cb0 <create_name+0x160>
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	3301      	adds	r3, #1
 8006cae:	61bb      	str	r3, [r7, #24]
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	18d3      	adds	r3, r2, r3
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d0f5      	beq.n	8006caa <create_name+0x15a>
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	18d3      	adds	r3, r2, r3
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cca:	d0ee      	beq.n	8006caa <create_name+0x15a>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <create_name+0x198>
 8006cd2:	2227      	movs	r2, #39	@ 0x27
 8006cd4:	18bb      	adds	r3, r7, r2
 8006cd6:	18ba      	adds	r2, r7, r2
 8006cd8:	7812      	ldrb	r2, [r2, #0]
 8006cda:	2103      	movs	r1, #3
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006ce0:	e002      	b.n	8006ce8 <create_name+0x198>
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	617b      	str	r3, [r7, #20]
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d009      	beq.n	8006d02 <create_name+0x1b2>
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	4a6b      	ldr	r2, [pc, #428]	@ (8006ea0 <create_name+0x350>)
 8006cf2:	4694      	mov	ip, r2
 8006cf4:	4463      	add	r3, ip
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	18d3      	adds	r3, r2, r3
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d00:	d1ef      	bne.n	8006ce2 <create_name+0x192>

	b = i = 0; ni = 8;
 8006d02:	2300      	movs	r3, #0
 8006d04:	623b      	str	r3, [r7, #32]
 8006d06:	2326      	movs	r3, #38	@ 0x26
 8006d08:	18fb      	adds	r3, r7, r3
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	2308      	movs	r3, #8
 8006d10:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	61ba      	str	r2, [r7, #24]
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	18d2      	adds	r2, r2, r3
 8006d1e:	2124      	movs	r1, #36	@ 0x24
 8006d20:	187b      	adds	r3, r7, r1
 8006d22:	8812      	ldrh	r2, [r2, #0]
 8006d24:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 8006d26:	000a      	movs	r2, r1
 8006d28:	18bb      	adds	r3, r7, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d100      	bne.n	8006d32 <create_name+0x1e2>
 8006d30:	e0b1      	b.n	8006e96 <create_name+0x346>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006d32:	18bb      	adds	r3, r7, r2
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d007      	beq.n	8006d4a <create_name+0x1fa>
 8006d3a:	18bb      	adds	r3, r7, r2
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d40:	d10b      	bne.n	8006d5a <create_name+0x20a>
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d007      	beq.n	8006d5a <create_name+0x20a>
			cf |= NS_LOSS | NS_LFN; continue;
 8006d4a:	2227      	movs	r2, #39	@ 0x27
 8006d4c:	18bb      	adds	r3, r7, r2
 8006d4e:	18ba      	adds	r2, r7, r2
 8006d50:	7812      	ldrb	r2, [r2, #0]
 8006d52:	2103      	movs	r1, #3
 8006d54:	430a      	orrs	r2, r1
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	e09c      	b.n	8006e94 <create_name+0x344>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006d5a:	6a3a      	ldr	r2, [r7, #32]
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d203      	bcs.n	8006d6a <create_name+0x21a>
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d127      	bne.n	8006dba <create_name+0x26a>
			if (ni == 11) {				/* Long extension */
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	2b0b      	cmp	r3, #11
 8006d6e:	d107      	bne.n	8006d80 <create_name+0x230>
				cf |= NS_LOSS | NS_LFN; break;
 8006d70:	2227      	movs	r2, #39	@ 0x27
 8006d72:	18bb      	adds	r3, r7, r2
 8006d74:	18ba      	adds	r2, r7, r2
 8006d76:	7812      	ldrb	r2, [r2, #0]
 8006d78:	2103      	movs	r1, #3
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e096      	b.n	8006eae <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d006      	beq.n	8006d96 <create_name+0x246>
 8006d88:	2227      	movs	r2, #39	@ 0x27
 8006d8a:	18bb      	adds	r3, r7, r2
 8006d8c:	18ba      	adds	r2, r7, r2
 8006d8e:	7812      	ldrb	r2, [r2, #0]
 8006d90:	2103      	movs	r1, #3
 8006d92:	430a      	orrs	r2, r1
 8006d94:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d900      	bls.n	8006da0 <create_name+0x250>
 8006d9e:	e085      	b.n	8006eac <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	61bb      	str	r3, [r7, #24]
 8006da4:	2308      	movs	r3, #8
 8006da6:	623b      	str	r3, [r7, #32]
 8006da8:	230b      	movs	r3, #11
 8006daa:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006dac:	2226      	movs	r2, #38	@ 0x26
 8006dae:	18bb      	adds	r3, r7, r2
 8006db0:	18ba      	adds	r2, r7, r2
 8006db2:	7812      	ldrb	r2, [r2, #0]
 8006db4:	0092      	lsls	r2, r2, #2
 8006db6:	701a      	strb	r2, [r3, #0]
 8006db8:	e06c      	b.n	8006e94 <create_name+0x344>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006dba:	2524      	movs	r5, #36	@ 0x24
 8006dbc:	197b      	adds	r3, r7, r5
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dc2:	d91a      	bls.n	8006dfa <create_name+0x2aa>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006dc4:	197c      	adds	r4, r7, r5
 8006dc6:	197b      	adds	r3, r7, r5
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	2100      	movs	r1, #0
 8006dcc:	0018      	movs	r0, r3
 8006dce:	f002 fad9 	bl	8009384 <ff_convert>
 8006dd2:	0003      	movs	r3, r0
 8006dd4:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006dd6:	197b      	adds	r3, r7, r5
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d006      	beq.n	8006dec <create_name+0x29c>
 8006dde:	197b      	adds	r3, r7, r5
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	3b80      	subs	r3, #128	@ 0x80
 8006de4:	4a2f      	ldr	r2, [pc, #188]	@ (8006ea4 <create_name+0x354>)
 8006de6:	5cd2      	ldrb	r2, [r2, r3]
 8006de8:	197b      	adds	r3, r7, r5
 8006dea:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006dec:	2227      	movs	r2, #39	@ 0x27
 8006dee:	18bb      	adds	r3, r7, r2
 8006df0:	18ba      	adds	r2, r7, r2
 8006df2:	7812      	ldrb	r2, [r2, #0]
 8006df4:	2102      	movs	r1, #2
 8006df6:	430a      	orrs	r2, r1
 8006df8:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006dfa:	2224      	movs	r2, #36	@ 0x24
 8006dfc:	18bb      	adds	r3, r7, r2
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d008      	beq.n	8006e16 <create_name+0x2c6>
 8006e04:	18bb      	adds	r3, r7, r2
 8006e06:	881a      	ldrh	r2, [r3, #0]
 8006e08:	4b27      	ldr	r3, [pc, #156]	@ (8006ea8 <create_name+0x358>)
 8006e0a:	0011      	movs	r1, r2
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f7fd ff2c 	bl	8004c6a <chk_chr>
 8006e12:	1e03      	subs	r3, r0, #0
 8006e14:	d00b      	beq.n	8006e2e <create_name+0x2de>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006e16:	2324      	movs	r3, #36	@ 0x24
 8006e18:	18fb      	adds	r3, r7, r3
 8006e1a:	225f      	movs	r2, #95	@ 0x5f
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	2227      	movs	r2, #39	@ 0x27
 8006e20:	18bb      	adds	r3, r7, r2
 8006e22:	18ba      	adds	r2, r7, r2
 8006e24:	7812      	ldrb	r2, [r2, #0]
 8006e26:	2103      	movs	r1, #3
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	e025      	b.n	8006e7a <create_name+0x32a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006e2e:	2224      	movs	r2, #36	@ 0x24
 8006e30:	18bb      	adds	r3, r7, r2
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	2b40      	cmp	r3, #64	@ 0x40
 8006e36:	d90b      	bls.n	8006e50 <create_name+0x300>
 8006e38:	18bb      	adds	r3, r7, r2
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	2b5a      	cmp	r3, #90	@ 0x5a
 8006e3e:	d807      	bhi.n	8006e50 <create_name+0x300>
					b |= 2;
 8006e40:	2226      	movs	r2, #38	@ 0x26
 8006e42:	18bb      	adds	r3, r7, r2
 8006e44:	18ba      	adds	r2, r7, r2
 8006e46:	7812      	ldrb	r2, [r2, #0]
 8006e48:	2102      	movs	r1, #2
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	e014      	b.n	8006e7a <create_name+0x32a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006e50:	2024      	movs	r0, #36	@ 0x24
 8006e52:	183b      	adds	r3, r7, r0
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	2b60      	cmp	r3, #96	@ 0x60
 8006e58:	d90f      	bls.n	8006e7a <create_name+0x32a>
 8006e5a:	183b      	adds	r3, r7, r0
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	2b7a      	cmp	r3, #122	@ 0x7a
 8006e60:	d80b      	bhi.n	8006e7a <create_name+0x32a>
						b |= 1; w -= 0x20;
 8006e62:	2226      	movs	r2, #38	@ 0x26
 8006e64:	18bb      	adds	r3, r7, r2
 8006e66:	18ba      	adds	r2, r7, r2
 8006e68:	7812      	ldrb	r2, [r2, #0]
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	183b      	adds	r3, r7, r0
 8006e72:	183a      	adds	r2, r7, r0
 8006e74:	8812      	ldrh	r2, [r2, #0]
 8006e76:	3a20      	subs	r2, #32
 8006e78:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	2386      	movs	r3, #134	@ 0x86
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	58d2      	ldr	r2, [r2, r3]
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	1c59      	adds	r1, r3, #1
 8006e86:	6239      	str	r1, [r7, #32]
 8006e88:	18d3      	adds	r3, r2, r3
 8006e8a:	2224      	movs	r2, #36	@ 0x24
 8006e8c:	18ba      	adds	r2, r7, r2
 8006e8e:	8812      	ldrh	r2, [r2, #0]
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006e94:	e73d      	b.n	8006d12 <create_name+0x1c2>
		if (!w) break;					/* Break on end of the LFN */
 8006e96:	46c0      	nop			@ (mov r8, r8)
 8006e98:	e009      	b.n	8006eae <create_name+0x35e>
 8006e9a:	46c0      	nop			@ (mov r8, r8)
 8006e9c:	0800ad40 	.word	0x0800ad40
 8006ea0:	7fffffff 	.word	0x7fffffff
 8006ea4:	0800ade4 	.word	0x0800ade4
 8006ea8:	0800ad4c 	.word	0x0800ad4c
			if (si > di) break;			/* No extension */
 8006eac:	46c0      	nop			@ (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	2386      	movs	r3, #134	@ 0x86
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	58d3      	ldr	r3, [r2, r3]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2be5      	cmp	r3, #229	@ 0xe5
 8006eba:	d105      	bne.n	8006ec8 <create_name+0x378>
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	2386      	movs	r3, #134	@ 0x86
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	58d3      	ldr	r3, [r2, r3]
 8006ec4:	2205      	movs	r2, #5
 8006ec6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d105      	bne.n	8006eda <create_name+0x38a>
 8006ece:	2226      	movs	r2, #38	@ 0x26
 8006ed0:	18bb      	adds	r3, r7, r2
 8006ed2:	18ba      	adds	r2, r7, r2
 8006ed4:	7812      	ldrb	r2, [r2, #0]
 8006ed6:	0092      	lsls	r2, r2, #2
 8006ed8:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006eda:	2126      	movs	r1, #38	@ 0x26
 8006edc:	187b      	adds	r3, r7, r1
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	220c      	movs	r2, #12
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	2b0c      	cmp	r3, #12
 8006ee6:	d005      	beq.n	8006ef4 <create_name+0x3a4>
 8006ee8:	187b      	adds	r3, r7, r1
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2203      	movs	r2, #3
 8006eee:	4013      	ands	r3, r2
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d106      	bne.n	8006f02 <create_name+0x3b2>
		cf |= NS_LFN;
 8006ef4:	2227      	movs	r2, #39	@ 0x27
 8006ef6:	18bb      	adds	r3, r7, r2
 8006ef8:	18ba      	adds	r2, r7, r2
 8006efa:	7812      	ldrb	r2, [r2, #0]
 8006efc:	2102      	movs	r1, #2
 8006efe:	430a      	orrs	r2, r1
 8006f00:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006f02:	2127      	movs	r1, #39	@ 0x27
 8006f04:	187b      	adds	r3, r7, r1
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2202      	movs	r2, #2
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	d11a      	bne.n	8006f44 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006f0e:	2326      	movs	r3, #38	@ 0x26
 8006f10:	18fb      	adds	r3, r7, r3
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2203      	movs	r2, #3
 8006f16:	4013      	ands	r3, r2
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d105      	bne.n	8006f28 <create_name+0x3d8>
 8006f1c:	187b      	adds	r3, r7, r1
 8006f1e:	187a      	adds	r2, r7, r1
 8006f20:	7812      	ldrb	r2, [r2, #0]
 8006f22:	2110      	movs	r1, #16
 8006f24:	430a      	orrs	r2, r1
 8006f26:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006f28:	2326      	movs	r3, #38	@ 0x26
 8006f2a:	18fb      	adds	r3, r7, r3
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	220c      	movs	r2, #12
 8006f30:	4013      	ands	r3, r2
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	d106      	bne.n	8006f44 <create_name+0x3f4>
 8006f36:	2227      	movs	r2, #39	@ 0x27
 8006f38:	18bb      	adds	r3, r7, r2
 8006f3a:	18ba      	adds	r2, r7, r2
 8006f3c:	7812      	ldrb	r2, [r2, #0]
 8006f3e:	2108      	movs	r1, #8
 8006f40:	430a      	orrs	r2, r1
 8006f42:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	2386      	movs	r3, #134	@ 0x86
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	58d3      	ldr	r3, [r2, r3]
 8006f4c:	330b      	adds	r3, #11
 8006f4e:	2227      	movs	r2, #39	@ 0x27
 8006f50:	18ba      	adds	r2, r7, r2
 8006f52:	7812      	ldrb	r2, [r2, #0]
 8006f54:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006f56:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006f58:	0018      	movs	r0, r3
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	b00a      	add	sp, #40	@ 0x28
 8006f5e:	bdb0      	pop	{r4, r5, r7, pc}

08006f60 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006f60:	b5b0      	push	{r4, r5, r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	2b2f      	cmp	r3, #47	@ 0x2f
 8006f70:	d003      	beq.n	8006f7a <follow_path+0x1a>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b5c      	cmp	r3, #92	@ 0x5c
 8006f78:	d102      	bne.n	8006f80 <follow_path+0x20>
		path++;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	2382      	movs	r3, #130	@ 0x82
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	2100      	movs	r1, #0
 8006f88:	50d1      	str	r1, [r2, r3]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b1f      	cmp	r3, #31
 8006f90:	d80e      	bhi.n	8006fb0 <follow_path+0x50>
		res = dir_sdi(dp, 0);
 8006f92:	230f      	movs	r3, #15
 8006f94:	18fc      	adds	r4, r7, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2100      	movs	r1, #0
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	f7fe fd1a 	bl	80059d4 <dir_sdi>
 8006fa0:	0003      	movs	r3, r0
 8006fa2:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	2385      	movs	r3, #133	@ 0x85
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	2100      	movs	r1, #0
 8006fac:	50d1      	str	r1, [r2, r3]
 8006fae:	e058      	b.n	8007062 <follow_path+0x102>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006fb0:	250f      	movs	r5, #15
 8006fb2:	197c      	adds	r4, r7, r5
 8006fb4:	003a      	movs	r2, r7
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	0011      	movs	r1, r2
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f7ff fdc8 	bl	8006b50 <create_name>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006fc4:	197b      	adds	r3, r7, r5
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d145      	bne.n	8007058 <follow_path+0xf8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006fcc:	197c      	adds	r4, r7, r5
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f7ff f9a9 	bl	8006328 <dir_find>
 8006fd6:	0003      	movs	r3, r0
 8006fd8:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	2386      	movs	r3, #134	@ 0x86
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	58d2      	ldr	r2, [r2, r3]
 8006fe2:	210e      	movs	r1, #14
 8006fe4:	187b      	adds	r3, r7, r1
 8006fe6:	7ad2      	ldrb	r2, [r2, #11]
 8006fe8:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8006fea:	197b      	adds	r3, r7, r5
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00c      	beq.n	800700c <follow_path+0xac>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ff2:	197b      	adds	r3, r7, r5
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d130      	bne.n	800705c <follow_path+0xfc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006ffa:	187b      	adds	r3, r7, r1
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2204      	movs	r2, #4
 8007000:	4013      	ands	r3, r2
 8007002:	d12b      	bne.n	800705c <follow_path+0xfc>
 8007004:	197b      	adds	r3, r7, r5
 8007006:	2205      	movs	r2, #5
 8007008:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800700a:	e027      	b.n	800705c <follow_path+0xfc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800700c:	230e      	movs	r3, #14
 800700e:	18fb      	adds	r3, r7, r3
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2204      	movs	r2, #4
 8007014:	4013      	ands	r3, r2
 8007016:	d123      	bne.n	8007060 <follow_path+0x100>
			dir = dp->dir;						/* Follow the sub-directory */
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	2385      	movs	r3, #133	@ 0x85
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	58d3      	ldr	r3, [r2, r3]
 8007020:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	330b      	adds	r3, #11
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	001a      	movs	r2, r3
 800702a:	2310      	movs	r3, #16
 800702c:	4013      	ands	r3, r2
 800702e:	d104      	bne.n	800703a <follow_path+0xda>
				res = FR_NO_PATH; break;
 8007030:	230f      	movs	r3, #15
 8007032:	18fb      	adds	r3, r7, r3
 8007034:	2205      	movs	r2, #5
 8007036:	701a      	strb	r2, [r3, #0]
 8007038:	e013      	b.n	8007062 <follow_path+0x102>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	2380      	movs	r3, #128	@ 0x80
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	58d3      	ldr	r3, [r2, r3]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	0011      	movs	r1, r2
 8007046:	0018      	movs	r0, r3
 8007048:	f7fe feeb 	bl	8005e22 <ld_clust>
 800704c:	0001      	movs	r1, r0
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	2382      	movs	r3, #130	@ 0x82
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	50d1      	str	r1, [r2, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007056:	e7ab      	b.n	8006fb0 <follow_path+0x50>
			if (res != FR_OK) break;
 8007058:	46c0      	nop			@ (mov r8, r8)
 800705a:	e002      	b.n	8007062 <follow_path+0x102>
				break;
 800705c:	46c0      	nop			@ (mov r8, r8)
 800705e:	e000      	b.n	8007062 <follow_path+0x102>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007060:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return res;
 8007062:	230f      	movs	r3, #15
 8007064:	18fb      	adds	r3, r7, r3
 8007066:	781b      	ldrb	r3, [r3, #0]
}
 8007068:	0018      	movs	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	b004      	add	sp, #16
 800706e:	bdb0      	pop	{r4, r5, r7, pc}

08007070 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007078:	2301      	movs	r3, #1
 800707a:	425b      	negs	r3, r3
 800707c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d031      	beq.n	80070ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	e002      	b.n	8007094 <get_ldnumber+0x24>
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	3301      	adds	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b1f      	cmp	r3, #31
 800709a:	d903      	bls.n	80070a4 <get_ldnumber+0x34>
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b3a      	cmp	r3, #58	@ 0x3a
 80070a2:	d1f4      	bne.n	800708e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b3a      	cmp	r3, #58	@ 0x3a
 80070aa:	d11c      	bne.n	80070e6 <get_ldnumber+0x76>
			tp = *path;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	60fa      	str	r2, [r7, #12]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	3b30      	subs	r3, #48	@ 0x30
 80070bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b09      	cmp	r3, #9
 80070c2:	d80e      	bhi.n	80070e2 <get_ldnumber+0x72>
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d10a      	bne.n	80070e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d107      	bne.n	80070e2 <get_ldnumber+0x72>
					vol = (int)i;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	3301      	adds	r3, #1
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	e002      	b.n	80070ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80070e6:	2300      	movs	r3, #0
 80070e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80070ea:	693b      	ldr	r3, [r7, #16]
}
 80070ec:	0018      	movs	r0, r3
 80070ee:	46bd      	mov	sp, r7
 80070f0:	b006      	add	sp, #24
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	2381      	movs	r3, #129	@ 0x81
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	2100      	movs	r1, #0
 8007106:	54d1      	strb	r1, [r2, r3]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	238b      	movs	r3, #139	@ 0x8b
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	2101      	movs	r1, #1
 8007110:	4249      	negs	r1, r1
 8007112:	50d1      	str	r1, [r2, r3]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	0011      	movs	r1, r2
 800711a:	0018      	movs	r0, r3
 800711c:	f7fd ffd6 	bl	80050cc <move_window>
 8007120:	1e03      	subs	r3, r0, #0
 8007122:	d001      	beq.n	8007128 <check_fs+0x34>
		return 3;
 8007124:	2303      	movs	r3, #3
 8007126:	e04c      	b.n	80071c2 <check_fs+0xce>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	33ff      	adds	r3, #255	@ 0xff
 800712c:	33ff      	adds	r3, #255	@ 0xff
 800712e:	3301      	adds	r3, #1
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	b21b      	sxth	r3, r3
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	b21a      	sxth	r2, r3
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	23ff      	movs	r3, #255	@ 0xff
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	5ccb      	ldrb	r3, [r1, r3]
 8007140:	b21b      	sxth	r3, r3
 8007142:	4313      	orrs	r3, r2
 8007144:	b21b      	sxth	r3, r3
 8007146:	4a21      	ldr	r2, [pc, #132]	@ (80071cc <check_fs+0xd8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d001      	beq.n	8007150 <check_fs+0x5c>
		return 2;
 800714c:	2302      	movs	r3, #2
 800714e:	e038      	b.n	80071c2 <check_fs+0xce>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3336      	adds	r3, #54	@ 0x36
 8007154:	3303      	adds	r3, #3
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	061a      	lsls	r2, r3, #24
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3336      	adds	r3, #54	@ 0x36
 800715e:	3302      	adds	r3, #2
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	041b      	lsls	r3, r3, #16
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3336      	adds	r3, #54	@ 0x36
 800716a:	3301      	adds	r3, #1
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	021b      	lsls	r3, r3, #8
 8007170:	4313      	orrs	r3, r2
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	2136      	movs	r1, #54	@ 0x36
 8007176:	5c52      	ldrb	r2, [r2, r1]
 8007178:	4313      	orrs	r3, r2
 800717a:	021b      	lsls	r3, r3, #8
 800717c:	0a1b      	lsrs	r3, r3, #8
 800717e:	4a14      	ldr	r2, [pc, #80]	@ (80071d0 <check_fs+0xdc>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d101      	bne.n	8007188 <check_fs+0x94>
		return 0;
 8007184:	2300      	movs	r3, #0
 8007186:	e01c      	b.n	80071c2 <check_fs+0xce>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3352      	adds	r3, #82	@ 0x52
 800718c:	3303      	adds	r3, #3
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	061a      	lsls	r2, r3, #24
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	3352      	adds	r3, #82	@ 0x52
 8007196:	3302      	adds	r3, #2
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	041b      	lsls	r3, r3, #16
 800719c:	431a      	orrs	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3352      	adds	r3, #82	@ 0x52
 80071a2:	3301      	adds	r3, #1
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	4313      	orrs	r3, r2
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	2152      	movs	r1, #82	@ 0x52
 80071ae:	5c52      	ldrb	r2, [r2, r1]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	021b      	lsls	r3, r3, #8
 80071b4:	0a1b      	lsrs	r3, r3, #8
 80071b6:	4a06      	ldr	r2, [pc, #24]	@ (80071d0 <check_fs+0xdc>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d101      	bne.n	80071c0 <check_fs+0xcc>
		return 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	e000      	b.n	80071c2 <check_fs+0xce>

	return 1;
 80071c0:	2301      	movs	r3, #1
}
 80071c2:	0018      	movs	r0, r3
 80071c4:	46bd      	mov	sp, r7
 80071c6:	b002      	add	sp, #8
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	46c0      	nop			@ (mov r8, r8)
 80071cc:	ffffaa55 	.word	0xffffaa55
 80071d0:	00544146 	.word	0x00544146

080071d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80071d4:	b5b0      	push	{r4, r5, r7, lr}
 80071d6:	b096      	sub	sp, #88	@ 0x58
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	1dfb      	adds	r3, r7, #7
 80071e0:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	0018      	movs	r0, r3
 80071ec:	f7ff ff40 	bl	8007070 <get_ldnumber>
 80071f0:	0003      	movs	r3, r0
 80071f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80071f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	da01      	bge.n	80071fe <find_volume+0x2a>
 80071fa:	230b      	movs	r3, #11
 80071fc:	e2f8      	b.n	80077f0 <find_volume+0x61c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80071fe:	4bd1      	ldr	r3, [pc, #836]	@ (8007544 <find_volume+0x370>)
 8007200:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007202:	0092      	lsls	r2, r2, #2
 8007204:	58d3      	ldr	r3, [r2, r3]
 8007206:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <find_volume+0x3e>
 800720e:	230c      	movs	r3, #12
 8007210:	e2ee      	b.n	80077f0 <find_volume+0x61c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007216:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007218:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800721a:	2380      	movs	r3, #128	@ 0x80
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	5cd3      	ldrb	r3, [r2, r3]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d01c      	beq.n	800725e <find_volume+0x8a>
		stat = disk_status(fs->drv);
 8007224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007226:	4ac8      	ldr	r2, [pc, #800]	@ (8007548 <find_volume+0x374>)
 8007228:	5c9b      	ldrb	r3, [r3, r2]
 800722a:	2537      	movs	r5, #55	@ 0x37
 800722c:	197c      	adds	r4, r7, r5
 800722e:	0018      	movs	r0, r3
 8007230:	f7fd fbf6 	bl	8004a20 <disk_status>
 8007234:	0003      	movs	r3, r0
 8007236:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007238:	0029      	movs	r1, r5
 800723a:	187b      	adds	r3, r7, r1
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2201      	movs	r2, #1
 8007240:	4013      	ands	r3, r2
 8007242:	d10c      	bne.n	800725e <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007244:	1dfb      	adds	r3, r7, #7
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d006      	beq.n	800725a <find_volume+0x86>
 800724c:	187b      	adds	r3, r7, r1
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2204      	movs	r2, #4
 8007252:	4013      	ands	r3, r2
 8007254:	d001      	beq.n	800725a <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 8007256:	230a      	movs	r3, #10
 8007258:	e2ca      	b.n	80077f0 <find_volume+0x61c>
			return FR_OK;				/* The file system object is valid */
 800725a:	2300      	movs	r3, #0
 800725c:	e2c8      	b.n	80077f0 <find_volume+0x61c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800725e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007260:	2380      	movs	r3, #128	@ 0x80
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	2100      	movs	r1, #0
 8007266:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800726a:	b2d9      	uxtb	r1, r3
 800726c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726e:	4ab6      	ldr	r2, [pc, #728]	@ (8007548 <find_volume+0x374>)
 8007270:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007274:	4ab4      	ldr	r2, [pc, #720]	@ (8007548 <find_volume+0x374>)
 8007276:	5c9b      	ldrb	r3, [r3, r2]
 8007278:	2537      	movs	r5, #55	@ 0x37
 800727a:	197c      	adds	r4, r7, r5
 800727c:	0018      	movs	r0, r3
 800727e:	f7fd fbf1 	bl	8004a64 <disk_initialize>
 8007282:	0003      	movs	r3, r0
 8007284:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007286:	197b      	adds	r3, r7, r5
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2201      	movs	r2, #1
 800728c:	4013      	ands	r3, r2
 800728e:	d001      	beq.n	8007294 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007290:	2303      	movs	r3, #3
 8007292:	e2ad      	b.n	80077f0 <find_volume+0x61c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007294:	1dfb      	adds	r3, r7, #7
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d007      	beq.n	80072ac <find_volume+0xd8>
 800729c:	2337      	movs	r3, #55	@ 0x37
 800729e:	18fb      	adds	r3, r7, r3
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	2204      	movs	r2, #4
 80072a4:	4013      	ands	r3, r2
 80072a6:	d001      	beq.n	80072ac <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 80072a8:	230a      	movs	r3, #10
 80072aa:	e2a1      	b.n	80077f0 <find_volume+0x61c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80072b0:	2557      	movs	r5, #87	@ 0x57
 80072b2:	197c      	adds	r4, r7, r5
 80072b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80072b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b8:	0011      	movs	r1, r2
 80072ba:	0018      	movs	r0, r3
 80072bc:	f7ff ff1a 	bl	80070f4 <check_fs>
 80072c0:	0003      	movs	r3, r0
 80072c2:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80072c4:	197b      	adds	r3, r7, r5
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d155      	bne.n	8007378 <find_volume+0x1a4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80072cc:	2300      	movs	r3, #0
 80072ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80072d0:	e027      	b.n	8007322 <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80072d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072d6:	011b      	lsls	r3, r3, #4
 80072d8:	33bf      	adds	r3, #191	@ 0xbf
 80072da:	33ff      	adds	r3, #255	@ 0xff
 80072dc:	18d3      	adds	r3, r2, r3
 80072de:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	3304      	adds	r3, #4
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d012      	beq.n	8007310 <find_volume+0x13c>
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	330b      	adds	r3, #11
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	061a      	lsls	r2, r3, #24
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	330a      	adds	r3, #10
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	041b      	lsls	r3, r3, #16
 80072fa:	431a      	orrs	r2, r3
 80072fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fe:	3309      	adds	r3, #9
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	021b      	lsls	r3, r3, #8
 8007304:	4313      	orrs	r3, r2
 8007306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007308:	3208      	adds	r2, #8
 800730a:	7812      	ldrb	r2, [r2, #0]
 800730c:	4313      	orrs	r3, r2
 800730e:	e000      	b.n	8007312 <find_volume+0x13e>
 8007310:	2300      	movs	r3, #0
 8007312:	2214      	movs	r2, #20
 8007314:	18ba      	adds	r2, r7, r2
 8007316:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007318:	0089      	lsls	r1, r1, #2
 800731a:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800731c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800731e:	3301      	adds	r3, #1
 8007320:	643b      	str	r3, [r7, #64]	@ 0x40
 8007322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007324:	2b03      	cmp	r3, #3
 8007326:	d9d4      	bls.n	80072d2 <find_volume+0xfe>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007328:	2300      	movs	r3, #0
 800732a:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800732c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <find_volume+0x164>
 8007332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007334:	3b01      	subs	r3, #1
 8007336:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007338:	2314      	movs	r3, #20
 800733a:	18fb      	adds	r3, r7, r3
 800733c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800733e:	0092      	lsls	r2, r2, #2
 8007340:	58d3      	ldr	r3, [r2, r3]
 8007342:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007346:	2b00      	cmp	r3, #0
 8007348:	d008      	beq.n	800735c <find_volume+0x188>
 800734a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800734c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734e:	0011      	movs	r1, r2
 8007350:	0018      	movs	r0, r3
 8007352:	f7ff fecf 	bl	80070f4 <check_fs>
 8007356:	0003      	movs	r3, r0
 8007358:	001a      	movs	r2, r3
 800735a:	e000      	b.n	800735e <find_volume+0x18a>
 800735c:	2202      	movs	r2, #2
 800735e:	2157      	movs	r1, #87	@ 0x57
 8007360:	187b      	adds	r3, r7, r1
 8007362:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007364:	187b      	adds	r3, r7, r1
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d005      	beq.n	8007378 <find_volume+0x1a4>
 800736c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800736e:	3301      	adds	r3, #1
 8007370:	643b      	str	r3, [r7, #64]	@ 0x40
 8007372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007374:	2b03      	cmp	r3, #3
 8007376:	d9df      	bls.n	8007338 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007378:	2357      	movs	r3, #87	@ 0x57
 800737a:	18fb      	adds	r3, r7, r3
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b03      	cmp	r3, #3
 8007380:	d101      	bne.n	8007386 <find_volume+0x1b2>
 8007382:	2301      	movs	r3, #1
 8007384:	e234      	b.n	80077f0 <find_volume+0x61c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007386:	2357      	movs	r3, #87	@ 0x57
 8007388:	18fb      	adds	r3, r7, r3
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <find_volume+0x1c0>
 8007390:	230d      	movs	r3, #13
 8007392:	e22d      	b.n	80077f0 <find_volume+0x61c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007396:	7b1b      	ldrb	r3, [r3, #12]
 8007398:	b21b      	sxth	r3, r3
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	b21a      	sxth	r2, r3
 800739e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a0:	7adb      	ldrb	r3, [r3, #11]
 80073a2:	b21b      	sxth	r3, r3
 80073a4:	4313      	orrs	r3, r2
 80073a6:	b21a      	sxth	r2, r3
 80073a8:	2380      	movs	r3, #128	@ 0x80
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d001      	beq.n	80073b4 <find_volume+0x1e0>
		return FR_NO_FILESYSTEM;
 80073b0:	230d      	movs	r3, #13
 80073b2:	e21d      	b.n	80077f0 <find_volume+0x61c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	7ddb      	ldrb	r3, [r3, #23]
 80073b8:	b21b      	sxth	r3, r3
 80073ba:	021b      	lsls	r3, r3, #8
 80073bc:	b21a      	sxth	r2, r3
 80073be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c0:	7d9b      	ldrb	r3, [r3, #22]
 80073c2:	b21b      	sxth	r3, r3
 80073c4:	4313      	orrs	r3, r2
 80073c6:	b21b      	sxth	r3, r3
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80073cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d112      	bne.n	80073f8 <find_volume+0x224>
 80073d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d4:	2227      	movs	r2, #39	@ 0x27
 80073d6:	5c9b      	ldrb	r3, [r3, r2]
 80073d8:	061a      	lsls	r2, r3, #24
 80073da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073dc:	2126      	movs	r1, #38	@ 0x26
 80073de:	5c5b      	ldrb	r3, [r3, r1]
 80073e0:	041b      	lsls	r3, r3, #16
 80073e2:	431a      	orrs	r2, r3
 80073e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e6:	2125      	movs	r1, #37	@ 0x25
 80073e8:	5c5b      	ldrb	r3, [r3, r1]
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	4313      	orrs	r3, r2
 80073ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073f0:	2124      	movs	r1, #36	@ 0x24
 80073f2:	5c52      	ldrb	r2, [r2, r1]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 80073f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073fa:	2386      	movs	r3, #134	@ 0x86
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007400:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007404:	7c19      	ldrb	r1, [r3, #16]
 8007406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007408:	4a50      	ldr	r2, [pc, #320]	@ (800754c <find_volume+0x378>)
 800740a:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800740c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740e:	4a4f      	ldr	r2, [pc, #316]	@ (800754c <find_volume+0x378>)
 8007410:	5c9b      	ldrb	r3, [r3, r2]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d006      	beq.n	8007424 <find_volume+0x250>
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	4a4c      	ldr	r2, [pc, #304]	@ (800754c <find_volume+0x378>)
 800741a:	5c9b      	ldrb	r3, [r3, r2]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d001      	beq.n	8007424 <find_volume+0x250>
		return FR_NO_FILESYSTEM;
 8007420:	230d      	movs	r3, #13
 8007422:	e1e5      	b.n	80077f0 <find_volume+0x61c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007426:	4a49      	ldr	r2, [pc, #292]	@ (800754c <find_volume+0x378>)
 8007428:	5c9b      	ldrb	r3, [r3, r2]
 800742a:	001a      	movs	r2, r3
 800742c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800742e:	4353      	muls	r3, r2
 8007430:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007434:	7b59      	ldrb	r1, [r3, #13]
 8007436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007438:	4a45      	ldr	r2, [pc, #276]	@ (8007550 <find_volume+0x37c>)
 800743a:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800743c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743e:	4a44      	ldr	r2, [pc, #272]	@ (8007550 <find_volume+0x37c>)
 8007440:	5c9b      	ldrb	r3, [r3, r2]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d009      	beq.n	800745a <find_volume+0x286>
 8007446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007448:	4a41      	ldr	r2, [pc, #260]	@ (8007550 <find_volume+0x37c>)
 800744a:	5c9b      	ldrb	r3, [r3, r2]
 800744c:	0019      	movs	r1, r3
 800744e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007450:	4a3f      	ldr	r2, [pc, #252]	@ (8007550 <find_volume+0x37c>)
 8007452:	5c9b      	ldrb	r3, [r3, r2]
 8007454:	3b01      	subs	r3, #1
 8007456:	400b      	ands	r3, r1
 8007458:	d001      	beq.n	800745e <find_volume+0x28a>
		return FR_NO_FILESYSTEM;
 800745a:	230d      	movs	r3, #13
 800745c:	e1c8      	b.n	80077f0 <find_volume+0x61c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800745e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007460:	7c9b      	ldrb	r3, [r3, #18]
 8007462:	b21b      	sxth	r3, r3
 8007464:	021b      	lsls	r3, r3, #8
 8007466:	b21a      	sxth	r2, r3
 8007468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746a:	7c5b      	ldrb	r3, [r3, #17]
 800746c:	b21b      	sxth	r3, r3
 800746e:	4313      	orrs	r3, r2
 8007470:	b21b      	sxth	r3, r3
 8007472:	b299      	uxth	r1, r3
 8007474:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007476:	2382      	movs	r3, #130	@ 0x82
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800747c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800747e:	2382      	movs	r3, #130	@ 0x82
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	5ad3      	ldrh	r3, [r2, r3]
 8007484:	220f      	movs	r2, #15
 8007486:	4013      	ands	r3, r2
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <find_volume+0x2be>
		return FR_NO_FILESYSTEM;
 800748e:	230d      	movs	r3, #13
 8007490:	e1ae      	b.n	80077f0 <find_volume+0x61c>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007494:	7d1b      	ldrb	r3, [r3, #20]
 8007496:	b21b      	sxth	r3, r3
 8007498:	021b      	lsls	r3, r3, #8
 800749a:	b21a      	sxth	r2, r3
 800749c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749e:	7cdb      	ldrb	r3, [r3, #19]
 80074a0:	b21b      	sxth	r3, r3
 80074a2:	4313      	orrs	r3, r2
 80074a4:	b21b      	sxth	r3, r3
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80074aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d112      	bne.n	80074d6 <find_volume+0x302>
 80074b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b2:	2223      	movs	r2, #35	@ 0x23
 80074b4:	5c9b      	ldrb	r3, [r3, r2]
 80074b6:	061a      	lsls	r2, r3, #24
 80074b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ba:	2122      	movs	r1, #34	@ 0x22
 80074bc:	5c5b      	ldrb	r3, [r3, r1]
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	431a      	orrs	r2, r3
 80074c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c4:	2121      	movs	r1, #33	@ 0x21
 80074c6:	5c5b      	ldrb	r3, [r3, r1]
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	4313      	orrs	r3, r2
 80074cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074ce:	2120      	movs	r1, #32
 80074d0:	5c52      	ldrb	r2, [r2, r1]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80074d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d8:	7bdb      	ldrb	r3, [r3, #15]
 80074da:	b21b      	sxth	r3, r3
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	b21a      	sxth	r2, r3
 80074e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e2:	7b9b      	ldrb	r3, [r3, #14]
 80074e4:	b21b      	sxth	r3, r3
 80074e6:	4313      	orrs	r3, r2
 80074e8:	b21a      	sxth	r2, r3
 80074ea:	212e      	movs	r1, #46	@ 0x2e
 80074ec:	187b      	adds	r3, r7, r1
 80074ee:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80074f0:	187b      	adds	r3, r7, r1
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <find_volume+0x328>
 80074f8:	230d      	movs	r3, #13
 80074fa:	e179      	b.n	80077f0 <find_volume+0x61c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80074fc:	232e      	movs	r3, #46	@ 0x2e
 80074fe:	18fb      	adds	r3, r7, r3
 8007500:	881a      	ldrh	r2, [r3, #0]
 8007502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007504:	18d3      	adds	r3, r2, r3
 8007506:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007508:	2282      	movs	r2, #130	@ 0x82
 800750a:	0092      	lsls	r2, r2, #2
 800750c:	5a8a      	ldrh	r2, [r1, r2]
 800750e:	0912      	lsrs	r2, r2, #4
 8007510:	b292      	uxth	r2, r2
 8007512:	189b      	adds	r3, r3, r2
 8007514:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007516:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751a:	429a      	cmp	r2, r3
 800751c:	d201      	bcs.n	8007522 <find_volume+0x34e>
 800751e:	230d      	movs	r3, #13
 8007520:	e166      	b.n	80077f0 <find_volume+0x61c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007522:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007526:	1ad2      	subs	r2, r2, r3
 8007528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752a:	4909      	ldr	r1, [pc, #36]	@ (8007550 <find_volume+0x37c>)
 800752c:	5c5b      	ldrb	r3, [r3, r1]
 800752e:	0019      	movs	r1, r3
 8007530:	0010      	movs	r0, r2
 8007532:	f7f8 fe05 	bl	8000140 <__udivsi3>
 8007536:	0003      	movs	r3, r0
 8007538:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753c:	2b00      	cmp	r3, #0
 800753e:	d109      	bne.n	8007554 <find_volume+0x380>
 8007540:	230d      	movs	r3, #13
 8007542:	e155      	b.n	80077f0 <find_volume+0x61c>
 8007544:	200006c0 	.word	0x200006c0
 8007548:	00000201 	.word	0x00000201
 800754c:	00000203 	.word	0x00000203
 8007550:	00000202 	.word	0x00000202
	fmt = FS_FAT12;
 8007554:	2157      	movs	r1, #87	@ 0x57
 8007556:	187b      	adds	r3, r7, r1
 8007558:	2201      	movs	r2, #1
 800755a:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	4aa6      	ldr	r2, [pc, #664]	@ (80077f8 <find_volume+0x624>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d902      	bls.n	800756a <find_volume+0x396>
 8007564:	187b      	adds	r3, r7, r1
 8007566:	2202      	movs	r2, #2
 8007568:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	4aa3      	ldr	r2, [pc, #652]	@ (80077fc <find_volume+0x628>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d903      	bls.n	800757a <find_volume+0x3a6>
 8007572:	2357      	movs	r3, #87	@ 0x57
 8007574:	18fb      	adds	r3, r7, r3
 8007576:	2203      	movs	r2, #3
 8007578:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800757a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757c:	1c99      	adds	r1, r3, #2
 800757e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007580:	2385      	movs	r3, #133	@ 0x85
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	50d1      	str	r1, [r2, r3]
	fs->volbase = bsect;								/* Volume start sector */
 8007586:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007588:	2387      	movs	r3, #135	@ 0x87
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800758e:	50d1      	str	r1, [r2, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007590:	232e      	movs	r3, #46	@ 0x2e
 8007592:	18fb      	adds	r3, r7, r3
 8007594:	881a      	ldrh	r2, [r3, #0]
 8007596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007598:	18d1      	adds	r1, r2, r3
 800759a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800759c:	2388      	movs	r3, #136	@ 0x88
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 80075a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80075a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a6:	18d1      	adds	r1, r2, r3
 80075a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075aa:	238a      	movs	r3, #138	@ 0x8a
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 80075b0:	2357      	movs	r3, #87	@ 0x57
 80075b2:	18fb      	adds	r3, r7, r3
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d125      	bne.n	8007606 <find_volume+0x432>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80075ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075bc:	2382      	movs	r3, #130	@ 0x82
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	5ad3      	ldrh	r3, [r2, r3]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <find_volume+0x3f6>
 80075c6:	230d      	movs	r3, #13
 80075c8:	e112      	b.n	80077f0 <find_volume+0x61c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80075ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075cc:	222f      	movs	r2, #47	@ 0x2f
 80075ce:	5c9b      	ldrb	r3, [r3, r2]
 80075d0:	061a      	lsls	r2, r3, #24
 80075d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d4:	212e      	movs	r1, #46	@ 0x2e
 80075d6:	5c5b      	ldrb	r3, [r3, r1]
 80075d8:	041b      	lsls	r3, r3, #16
 80075da:	431a      	orrs	r2, r3
 80075dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075de:	212d      	movs	r1, #45	@ 0x2d
 80075e0:	5c5b      	ldrb	r3, [r3, r1]
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	4313      	orrs	r3, r2
 80075e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075e8:	212c      	movs	r1, #44	@ 0x2c
 80075ea:	5c52      	ldrb	r2, [r2, r1]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	0019      	movs	r1, r3
 80075f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075f2:	2389      	movs	r3, #137	@ 0x89
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	50d1      	str	r1, [r2, r3]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80075f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075fa:	2385      	movs	r3, #133	@ 0x85
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	58d3      	ldr	r3, [r2, r3]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	647b      	str	r3, [r7, #68]	@ 0x44
 8007604:	e02c      	b.n	8007660 <find_volume+0x48c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007606:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007608:	2382      	movs	r3, #130	@ 0x82
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	5ad3      	ldrh	r3, [r2, r3]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <find_volume+0x442>
 8007612:	230d      	movs	r3, #13
 8007614:	e0ec      	b.n	80077f0 <find_volume+0x61c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007616:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007618:	2388      	movs	r3, #136	@ 0x88
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	58d2      	ldr	r2, [r2, r3]
 800761e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007620:	18d1      	adds	r1, r2, r3
 8007622:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007624:	2389      	movs	r3, #137	@ 0x89
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	50d1      	str	r1, [r2, r3]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800762a:	2357      	movs	r3, #87	@ 0x57
 800762c:	18fb      	adds	r3, r7, r3
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d105      	bne.n	8007640 <find_volume+0x46c>
 8007634:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007636:	2385      	movs	r3, #133	@ 0x85
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	58d3      	ldr	r3, [r2, r3]
 800763c:	005b      	lsls	r3, r3, #1
 800763e:	e00e      	b.n	800765e <find_volume+0x48a>
 8007640:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007642:	2385      	movs	r3, #133	@ 0x85
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	58d2      	ldr	r2, [r2, r3]
 8007648:	0013      	movs	r3, r2
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	189b      	adds	r3, r3, r2
 800764e:	085a      	lsrs	r2, r3, #1
 8007650:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007652:	2385      	movs	r3, #133	@ 0x85
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	58cb      	ldr	r3, [r1, r3]
 8007658:	2101      	movs	r1, #1
 800765a:	400b      	ands	r3, r1
 800765c:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800765e:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007660:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007662:	2386      	movs	r3, #134	@ 0x86
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	58d2      	ldr	r2, [r2, r3]
 8007668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800766a:	4965      	ldr	r1, [pc, #404]	@ (8007800 <find_volume+0x62c>)
 800766c:	468c      	mov	ip, r1
 800766e:	4463      	add	r3, ip
 8007670:	0a5b      	lsrs	r3, r3, #9
 8007672:	429a      	cmp	r2, r3
 8007674:	d201      	bcs.n	800767a <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 8007676:	230d      	movs	r3, #13
 8007678:	e0ba      	b.n	80077f0 <find_volume+0x61c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800767a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800767c:	2384      	movs	r3, #132	@ 0x84
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	2101      	movs	r1, #1
 8007682:	4249      	negs	r1, r1
 8007684:	50d1      	str	r1, [r2, r3]
 8007686:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007688:	2384      	movs	r3, #132	@ 0x84
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	58d1      	ldr	r1, [r2, r3]
 800768e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007690:	2383      	movs	r3, #131	@ 0x83
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	50d1      	str	r1, [r2, r3]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007698:	4a5a      	ldr	r2, [pc, #360]	@ (8007804 <find_volume+0x630>)
 800769a:	2180      	movs	r1, #128	@ 0x80
 800769c:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800769e:	2357      	movs	r3, #87	@ 0x57
 80076a0:	18fb      	adds	r3, r7, r3
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d000      	beq.n	80076aa <find_volume+0x4d6>
 80076a8:	e08b      	b.n	80077c2 <find_volume+0x5ee>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80076aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ac:	2231      	movs	r2, #49	@ 0x31
 80076ae:	5c9b      	ldrb	r3, [r3, r2]
 80076b0:	b21b      	sxth	r3, r3
 80076b2:	021b      	lsls	r3, r3, #8
 80076b4:	b21a      	sxth	r2, r3
 80076b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b8:	2130      	movs	r1, #48	@ 0x30
 80076ba:	5c5b      	ldrb	r3, [r3, r1]
 80076bc:	b21b      	sxth	r3, r3
 80076be:	4313      	orrs	r3, r2
 80076c0:	b21b      	sxth	r3, r3
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d000      	beq.n	80076c8 <find_volume+0x4f4>
 80076c6:	e07c      	b.n	80077c2 <find_volume+0x5ee>
		&& move_window(fs, bsect + 1) == FR_OK)
 80076c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ce:	0011      	movs	r1, r2
 80076d0:	0018      	movs	r0, r3
 80076d2:	f7fd fcfb 	bl	80050cc <move_window>
 80076d6:	1e03      	subs	r3, r0, #0
 80076d8:	d173      	bne.n	80077c2 <find_volume+0x5ee>
	{
		fs->fsi_flag = 0;
 80076da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076dc:	4a49      	ldr	r2, [pc, #292]	@ (8007804 <find_volume+0x630>)
 80076de:	2100      	movs	r1, #0
 80076e0:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80076e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e4:	4a46      	ldr	r2, [pc, #280]	@ (8007800 <find_volume+0x62c>)
 80076e6:	5c9b      	ldrb	r3, [r3, r2]
 80076e8:	b21b      	sxth	r3, r3
 80076ea:	021b      	lsls	r3, r3, #8
 80076ec:	b21a      	sxth	r2, r3
 80076ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80076f0:	23ff      	movs	r3, #255	@ 0xff
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	5ccb      	ldrb	r3, [r1, r3]
 80076f6:	b21b      	sxth	r3, r3
 80076f8:	4313      	orrs	r3, r2
 80076fa:	b21b      	sxth	r3, r3
 80076fc:	4a42      	ldr	r2, [pc, #264]	@ (8007808 <find_volume+0x634>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d15f      	bne.n	80077c2 <find_volume+0x5ee>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007704:	78db      	ldrb	r3, [r3, #3]
 8007706:	061a      	lsls	r2, r3, #24
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	789b      	ldrb	r3, [r3, #2]
 800770c:	041b      	lsls	r3, r3, #16
 800770e:	431a      	orrs	r2, r3
 8007710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007712:	785b      	ldrb	r3, [r3, #1]
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	4313      	orrs	r3, r2
 8007718:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800771a:	7812      	ldrb	r2, [r2, #0]
 800771c:	4313      	orrs	r3, r2
 800771e:	4a3b      	ldr	r2, [pc, #236]	@ (800780c <find_volume+0x638>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d14e      	bne.n	80077c2 <find_volume+0x5ee>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007724:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007726:	23e8      	movs	r3, #232	@ 0xe8
 8007728:	33ff      	adds	r3, #255	@ 0xff
 800772a:	5cd3      	ldrb	r3, [r2, r3]
 800772c:	061a      	lsls	r2, r3, #24
 800772e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007730:	23f3      	movs	r3, #243	@ 0xf3
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	5ccb      	ldrb	r3, [r1, r3]
 8007736:	041b      	lsls	r3, r3, #16
 8007738:	431a      	orrs	r2, r3
 800773a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800773c:	23e6      	movs	r3, #230	@ 0xe6
 800773e:	33ff      	adds	r3, #255	@ 0xff
 8007740:	5ccb      	ldrb	r3, [r1, r3]
 8007742:	021b      	lsls	r3, r3, #8
 8007744:	4313      	orrs	r3, r2
 8007746:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007748:	22f2      	movs	r2, #242	@ 0xf2
 800774a:	0052      	lsls	r2, r2, #1
 800774c:	5c8a      	ldrb	r2, [r1, r2]
 800774e:	4313      	orrs	r3, r2
 8007750:	4a2f      	ldr	r2, [pc, #188]	@ (8007810 <find_volume+0x63c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d135      	bne.n	80077c2 <find_volume+0x5ee>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007756:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007758:	23ec      	movs	r3, #236	@ 0xec
 800775a:	33ff      	adds	r3, #255	@ 0xff
 800775c:	5cd3      	ldrb	r3, [r2, r3]
 800775e:	061a      	lsls	r2, r3, #24
 8007760:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007762:	23f5      	movs	r3, #245	@ 0xf5
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	5ccb      	ldrb	r3, [r1, r3]
 8007768:	041b      	lsls	r3, r3, #16
 800776a:	431a      	orrs	r2, r3
 800776c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800776e:	23ea      	movs	r3, #234	@ 0xea
 8007770:	33ff      	adds	r3, #255	@ 0xff
 8007772:	5ccb      	ldrb	r3, [r1, r3]
 8007774:	021b      	lsls	r3, r3, #8
 8007776:	4313      	orrs	r3, r2
 8007778:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800777a:	22f4      	movs	r2, #244	@ 0xf4
 800777c:	0052      	lsls	r2, r2, #1
 800777e:	5c8a      	ldrb	r2, [r1, r2]
 8007780:	4313      	orrs	r3, r2
 8007782:	0019      	movs	r1, r3
 8007784:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007786:	2384      	movs	r3, #132	@ 0x84
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800778c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800778e:	23f0      	movs	r3, #240	@ 0xf0
 8007790:	33ff      	adds	r3, #255	@ 0xff
 8007792:	5cd3      	ldrb	r3, [r2, r3]
 8007794:	061a      	lsls	r2, r3, #24
 8007796:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007798:	23f7      	movs	r3, #247	@ 0xf7
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	5ccb      	ldrb	r3, [r1, r3]
 800779e:	041b      	lsls	r3, r3, #16
 80077a0:	431a      	orrs	r2, r3
 80077a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80077a4:	23ee      	movs	r3, #238	@ 0xee
 80077a6:	33ff      	adds	r3, #255	@ 0xff
 80077a8:	5ccb      	ldrb	r3, [r1, r3]
 80077aa:	021b      	lsls	r3, r3, #8
 80077ac:	4313      	orrs	r3, r2
 80077ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80077b0:	22f6      	movs	r2, #246	@ 0xf6
 80077b2:	0052      	lsls	r2, r2, #1
 80077b4:	5c8a      	ldrb	r2, [r1, r2]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	0019      	movs	r1, r3
 80077ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077bc:	2383      	movs	r3, #131	@ 0x83
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	50d1      	str	r1, [r2, r3]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80077c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077c4:	2357      	movs	r3, #87	@ 0x57
 80077c6:	18f9      	adds	r1, r7, r3
 80077c8:	2380      	movs	r3, #128	@ 0x80
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	7809      	ldrb	r1, [r1, #0]
 80077ce:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 80077d0:	4b10      	ldr	r3, [pc, #64]	@ (8007814 <find_volume+0x640>)
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007814 <find_volume+0x640>)
 80077da:	801a      	strh	r2, [r3, #0]
 80077dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007814 <find_volume+0x640>)
 80077de:	8819      	ldrh	r1, [r3, #0]
 80077e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e2:	4a0d      	ldr	r2, [pc, #52]	@ (8007818 <find_volume+0x644>)
 80077e4:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80077e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e8:	0018      	movs	r0, r3
 80077ea:	f7fd fbf1 	bl	8004fd0 <clear_lock>
#endif

	return FR_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	0018      	movs	r0, r3
 80077f2:	46bd      	mov	sp, r7
 80077f4:	b016      	add	sp, #88	@ 0x58
 80077f6:	bdb0      	pop	{r4, r5, r7, pc}
 80077f8:	00000ff5 	.word	0x00000ff5
 80077fc:	0000fff5 	.word	0x0000fff5
 8007800:	000001ff 	.word	0x000001ff
 8007804:	00000205 	.word	0x00000205
 8007808:	ffffaa55 	.word	0xffffaa55
 800780c:	41615252 	.word	0x41615252
 8007810:	61417272 	.word	0x61417272
 8007814:	200006c4 	.word	0x200006c4
 8007818:	00000206 	.word	0x00000206

0800781c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d028      	beq.n	8007880 <validate+0x64>
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	2380      	movs	r3, #128	@ 0x80
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	58d3      	ldr	r3, [r2, r3]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d022      	beq.n	8007880 <validate+0x64>
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	2380      	movs	r3, #128	@ 0x80
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	58d2      	ldr	r2, [r2, r3]
 8007842:	2380      	movs	r3, #128	@ 0x80
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	5cd3      	ldrb	r3, [r2, r3]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d019      	beq.n	8007880 <validate+0x64>
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	2380      	movs	r3, #128	@ 0x80
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	58d3      	ldr	r3, [r2, r3]
 8007854:	4a0e      	ldr	r2, [pc, #56]	@ (8007890 <validate+0x74>)
 8007856:	5a9a      	ldrh	r2, [r3, r2]
 8007858:	68f9      	ldr	r1, [r7, #12]
 800785a:	2381      	movs	r3, #129	@ 0x81
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	5acb      	ldrh	r3, [r1, r3]
 8007860:	429a      	cmp	r2, r3
 8007862:	d10d      	bne.n	8007880 <validate+0x64>
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	2380      	movs	r3, #128	@ 0x80
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	58d3      	ldr	r3, [r2, r3]
 800786c:	4a09      	ldr	r2, [pc, #36]	@ (8007894 <validate+0x78>)
 800786e:	5c9b      	ldrb	r3, [r3, r2]
 8007870:	0018      	movs	r0, r3
 8007872:	f7fd f8d5 	bl	8004a20 <disk_status>
 8007876:	0003      	movs	r3, r0
 8007878:	001a      	movs	r2, r3
 800787a:	2301      	movs	r3, #1
 800787c:	4013      	ands	r3, r2
 800787e:	d001      	beq.n	8007884 <validate+0x68>
		return FR_INVALID_OBJECT;
 8007880:	2309      	movs	r3, #9
 8007882:	e000      	b.n	8007886 <validate+0x6a>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	0018      	movs	r0, r3
 8007888:	46bd      	mov	sp, r7
 800788a:	b004      	add	sp, #16
 800788c:	bd80      	pop	{r7, pc}
 800788e:	46c0      	nop			@ (mov r8, r8)
 8007890:	00000206 	.word	0x00000206
 8007894:	00000201 	.word	0x00000201

08007898 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007898:	b5b0      	push	{r4, r5, r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	1dfb      	adds	r3, r7, #7
 80078a4:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80078aa:	2310      	movs	r3, #16
 80078ac:	18fb      	adds	r3, r7, r3
 80078ae:	0018      	movs	r0, r3
 80078b0:	f7ff fbde 	bl	8007070 <get_ldnumber>
 80078b4:	0003      	movs	r3, r0
 80078b6:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	da01      	bge.n	80078c2 <f_mount+0x2a>
 80078be:	230b      	movs	r3, #11
 80078c0:	e034      	b.n	800792c <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80078c2:	4b1c      	ldr	r3, [pc, #112]	@ (8007934 <f_mount+0x9c>)
 80078c4:	69fa      	ldr	r2, [r7, #28]
 80078c6:	0092      	lsls	r2, r2, #2
 80078c8:	58d3      	ldr	r3, [r2, r3]
 80078ca:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d008      	beq.n	80078e4 <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	0018      	movs	r0, r3
 80078d6:	f7fd fb7b 	bl	8004fd0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	2380      	movs	r3, #128	@ 0x80
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	2100      	movs	r1, #0
 80078e2:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d004      	beq.n	80078f4 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	2380      	movs	r3, #128	@ 0x80
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	2100      	movs	r1, #0
 80078f2:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80078f4:	68f9      	ldr	r1, [r7, #12]
 80078f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007934 <f_mount+0x9c>)
 80078f8:	69fa      	ldr	r2, [r7, #28]
 80078fa:	0092      	lsls	r2, r2, #2
 80078fc:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d003      	beq.n	800790c <f_mount+0x74>
 8007904:	1dfb      	adds	r3, r7, #7
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d001      	beq.n	8007910 <f_mount+0x78>
 800790c:	2300      	movs	r3, #0
 800790e:	e00d      	b.n	800792c <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007910:	2517      	movs	r5, #23
 8007912:	197c      	adds	r4, r7, r5
 8007914:	2308      	movs	r3, #8
 8007916:	18f9      	adds	r1, r7, r3
 8007918:	230c      	movs	r3, #12
 800791a:	18fb      	adds	r3, r7, r3
 800791c:	2200      	movs	r2, #0
 800791e:	0018      	movs	r0, r3
 8007920:	f7ff fc58 	bl	80071d4 <find_volume>
 8007924:	0003      	movs	r3, r0
 8007926:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8007928:	197b      	adds	r3, r7, r5
 800792a:	781b      	ldrb	r3, [r3, #0]
}
 800792c:	0018      	movs	r0, r3
 800792e:	46bd      	mov	sp, r7
 8007930:	b008      	add	sp, #32
 8007932:	bdb0      	pop	{r4, r5, r7, pc}
 8007934:	200006c0 	.word	0x200006c0

08007938 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800793a:	4cdd      	ldr	r4, [pc, #884]	@ (8007cb0 <f_open+0x378>)
 800793c:	44a5      	add	sp, r4
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	60b9      	str	r1, [r7, #8]
 8007944:	4bdb      	ldr	r3, [pc, #876]	@ (8007cb4 <f_open+0x37c>)
 8007946:	2196      	movs	r1, #150	@ 0x96
 8007948:	0089      	lsls	r1, r1, #2
 800794a:	185b      	adds	r3, r3, r1
 800794c:	19db      	adds	r3, r3, r7
 800794e:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <f_open+0x22>
 8007956:	2309      	movs	r3, #9
 8007958:	e285      	b.n	8007e66 <f_open+0x52e>
	fp->fs = 0;			/* Clear file object */
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	2380      	movs	r3, #128	@ 0x80
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	2100      	movs	r1, #0
 8007962:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007964:	4bd3      	ldr	r3, [pc, #844]	@ (8007cb4 <f_open+0x37c>)
 8007966:	2096      	movs	r0, #150	@ 0x96
 8007968:	0080      	lsls	r0, r0, #2
 800796a:	181b      	adds	r3, r3, r0
 800796c:	19db      	adds	r3, r3, r7
 800796e:	4ad1      	ldr	r2, [pc, #836]	@ (8007cb4 <f_open+0x37c>)
 8007970:	1812      	adds	r2, r2, r0
 8007972:	19d2      	adds	r2, r2, r7
 8007974:	7812      	ldrb	r2, [r2, #0]
 8007976:	211f      	movs	r1, #31
 8007978:	400a      	ands	r2, r1
 800797a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800797c:	4bcd      	ldr	r3, [pc, #820]	@ (8007cb4 <f_open+0x37c>)
 800797e:	181b      	adds	r3, r3, r0
 8007980:	19db      	adds	r3, r3, r7
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2201      	movs	r2, #1
 8007986:	4393      	bics	r3, r2
 8007988:	b2da      	uxtb	r2, r3
 800798a:	4dcb      	ldr	r5, [pc, #812]	@ (8007cb8 <f_open+0x380>)
 800798c:	197c      	adds	r4, r7, r5
 800798e:	2308      	movs	r3, #8
 8007990:	18f9      	adds	r1, r7, r3
 8007992:	231c      	movs	r3, #28
 8007994:	18fb      	adds	r3, r7, r3
 8007996:	2080      	movs	r0, #128	@ 0x80
 8007998:	0080      	lsls	r0, r0, #2
 800799a:	4684      	mov	ip, r0
 800799c:	4463      	add	r3, ip
 800799e:	0018      	movs	r0, r3
 80079a0:	f7ff fc18 	bl	80071d4 <find_volume>
 80079a4:	0003      	movs	r3, r0
 80079a6:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80079a8:	197b      	adds	r3, r7, r5
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d000      	beq.n	80079b2 <f_open+0x7a>
 80079b0:	e256      	b.n	8007e60 <f_open+0x528>
		INIT_BUF(dj);
 80079b2:	2380      	movs	r3, #128	@ 0x80
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	0018      	movs	r0, r3
 80079b8:	f001 fd66 	bl	8009488 <ff_memalloc>
 80079bc:	0003      	movs	r3, r0
 80079be:	2293      	movs	r2, #147	@ 0x93
 80079c0:	0092      	lsls	r2, r2, #2
 80079c2:	18b9      	adds	r1, r7, r2
 80079c4:	600b      	str	r3, [r1, #0]
 80079c6:	18bb      	adds	r3, r7, r2
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <f_open+0x9a>
 80079ce:	2311      	movs	r3, #17
 80079d0:	e249      	b.n	8007e66 <f_open+0x52e>
 80079d2:	4bba      	ldr	r3, [pc, #744]	@ (8007cbc <f_open+0x384>)
 80079d4:	2596      	movs	r5, #150	@ 0x96
 80079d6:	00ad      	lsls	r5, r5, #2
 80079d8:	195b      	adds	r3, r3, r5
 80079da:	19da      	adds	r2, r3, r7
 80079dc:	2388      	movs	r3, #136	@ 0x88
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	2193      	movs	r1, #147	@ 0x93
 80079e2:	0089      	lsls	r1, r1, #2
 80079e4:	1879      	adds	r1, r7, r1
 80079e6:	6809      	ldr	r1, [r1, #0]
 80079e8:	50d1      	str	r1, [r2, r3]
 80079ea:	4bb4      	ldr	r3, [pc, #720]	@ (8007cbc <f_open+0x384>)
 80079ec:	195b      	adds	r3, r3, r5
 80079ee:	19da      	adds	r2, r3, r7
 80079f0:	2386      	movs	r3, #134	@ 0x86
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	2110      	movs	r1, #16
 80079f6:	1879      	adds	r1, r7, r1
 80079f8:	50d1      	str	r1, [r2, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	4eae      	ldr	r6, [pc, #696]	@ (8007cb8 <f_open+0x380>)
 80079fe:	19bc      	adds	r4, r7, r6
 8007a00:	231c      	movs	r3, #28
 8007a02:	18fb      	adds	r3, r7, r3
 8007a04:	0011      	movs	r1, r2
 8007a06:	0018      	movs	r0, r3
 8007a08:	f7ff faaa 	bl	8006f60 <follow_path>
 8007a0c:	0003      	movs	r3, r0
 8007a0e:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 8007a10:	4baa      	ldr	r3, [pc, #680]	@ (8007cbc <f_open+0x384>)
 8007a12:	195b      	adds	r3, r3, r5
 8007a14:	19da      	adds	r2, r3, r7
 8007a16:	2385      	movs	r3, #133	@ 0x85
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	58d3      	ldr	r3, [r2, r3]
 8007a1c:	2294      	movs	r2, #148	@ 0x94
 8007a1e:	0092      	lsls	r2, r2, #2
 8007a20:	18b9      	adds	r1, r7, r2
 8007a22:	600b      	str	r3, [r1, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007a24:	19bb      	adds	r3, r7, r6
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d11d      	bne.n	8007a68 <f_open+0x130>
			if (!dir)	/* Default directory itself */
 8007a2c:	18bb      	adds	r3, r7, r2
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d103      	bne.n	8007a3c <f_open+0x104>
				res = FR_INVALID_NAME;
 8007a34:	19bb      	adds	r3, r7, r6
 8007a36:	2206      	movs	r2, #6
 8007a38:	701a      	strb	r2, [r3, #0]
 8007a3a:	e015      	b.n	8007a68 <f_open+0x130>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a3c:	4b9d      	ldr	r3, [pc, #628]	@ (8007cb4 <f_open+0x37c>)
 8007a3e:	2296      	movs	r2, #150	@ 0x96
 8007a40:	0092      	lsls	r2, r2, #2
 8007a42:	189b      	adds	r3, r3, r2
 8007a44:	19db      	adds	r3, r3, r7
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	419b      	sbcs	r3, r3
 8007a4e:	425b      	negs	r3, r3
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	001a      	movs	r2, r3
 8007a54:	4b98      	ldr	r3, [pc, #608]	@ (8007cb8 <f_open+0x380>)
 8007a56:	18fc      	adds	r4, r7, r3
 8007a58:	231c      	movs	r3, #28
 8007a5a:	18fb      	adds	r3, r7, r3
 8007a5c:	0011      	movs	r1, r2
 8007a5e:	0018      	movs	r0, r3
 8007a60:	f7fd f91c 	bl	8004c9c <chk_lock>
 8007a64:	0003      	movs	r3, r0
 8007a66:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a68:	4b92      	ldr	r3, [pc, #584]	@ (8007cb4 <f_open+0x37c>)
 8007a6a:	2296      	movs	r2, #150	@ 0x96
 8007a6c:	0092      	lsls	r2, r2, #2
 8007a6e:	189b      	adds	r3, r3, r2
 8007a70:	19db      	adds	r3, r3, r7
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	221c      	movs	r2, #28
 8007a76:	4013      	ands	r3, r2
 8007a78:	d100      	bne.n	8007a7c <f_open+0x144>
 8007a7a:	e106      	b.n	8007c8a <f_open+0x352>
			if (res != FR_OK) {					/* No file, create new */
 8007a7c:	4a8e      	ldr	r2, [pc, #568]	@ (8007cb8 <f_open+0x380>)
 8007a7e:	18bb      	adds	r3, r7, r2
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d02a      	beq.n	8007adc <f_open+0x1a4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007a86:	18bb      	adds	r3, r7, r2
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d10f      	bne.n	8007aae <f_open+0x176>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007a8e:	f7fd f973 	bl	8004d78 <enq_lock>
 8007a92:	1e03      	subs	r3, r0, #0
 8007a94:	d007      	beq.n	8007aa6 <f_open+0x16e>
 8007a96:	231c      	movs	r3, #28
 8007a98:	18fb      	adds	r3, r7, r3
 8007a9a:	0018      	movs	r0, r3
 8007a9c:	f7fe fe30 	bl	8006700 <dir_register>
 8007aa0:	0003      	movs	r3, r0
 8007aa2:	001a      	movs	r2, r3
 8007aa4:	e000      	b.n	8007aa8 <f_open+0x170>
 8007aa6:	2212      	movs	r2, #18
 8007aa8:	4b83      	ldr	r3, [pc, #524]	@ (8007cb8 <f_open+0x380>)
 8007aaa:	18fb      	adds	r3, r7, r3
 8007aac:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007aae:	4b81      	ldr	r3, [pc, #516]	@ (8007cb4 <f_open+0x37c>)
 8007ab0:	2096      	movs	r0, #150	@ 0x96
 8007ab2:	0080      	lsls	r0, r0, #2
 8007ab4:	181b      	adds	r3, r3, r0
 8007ab6:	19db      	adds	r3, r3, r7
 8007ab8:	4a7e      	ldr	r2, [pc, #504]	@ (8007cb4 <f_open+0x37c>)
 8007aba:	1812      	adds	r2, r2, r0
 8007abc:	19d2      	adds	r2, r2, r7
 8007abe:	7812      	ldrb	r2, [r2, #0]
 8007ac0:	2108      	movs	r1, #8
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8007ac6:	4b7d      	ldr	r3, [pc, #500]	@ (8007cbc <f_open+0x384>)
 8007ac8:	181b      	adds	r3, r3, r0
 8007aca:	19da      	adds	r2, r3, r7
 8007acc:	2385      	movs	r3, #133	@ 0x85
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	58d3      	ldr	r3, [r2, r3]
 8007ad2:	2294      	movs	r2, #148	@ 0x94
 8007ad4:	0092      	lsls	r2, r2, #2
 8007ad6:	18ba      	adds	r2, r7, r2
 8007ad8:	6013      	str	r3, [r2, #0]
 8007ada:	e01b      	b.n	8007b14 <f_open+0x1dc>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007adc:	2394      	movs	r3, #148	@ 0x94
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	330b      	adds	r3, #11
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	001a      	movs	r2, r3
 8007aea:	2311      	movs	r3, #17
 8007aec:	4013      	ands	r3, r2
 8007aee:	d004      	beq.n	8007afa <f_open+0x1c2>
					res = FR_DENIED;
 8007af0:	4b71      	ldr	r3, [pc, #452]	@ (8007cb8 <f_open+0x380>)
 8007af2:	18fb      	adds	r3, r7, r3
 8007af4:	2207      	movs	r2, #7
 8007af6:	701a      	strb	r2, [r3, #0]
 8007af8:	e00c      	b.n	8007b14 <f_open+0x1dc>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007afa:	4b6e      	ldr	r3, [pc, #440]	@ (8007cb4 <f_open+0x37c>)
 8007afc:	2296      	movs	r2, #150	@ 0x96
 8007afe:	0092      	lsls	r2, r2, #2
 8007b00:	189b      	adds	r3, r3, r2
 8007b02:	19db      	adds	r3, r3, r7
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	2204      	movs	r2, #4
 8007b08:	4013      	ands	r3, r2
 8007b0a:	d003      	beq.n	8007b14 <f_open+0x1dc>
						res = FR_EXIST;
 8007b0c:	4b6a      	ldr	r3, [pc, #424]	@ (8007cb8 <f_open+0x380>)
 8007b0e:	18fb      	adds	r3, r7, r3
 8007b10:	2208      	movs	r2, #8
 8007b12:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007b14:	4868      	ldr	r0, [pc, #416]	@ (8007cb8 <f_open+0x380>)
 8007b16:	183b      	adds	r3, r7, r0
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d000      	beq.n	8007b20 <f_open+0x1e8>
 8007b1e:	e0e6      	b.n	8007cee <f_open+0x3b6>
 8007b20:	4b64      	ldr	r3, [pc, #400]	@ (8007cb4 <f_open+0x37c>)
 8007b22:	2496      	movs	r4, #150	@ 0x96
 8007b24:	00a4      	lsls	r4, r4, #2
 8007b26:	191b      	adds	r3, r3, r4
 8007b28:	19db      	adds	r3, r3, r7
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	2208      	movs	r2, #8
 8007b2e:	4013      	ands	r3, r2
 8007b30:	d100      	bne.n	8007b34 <f_open+0x1fc>
 8007b32:	e0dc      	b.n	8007cee <f_open+0x3b6>
				dw = GET_FATTIME();				/* Created time */
 8007b34:	f7fc ff6e 	bl	8004a14 <get_fattime>
 8007b38:	0003      	movs	r3, r0
 8007b3a:	2692      	movs	r6, #146	@ 0x92
 8007b3c:	00b6      	lsls	r6, r6, #2
 8007b3e:	19ba      	adds	r2, r7, r6
 8007b40:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007b42:	2194      	movs	r1, #148	@ 0x94
 8007b44:	0089      	lsls	r1, r1, #2
 8007b46:	187b      	adds	r3, r7, r1
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	330e      	adds	r3, #14
 8007b4c:	19ba      	adds	r2, r7, r6
 8007b4e:	6812      	ldr	r2, [r2, #0]
 8007b50:	b2d2      	uxtb	r2, r2
 8007b52:	701a      	strb	r2, [r3, #0]
 8007b54:	19bb      	adds	r3, r7, r6
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	0a1b      	lsrs	r3, r3, #8
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	187b      	adds	r3, r7, r1
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	330f      	adds	r3, #15
 8007b64:	b2d2      	uxtb	r2, r2
 8007b66:	701a      	strb	r2, [r3, #0]
 8007b68:	19bb      	adds	r3, r7, r6
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	0c1a      	lsrs	r2, r3, #16
 8007b6e:	187b      	adds	r3, r7, r1
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3310      	adds	r3, #16
 8007b74:	b2d2      	uxtb	r2, r2
 8007b76:	701a      	strb	r2, [r3, #0]
 8007b78:	19bb      	adds	r3, r7, r6
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	0e1a      	lsrs	r2, r3, #24
 8007b7e:	187b      	adds	r3, r7, r1
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3311      	adds	r3, #17
 8007b84:	b2d2      	uxtb	r2, r2
 8007b86:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007b88:	187b      	adds	r3, r7, r1
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	330b      	adds	r3, #11
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007b92:	187b      	adds	r3, r7, r1
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	331c      	adds	r3, #28
 8007b98:	2200      	movs	r2, #0
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	187b      	adds	r3, r7, r1
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	331d      	adds	r3, #29
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	187b      	adds	r3, r7, r1
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	331e      	adds	r3, #30
 8007bac:	2200      	movs	r2, #0
 8007bae:	701a      	strb	r2, [r3, #0]
 8007bb0:	187b      	adds	r3, r7, r1
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	331f      	adds	r3, #31
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007bba:	4b40      	ldr	r3, [pc, #256]	@ (8007cbc <f_open+0x384>)
 8007bbc:	0025      	movs	r5, r4
 8007bbe:	191b      	adds	r3, r3, r4
 8007bc0:	19da      	adds	r2, r3, r7
 8007bc2:	2380      	movs	r3, #128	@ 0x80
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	58d3      	ldr	r3, [r2, r3]
 8007bc8:	000c      	movs	r4, r1
 8007bca:	187a      	adds	r2, r7, r1
 8007bcc:	6812      	ldr	r2, [r2, #0]
 8007bce:	0011      	movs	r1, r2
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f7fe f926 	bl	8005e22 <ld_clust>
 8007bd6:	0003      	movs	r3, r0
 8007bd8:	2191      	movs	r1, #145	@ 0x91
 8007bda:	0089      	lsls	r1, r1, #2
 8007bdc:	187a      	adds	r2, r7, r1
 8007bde:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007be0:	193b      	adds	r3, r7, r4
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2100      	movs	r1, #0
 8007be6:	0018      	movs	r0, r3
 8007be8:	f7fe f94a 	bl	8005e80 <st_clust>
				dj.fs->wflag = 1;
 8007bec:	4b33      	ldr	r3, [pc, #204]	@ (8007cbc <f_open+0x384>)
 8007bee:	195b      	adds	r3, r3, r5
 8007bf0:	19da      	adds	r2, r3, r7
 8007bf2:	2380      	movs	r3, #128	@ 0x80
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	58d2      	ldr	r2, [r2, r3]
 8007bf8:	2381      	movs	r3, #129	@ 0x81
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	54d1      	strb	r1, [r2, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 8007c00:	2191      	movs	r1, #145	@ 0x91
 8007c02:	0089      	lsls	r1, r1, #2
 8007c04:	187b      	adds	r3, r7, r1
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d100      	bne.n	8007c0e <f_open+0x2d6>
 8007c0c:	e06f      	b.n	8007cee <f_open+0x3b6>
					dw = dj.fs->winsect;
 8007c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8007cbc <f_open+0x384>)
 8007c10:	195b      	adds	r3, r3, r5
 8007c12:	19da      	adds	r2, r3, r7
 8007c14:	2380      	movs	r3, #128	@ 0x80
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	58d2      	ldr	r2, [r2, r3]
 8007c1a:	238b      	movs	r3, #139	@ 0x8b
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	58d3      	ldr	r3, [r2, r3]
 8007c20:	19ba      	adds	r2, r7, r6
 8007c22:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8007c24:	4b25      	ldr	r3, [pc, #148]	@ (8007cbc <f_open+0x384>)
 8007c26:	195b      	adds	r3, r3, r5
 8007c28:	19da      	adds	r2, r3, r7
 8007c2a:	2380      	movs	r3, #128	@ 0x80
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	58d3      	ldr	r3, [r2, r3]
 8007c30:	4821      	ldr	r0, [pc, #132]	@ (8007cb8 <f_open+0x380>)
 8007c32:	183c      	adds	r4, r7, r0
 8007c34:	187a      	adds	r2, r7, r1
 8007c36:	6812      	ldr	r2, [r2, #0]
 8007c38:	0011      	movs	r1, r2
 8007c3a:	0018      	movs	r0, r3
 8007c3c:	f7fd fd6a 	bl	8005714 <remove_chain>
 8007c40:	0003      	movs	r3, r0
 8007c42:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 8007c44:	481c      	ldr	r0, [pc, #112]	@ (8007cb8 <f_open+0x380>)
 8007c46:	183b      	adds	r3, r7, r0
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d14f      	bne.n	8007cee <f_open+0x3b6>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8007cbc <f_open+0x384>)
 8007c50:	195b      	adds	r3, r3, r5
 8007c52:	19da      	adds	r2, r3, r7
 8007c54:	2380      	movs	r3, #128	@ 0x80
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	58d2      	ldr	r2, [r2, r3]
 8007c5a:	2191      	movs	r1, #145	@ 0x91
 8007c5c:	0089      	lsls	r1, r1, #2
 8007c5e:	187b      	adds	r3, r7, r1
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	1e59      	subs	r1, r3, #1
 8007c64:	2383      	movs	r3, #131	@ 0x83
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	50d1      	str	r1, [r2, r3]
						res = move_window(dj.fs, dw);
 8007c6a:	4b14      	ldr	r3, [pc, #80]	@ (8007cbc <f_open+0x384>)
 8007c6c:	195b      	adds	r3, r3, r5
 8007c6e:	19da      	adds	r2, r3, r7
 8007c70:	2380      	movs	r3, #128	@ 0x80
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	58d3      	ldr	r3, [r2, r3]
 8007c76:	183c      	adds	r4, r7, r0
 8007c78:	19ba      	adds	r2, r7, r6
 8007c7a:	6812      	ldr	r2, [r2, #0]
 8007c7c:	0011      	movs	r1, r2
 8007c7e:	0018      	movs	r0, r3
 8007c80:	f7fd fa24 	bl	80050cc <move_window>
 8007c84:	0003      	movs	r3, r0
 8007c86:	7023      	strb	r3, [r4, #0]
 8007c88:	e031      	b.n	8007cee <f_open+0x3b6>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007c8a:	490b      	ldr	r1, [pc, #44]	@ (8007cb8 <f_open+0x380>)
 8007c8c:	187b      	adds	r3, r7, r1
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d12c      	bne.n	8007cee <f_open+0x3b6>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007c94:	2394      	movs	r3, #148	@ 0x94
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	18fb      	adds	r3, r7, r3
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	330b      	adds	r3, #11
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	001a      	movs	r2, r3
 8007ca2:	2310      	movs	r3, #16
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	d00b      	beq.n	8007cc0 <f_open+0x388>
					res = FR_NO_FILE;
 8007ca8:	187b      	adds	r3, r7, r1
 8007caa:	2204      	movs	r2, #4
 8007cac:	701a      	strb	r2, [r3, #0]
 8007cae:	e01e      	b.n	8007cee <f_open+0x3b6>
 8007cb0:	fffffda4 	.word	0xfffffda4
 8007cb4:	fffffdaf 	.word	0xfffffdaf
 8007cb8:	00000257 	.word	0x00000257
 8007cbc:	fffffdc4 	.word	0xfffffdc4
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007cc0:	4b6c      	ldr	r3, [pc, #432]	@ (8007e74 <f_open+0x53c>)
 8007cc2:	2296      	movs	r2, #150	@ 0x96
 8007cc4:	0092      	lsls	r2, r2, #2
 8007cc6:	189b      	adds	r3, r3, r2
 8007cc8:	19db      	adds	r3, r3, r7
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2202      	movs	r2, #2
 8007cce:	4013      	ands	r3, r2
 8007cd0:	d00d      	beq.n	8007cee <f_open+0x3b6>
 8007cd2:	2394      	movs	r3, #148	@ 0x94
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	18fb      	adds	r3, r7, r3
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	330b      	adds	r3, #11
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	001a      	movs	r2, r3
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	d003      	beq.n	8007cee <f_open+0x3b6>
						res = FR_DENIED;
 8007ce6:	4b64      	ldr	r3, [pc, #400]	@ (8007e78 <f_open+0x540>)
 8007ce8:	18fb      	adds	r3, r7, r3
 8007cea:	2207      	movs	r2, #7
 8007cec:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007cee:	4b62      	ldr	r3, [pc, #392]	@ (8007e78 <f_open+0x540>)
 8007cf0:	18fb      	adds	r3, r7, r3
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d148      	bne.n	8007d8a <f_open+0x452>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007cf8:	4b5e      	ldr	r3, [pc, #376]	@ (8007e74 <f_open+0x53c>)
 8007cfa:	2196      	movs	r1, #150	@ 0x96
 8007cfc:	0089      	lsls	r1, r1, #2
 8007cfe:	185b      	adds	r3, r3, r1
 8007d00:	19db      	adds	r3, r3, r7
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2208      	movs	r2, #8
 8007d06:	4013      	ands	r3, r2
 8007d08:	d009      	beq.n	8007d1e <f_open+0x3e6>
				mode |= FA__WRITTEN;
 8007d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8007e74 <f_open+0x53c>)
 8007d0c:	185b      	adds	r3, r3, r1
 8007d0e:	19db      	adds	r3, r3, r7
 8007d10:	4a58      	ldr	r2, [pc, #352]	@ (8007e74 <f_open+0x53c>)
 8007d12:	1852      	adds	r2, r2, r1
 8007d14:	19d2      	adds	r2, r2, r7
 8007d16:	7812      	ldrb	r2, [r2, #0]
 8007d18:	2120      	movs	r1, #32
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007d1e:	4b57      	ldr	r3, [pc, #348]	@ (8007e7c <f_open+0x544>)
 8007d20:	2096      	movs	r0, #150	@ 0x96
 8007d22:	0080      	lsls	r0, r0, #2
 8007d24:	181b      	adds	r3, r3, r0
 8007d26:	19da      	adds	r2, r3, r7
 8007d28:	2380      	movs	r3, #128	@ 0x80
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	58d2      	ldr	r2, [r2, r3]
 8007d2e:	238b      	movs	r3, #139	@ 0x8b
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	58d1      	ldr	r1, [r2, r3]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	2387      	movs	r3, #135	@ 0x87
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	50d1      	str	r1, [r2, r3]
			fp->dir_ptr = dir;
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	2388      	movs	r3, #136	@ 0x88
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	2194      	movs	r1, #148	@ 0x94
 8007d44:	0089      	lsls	r1, r1, #2
 8007d46:	1879      	adds	r1, r7, r1
 8007d48:	6809      	ldr	r1, [r1, #0]
 8007d4a:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d4c:	4b49      	ldr	r3, [pc, #292]	@ (8007e74 <f_open+0x53c>)
 8007d4e:	181b      	adds	r3, r3, r0
 8007d50:	19db      	adds	r3, r3, r7
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2201      	movs	r2, #1
 8007d56:	429a      	cmp	r2, r3
 8007d58:	419b      	sbcs	r3, r3
 8007d5a:	425b      	negs	r3, r3
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	001a      	movs	r2, r3
 8007d60:	231c      	movs	r3, #28
 8007d62:	18fb      	adds	r3, r7, r3
 8007d64:	0011      	movs	r1, r2
 8007d66:	0018      	movs	r0, r3
 8007d68:	f7fd f826 	bl	8004db8 <inc_lock>
 8007d6c:	0001      	movs	r1, r0
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	238a      	movs	r3, #138	@ 0x8a
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	50d1      	str	r1, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	238a      	movs	r3, #138	@ 0x8a
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	58d3      	ldr	r3, [r2, r3]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d103      	bne.n	8007d8a <f_open+0x452>
 8007d82:	4b3d      	ldr	r3, [pc, #244]	@ (8007e78 <f_open+0x540>)
 8007d84:	18fb      	adds	r3, r7, r3
 8007d86:	2202      	movs	r2, #2
 8007d88:	701a      	strb	r2, [r3, #0]
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 8007d8a:	2393      	movs	r3, #147	@ 0x93
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	18fb      	adds	r3, r7, r3
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	0018      	movs	r0, r3
 8007d94:	f001 fb85 	bl	80094a2 <ff_memfree>

		if (res == FR_OK) {
 8007d98:	4b37      	ldr	r3, [pc, #220]	@ (8007e78 <f_open+0x540>)
 8007d9a:	18fb      	adds	r3, r7, r3
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d15e      	bne.n	8007e60 <f_open+0x528>
			fp->flag = mode;					/* File access mode */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4a33      	ldr	r2, [pc, #204]	@ (8007e74 <f_open+0x53c>)
 8007da6:	2596      	movs	r5, #150	@ 0x96
 8007da8:	00ad      	lsls	r5, r5, #2
 8007daa:	1952      	adds	r2, r2, r5
 8007dac:	19d2      	adds	r2, r2, r7
 8007dae:	4934      	ldr	r1, [pc, #208]	@ (8007e80 <f_open+0x548>)
 8007db0:	7812      	ldrb	r2, [r2, #0]
 8007db2:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4a33      	ldr	r2, [pc, #204]	@ (8007e84 <f_open+0x54c>)
 8007db8:	2100      	movs	r1, #0
 8007dba:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8007e7c <f_open+0x544>)
 8007dbe:	195b      	adds	r3, r3, r5
 8007dc0:	19da      	adds	r2, r3, r7
 8007dc2:	2380      	movs	r3, #128	@ 0x80
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	58d3      	ldr	r3, [r2, r3]
 8007dc8:	2494      	movs	r4, #148	@ 0x94
 8007dca:	00a4      	lsls	r4, r4, #2
 8007dcc:	193a      	adds	r2, r7, r4
 8007dce:	6812      	ldr	r2, [r2, #0]
 8007dd0:	0011      	movs	r1, r2
 8007dd2:	0018      	movs	r0, r3
 8007dd4:	f7fe f825 	bl	8005e22 <ld_clust>
 8007dd8:	0001      	movs	r1, r0
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	2384      	movs	r3, #132	@ 0x84
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	50d1      	str	r1, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007de2:	0021      	movs	r1, r4
 8007de4:	187b      	adds	r3, r7, r1
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	331f      	adds	r3, #31
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	061a      	lsls	r2, r3, #24
 8007dee:	187b      	adds	r3, r7, r1
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	331e      	adds	r3, #30
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	041b      	lsls	r3, r3, #16
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	187b      	adds	r3, r7, r1
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	331d      	adds	r3, #29
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	021b      	lsls	r3, r3, #8
 8007e04:	4313      	orrs	r3, r2
 8007e06:	187a      	adds	r2, r7, r1
 8007e08:	6812      	ldr	r2, [r2, #0]
 8007e0a:	321c      	adds	r2, #28
 8007e0c:	7812      	ldrb	r2, [r2, #0]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	0019      	movs	r1, r3
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	2383      	movs	r3, #131	@ 0x83
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	50d1      	str	r1, [r2, r3]
			fp->fptr = 0;						/* File pointer */
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	2382      	movs	r3, #130	@ 0x82
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	2100      	movs	r1, #0
 8007e22:	50d1      	str	r1, [r2, r3]
			fp->dsect = 0;
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	2386      	movs	r3, #134	@ 0x86
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	50d1      	str	r1, [r2, r3]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	2389      	movs	r3, #137	@ 0x89
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	2100      	movs	r1, #0
 8007e36:	50d1      	str	r1, [r2, r3]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007e38:	4b10      	ldr	r3, [pc, #64]	@ (8007e7c <f_open+0x544>)
 8007e3a:	195b      	adds	r3, r3, r5
 8007e3c:	19da      	adds	r2, r3, r7
 8007e3e:	2380      	movs	r3, #128	@ 0x80
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	58d1      	ldr	r1, [r2, r3]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	2380      	movs	r3, #128	@ 0x80
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	2380      	movs	r3, #128	@ 0x80
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	58d3      	ldr	r3, [r2, r3]
 8007e54:	4a0a      	ldr	r2, [pc, #40]	@ (8007e80 <f_open+0x548>)
 8007e56:	5a99      	ldrh	r1, [r3, r2]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	2381      	movs	r3, #129	@ 0x81
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	52d1      	strh	r1, [r2, r3]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007e60:	4b05      	ldr	r3, [pc, #20]	@ (8007e78 <f_open+0x540>)
 8007e62:	18fb      	adds	r3, r7, r3
 8007e64:	781b      	ldrb	r3, [r3, #0]
}
 8007e66:	0018      	movs	r0, r3
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	2397      	movs	r3, #151	@ 0x97
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	449d      	add	sp, r3
 8007e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e72:	46c0      	nop			@ (mov r8, r8)
 8007e74:	fffffdaf 	.word	0xfffffdaf
 8007e78:	00000257 	.word	0x00000257
 8007e7c:	fffffdc4 	.word	0xfffffdc4
 8007e80:	00000206 	.word	0x00000206
 8007e84:	00000207 	.word	0x00000207

08007e88 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007e88:	b5b0      	push	{r4, r5, r7, lr}
 8007e8a:	b08a      	sub	sp, #40	@ 0x28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007ea0:	2517      	movs	r5, #23
 8007ea2:	197c      	adds	r4, r7, r5
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	0018      	movs	r0, r3
 8007ea8:	f7ff fcb8 	bl	800781c <validate>
 8007eac:	0003      	movs	r3, r0
 8007eae:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007eb0:	197b      	adds	r3, r7, r5
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <f_write+0x36>
 8007eb8:	197b      	adds	r3, r7, r5
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	e1c5      	b.n	800824a <f_write+0x3c2>
	if (fp->err)							/* Check error */
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4acf      	ldr	r2, [pc, #828]	@ (8008200 <f_write+0x378>)
 8007ec2:	5c9b      	ldrb	r3, [r3, r2]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <f_write+0x48>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4acd      	ldr	r2, [pc, #820]	@ (8008200 <f_write+0x378>)
 8007ecc:	5c9b      	ldrb	r3, [r3, r2]
 8007ece:	e1bc      	b.n	800824a <f_write+0x3c2>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4acc      	ldr	r2, [pc, #816]	@ (8008204 <f_write+0x37c>)
 8007ed4:	5c9b      	ldrb	r3, [r3, r2]
 8007ed6:	001a      	movs	r2, r3
 8007ed8:	2302      	movs	r3, #2
 8007eda:	4013      	ands	r3, r2
 8007edc:	d101      	bne.n	8007ee2 <f_write+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007ede:	2307      	movs	r3, #7
 8007ee0:	e1b3      	b.n	800824a <f_write+0x3c2>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	2382      	movs	r3, #130	@ 0x82
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	58d2      	ldr	r2, [r2, r3]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	18d2      	adds	r2, r2, r3
 8007eee:	68f9      	ldr	r1, [r7, #12]
 8007ef0:	2382      	movs	r3, #130	@ 0x82
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	58cb      	ldr	r3, [r1, r3]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d300      	bcc.n	8007efc <f_write+0x74>
 8007efa:	e17c      	b.n	80081f6 <f_write+0x36e>
 8007efc:	2300      	movs	r3, #0
 8007efe:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007f00:	e179      	b.n	80081f6 <f_write+0x36e>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	2382      	movs	r3, #130	@ 0x82
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	58d3      	ldr	r3, [r2, r3]
 8007f0a:	05db      	lsls	r3, r3, #23
 8007f0c:	0ddb      	lsrs	r3, r3, #23
 8007f0e:	d000      	beq.n	8007f12 <f_write+0x8a>
 8007f10:	e133      	b.n	800817a <f_write+0x2f2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	2382      	movs	r3, #130	@ 0x82
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	58d3      	ldr	r3, [r2, r3]
 8007f1a:	0a5b      	lsrs	r3, r3, #9
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	68f9      	ldr	r1, [r7, #12]
 8007f20:	2380      	movs	r3, #128	@ 0x80
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	58cb      	ldr	r3, [r1, r3]
 8007f26:	49b8      	ldr	r1, [pc, #736]	@ (8008208 <f_write+0x380>)
 8007f28:	5c5b      	ldrb	r3, [r3, r1]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	b2d9      	uxtb	r1, r3
 8007f2e:	2016      	movs	r0, #22
 8007f30:	183b      	adds	r3, r7, r0
 8007f32:	400a      	ands	r2, r1
 8007f34:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
 8007f36:	183b      	adds	r3, r7, r0
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d15d      	bne.n	8007ffa <f_write+0x172>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	2382      	movs	r3, #130	@ 0x82
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	58d3      	ldr	r3, [r2, r3]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d112      	bne.n	8007f70 <f_write+0xe8>
					clst = fp->sclust;		/* Follow from the origin */
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	2384      	movs	r3, #132	@ 0x84
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	58d3      	ldr	r3, [r2, r3]
 8007f52:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d129      	bne.n	8007fae <f_write+0x126>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	2380      	movs	r3, #128	@ 0x80
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	58d3      	ldr	r3, [r2, r3]
 8007f62:	2100      	movs	r1, #0
 8007f64:	0018      	movs	r0, r3
 8007f66:	f7fd fc45 	bl	80057f4 <create_chain>
 8007f6a:	0003      	movs	r3, r0
 8007f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f6e:	e01e      	b.n	8007fae <f_write+0x126>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	2389      	movs	r3, #137	@ 0x89
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	58d3      	ldr	r3, [r2, r3]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00b      	beq.n	8007f94 <f_write+0x10c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	2382      	movs	r3, #130	@ 0x82
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	58d2      	ldr	r2, [r2, r3]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	0011      	movs	r1, r2
 8007f88:	0018      	movs	r0, r3
 8007f8a:	f7fd fce9 	bl	8005960 <clmt_clust>
 8007f8e:	0003      	movs	r3, r0
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f92:	e00c      	b.n	8007fae <f_write+0x126>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	2380      	movs	r3, #128	@ 0x80
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	58d0      	ldr	r0, [r2, r3]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	2385      	movs	r3, #133	@ 0x85
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	58d3      	ldr	r3, [r2, r3]
 8007fa4:	0019      	movs	r1, r3
 8007fa6:	f7fd fc25 	bl	80057f4 <create_chain>
 8007faa:	0003      	movs	r3, r0
 8007fac:	627b      	str	r3, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d100      	bne.n	8007fb6 <f_write+0x12e>
 8007fb4:	e12c      	b.n	8008210 <f_write+0x388>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d105      	bne.n	8007fc8 <f_write+0x140>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4a90      	ldr	r2, [pc, #576]	@ (8008200 <f_write+0x378>)
 8007fc0:	2102      	movs	r1, #2
 8007fc2:	5499      	strb	r1, [r3, r2]
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	e140      	b.n	800824a <f_write+0x3c2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fca:	3301      	adds	r3, #1
 8007fcc:	d105      	bne.n	8007fda <f_write+0x152>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4a8b      	ldr	r2, [pc, #556]	@ (8008200 <f_write+0x378>)
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	5499      	strb	r1, [r3, r2]
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e137      	b.n	800824a <f_write+0x3c2>
				fp->clust = clst;			/* Update current cluster */
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	2385      	movs	r3, #133	@ 0x85
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007fe2:	50d1      	str	r1, [r2, r3]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	2384      	movs	r3, #132	@ 0x84
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	58d3      	ldr	r3, [r2, r3]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d104      	bne.n	8007ffa <f_write+0x172>
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	2384      	movs	r3, #132	@ 0x84
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ff8:	50d1      	str	r1, [r2, r3]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4a81      	ldr	r2, [pc, #516]	@ (8008204 <f_write+0x37c>)
 8007ffe:	5c9b      	ldrb	r3, [r3, r2]
 8008000:	001a      	movs	r2, r3
 8008002:	2340      	movs	r3, #64	@ 0x40
 8008004:	4013      	ands	r3, r2
 8008006:	d01e      	beq.n	8008046 <f_write+0x1be>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	2380      	movs	r3, #128	@ 0x80
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	58d3      	ldr	r3, [r2, r3]
 8008010:	4a7e      	ldr	r2, [pc, #504]	@ (800820c <f_write+0x384>)
 8008012:	5c98      	ldrb	r0, [r3, r2]
 8008014:	68f9      	ldr	r1, [r7, #12]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	2386      	movs	r3, #134	@ 0x86
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	58d2      	ldr	r2, [r2, r3]
 800801e:	2301      	movs	r3, #1
 8008020:	f7fc fd78 	bl	8004b14 <disk_write>
 8008024:	1e03      	subs	r3, r0, #0
 8008026:	d005      	beq.n	8008034 <f_write+0x1ac>
					ABORT(fp->fs, FR_DISK_ERR);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4a75      	ldr	r2, [pc, #468]	@ (8008200 <f_write+0x378>)
 800802c:	2101      	movs	r1, #1
 800802e:	5499      	strb	r1, [r3, r2]
 8008030:	2301      	movs	r3, #1
 8008032:	e10a      	b.n	800824a <f_write+0x3c2>
				fp->flag &= ~FA__DIRTY;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	4a73      	ldr	r2, [pc, #460]	@ (8008204 <f_write+0x37c>)
 8008038:	5c9b      	ldrb	r3, [r3, r2]
 800803a:	2240      	movs	r2, #64	@ 0x40
 800803c:	4393      	bics	r3, r2
 800803e:	b2d9      	uxtb	r1, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4a70      	ldr	r2, [pc, #448]	@ (8008204 <f_write+0x37c>)
 8008044:	5499      	strb	r1, [r3, r2]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	2380      	movs	r3, #128	@ 0x80
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	58d0      	ldr	r0, [r2, r3]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	2385      	movs	r3, #133	@ 0x85
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	58d3      	ldr	r3, [r2, r3]
 8008056:	0019      	movs	r1, r3
 8008058:	f7fd f948 	bl	80052ec <clust2sect>
 800805c:	0003      	movs	r3, r0
 800805e:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d105      	bne.n	8008072 <f_write+0x1ea>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	4a65      	ldr	r2, [pc, #404]	@ (8008200 <f_write+0x378>)
 800806a:	2102      	movs	r1, #2
 800806c:	5499      	strb	r1, [r3, r2]
 800806e:	2302      	movs	r3, #2
 8008070:	e0eb      	b.n	800824a <f_write+0x3c2>
			sect += csect;
 8008072:	2016      	movs	r0, #22
 8008074:	183b      	adds	r3, r7, r0
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	18d3      	adds	r3, r2, r3
 800807c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	0a5b      	lsrs	r3, r3, #9
 8008082:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d04e      	beq.n	8008128 <f_write+0x2a0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800808a:	183b      	adds	r3, r7, r0
 800808c:	781a      	ldrb	r2, [r3, #0]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	18d3      	adds	r3, r2, r3
 8008092:	68f9      	ldr	r1, [r7, #12]
 8008094:	2280      	movs	r2, #128	@ 0x80
 8008096:	0092      	lsls	r2, r2, #2
 8008098:	588a      	ldr	r2, [r1, r2]
 800809a:	495b      	ldr	r1, [pc, #364]	@ (8008208 <f_write+0x380>)
 800809c:	5c52      	ldrb	r2, [r2, r1]
 800809e:	4293      	cmp	r3, r2
 80080a0:	d90a      	bls.n	80080b8 <f_write+0x230>
					cc = fp->fs->csize - csect;
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	2380      	movs	r3, #128	@ 0x80
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	58d3      	ldr	r3, [r2, r3]
 80080aa:	4a57      	ldr	r2, [pc, #348]	@ (8008208 <f_write+0x380>)
 80080ac:	5c9b      	ldrb	r3, [r3, r2]
 80080ae:	001a      	movs	r2, r3
 80080b0:	183b      	adds	r3, r7, r0
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	2380      	movs	r3, #128	@ 0x80
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	58d3      	ldr	r3, [r2, r3]
 80080c0:	4a52      	ldr	r2, [pc, #328]	@ (800820c <f_write+0x384>)
 80080c2:	5c98      	ldrb	r0, [r3, r2]
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	69b9      	ldr	r1, [r7, #24]
 80080ca:	f7fc fd23 	bl	8004b14 <disk_write>
 80080ce:	1e03      	subs	r3, r0, #0
 80080d0:	d005      	beq.n	80080de <f_write+0x256>
					ABORT(fp->fs, FR_DISK_ERR);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	4a4a      	ldr	r2, [pc, #296]	@ (8008200 <f_write+0x378>)
 80080d6:	2101      	movs	r1, #1
 80080d8:	5499      	strb	r1, [r3, r2]
 80080da:	2301      	movs	r3, #1
 80080dc:	e0b5      	b.n	800824a <f_write+0x3c2>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	2386      	movs	r3, #134	@ 0x86
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	58d2      	ldr	r2, [r2, r3]
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	69fa      	ldr	r2, [r7, #28]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d917      	bls.n	8008120 <f_write+0x298>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	2386      	movs	r3, #134	@ 0x86
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	58d2      	ldr	r2, [r2, r3]
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	025b      	lsls	r3, r3, #9
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	18d3      	adds	r3, r2, r3
 8008104:	2280      	movs	r2, #128	@ 0x80
 8008106:	0092      	lsls	r2, r2, #2
 8008108:	0019      	movs	r1, r3
 800810a:	f7fc fd53 	bl	8004bb4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4a3c      	ldr	r2, [pc, #240]	@ (8008204 <f_write+0x37c>)
 8008112:	5c9b      	ldrb	r3, [r3, r2]
 8008114:	2240      	movs	r2, #64	@ 0x40
 8008116:	4393      	bics	r3, r2
 8008118:	b2d9      	uxtb	r1, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4a39      	ldr	r2, [pc, #228]	@ (8008204 <f_write+0x37c>)
 800811e:	5499      	strb	r1, [r3, r2]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	025b      	lsls	r3, r3, #9
 8008124:	623b      	str	r3, [r7, #32]
				continue;
 8008126:	e04e      	b.n	80081c6 <f_write+0x33e>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	2386      	movs	r3, #134	@ 0x86
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	58d3      	ldr	r3, [r2, r3]
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	429a      	cmp	r2, r3
 8008134:	d01c      	beq.n	8008170 <f_write+0x2e8>
				if (fp->fptr < fp->fsize &&
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	2382      	movs	r3, #130	@ 0x82
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	58d2      	ldr	r2, [r2, r3]
 800813e:	68f9      	ldr	r1, [r7, #12]
 8008140:	2383      	movs	r3, #131	@ 0x83
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	58cb      	ldr	r3, [r1, r3]
 8008146:	429a      	cmp	r2, r3
 8008148:	d212      	bcs.n	8008170 <f_write+0x2e8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	2380      	movs	r3, #128	@ 0x80
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	58d3      	ldr	r3, [r2, r3]
 8008152:	4a2e      	ldr	r2, [pc, #184]	@ (800820c <f_write+0x384>)
 8008154:	5c98      	ldrb	r0, [r3, r2]
 8008156:	68f9      	ldr	r1, [r7, #12]
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	2301      	movs	r3, #1
 800815c:	f7fc fcb2 	bl	8004ac4 <disk_read>
 8008160:	1e03      	subs	r3, r0, #0
				if (fp->fptr < fp->fsize &&
 8008162:	d005      	beq.n	8008170 <f_write+0x2e8>
						ABORT(fp->fs, FR_DISK_ERR);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4a26      	ldr	r2, [pc, #152]	@ (8008200 <f_write+0x378>)
 8008168:	2101      	movs	r1, #1
 800816a:	5499      	strb	r1, [r3, r2]
 800816c:	2301      	movs	r3, #1
 800816e:	e06c      	b.n	800824a <f_write+0x3c2>
			}
#endif
			fp->dsect = sect;
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	2386      	movs	r3, #134	@ 0x86
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	6939      	ldr	r1, [r7, #16]
 8008178:	50d1      	str	r1, [r2, r3]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	2382      	movs	r3, #130	@ 0x82
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	58d3      	ldr	r3, [r2, r3]
 8008182:	05db      	lsls	r3, r3, #23
 8008184:	0ddb      	lsrs	r3, r3, #23
 8008186:	2280      	movs	r2, #128	@ 0x80
 8008188:	0092      	lsls	r2, r2, #2
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800818e:	6a3a      	ldr	r2, [r7, #32]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	429a      	cmp	r2, r3
 8008194:	d901      	bls.n	800819a <f_write+0x312>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	2382      	movs	r3, #130	@ 0x82
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	58d3      	ldr	r3, [r2, r3]
 80081a2:	05db      	lsls	r3, r3, #23
 80081a4:	0ddb      	lsrs	r3, r3, #23
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	18d3      	adds	r3, r2, r3
 80081aa:	6a3a      	ldr	r2, [r7, #32]
 80081ac:	69b9      	ldr	r1, [r7, #24]
 80081ae:	0018      	movs	r0, r3
 80081b0:	f7fc fd00 	bl	8004bb4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4a13      	ldr	r2, [pc, #76]	@ (8008204 <f_write+0x37c>)
 80081b8:	5c9b      	ldrb	r3, [r3, r2]
 80081ba:	2240      	movs	r2, #64	@ 0x40
 80081bc:	4313      	orrs	r3, r2
 80081be:	b2d9      	uxtb	r1, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4a10      	ldr	r2, [pc, #64]	@ (8008204 <f_write+0x37c>)
 80081c4:	5499      	strb	r1, [r3, r2]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	18d3      	adds	r3, r2, r3
 80081cc:	61bb      	str	r3, [r7, #24]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	2382      	movs	r3, #130	@ 0x82
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	58d2      	ldr	r2, [r2, r3]
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	18d1      	adds	r1, r2, r3
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	2382      	movs	r3, #130	@ 0x82
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	50d1      	str	r1, [r2, r3]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	18d2      	adds	r2, r2, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d000      	beq.n	80081fe <f_write+0x376>
 80081fc:	e681      	b.n	8007f02 <f_write+0x7a>
 80081fe:	e008      	b.n	8008212 <f_write+0x38a>
 8008200:	00000207 	.word	0x00000207
 8008204:	00000206 	.word	0x00000206
 8008208:	00000202 	.word	0x00000202
 800820c:	00000201 	.word	0x00000201
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008210:	46c0      	nop			@ (mov r8, r8)
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	2382      	movs	r3, #130	@ 0x82
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	58d2      	ldr	r2, [r2, r3]
 800821a:	68f9      	ldr	r1, [r7, #12]
 800821c:	2383      	movs	r3, #131	@ 0x83
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	58cb      	ldr	r3, [r1, r3]
 8008222:	429a      	cmp	r2, r3
 8008224:	d907      	bls.n	8008236 <f_write+0x3ae>
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	2382      	movs	r3, #130	@ 0x82
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	58d1      	ldr	r1, [r2, r3]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	2383      	movs	r3, #131	@ 0x83
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	50d1      	str	r1, [r2, r3]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4a06      	ldr	r2, [pc, #24]	@ (8008254 <f_write+0x3cc>)
 800823a:	5c9b      	ldrb	r3, [r3, r2]
 800823c:	2220      	movs	r2, #32
 800823e:	4313      	orrs	r3, r2
 8008240:	b2d9      	uxtb	r1, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4a03      	ldr	r2, [pc, #12]	@ (8008254 <f_write+0x3cc>)
 8008246:	5499      	strb	r1, [r3, r2]

	LEAVE_FF(fp->fs, FR_OK);
 8008248:	2300      	movs	r3, #0
}
 800824a:	0018      	movs	r0, r3
 800824c:	46bd      	mov	sp, r7
 800824e:	b00a      	add	sp, #40	@ 0x28
 8008250:	bdb0      	pop	{r4, r5, r7, pc}
 8008252:	46c0      	nop			@ (mov r8, r8)
 8008254:	00000206 	.word	0x00000206

08008258 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008258:	b5b0      	push	{r4, r5, r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008260:	2517      	movs	r5, #23
 8008262:	197c      	adds	r4, r7, r5
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	0018      	movs	r0, r3
 8008268:	f7ff fad8 	bl	800781c <validate>
 800826c:	0003      	movs	r3, r0
 800826e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008270:	197b      	adds	r3, r7, r5
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d000      	beq.n	800827a <f_sync+0x22>
 8008278:	e0b9      	b.n	80083ee <f_sync+0x196>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a5f      	ldr	r2, [pc, #380]	@ (80083fc <f_sync+0x1a4>)
 800827e:	5c9b      	ldrb	r3, [r3, r2]
 8008280:	001a      	movs	r2, r3
 8008282:	2320      	movs	r3, #32
 8008284:	4013      	ands	r3, r2
 8008286:	d100      	bne.n	800828a <f_sync+0x32>
 8008288:	e0b1      	b.n	80083ee <f_sync+0x196>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a5b      	ldr	r2, [pc, #364]	@ (80083fc <f_sync+0x1a4>)
 800828e:	5c9b      	ldrb	r3, [r3, r2]
 8008290:	001a      	movs	r2, r3
 8008292:	2340      	movs	r3, #64	@ 0x40
 8008294:	4013      	ands	r3, r2
 8008296:	d01a      	beq.n	80082ce <f_sync+0x76>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	2380      	movs	r3, #128	@ 0x80
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	58d3      	ldr	r3, [r2, r3]
 80082a0:	4a57      	ldr	r2, [pc, #348]	@ (8008400 <f_sync+0x1a8>)
 80082a2:	5c98      	ldrb	r0, [r3, r2]
 80082a4:	6879      	ldr	r1, [r7, #4]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	2386      	movs	r3, #134	@ 0x86
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	58d2      	ldr	r2, [r2, r3]
 80082ae:	2301      	movs	r3, #1
 80082b0:	f7fc fc30 	bl	8004b14 <disk_write>
 80082b4:	1e03      	subs	r3, r0, #0
 80082b6:	d001      	beq.n	80082bc <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80082b8:	2301      	movs	r3, #1
 80082ba:	e09b      	b.n	80083f4 <f_sync+0x19c>
				fp->flag &= ~FA__DIRTY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a4f      	ldr	r2, [pc, #316]	@ (80083fc <f_sync+0x1a4>)
 80082c0:	5c9b      	ldrb	r3, [r3, r2]
 80082c2:	2240      	movs	r2, #64	@ 0x40
 80082c4:	4393      	bics	r3, r2
 80082c6:	b2d9      	uxtb	r1, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a4c      	ldr	r2, [pc, #304]	@ (80083fc <f_sync+0x1a4>)
 80082cc:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	2380      	movs	r3, #128	@ 0x80
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	58d0      	ldr	r0, [r2, r3]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	2387      	movs	r3, #135	@ 0x87
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	58d3      	ldr	r3, [r2, r3]
 80082de:	2517      	movs	r5, #23
 80082e0:	197c      	adds	r4, r7, r5
 80082e2:	0019      	movs	r1, r3
 80082e4:	f7fc fef2 	bl	80050cc <move_window>
 80082e8:	0003      	movs	r3, r0
 80082ea:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 80082ec:	002c      	movs	r4, r5
 80082ee:	193b      	adds	r3, r7, r4
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d17b      	bne.n	80083ee <f_sync+0x196>
				dir = fp->dir_ptr;
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	2388      	movs	r3, #136	@ 0x88
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	58d3      	ldr	r3, [r2, r3]
 80082fe:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	330b      	adds	r3, #11
 8008304:	781a      	ldrb	r2, [r3, #0]
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	330b      	adds	r3, #11
 800830a:	2120      	movs	r1, #32
 800830c:	430a      	orrs	r2, r1
 800830e:	b2d2      	uxtb	r2, r2
 8008310:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	2383      	movs	r3, #131	@ 0x83
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	58d2      	ldr	r2, [r2, r3]
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	331c      	adds	r3, #28
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	701a      	strb	r2, [r3, #0]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	2383      	movs	r3, #131	@ 0x83
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	58d3      	ldr	r3, [r2, r3]
 800832a:	b29b      	uxth	r3, r3
 800832c:	0a1b      	lsrs	r3, r3, #8
 800832e:	b29a      	uxth	r2, r3
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	331d      	adds	r3, #29
 8008334:	b2d2      	uxtb	r2, r2
 8008336:	701a      	strb	r2, [r3, #0]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	2383      	movs	r3, #131	@ 0x83
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	58d3      	ldr	r3, [r2, r3]
 8008340:	0c1a      	lsrs	r2, r3, #16
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	331e      	adds	r3, #30
 8008346:	b2d2      	uxtb	r2, r2
 8008348:	701a      	strb	r2, [r3, #0]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	2383      	movs	r3, #131	@ 0x83
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	58d3      	ldr	r3, [r2, r3]
 8008352:	0e1a      	lsrs	r2, r3, #24
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	331f      	adds	r3, #31
 8008358:	b2d2      	uxtb	r2, r2
 800835a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	2384      	movs	r3, #132	@ 0x84
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	58d2      	ldr	r2, [r2, r3]
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	0011      	movs	r1, r2
 8008368:	0018      	movs	r0, r3
 800836a:	f7fd fd89 	bl	8005e80 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800836e:	f7fc fb51 	bl	8004a14 <get_fattime>
 8008372:	0003      	movs	r3, r0
 8008374:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	3316      	adds	r3, #22
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	b2d2      	uxtb	r2, r2
 800837e:	701a      	strb	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	b29b      	uxth	r3, r3
 8008384:	0a1b      	lsrs	r3, r3, #8
 8008386:	b29a      	uxth	r2, r3
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	3317      	adds	r3, #23
 800838c:	b2d2      	uxtb	r2, r2
 800838e:	701a      	strb	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	0c1a      	lsrs	r2, r3, #16
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	3318      	adds	r3, #24
 8008398:	b2d2      	uxtb	r2, r2
 800839a:	701a      	strb	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	0e1a      	lsrs	r2, r3, #24
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	3319      	adds	r3, #25
 80083a4:	b2d2      	uxtb	r2, r2
 80083a6:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	3312      	adds	r3, #18
 80083ac:	2200      	movs	r2, #0
 80083ae:	701a      	strb	r2, [r3, #0]
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	3313      	adds	r3, #19
 80083b4:	2200      	movs	r2, #0
 80083b6:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a10      	ldr	r2, [pc, #64]	@ (80083fc <f_sync+0x1a4>)
 80083bc:	5c9b      	ldrb	r3, [r3, r2]
 80083be:	2220      	movs	r2, #32
 80083c0:	4393      	bics	r3, r2
 80083c2:	b2d9      	uxtb	r1, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a0d      	ldr	r2, [pc, #52]	@ (80083fc <f_sync+0x1a4>)
 80083c8:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	2380      	movs	r3, #128	@ 0x80
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	58d2      	ldr	r2, [r2, r3]
 80083d2:	2381      	movs	r3, #129	@ 0x81
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	2101      	movs	r1, #1
 80083d8:	54d1      	strb	r1, [r2, r3]
				res = sync_fs(fp->fs);
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	2380      	movs	r3, #128	@ 0x80
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	58d3      	ldr	r3, [r2, r3]
 80083e2:	193c      	adds	r4, r7, r4
 80083e4:	0018      	movs	r0, r3
 80083e6:	f7fc fead 	bl	8005144 <sync_fs>
 80083ea:	0003      	movs	r3, r0
 80083ec:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80083ee:	2317      	movs	r3, #23
 80083f0:	18fb      	adds	r3, r7, r3
 80083f2:	781b      	ldrb	r3, [r3, #0]
}
 80083f4:	0018      	movs	r0, r3
 80083f6:	46bd      	mov	sp, r7
 80083f8:	b006      	add	sp, #24
 80083fa:	bdb0      	pop	{r4, r5, r7, pc}
 80083fc:	00000206 	.word	0x00000206
 8008400:	00000201 	.word	0x00000201

08008404 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008404:	b5b0      	push	{r4, r5, r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800840c:	250f      	movs	r5, #15
 800840e:	197c      	adds	r4, r7, r5
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	0018      	movs	r0, r3
 8008414:	f7ff ff20 	bl	8008258 <f_sync>
 8008418:	0003      	movs	r3, r0
 800841a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800841c:	197b      	adds	r3, r7, r5
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d11f      	bne.n	8008464 <f_close+0x60>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008424:	197c      	adds	r4, r7, r5
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	0018      	movs	r0, r3
 800842a:	f7ff f9f7 	bl	800781c <validate>
 800842e:	0003      	movs	r3, r0
 8008430:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8008432:	0029      	movs	r1, r5
 8008434:	187b      	adds	r3, r7, r1
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d113      	bne.n	8008464 <f_close+0x60>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	238a      	movs	r3, #138	@ 0x8a
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	58d3      	ldr	r3, [r2, r3]
 8008444:	000d      	movs	r5, r1
 8008446:	187c      	adds	r4, r7, r1
 8008448:	0018      	movs	r0, r3
 800844a:	f7fc fd6d 	bl	8004f28 <dec_lock>
 800844e:	0003      	movs	r3, r0
 8008450:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8008452:	197b      	adds	r3, r7, r5
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d104      	bne.n	8008464 <f_close+0x60>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	2380      	movs	r3, #128	@ 0x80
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	2100      	movs	r1, #0
 8008462:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008464:	230f      	movs	r3, #15
 8008466:	18fb      	adds	r3, r7, r3
 8008468:	781b      	ldrb	r3, [r3, #0]
}
 800846a:	0018      	movs	r0, r3
 800846c:	46bd      	mov	sp, r7
 800846e:	b004      	add	sp, #16
 8008470:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008474 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008474:	b5b0      	push	{r4, r5, r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <f_opendir+0x14>
 8008484:	2309      	movs	r3, #9
 8008486:	e0ad      	b.n	80085e4 <f_opendir+0x170>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8008488:	251f      	movs	r5, #31
 800848a:	197c      	adds	r4, r7, r5
 800848c:	0039      	movs	r1, r7
 800848e:	2314      	movs	r3, #20
 8008490:	18fb      	adds	r3, r7, r3
 8008492:	2200      	movs	r2, #0
 8008494:	0018      	movs	r0, r3
 8008496:	f7fe fe9d 	bl	80071d4 <find_volume>
 800849a:	0003      	movs	r3, r0
 800849c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800849e:	197b      	adds	r3, r7, r5
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d000      	beq.n	80084a8 <f_opendir+0x34>
 80084a6:	e090      	b.n	80085ca <f_opendir+0x156>
		dp->fs = fs;
 80084a8:	6979      	ldr	r1, [r7, #20]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	2380      	movs	r3, #128	@ 0x80
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	50d1      	str	r1, [r2, r3]
		INIT_BUF(*dp);
 80084b2:	2380      	movs	r3, #128	@ 0x80
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	0018      	movs	r0, r3
 80084b8:	f000 ffe6 	bl	8009488 <ff_memalloc>
 80084bc:	0003      	movs	r3, r0
 80084be:	61bb      	str	r3, [r7, #24]
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <f_opendir+0x56>
 80084c6:	2311      	movs	r3, #17
 80084c8:	e08c      	b.n	80085e4 <f_opendir+0x170>
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	2388      	movs	r3, #136	@ 0x88
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	69b9      	ldr	r1, [r7, #24]
 80084d2:	50d1      	str	r1, [r2, r3]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	2386      	movs	r3, #134	@ 0x86
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	2108      	movs	r1, #8
 80084dc:	1879      	adds	r1, r7, r1
 80084de:	50d1      	str	r1, [r2, r3]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	251f      	movs	r5, #31
 80084e4:	197c      	adds	r4, r7, r5
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	0011      	movs	r1, r2
 80084ea:	0018      	movs	r0, r3
 80084ec:	f7fe fd38 	bl	8006f60 <follow_path>
 80084f0:	0003      	movs	r3, r0
 80084f2:	7023      	strb	r3, [r4, #0]
		FREE_BUF();
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	0018      	movs	r0, r3
 80084f8:	f000 ffd3 	bl	80094a2 <ff_memfree>
		if (res == FR_OK) {						/* Follow completed */
 80084fc:	197b      	adds	r3, r7, r5
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d15a      	bne.n	80085ba <f_opendir+0x146>
			if (dp->dir) {						/* It is not the origin directory itself */
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	2385      	movs	r3, #133	@ 0x85
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	58d3      	ldr	r3, [r2, r3]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01b      	beq.n	8008548 <f_opendir+0xd4>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	2385      	movs	r3, #133	@ 0x85
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	58d3      	ldr	r3, [r2, r3]
 8008518:	330b      	adds	r3, #11
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	001a      	movs	r2, r3
 800851e:	2310      	movs	r3, #16
 8008520:	4013      	ands	r3, r2
 8008522:	d00d      	beq.n	8008540 <f_opendir+0xcc>
					dp->sclust = ld_clust(fs, dp->dir);
 8008524:	6978      	ldr	r0, [r7, #20]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	2385      	movs	r3, #133	@ 0x85
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	58d3      	ldr	r3, [r2, r3]
 800852e:	0019      	movs	r1, r3
 8008530:	f7fd fc77 	bl	8005e22 <ld_clust>
 8008534:	0001      	movs	r1, r0
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	2382      	movs	r3, #130	@ 0x82
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	50d1      	str	r1, [r2, r3]
 800853e:	e003      	b.n	8008548 <f_opendir+0xd4>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8008540:	231f      	movs	r3, #31
 8008542:	18fb      	adds	r3, r7, r3
 8008544:	2205      	movs	r2, #5
 8008546:	701a      	strb	r2, [r3, #0]
			}
			if (res == FR_OK) {
 8008548:	241f      	movs	r4, #31
 800854a:	193b      	adds	r3, r7, r4
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d133      	bne.n	80085ba <f_opendir+0x146>
				dp->id = fs->id;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	4a25      	ldr	r2, [pc, #148]	@ (80085ec <f_opendir+0x178>)
 8008556:	5a99      	ldrh	r1, [r3, r2]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	2381      	movs	r3, #129	@ 0x81
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	52d1      	strh	r1, [r2, r3]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008560:	0025      	movs	r5, r4
 8008562:	193c      	adds	r4, r7, r4
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2100      	movs	r1, #0
 8008568:	0018      	movs	r0, r3
 800856a:	f7fd fa33 	bl	80059d4 <dir_sdi>
 800856e:	0003      	movs	r3, r0
 8008570:	7023      	strb	r3, [r4, #0]
#if _FS_LOCK
				if (res == FR_OK) {
 8008572:	002c      	movs	r4, r5
 8008574:	193b      	adds	r3, r7, r4
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d11e      	bne.n	80085ba <f_opendir+0x146>
					if (dp->sclust) {
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	2382      	movs	r3, #130	@ 0x82
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	58d3      	ldr	r3, [r2, r3]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d013      	beq.n	80085b0 <f_opendir+0x13c>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2100      	movs	r1, #0
 800858c:	0018      	movs	r0, r3
 800858e:	f7fc fc13 	bl	8004db8 <inc_lock>
 8008592:	0001      	movs	r1, r0
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	2387      	movs	r3, #135	@ 0x87
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	50d1      	str	r1, [r2, r3]
						if (!dp->lockid)
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	2387      	movs	r3, #135	@ 0x87
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	58d3      	ldr	r3, [r2, r3]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d108      	bne.n	80085ba <f_opendir+0x146>
							res = FR_TOO_MANY_OPEN_FILES;
 80085a8:	193b      	adds	r3, r7, r4
 80085aa:	2212      	movs	r2, #18
 80085ac:	701a      	strb	r2, [r3, #0]
 80085ae:	e004      	b.n	80085ba <f_opendir+0x146>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	2387      	movs	r3, #135	@ 0x87
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	2100      	movs	r1, #0
 80085b8:	50d1      	str	r1, [r2, r3]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80085ba:	221f      	movs	r2, #31
 80085bc:	18bb      	adds	r3, r7, r2
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d102      	bne.n	80085ca <f_opendir+0x156>
 80085c4:	18bb      	adds	r3, r7, r2
 80085c6:	2205      	movs	r2, #5
 80085c8:	701a      	strb	r2, [r3, #0]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 80085ca:	231f      	movs	r3, #31
 80085cc:	18fb      	adds	r3, r7, r3
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d004      	beq.n	80085de <f_opendir+0x16a>
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	2380      	movs	r3, #128	@ 0x80
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	2100      	movs	r1, #0
 80085dc:	50d1      	str	r1, [r2, r3]

	LEAVE_FF(fs, res);
 80085de:	231f      	movs	r3, #31
 80085e0:	18fb      	adds	r3, r7, r3
 80085e2:	781b      	ldrb	r3, [r3, #0]
}
 80085e4:	0018      	movs	r0, r3
 80085e6:	46bd      	mov	sp, r7
 80085e8:	b008      	add	sp, #32
 80085ea:	bdb0      	pop	{r4, r5, r7, pc}
 80085ec:	00000206 	.word	0x00000206

080085f0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80085f0:	b5b0      	push	{r4, r5, r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 80085f8:	250f      	movs	r5, #15
 80085fa:	197c      	adds	r4, r7, r5
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	0018      	movs	r0, r3
 8008600:	f7ff f90c 	bl	800781c <validate>
 8008604:	0003      	movs	r3, r0
 8008606:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008608:	0029      	movs	r1, r5
 800860a:	187b      	adds	r3, r7, r1
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d119      	bne.n	8008646 <f_closedir+0x56>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	2387      	movs	r3, #135	@ 0x87
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	58d3      	ldr	r3, [r2, r3]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d009      	beq.n	8008632 <f_closedir+0x42>
			res = dec_lock(dp->lockid);
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	2387      	movs	r3, #135	@ 0x87
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	58d3      	ldr	r3, [r2, r3]
 8008626:	187c      	adds	r4, r7, r1
 8008628:	0018      	movs	r0, r3
 800862a:	f7fc fc7d 	bl	8004f28 <dec_lock>
 800862e:	0003      	movs	r3, r0
 8008630:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK)
 8008632:	230f      	movs	r3, #15
 8008634:	18fb      	adds	r3, r7, r3
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d104      	bne.n	8008646 <f_closedir+0x56>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	2380      	movs	r3, #128	@ 0x80
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	2100      	movs	r1, #0
 8008644:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008646:	230f      	movs	r3, #15
 8008648:	18fb      	adds	r3, r7, r3
 800864a:	781b      	ldrb	r3, [r3, #0]
}
 800864c:	0018      	movs	r0, r3
 800864e:	46bd      	mov	sp, r7
 8008650:	b004      	add	sp, #16
 8008652:	bdb0      	pop	{r4, r5, r7, pc}

08008654 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008654:	b5b0      	push	{r4, r5, r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800865e:	251f      	movs	r5, #31
 8008660:	197c      	adds	r4, r7, r5
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	0018      	movs	r0, r3
 8008666:	f7ff f8d9 	bl	800781c <validate>
 800866a:	0003      	movs	r3, r0
 800866c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800866e:	002a      	movs	r2, r5
 8008670:	18bb      	adds	r3, r7, r2
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d15c      	bne.n	8008732 <f_readdir+0xde>
		if (!fno) {
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d108      	bne.n	8008690 <f_readdir+0x3c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800867e:	18bc      	adds	r4, r7, r2
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2100      	movs	r1, #0
 8008684:	0018      	movs	r0, r3
 8008686:	f7fd f9a5 	bl	80059d4 <dir_sdi>
 800868a:	0003      	movs	r3, r0
 800868c:	7023      	strb	r3, [r4, #0]
 800868e:	e050      	b.n	8008732 <f_readdir+0xde>
		} else {
			INIT_BUF(*dp);
 8008690:	2380      	movs	r3, #128	@ 0x80
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	0018      	movs	r0, r3
 8008696:	f000 fef7 	bl	8009488 <ff_memalloc>
 800869a:	0003      	movs	r3, r0
 800869c:	61bb      	str	r3, [r7, #24]
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <f_readdir+0x54>
 80086a4:	2311      	movs	r3, #17
 80086a6:	e047      	b.n	8008738 <f_readdir+0xe4>
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	2388      	movs	r3, #136	@ 0x88
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	69b9      	ldr	r1, [r7, #24]
 80086b0:	50d1      	str	r1, [r2, r3]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	2386      	movs	r3, #134	@ 0x86
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	210c      	movs	r1, #12
 80086ba:	1879      	adds	r1, r7, r1
 80086bc:	50d1      	str	r1, [r2, r3]
			res = dir_read(dp, 0);			/* Read an item */
 80086be:	251f      	movs	r5, #31
 80086c0:	197c      	adds	r4, r7, r5
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2100      	movs	r1, #0
 80086c6:	0018      	movs	r0, r3
 80086c8:	f7fd ff34 	bl	8006534 <dir_read>
 80086cc:	0003      	movs	r3, r0
 80086ce:	7023      	strb	r3, [r4, #0]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 80086d0:	0028      	movs	r0, r5
 80086d2:	183b      	adds	r3, r7, r0
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d107      	bne.n	80086ea <f_readdir+0x96>
				dp->sect = 0;
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	2384      	movs	r3, #132	@ 0x84
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	2100      	movs	r1, #0
 80086e2:	50d1      	str	r1, [r2, r3]
				res = FR_OK;
 80086e4:	183b      	adds	r3, r7, r0
 80086e6:	2200      	movs	r2, #0
 80086e8:	701a      	strb	r2, [r3, #0]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 80086ea:	251f      	movs	r5, #31
 80086ec:	197b      	adds	r3, r7, r5
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d11a      	bne.n	800872a <f_readdir+0xd6>
				get_fileinfo(dp, fno);		/* Get the object information */
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	0011      	movs	r1, r2
 80086fa:	0018      	movs	r0, r3
 80086fc:	f7fe f93a 	bl	8006974 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008700:	197c      	adds	r4, r7, r5
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2100      	movs	r1, #0
 8008706:	0018      	movs	r0, r3
 8008708:	f7fd fa14 	bl	8005b34 <dir_next>
 800870c:	0003      	movs	r3, r0
 800870e:	7023      	strb	r3, [r4, #0]
				if (res == FR_NO_FILE) {
 8008710:	0028      	movs	r0, r5
 8008712:	183b      	adds	r3, r7, r0
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b04      	cmp	r3, #4
 8008718:	d107      	bne.n	800872a <f_readdir+0xd6>
					dp->sect = 0;
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	2384      	movs	r3, #132	@ 0x84
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	2100      	movs	r1, #0
 8008722:	50d1      	str	r1, [r2, r3]
					res = FR_OK;
 8008724:	183b      	adds	r3, r7, r0
 8008726:	2200      	movs	r2, #0
 8008728:	701a      	strb	r2, [r3, #0]
				}
			}
			FREE_BUF();
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	0018      	movs	r0, r3
 800872e:	f000 feb8 	bl	80094a2 <ff_memfree>
		}
	}

	LEAVE_FF(dp->fs, res);
 8008732:	231f      	movs	r3, #31
 8008734:	18fb      	adds	r3, r7, r3
 8008736:	781b      	ldrb	r3, [r3, #0]
}
 8008738:	0018      	movs	r0, r3
 800873a:	46bd      	mov	sp, r7
 800873c:	b008      	add	sp, #32
 800873e:	bdb0      	pop	{r4, r5, r7, pc}

08008740 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008740:	b5b0      	push	{r4, r5, r7, lr}
 8008742:	b08e      	sub	sp, #56	@ 0x38
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800874c:	2537      	movs	r5, #55	@ 0x37
 800874e:	197c      	adds	r4, r7, r5
 8008750:	230c      	movs	r3, #12
 8008752:	18f9      	adds	r1, r7, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	0018      	movs	r0, r3
 800875a:	f7fe fd3b 	bl	80071d4 <find_volume>
 800875e:	0003      	movs	r3, r0
 8008760:	7023      	strb	r3, [r4, #0]
	fs = *fatfs;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8008768:	197b      	adds	r3, r7, r5
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d000      	beq.n	8008772 <f_getfree+0x32>
 8008770:	e0c1      	b.n	80088f6 <f_getfree+0x1b6>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	2384      	movs	r3, #132	@ 0x84
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	58d2      	ldr	r2, [r2, r3]
 800877a:	69f9      	ldr	r1, [r7, #28]
 800877c:	2385      	movs	r3, #133	@ 0x85
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	58cb      	ldr	r3, [r1, r3]
 8008782:	3b02      	subs	r3, #2
 8008784:	429a      	cmp	r2, r3
 8008786:	d806      	bhi.n	8008796 <f_getfree+0x56>
			*nclst = fs->free_clust;
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	2384      	movs	r3, #132	@ 0x84
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	58d2      	ldr	r2, [r2, r3]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	e0af      	b.n	80088f6 <f_getfree+0x1b6>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8008796:	201b      	movs	r0, #27
 8008798:	183b      	adds	r3, r7, r0
 800879a:	69f9      	ldr	r1, [r7, #28]
 800879c:	2280      	movs	r2, #128	@ 0x80
 800879e:	0092      	lsls	r2, r2, #2
 80087a0:	5c8a      	ldrb	r2, [r1, r2]
 80087a2:	701a      	strb	r2, [r3, #0]
			n = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fat == FS_FAT12) {
 80087a8:	183b      	adds	r3, r7, r0
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d12a      	bne.n	8008806 <f_getfree+0xc6>
				clst = 2;
 80087b0:	2302      	movs	r3, #2
 80087b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				do {
					stat = get_fat(fs, clst);
 80087b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	0011      	movs	r1, r2
 80087ba:	0018      	movs	r0, r3
 80087bc:	f7fc fdba 	bl	8005334 <get_fat>
 80087c0:	0003      	movs	r3, r0
 80087c2:	617b      	str	r3, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	3301      	adds	r3, #1
 80087c8:	d104      	bne.n	80087d4 <f_getfree+0x94>
 80087ca:	2337      	movs	r3, #55	@ 0x37
 80087cc:	18fb      	adds	r3, r7, r3
 80087ce:	2201      	movs	r2, #1
 80087d0:	701a      	strb	r2, [r3, #0]
 80087d2:	e07f      	b.n	80088d4 <f_getfree+0x194>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d104      	bne.n	80087e4 <f_getfree+0xa4>
 80087da:	2337      	movs	r3, #55	@ 0x37
 80087dc:	18fb      	adds	r3, r7, r3
 80087de:	2202      	movs	r2, #2
 80087e0:	701a      	strb	r2, [r3, #0]
 80087e2:	e077      	b.n	80088d4 <f_getfree+0x194>
					if (stat == 0) n++;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d102      	bne.n	80087f0 <f_getfree+0xb0>
 80087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ec:	3301      	adds	r3, #1
 80087ee:	633b      	str	r3, [r7, #48]	@ 0x30
				} while (++clst < fs->n_fatent);
 80087f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f2:	3301      	adds	r3, #1
 80087f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	2385      	movs	r3, #133	@ 0x85
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	58d3      	ldr	r3, [r2, r3]
 80087fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008800:	429a      	cmp	r2, r3
 8008802:	d3d7      	bcc.n	80087b4 <f_getfree+0x74>
 8008804:	e066      	b.n	80088d4 <f_getfree+0x194>
			} else {
				clst = fs->n_fatent;
 8008806:	69fa      	ldr	r2, [r7, #28]
 8008808:	2385      	movs	r3, #133	@ 0x85
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	58d3      	ldr	r3, [r2, r3]
 800880e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				sect = fs->fatbase;
 8008810:	69fa      	ldr	r2, [r7, #28]
 8008812:	2388      	movs	r3, #136	@ 0x88
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	58d3      	ldr	r3, [r2, r3]
 8008818:	62bb      	str	r3, [r7, #40]	@ 0x28
				i = 0; p = 0;
 800881a:	2300      	movs	r3, #0
 800881c:	627b      	str	r3, [r7, #36]	@ 0x24
 800881e:	2300      	movs	r3, #0
 8008820:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8008822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	d114      	bne.n	8008852 <f_getfree+0x112>
						res = move_window(fs, sect++);
 8008828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800882e:	2537      	movs	r5, #55	@ 0x37
 8008830:	197c      	adds	r4, r7, r5
 8008832:	69fa      	ldr	r2, [r7, #28]
 8008834:	0019      	movs	r1, r3
 8008836:	0010      	movs	r0, r2
 8008838:	f7fc fc48 	bl	80050cc <move_window>
 800883c:	0003      	movs	r3, r0
 800883e:	7023      	strb	r3, [r4, #0]
						if (res != FR_OK) break;
 8008840:	197b      	adds	r3, r7, r5
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d144      	bne.n	80088d2 <f_getfree+0x192>
						p = fs->win.d8;
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800884c:	2380      	movs	r3, #128	@ 0x80
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	627b      	str	r3, [r7, #36]	@ 0x24
					}
					if (fat == FS_FAT16) {
 8008852:	231b      	movs	r3, #27
 8008854:	18fb      	adds	r3, r7, r3
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b02      	cmp	r3, #2
 800885a:	d116      	bne.n	800888a <f_getfree+0x14a>
						if (LD_WORD(p) == 0) n++;
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	3301      	adds	r3, #1
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	b21b      	sxth	r3, r3
 8008864:	021b      	lsls	r3, r3, #8
 8008866:	b21a      	sxth	r2, r3
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	b21b      	sxth	r3, r3
 800886e:	4313      	orrs	r3, r2
 8008870:	b21b      	sxth	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d102      	bne.n	800887c <f_getfree+0x13c>
 8008876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008878:	3301      	adds	r3, #1
 800887a:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 2; i -= 2;
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	3302      	adds	r3, #2
 8008880:	623b      	str	r3, [r7, #32]
 8008882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008884:	3b02      	subs	r3, #2
 8008886:	627b      	str	r3, [r7, #36]	@ 0x24
 8008888:	e01c      	b.n	80088c4 <f_getfree+0x184>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	3303      	adds	r3, #3
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	061a      	lsls	r2, r3, #24
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	3302      	adds	r3, #2
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	041b      	lsls	r3, r3, #16
 800889a:	431a      	orrs	r2, r3
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	3301      	adds	r3, #1
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	4313      	orrs	r3, r2
 80088a6:	6a3a      	ldr	r2, [r7, #32]
 80088a8:	7812      	ldrb	r2, [r2, #0]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	011b      	lsls	r3, r3, #4
 80088ae:	091b      	lsrs	r3, r3, #4
 80088b0:	d102      	bne.n	80088b8 <f_getfree+0x178>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	3301      	adds	r3, #1
 80088b6:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 4; i -= 4;
 80088b8:	6a3b      	ldr	r3, [r7, #32]
 80088ba:	3304      	adds	r3, #4
 80088bc:	623b      	str	r3, [r7, #32]
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	3b04      	subs	r3, #4
 80088c2:	627b      	str	r3, [r7, #36]	@ 0x24
					}
				} while (--clst);
 80088c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c6:	3b01      	subs	r3, #1
 80088c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1a8      	bne.n	8008822 <f_getfree+0xe2>
 80088d0:	e000      	b.n	80088d4 <f_getfree+0x194>
						if (res != FR_OK) break;
 80088d2:	46c0      	nop			@ (mov r8, r8)
			}
			fs->free_clust = n;
 80088d4:	69fa      	ldr	r2, [r7, #28]
 80088d6:	2384      	movs	r3, #132	@ 0x84
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088dc:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	4a08      	ldr	r2, [pc, #32]	@ (8008904 <f_getfree+0x1c4>)
 80088e2:	5c9b      	ldrb	r3, [r3, r2]
 80088e4:	2201      	movs	r2, #1
 80088e6:	4313      	orrs	r3, r2
 80088e8:	b2d9      	uxtb	r1, r3
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	4a05      	ldr	r2, [pc, #20]	@ (8008904 <f_getfree+0x1c4>)
 80088ee:	5499      	strb	r1, [r3, r2]
			*nclst = n;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088f4:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80088f6:	2337      	movs	r3, #55	@ 0x37
 80088f8:	18fb      	adds	r3, r7, r3
 80088fa:	781b      	ldrb	r3, [r3, #0]
}
 80088fc:	0018      	movs	r0, r3
 80088fe:	46bd      	mov	sp, r7
 8008900:	b00e      	add	sp, #56	@ 0x38
 8008902:	bdb0      	pop	{r4, r5, r7, pc}
 8008904:	00000205 	.word	0x00000205

08008908 <f_mkfs>:
FRESULT f_mkfs (
	const TCHAR* path,	/* Logical drive number */
	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au				/* Size of allocation unit in unit of byte or sector */
)
{
 8008908:	b5b0      	push	{r4, r5, r7, lr}
 800890a:	b098      	sub	sp, #96	@ 0x60
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	607a      	str	r2, [r7, #4]
 8008912:	200b      	movs	r0, #11
 8008914:	183b      	adds	r3, r7, r0
 8008916:	1c0a      	adds	r2, r1, #0
 8008918:	701a      	strb	r2, [r3, #0]
	DWORD eb[2];
#endif


	/* Check mounted drive and clear work area */
	if (sfd > 1) return FR_INVALID_PARAMETER;
 800891a:	183b      	adds	r3, r7, r0
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d902      	bls.n	8008928 <f_mkfs+0x20>
 8008922:	2313      	movs	r3, #19
 8008924:	f000 fcc1 	bl	80092aa <f_mkfs+0x9a2>
	vol = get_ldnumber(&path);
 8008928:	230c      	movs	r3, #12
 800892a:	18fb      	adds	r3, r7, r3
 800892c:	0018      	movs	r0, r3
 800892e:	f7fe fb9f 	bl	8007070 <get_ldnumber>
 8008932:	0003      	movs	r3, r0
 8008934:	657b      	str	r3, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 8008936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008938:	2b00      	cmp	r3, #0
 800893a:	da02      	bge.n	8008942 <f_mkfs+0x3a>
 800893c:	230b      	movs	r3, #11
 800893e:	f000 fcb4 	bl	80092aa <f_mkfs+0x9a2>
	fs = FatFs[vol];
 8008942:	4bb3      	ldr	r3, [pc, #716]	@ (8008c10 <f_mkfs+0x308>)
 8008944:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008946:	0092      	lsls	r2, r2, #2
 8008948:	58d3      	ldr	r3, [r2, r3]
 800894a:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;
 800894c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800894e:	2b00      	cmp	r3, #0
 8008950:	d102      	bne.n	8008958 <f_mkfs+0x50>
 8008952:	230c      	movs	r3, #12
 8008954:	f000 fca9 	bl	80092aa <f_mkfs+0x9a2>
	fs->fs_type = 0;
 8008958:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800895a:	2380      	movs	r3, #128	@ 0x80
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	2100      	movs	r1, #0
 8008960:	54d1      	strb	r1, [r2, r3]
	pdrv = LD2PD(vol);	/* Physical drive */
 8008962:	214f      	movs	r1, #79	@ 0x4f
 8008964:	187b      	adds	r3, r7, r1
 8008966:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008968:	701a      	strb	r2, [r3, #0]
	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
 800896a:	234e      	movs	r3, #78	@ 0x4e
 800896c:	18fb      	adds	r3, r7, r3
 800896e:	2200      	movs	r2, #0
 8008970:	701a      	strb	r2, [r3, #0]

	/* Get disk statics */
	stat = disk_initialize(pdrv);
 8008972:	255f      	movs	r5, #95	@ 0x5f
 8008974:	197c      	adds	r4, r7, r5
 8008976:	187b      	adds	r3, r7, r1
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	0018      	movs	r0, r3
 800897c:	f7fc f872 	bl	8004a64 <disk_initialize>
 8008980:	0003      	movs	r3, r0
 8008982:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8008984:	197b      	adds	r3, r7, r5
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2201      	movs	r2, #1
 800898a:	4013      	ands	r3, r2
 800898c:	d002      	beq.n	8008994 <f_mkfs+0x8c>
 800898e:	2303      	movs	r3, #3
 8008990:	f000 fc8b 	bl	80092aa <f_mkfs+0x9a2>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8008994:	235f      	movs	r3, #95	@ 0x5f
 8008996:	18fb      	adds	r3, r7, r3
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2204      	movs	r2, #4
 800899c:	4013      	ands	r3, r2
 800899e:	d002      	beq.n	80089a6 <f_mkfs+0x9e>
 80089a0:	230a      	movs	r3, #10
 80089a2:	f000 fc82 	bl	80092aa <f_mkfs+0x9a2>
		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
 80089a6:	2314      	movs	r3, #20
 80089a8:	18fa      	adds	r2, r7, r3
 80089aa:	234f      	movs	r3, #79	@ 0x4f
 80089ac:	18fb      	adds	r3, r7, r3
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2101      	movs	r1, #1
 80089b2:	0018      	movs	r0, r3
 80089b4:	f7fc f8d6 	bl	8004b64 <disk_ioctl>
 80089b8:	1e03      	subs	r3, r0, #0
 80089ba:	d102      	bne.n	80089c2 <f_mkfs+0xba>
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	2b7f      	cmp	r3, #127	@ 0x7f
 80089c0:	d802      	bhi.n	80089c8 <f_mkfs+0xc0>
			return FR_DISK_ERR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	f000 fc71 	bl	80092aa <f_mkfs+0x9a2>
		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
 80089c8:	230b      	movs	r3, #11
 80089ca:	18fb      	adds	r3, r7, r3
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <f_mkfs+0xce>
 80089d2:	2300      	movs	r3, #0
 80089d4:	e000      	b.n	80089d8 <f_mkfs+0xd0>
 80089d6:	233f      	movs	r3, #63	@ 0x3f
 80089d8:	65bb      	str	r3, [r7, #88]	@ 0x58
		n_vol -= b_vol;				/* Volume size */
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	617b      	str	r3, [r7, #20]
	}

	if (au & (au - 1)) au = 0;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3b01      	subs	r3, #1
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	4013      	ands	r3, r2
 80089ea:	d001      	beq.n	80089f0 <f_mkfs+0xe8>
 80089ec:	2300      	movs	r3, #0
 80089ee:	607b      	str	r3, [r7, #4]
	if (!au) {						/* AU auto selection */
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d11a      	bne.n	8008a2c <f_mkfs+0x124>
		vs = n_vol / (2000 / (SS(fs) / 512));
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	22fa      	movs	r2, #250	@ 0xfa
 80089fa:	00d1      	lsls	r1, r2, #3
 80089fc:	0018      	movs	r0, r3
 80089fe:	f7f7 fb9f 	bl	8000140 <__udivsi3>
 8008a02:	0003      	movs	r3, r0
 8008a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for (i = 0; vs < vst[i]; i++) ;
 8008a06:	2300      	movs	r3, #0
 8008a08:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a0a:	e002      	b.n	8008a12 <f_mkfs+0x10a>
 8008a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a0e:	3301      	adds	r3, #1
 8008a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a12:	4b80      	ldr	r3, [pc, #512]	@ (8008c14 <f_mkfs+0x30c>)
 8008a14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a16:	0052      	lsls	r2, r2, #1
 8008a18:	5ad3      	ldrh	r3, [r2, r3]
 8008a1a:	001a      	movs	r2, r3
 8008a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d3f4      	bcc.n	8008a0c <f_mkfs+0x104>
		au = cst[i];
 8008a22:	4b7d      	ldr	r3, [pc, #500]	@ (8008c18 <f_mkfs+0x310>)
 8008a24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a26:	0052      	lsls	r2, r2, #1
 8008a28:	5ad3      	ldrh	r3, [r2, r3]
 8008a2a:	607b      	str	r3, [r7, #4]
	}
	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	2380      	movs	r3, #128	@ 0x80
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d302      	bcc.n	8008a3c <f_mkfs+0x134>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	0a5b      	lsrs	r3, r3, #9
 8008a3a:	607b      	str	r3, [r7, #4]
	if (!au) au = 1;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <f_mkfs+0x13e>
 8008a42:	2301      	movs	r3, #1
 8008a44:	607b      	str	r3, [r7, #4]
	if (au > 128) au = 128;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b80      	cmp	r3, #128	@ 0x80
 8008a4a:	d901      	bls.n	8008a50 <f_mkfs+0x148>
 8008a4c:	2380      	movs	r3, #128	@ 0x80
 8008a4e:	607b      	str	r3, [r7, #4]

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	0018      	movs	r0, r3
 8008a56:	f7f7 fb73 	bl	8000140 <__udivsi3>
 8008a5a:	0003      	movs	r3, r0
 8008a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	fmt = FS_FAT12;
 8008a5e:	2133      	movs	r1, #51	@ 0x33
 8008a60:	187b      	adds	r3, r7, r1
 8008a62:	2201      	movs	r2, #1
 8008a64:	701a      	strb	r2, [r3, #0]
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 8008a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a68:	4a6c      	ldr	r2, [pc, #432]	@ (8008c1c <f_mkfs+0x314>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d902      	bls.n	8008a74 <f_mkfs+0x16c>
 8008a6e:	187b      	adds	r3, r7, r1
 8008a70:	2202      	movs	r2, #2
 8008a72:	701a      	strb	r2, [r3, #0]
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 8008a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a76:	4a6a      	ldr	r2, [pc, #424]	@ (8008c20 <f_mkfs+0x318>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d903      	bls.n	8008a84 <f_mkfs+0x17c>
 8008a7c:	2333      	movs	r3, #51	@ 0x33
 8008a7e:	18fb      	adds	r3, r7, r3
 8008a80:	2203      	movs	r2, #3
 8008a82:	701a      	strb	r2, [r3, #0]

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
 8008a84:	2333      	movs	r3, #51	@ 0x33
 8008a86:	18fb      	adds	r3, r7, r3
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d10b      	bne.n	8008aa6 <f_mkfs+0x19e>
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 8008a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4a64      	ldr	r2, [pc, #400]	@ (8008c24 <f_mkfs+0x31c>)
 8008a94:	4694      	mov	ip, r2
 8008a96:	4463      	add	r3, ip
 8008a98:	0a5b      	lsrs	r3, r3, #9
 8008a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
		n_rsv = 32;
 8008a9c:	2320      	movs	r3, #32
 8008a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		n_dir = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aa4:	e01a      	b.n	8008adc <f_mkfs+0x1d4>
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
 8008aa6:	2333      	movs	r3, #51	@ 0x33
 8008aa8:	18fb      	adds	r3, r7, r3
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d107      	bne.n	8008ac0 <f_mkfs+0x1b8>
 8008ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ab2:	0013      	movs	r3, r2
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	189b      	adds	r3, r3, r2
 8008ab8:	3301      	adds	r3, #1
 8008aba:	085b      	lsrs	r3, r3, #1
 8008abc:	3303      	adds	r3, #3
 8008abe:	e002      	b.n	8008ac6 <f_mkfs+0x1be>
 8008ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac2:	3302      	adds	r3, #2
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aca:	4a57      	ldr	r2, [pc, #348]	@ (8008c28 <f_mkfs+0x320>)
 8008acc:	4694      	mov	ip, r2
 8008ace:	4463      	add	r3, ip
 8008ad0:	0a5b      	lsrs	r3, r3, #9
 8008ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
		n_rsv = 1;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
 8008ad8:	2320      	movs	r3, #32
 8008ada:	637b      	str	r3, [r7, #52]	@ 0x34
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
 8008adc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae0:	18d3      	adds	r3, r2, r3
 8008ae2:	643b      	str	r3, [r7, #64]	@ 0x40
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
 8008ae4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae8:	18d3      	adds	r3, r2, r3
 8008aea:	627b      	str	r3, [r7, #36]	@ 0x24
	b_data = b_dir + n_dir;				/* Data area start sector */
 8008aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af0:	18d3      	adds	r3, r2, r3
 8008af2:	623b      	str	r3, [r7, #32]
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8008af4:	6a3a      	ldr	r2, [r7, #32]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	18d2      	adds	r2, r2, r3
 8008afa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008afc:	1ad2      	subs	r2, r2, r3
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d902      	bls.n	8008b0a <f_mkfs+0x202>
 8008b04:	230e      	movs	r3, #14
 8008b06:	f000 fbd0 	bl	80092aa <f_mkfs+0x9a2>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
 8008b0a:	2318      	movs	r3, #24
 8008b0c:	18fa      	adds	r2, r7, r3
 8008b0e:	234f      	movs	r3, #79	@ 0x4f
 8008b10:	18fb      	adds	r3, r7, r3
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2103      	movs	r1, #3
 8008b16:	0018      	movs	r0, r3
 8008b18:	f7fc f824 	bl	8004b64 <disk_ioctl>
 8008b1c:	1e03      	subs	r3, r0, #0
 8008b1e:	d107      	bne.n	8008b30 <f_mkfs+0x228>
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d004      	beq.n	8008b30 <f_mkfs+0x228>
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	2380      	movs	r3, #128	@ 0x80
 8008b2a:	021b      	lsls	r3, r3, #8
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d901      	bls.n	8008b34 <f_mkfs+0x22c>
 8008b30:	2301      	movs	r3, #1
 8008b32:	61bb      	str	r3, [r7, #24]
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	18d3      	adds	r3, r2, r3
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	69ba      	ldr	r2, [r7, #24]
 8008b3e:	4252      	negs	r2, r2
 8008b40:	4013      	ands	r3, r2
 8008b42:	61bb      	str	r3, [r7, #24]
	n = (n - b_data) / N_FATS;
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	61bb      	str	r3, [r7, #24]
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 8008b4c:	2333      	movs	r3, #51	@ 0x33
 8008b4e:	18fb      	adds	r3, r7, r3
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d108      	bne.n	8008b68 <f_mkfs+0x260>
		n_rsv += n;
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008b5a:	18d3      	adds	r3, r2, r3
 8008b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		b_fat += n;
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b62:	18d3      	adds	r3, r2, r3
 8008b64:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b66:	e003      	b.n	8008b70 <f_mkfs+0x268>
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b6c:	18d3      	adds	r3, r2, r3
 8008b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b74:	1ad2      	subs	r2, r2, r3
 8008b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b78:	1ad2      	subs	r2, r2, r3
 8008b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	0018      	movs	r0, r3
 8008b82:	f7f7 fadd 	bl	8000140 <__udivsi3>
 8008b86:	0003      	movs	r3, r0
 8008b88:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 8008b8a:	2333      	movs	r3, #51	@ 0x33
 8008b8c:	18fb      	adds	r3, r7, r3
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d103      	bne.n	8008b9c <f_mkfs+0x294>
 8008b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b96:	4a21      	ldr	r2, [pc, #132]	@ (8008c1c <f_mkfs+0x314>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d908      	bls.n	8008bae <f_mkfs+0x2a6>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 8008b9c:	2333      	movs	r3, #51	@ 0x33
 8008b9e:	18fb      	adds	r3, r7, r3
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d105      	bne.n	8008bb2 <f_mkfs+0x2aa>
 8008ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c20 <f_mkfs+0x318>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d801      	bhi.n	8008bb2 <f_mkfs+0x2aa>
		return FR_MKFS_ABORTED;
 8008bae:	230e      	movs	r3, #14
 8008bb0:	e37b      	b.n	80092aa <f_mkfs+0x9a2>

	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
 8008bb2:	2333      	movs	r3, #51	@ 0x33
 8008bb4:	18fb      	adds	r3, r7, r3
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d104      	bne.n	8008bc6 <f_mkfs+0x2be>
		sys = 0x0C;		/* FAT32X */
 8008bbc:	234c      	movs	r3, #76	@ 0x4c
 8008bbe:	18fb      	adds	r3, r7, r3
 8008bc0:	220c      	movs	r2, #12
 8008bc2:	701a      	strb	r2, [r3, #0]
 8008bc4:	e019      	b.n	8008bfa <f_mkfs+0x2f2>
	} else {
		if (fmt == FS_FAT12 && n_vol < 0x10000) {
 8008bc6:	2333      	movs	r3, #51	@ 0x33
 8008bc8:	18fb      	adds	r3, r7, r3
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d109      	bne.n	8008be4 <f_mkfs+0x2dc>
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	2380      	movs	r3, #128	@ 0x80
 8008bd4:	025b      	lsls	r3, r3, #9
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d204      	bcs.n	8008be4 <f_mkfs+0x2dc>
			sys = 0x01;	/* FAT12(<65536) */
 8008bda:	234c      	movs	r3, #76	@ 0x4c
 8008bdc:	18fb      	adds	r3, r7, r3
 8008bde:	2201      	movs	r2, #1
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	e00a      	b.n	8008bfa <f_mkfs+0x2f2>
		} else {
			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	2380      	movs	r3, #128	@ 0x80
 8008be8:	025b      	lsls	r3, r3, #9
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d201      	bcs.n	8008bf2 <f_mkfs+0x2ea>
 8008bee:	2204      	movs	r2, #4
 8008bf0:	e000      	b.n	8008bf4 <f_mkfs+0x2ec>
 8008bf2:	2206      	movs	r2, #6
 8008bf4:	234c      	movs	r3, #76	@ 0x4c
 8008bf6:	18fb      	adds	r3, r7, r3
 8008bf8:	701a      	strb	r2, [r3, #0]
		tbl[4] = sys;
		if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to teh MBR */
			return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No partition table (SFD) */
 8008bfa:	230b      	movs	r3, #11
 8008bfc:	18fb      	adds	r3, r7, r3
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d013      	beq.n	8008c2c <f_mkfs+0x324>
			md = 0xF0;
 8008c04:	234d      	movs	r3, #77	@ 0x4d
 8008c06:	18fb      	adds	r3, r7, r3
 8008c08:	22f0      	movs	r2, #240	@ 0xf0
 8008c0a:	701a      	strb	r2, [r3, #0]
 8008c0c:	e088      	b.n	8008d20 <f_mkfs+0x418>
 8008c0e:	46c0      	nop			@ (mov r8, r8)
 8008c10:	200006c0 	.word	0x200006c0
 8008c14:	0800ae74 	.word	0x0800ae74
 8008c18:	0800ae8c 	.word	0x0800ae8c
 8008c1c:	00000ff5 	.word	0x00000ff5
 8008c20:	0000fff5 	.word	0x0000fff5
 8008c24:	00000207 	.word	0x00000207
 8008c28:	000001ff 	.word	0x000001ff
		} else {	/* Create partition table (FDISK) */
			mem_set(fs->win.d8, 0, SS(fs));
 8008c2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c2e:	2280      	movs	r2, #128	@ 0x80
 8008c30:	0092      	lsls	r2, r2, #2
 8008c32:	2100      	movs	r1, #0
 8008c34:	0018      	movs	r0, r3
 8008c36:	f7fb ffda 	bl	8004bee <mem_set>
			tbl = fs->win.d8 + MBR_Table;	/* Create partition table for single partition in the drive */
 8008c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c3c:	33bf      	adds	r3, #191	@ 0xbf
 8008c3e:	33ff      	adds	r3, #255	@ 0xff
 8008c40:	61fb      	str	r3, [r7, #28]
			tbl[1] = 1;						/* Partition start head */
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	3301      	adds	r3, #1
 8008c46:	2201      	movs	r2, #1
 8008c48:	701a      	strb	r2, [r3, #0]
			tbl[2] = 1;						/* Partition start sector */
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	3302      	adds	r3, #2
 8008c4e:	2201      	movs	r2, #1
 8008c50:	701a      	strb	r2, [r3, #0]
			tbl[3] = 0;						/* Partition start cylinder */
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	3303      	adds	r3, #3
 8008c56:	2200      	movs	r2, #0
 8008c58:	701a      	strb	r2, [r3, #0]
			tbl[4] = sys;					/* System type */
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	224c      	movs	r2, #76	@ 0x4c
 8008c60:	18ba      	adds	r2, r7, r2
 8008c62:	7812      	ldrb	r2, [r2, #0]
 8008c64:	701a      	strb	r2, [r3, #0]
			tbl[5] = 254;					/* Partition end head */
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	3305      	adds	r3, #5
 8008c6a:	22fe      	movs	r2, #254	@ 0xfe
 8008c6c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + n_vol) / 63 / 255;
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c72:	18d3      	adds	r3, r2, r3
 8008c74:	49ee      	ldr	r1, [pc, #952]	@ (8009030 <f_mkfs+0x728>)
 8008c76:	0018      	movs	r0, r3
 8008c78:	f7f7 fa62 	bl	8000140 <__udivsi3>
 8008c7c:	0003      	movs	r3, r0
 8008c7e:	61bb      	str	r3, [r7, #24]
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	089b      	lsrs	r3, r3, #2
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	3306      	adds	r3, #6
 8008c8a:	213f      	movs	r1, #63	@ 0x3f
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	b2d2      	uxtb	r2, r2
 8008c90:	701a      	strb	r2, [r3, #0]
			tbl[7] = (BYTE)n;				/* End cylinder */
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	3307      	adds	r3, #7
 8008c98:	b2d2      	uxtb	r2, r2
 8008c9a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	223f      	movs	r2, #63	@ 0x3f
 8008ca2:	701a      	strb	r2, [r3, #0]
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	3309      	adds	r3, #9
 8008ca8:	2200      	movs	r2, #0
 8008caa:	701a      	strb	r2, [r3, #0]
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	330a      	adds	r3, #10
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	701a      	strb	r2, [r3, #0]
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	330b      	adds	r3, #11
 8008cb8:	2200      	movs	r2, #0
 8008cba:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	330c      	adds	r3, #12
 8008cc2:	b2d2      	uxtb	r2, r2
 8008cc4:	701a      	strb	r2, [r3, #0]
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	0a1b      	lsrs	r3, r3, #8
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	330d      	adds	r3, #13
 8008cd2:	b2d2      	uxtb	r2, r2
 8008cd4:	701a      	strb	r2, [r3, #0]
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	0c1a      	lsrs	r2, r3, #16
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	330e      	adds	r3, #14
 8008cde:	b2d2      	uxtb	r2, r2
 8008ce0:	701a      	strb	r2, [r3, #0]
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	0e1a      	lsrs	r2, r3, #24
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	330f      	adds	r3, #15
 8008cea:	b2d2      	uxtb	r2, r2
 8008cec:	701a      	strb	r2, [r3, #0]
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 8008cee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008cf0:	23ff      	movs	r3, #255	@ 0xff
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	2155      	movs	r1, #85	@ 0x55
 8008cf6:	54d1      	strb	r1, [r2, r3]
 8008cf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cfa:	4ace      	ldr	r2, [pc, #824]	@ (8009034 <f_mkfs+0x72c>)
 8008cfc:	21aa      	movs	r1, #170	@ 0xaa
 8008cfe:	5499      	strb	r1, [r3, r2]
			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 8008d00:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008d02:	234f      	movs	r3, #79	@ 0x4f
 8008d04:	18fb      	adds	r3, r7, r3
 8008d06:	7818      	ldrb	r0, [r3, #0]
 8008d08:	2301      	movs	r3, #1
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f7fb ff02 	bl	8004b14 <disk_write>
 8008d10:	1e03      	subs	r3, r0, #0
 8008d12:	d001      	beq.n	8008d18 <f_mkfs+0x410>
				return FR_DISK_ERR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e2c8      	b.n	80092aa <f_mkfs+0x9a2>
			md = 0xF8;
 8008d18:	234d      	movs	r3, #77	@ 0x4d
 8008d1a:	18fb      	adds	r3, r7, r3
 8008d1c:	22f8      	movs	r2, #248	@ 0xf8
 8008d1e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Create BPB in the VBR */
	tbl = fs->win.d8;							/* Clear sector */
 8008d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d22:	61fb      	str	r3, [r7, #28]
	mem_set(tbl, 0, SS(fs));
 8008d24:	2380      	movs	r3, #128	@ 0x80
 8008d26:	009a      	lsls	r2, r3, #2
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	f7fb ff5e 	bl	8004bee <mem_set>
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
 8008d32:	49c1      	ldr	r1, [pc, #772]	@ (8009038 <f_mkfs+0x730>)
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	220b      	movs	r2, #11
 8008d38:	0018      	movs	r0, r3
 8008d3a:	f7fb ff3b 	bl	8004bb4 <mem_cpy>
	i = SS(fs);								/* Sector size */
 8008d3e:	2380      	movs	r3, #128	@ 0x80
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	647b      	str	r3, [r7, #68]	@ 0x44
	ST_WORD(tbl + BPB_BytsPerSec, i);
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	330b      	adds	r3, #11
 8008d48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d4a:	b2d2      	uxtb	r2, r2
 8008d4c:	701a      	strb	r2, [r3, #0]
 8008d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	0a1b      	lsrs	r3, r3, #8
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	330c      	adds	r3, #12
 8008d5a:	b2d2      	uxtb	r2, r2
 8008d5c:	701a      	strb	r2, [r3, #0]
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	330d      	adds	r3, #13
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	b2d2      	uxtb	r2, r2
 8008d66:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	330e      	adds	r3, #14
 8008d6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008d6e:	b2d2      	uxtb	r2, r2
 8008d70:	701a      	strb	r2, [r3, #0]
 8008d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	0a1b      	lsrs	r3, r3, #8
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	330f      	adds	r3, #15
 8008d7e:	b2d2      	uxtb	r2, r2
 8008d80:	701a      	strb	r2, [r3, #0]
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	3310      	adds	r3, #16
 8008d86:	2201      	movs	r2, #1
 8008d88:	701a      	strb	r2, [r3, #0]
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 8008d8a:	2333      	movs	r3, #51	@ 0x33
 8008d8c:	18fb      	adds	r3, r7, r3
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b03      	cmp	r3, #3
 8008d92:	d101      	bne.n	8008d98 <f_mkfs+0x490>
 8008d94:	2300      	movs	r3, #0
 8008d96:	e001      	b.n	8008d9c <f_mkfs+0x494>
 8008d98:	2380      	movs	r3, #128	@ 0x80
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	647b      	str	r3, [r7, #68]	@ 0x44
	ST_WORD(tbl + BPB_RootEntCnt, i);
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	3311      	adds	r3, #17
 8008da2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008da4:	b2d2      	uxtb	r2, r2
 8008da6:	701a      	strb	r2, [r3, #0]
 8008da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	0a1b      	lsrs	r3, r3, #8
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	3312      	adds	r3, #18
 8008db4:	b2d2      	uxtb	r2, r2
 8008db6:	701a      	strb	r2, [r3, #0]
	if (n_vol < 0x10000) {					/* Number of total sectors */
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	2380      	movs	r3, #128	@ 0x80
 8008dbc:	025b      	lsls	r3, r3, #9
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d20d      	bcs.n	8008dde <f_mkfs+0x4d6>
		ST_WORD(tbl + BPB_TotSec16, n_vol);
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	3313      	adds	r3, #19
 8008dc8:	b2d2      	uxtb	r2, r2
 8008dca:	701a      	strb	r2, [r3, #0]
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	0a1b      	lsrs	r3, r3, #8
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	3314      	adds	r3, #20
 8008dd8:	b2d2      	uxtb	r2, r2
 8008dda:	701a      	strb	r2, [r3, #0]
 8008ddc:	e018      	b.n	8008e10 <f_mkfs+0x508>
	} else {
		ST_DWORD(tbl + BPB_TotSec32, n_vol);
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	3320      	adds	r3, #32
 8008de4:	b2d2      	uxtb	r2, r2
 8008de6:	701a      	strb	r2, [r3, #0]
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	0a1b      	lsrs	r3, r3, #8
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	3321      	adds	r3, #33	@ 0x21
 8008df4:	b2d2      	uxtb	r2, r2
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	0c1a      	lsrs	r2, r3, #16
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	3322      	adds	r3, #34	@ 0x22
 8008e00:	b2d2      	uxtb	r2, r2
 8008e02:	701a      	strb	r2, [r3, #0]
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	0e1a      	lsrs	r2, r3, #24
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	3323      	adds	r3, #35	@ 0x23
 8008e0c:	b2d2      	uxtb	r2, r2
 8008e0e:	701a      	strb	r2, [r3, #0]
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	3315      	adds	r3, #21
 8008e14:	224d      	movs	r2, #77	@ 0x4d
 8008e16:	18ba      	adds	r2, r7, r2
 8008e18:	7812      	ldrb	r2, [r2, #0]
 8008e1a:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	3318      	adds	r3, #24
 8008e20:	223f      	movs	r2, #63	@ 0x3f
 8008e22:	701a      	strb	r2, [r3, #0]
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	3319      	adds	r3, #25
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	331a      	adds	r3, #26
 8008e30:	22ff      	movs	r2, #255	@ 0xff
 8008e32:	701a      	strb	r2, [r3, #0]
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	331b      	adds	r3, #27
 8008e38:	2200      	movs	r2, #0
 8008e3a:	701a      	strb	r2, [r3, #0]
	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	331c      	adds	r3, #28
 8008e40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e42:	b2d2      	uxtb	r2, r2
 8008e44:	701a      	strb	r2, [r3, #0]
 8008e46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	0a1b      	lsrs	r3, r3, #8
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	331d      	adds	r3, #29
 8008e52:	b2d2      	uxtb	r2, r2
 8008e54:	701a      	strb	r2, [r3, #0]
 8008e56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e58:	0c1a      	lsrs	r2, r3, #16
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	331e      	adds	r3, #30
 8008e5e:	b2d2      	uxtb	r2, r2
 8008e60:	701a      	strb	r2, [r3, #0]
 8008e62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e64:	0e1a      	lsrs	r2, r3, #24
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	331f      	adds	r3, #31
 8008e6a:	b2d2      	uxtb	r2, r2
 8008e6c:	701a      	strb	r2, [r3, #0]
	n = GET_FATTIME();						/* Use current time as VSN */
 8008e6e:	f7fb fdd1 	bl	8004a14 <get_fattime>
 8008e72:	0003      	movs	r3, r0
 8008e74:	61bb      	str	r3, [r7, #24]
	if (fmt == FS_FAT32) {
 8008e76:	2333      	movs	r3, #51	@ 0x33
 8008e78:	18fb      	adds	r3, r7, r3
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d161      	bne.n	8008f44 <f_mkfs+0x63c>
		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
 8008e80:	69ba      	ldr	r2, [r7, #24]
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	3343      	adds	r3, #67	@ 0x43
 8008e86:	b2d2      	uxtb	r2, r2
 8008e88:	701a      	strb	r2, [r3, #0]
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	0a1b      	lsrs	r3, r3, #8
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	3344      	adds	r3, #68	@ 0x44
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	0c1a      	lsrs	r2, r3, #16
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	3345      	adds	r3, #69	@ 0x45
 8008ea2:	b2d2      	uxtb	r2, r2
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	0e1a      	lsrs	r2, r3, #24
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	3346      	adds	r3, #70	@ 0x46
 8008eae:	b2d2      	uxtb	r2, r2
 8008eb0:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	3324      	adds	r3, #36	@ 0x24
 8008eb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008eb8:	b2d2      	uxtb	r2, r2
 8008eba:	701a      	strb	r2, [r3, #0]
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	0a1b      	lsrs	r3, r3, #8
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	3325      	adds	r3, #37	@ 0x25
 8008ec8:	b2d2      	uxtb	r2, r2
 8008eca:	701a      	strb	r2, [r3, #0]
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ece:	0c1a      	lsrs	r2, r3, #16
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	3326      	adds	r3, #38	@ 0x26
 8008ed4:	b2d2      	uxtb	r2, r2
 8008ed6:	701a      	strb	r2, [r3, #0]
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eda:	0e1a      	lsrs	r2, r3, #24
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	3327      	adds	r3, #39	@ 0x27
 8008ee0:	b2d2      	uxtb	r2, r2
 8008ee2:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	332c      	adds	r3, #44	@ 0x2c
 8008ee8:	2202      	movs	r2, #2
 8008eea:	701a      	strb	r2, [r3, #0]
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	332d      	adds	r3, #45	@ 0x2d
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	701a      	strb	r2, [r3, #0]
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	332e      	adds	r3, #46	@ 0x2e
 8008ef8:	2200      	movs	r2, #0
 8008efa:	701a      	strb	r2, [r3, #0]
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	332f      	adds	r3, #47	@ 0x2f
 8008f00:	2200      	movs	r2, #0
 8008f02:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	3330      	adds	r3, #48	@ 0x30
 8008f08:	2201      	movs	r2, #1
 8008f0a:	701a      	strb	r2, [r3, #0]
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	3331      	adds	r3, #49	@ 0x31
 8008f10:	2200      	movs	r2, #0
 8008f12:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	3332      	adds	r3, #50	@ 0x32
 8008f18:	2206      	movs	r2, #6
 8008f1a:	701a      	strb	r2, [r3, #0]
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	3333      	adds	r3, #51	@ 0x33
 8008f20:	2200      	movs	r2, #0
 8008f22:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	3340      	adds	r3, #64	@ 0x40
 8008f28:	2280      	movs	r2, #128	@ 0x80
 8008f2a:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	3342      	adds	r3, #66	@ 0x42
 8008f30:	2229      	movs	r2, #41	@ 0x29
 8008f32:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	3347      	adds	r3, #71	@ 0x47
 8008f38:	4940      	ldr	r1, [pc, #256]	@ (800903c <f_mkfs+0x734>)
 8008f3a:	2213      	movs	r2, #19
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	f7fb fe39 	bl	8004bb4 <mem_cpy>
 8008f42:	e034      	b.n	8008fae <f_mkfs+0x6a6>
	} else {
		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	3327      	adds	r3, #39	@ 0x27
 8008f4a:	b2d2      	uxtb	r2, r2
 8008f4c:	701a      	strb	r2, [r3, #0]
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	0a1b      	lsrs	r3, r3, #8
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	3328      	adds	r3, #40	@ 0x28
 8008f5a:	b2d2      	uxtb	r2, r2
 8008f5c:	701a      	strb	r2, [r3, #0]
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	0c1a      	lsrs	r2, r3, #16
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	3329      	adds	r3, #41	@ 0x29
 8008f66:	b2d2      	uxtb	r2, r2
 8008f68:	701a      	strb	r2, [r3, #0]
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	0e1a      	lsrs	r2, r3, #24
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	332a      	adds	r3, #42	@ 0x2a
 8008f72:	b2d2      	uxtb	r2, r2
 8008f74:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	3316      	adds	r3, #22
 8008f7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f7c:	b2d2      	uxtb	r2, r2
 8008f7e:	701a      	strb	r2, [r3, #0]
 8008f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	0a1b      	lsrs	r3, r3, #8
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	3317      	adds	r3, #23
 8008f8c:	b2d2      	uxtb	r2, r2
 8008f8e:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	3324      	adds	r3, #36	@ 0x24
 8008f94:	2280      	movs	r2, #128	@ 0x80
 8008f96:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	3326      	adds	r3, #38	@ 0x26
 8008f9c:	2229      	movs	r2, #41	@ 0x29
 8008f9e:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	332b      	adds	r3, #43	@ 0x2b
 8008fa4:	4926      	ldr	r1, [pc, #152]	@ (8009040 <f_mkfs+0x738>)
 8008fa6:	2213      	movs	r2, #19
 8008fa8:	0018      	movs	r0, r3
 8008faa:	f7fb fe03 	bl	8004bb4 <mem_cpy>
	}
	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	33ff      	adds	r3, #255	@ 0xff
 8008fb2:	33ff      	adds	r3, #255	@ 0xff
 8008fb4:	2255      	movs	r2, #85	@ 0x55
 8008fb6:	701a      	strb	r2, [r3, #0]
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	4a1e      	ldr	r2, [pc, #120]	@ (8009034 <f_mkfs+0x72c>)
 8008fbc:	4694      	mov	ip, r2
 8008fbe:	4463      	add	r3, ip
 8008fc0:	22aa      	movs	r2, #170	@ 0xaa
 8008fc2:	701a      	strb	r2, [r3, #0]
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
 8008fc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fc6:	69f9      	ldr	r1, [r7, #28]
 8008fc8:	234f      	movs	r3, #79	@ 0x4f
 8008fca:	18fb      	adds	r3, r7, r3
 8008fcc:	7818      	ldrb	r0, [r3, #0]
 8008fce:	2301      	movs	r3, #1
 8008fd0:	f7fb fda0 	bl	8004b14 <disk_write>
 8008fd4:	1e03      	subs	r3, r0, #0
 8008fd6:	d001      	beq.n	8008fdc <f_mkfs+0x6d4>
		return FR_DISK_ERR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e166      	b.n	80092aa <f_mkfs+0x9a2>
	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
 8008fdc:	2333      	movs	r3, #51	@ 0x33
 8008fde:	18fb      	adds	r3, r7, r3
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	d108      	bne.n	8008ff8 <f_mkfs+0x6f0>
		disk_write(pdrv, tbl, b_vol + 6, 1);
 8008fe6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008fe8:	1d9a      	adds	r2, r3, #6
 8008fea:	69f9      	ldr	r1, [r7, #28]
 8008fec:	234f      	movs	r3, #79	@ 0x4f
 8008fee:	18fb      	adds	r3, r7, r3
 8008ff0:	7818      	ldrb	r0, [r3, #0]
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	f7fb fd8e 	bl	8004b14 <disk_write>

	/* Initialize FAT area */
	wsect = b_fat;
 8008ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	647b      	str	r3, [r7, #68]	@ 0x44
 8009000:	e0ab      	b.n	800915a <f_mkfs+0x852>
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 8009002:	2380      	movs	r3, #128	@ 0x80
 8009004:	009a      	lsls	r2, r3, #2
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	2100      	movs	r1, #0
 800900a:	0018      	movs	r0, r3
 800900c:	f7fb fdef 	bl	8004bee <mem_set>
		n = md;								/* Media descriptor byte */
 8009010:	234d      	movs	r3, #77	@ 0x4d
 8009012:	18fb      	adds	r3, r7, r3
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	61bb      	str	r3, [r7, #24]
		if (fmt != FS_FAT32) {
 8009018:	2233      	movs	r2, #51	@ 0x33
 800901a:	18bb      	adds	r3, r7, r2
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b03      	cmp	r3, #3
 8009020:	d02f      	beq.n	8009082 <f_mkfs+0x77a>
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 8009022:	18bb      	adds	r3, r7, r2
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d10e      	bne.n	8009048 <f_mkfs+0x740>
 800902a:	4b06      	ldr	r3, [pc, #24]	@ (8009044 <f_mkfs+0x73c>)
 800902c:	e00d      	b.n	800904a <f_mkfs+0x742>
 800902e:	46c0      	nop			@ (mov r8, r8)
 8009030:	00003ec1 	.word	0x00003ec1
 8009034:	000001ff 	.word	0x000001ff
 8009038:	0800ad64 	.word	0x0800ad64
 800903c:	0800ad70 	.word	0x0800ad70
 8009040:	0800ad84 	.word	0x0800ad84
 8009044:	00ffff00 	.word	0x00ffff00
 8009048:	4b9a      	ldr	r3, [pc, #616]	@ (80092b4 <f_mkfs+0x9ac>)
 800904a:	69ba      	ldr	r2, [r7, #24]
 800904c:	4313      	orrs	r3, r2
 800904e:	61bb      	str	r3, [r7, #24]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	b2da      	uxtb	r2, r3
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	701a      	strb	r2, [r3, #0]
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	b29b      	uxth	r3, r3
 800905c:	0a1b      	lsrs	r3, r3, #8
 800905e:	b29a      	uxth	r2, r3
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	3301      	adds	r3, #1
 8009064:	b2d2      	uxtb	r2, r2
 8009066:	701a      	strb	r2, [r3, #0]
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	0c1a      	lsrs	r2, r3, #16
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	3302      	adds	r3, #2
 8009070:	b2d2      	uxtb	r2, r2
 8009072:	701a      	strb	r2, [r3, #0]
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	0e1a      	lsrs	r2, r3, #24
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	3303      	adds	r3, #3
 800907c:	b2d2      	uxtb	r2, r2
 800907e:	701a      	strb	r2, [r3, #0]
 8009080:	e03b      	b.n	80090fa <f_mkfs+0x7f2>
		} else {
			n |= 0xFFFFFF00;
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	4a8b      	ldr	r2, [pc, #556]	@ (80092b4 <f_mkfs+0x9ac>)
 8009086:	4313      	orrs	r3, r2
 8009088:	61bb      	str	r3, [r7, #24]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	b2da      	uxtb	r2, r3
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	b29b      	uxth	r3, r3
 8009096:	0a1b      	lsrs	r3, r3, #8
 8009098:	b29a      	uxth	r2, r3
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	3301      	adds	r3, #1
 800909e:	b2d2      	uxtb	r2, r2
 80090a0:	701a      	strb	r2, [r3, #0]
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	0c1a      	lsrs	r2, r3, #16
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	3302      	adds	r3, #2
 80090aa:	b2d2      	uxtb	r2, r2
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	0e1a      	lsrs	r2, r3, #24
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	3303      	adds	r3, #3
 80090b6:	b2d2      	uxtb	r2, r2
 80090b8:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	3304      	adds	r3, #4
 80090be:	22ff      	movs	r2, #255	@ 0xff
 80090c0:	701a      	strb	r2, [r3, #0]
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	3305      	adds	r3, #5
 80090c6:	22ff      	movs	r2, #255	@ 0xff
 80090c8:	701a      	strb	r2, [r3, #0]
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	3306      	adds	r3, #6
 80090ce:	22ff      	movs	r2, #255	@ 0xff
 80090d0:	701a      	strb	r2, [r3, #0]
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	3307      	adds	r3, #7
 80090d6:	22ff      	movs	r2, #255	@ 0xff
 80090d8:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	3308      	adds	r3, #8
 80090de:	22ff      	movs	r2, #255	@ 0xff
 80090e0:	701a      	strb	r2, [r3, #0]
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	3309      	adds	r3, #9
 80090e6:	22ff      	movs	r2, #255	@ 0xff
 80090e8:	701a      	strb	r2, [r3, #0]
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	330a      	adds	r3, #10
 80090ee:	22ff      	movs	r2, #255	@ 0xff
 80090f0:	701a      	strb	r2, [r3, #0]
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	330b      	adds	r3, #11
 80090f6:	220f      	movs	r2, #15
 80090f8:	701a      	strb	r2, [r3, #0]
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 80090fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090fc:	1c53      	adds	r3, r2, #1
 80090fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009100:	69f9      	ldr	r1, [r7, #28]
 8009102:	234f      	movs	r3, #79	@ 0x4f
 8009104:	18fb      	adds	r3, r7, r3
 8009106:	7818      	ldrb	r0, [r3, #0]
 8009108:	2301      	movs	r3, #1
 800910a:	f7fb fd03 	bl	8004b14 <disk_write>
 800910e:	1e03      	subs	r3, r0, #0
 8009110:	d001      	beq.n	8009116 <f_mkfs+0x80e>
			return FR_DISK_ERR;
 8009112:	2301      	movs	r3, #1
 8009114:	e0c9      	b.n	80092aa <f_mkfs+0x9a2>
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
 8009116:	2380      	movs	r3, #128	@ 0x80
 8009118:	009a      	lsls	r2, r3, #2
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	2100      	movs	r1, #0
 800911e:	0018      	movs	r0, r3
 8009120:	f7fb fd65 	bl	8004bee <mem_set>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 8009124:	2301      	movs	r3, #1
 8009126:	61bb      	str	r3, [r7, #24]
 8009128:	e010      	b.n	800914c <f_mkfs+0x844>
			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800912a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800912c:	1c53      	adds	r3, r2, #1
 800912e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009130:	69f9      	ldr	r1, [r7, #28]
 8009132:	234f      	movs	r3, #79	@ 0x4f
 8009134:	18fb      	adds	r3, r7, r3
 8009136:	7818      	ldrb	r0, [r3, #0]
 8009138:	2301      	movs	r3, #1
 800913a:	f7fb fceb 	bl	8004b14 <disk_write>
 800913e:	1e03      	subs	r3, r0, #0
 8009140:	d001      	beq.n	8009146 <f_mkfs+0x83e>
				return FR_DISK_ERR;
 8009142:	2301      	movs	r3, #1
 8009144:	e0b1      	b.n	80092aa <f_mkfs+0x9a2>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	3301      	adds	r3, #1
 800914a:	61bb      	str	r3, [r7, #24]
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009150:	429a      	cmp	r2, r3
 8009152:	d8ea      	bhi.n	800912a <f_mkfs+0x822>
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 8009154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009156:	3301      	adds	r3, #1
 8009158:	647b      	str	r3, [r7, #68]	@ 0x44
 800915a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800915c:	2b00      	cmp	r3, #0
 800915e:	d100      	bne.n	8009162 <f_mkfs+0x85a>
 8009160:	e74f      	b.n	8009002 <f_mkfs+0x6fa>
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
 8009162:	2333      	movs	r3, #51	@ 0x33
 8009164:	18fb      	adds	r3, r7, r3
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	2b03      	cmp	r3, #3
 800916a:	d101      	bne.n	8009170 <f_mkfs+0x868>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	e000      	b.n	8009172 <f_mkfs+0x86a>
 8009170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009172:	647b      	str	r3, [r7, #68]	@ 0x44
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 8009174:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009176:	1c53      	adds	r3, r2, #1
 8009178:	64bb      	str	r3, [r7, #72]	@ 0x48
 800917a:	69f9      	ldr	r1, [r7, #28]
 800917c:	234f      	movs	r3, #79	@ 0x4f
 800917e:	18fb      	adds	r3, r7, r3
 8009180:	7818      	ldrb	r0, [r3, #0]
 8009182:	2301      	movs	r3, #1
 8009184:	f7fb fcc6 	bl	8004b14 <disk_write>
 8009188:	1e03      	subs	r3, r0, #0
 800918a:	d001      	beq.n	8009190 <f_mkfs+0x888>
			return FR_DISK_ERR;
 800918c:	2301      	movs	r3, #1
 800918e:	e08c      	b.n	80092aa <f_mkfs+0x9a2>
	} while (--i);
 8009190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009192:	3b01      	subs	r3, #1
 8009194:	647b      	str	r3, [r7, #68]	@ 0x44
 8009196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1eb      	bne.n	8009174 <f_mkfs+0x86c>
		disk_ioctl(pdrv, CTRL_TRIM, eb);
	}
#endif

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
 800919c:	2333      	movs	r3, #51	@ 0x33
 800919e:	18fb      	adds	r3, r7, r3
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	d175      	bne.n	8009292 <f_mkfs+0x98a>
		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	2252      	movs	r2, #82	@ 0x52
 80091aa:	701a      	strb	r2, [r3, #0]
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	3301      	adds	r3, #1
 80091b0:	2252      	movs	r2, #82	@ 0x52
 80091b2:	701a      	strb	r2, [r3, #0]
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	3302      	adds	r3, #2
 80091b8:	2261      	movs	r2, #97	@ 0x61
 80091ba:	701a      	strb	r2, [r3, #0]
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	3303      	adds	r3, #3
 80091c0:	2241      	movs	r2, #65	@ 0x41
 80091c2:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	33e5      	adds	r3, #229	@ 0xe5
 80091c8:	33ff      	adds	r3, #255	@ 0xff
 80091ca:	2272      	movs	r2, #114	@ 0x72
 80091cc:	701a      	strb	r2, [r3, #0]
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	33e6      	adds	r3, #230	@ 0xe6
 80091d2:	33ff      	adds	r3, #255	@ 0xff
 80091d4:	2272      	movs	r2, #114	@ 0x72
 80091d6:	701a      	strb	r2, [r3, #0]
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	33e7      	adds	r3, #231	@ 0xe7
 80091dc:	33ff      	adds	r3, #255	@ 0xff
 80091de:	2241      	movs	r2, #65	@ 0x41
 80091e0:	701a      	strb	r2, [r3, #0]
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	33e8      	adds	r3, #232	@ 0xe8
 80091e6:	33ff      	adds	r3, #255	@ 0xff
 80091e8:	2261      	movs	r2, #97	@ 0x61
 80091ea:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80091ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	33e9      	adds	r3, #233	@ 0xe9
 80091f4:	33ff      	adds	r3, #255	@ 0xff
 80091f6:	3a01      	subs	r2, #1
 80091f8:	b2d2      	uxtb	r2, r2
 80091fa:	701a      	strb	r2, [r3, #0]
 80091fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fe:	b29b      	uxth	r3, r3
 8009200:	3b01      	subs	r3, #1
 8009202:	b29b      	uxth	r3, r3
 8009204:	0a1b      	lsrs	r3, r3, #8
 8009206:	b29a      	uxth	r2, r3
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	33ea      	adds	r3, #234	@ 0xea
 800920c:	33ff      	adds	r3, #255	@ 0xff
 800920e:	b2d2      	uxtb	r2, r2
 8009210:	701a      	strb	r2, [r3, #0]
 8009212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009214:	3b01      	subs	r3, #1
 8009216:	0c1a      	lsrs	r2, r3, #16
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	33eb      	adds	r3, #235	@ 0xeb
 800921c:	33ff      	adds	r3, #255	@ 0xff
 800921e:	b2d2      	uxtb	r2, r2
 8009220:	701a      	strb	r2, [r3, #0]
 8009222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009224:	3b01      	subs	r3, #1
 8009226:	0e1a      	lsrs	r2, r3, #24
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	33ec      	adds	r3, #236	@ 0xec
 800922c:	33ff      	adds	r3, #255	@ 0xff
 800922e:	b2d2      	uxtb	r2, r2
 8009230:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	33ed      	adds	r3, #237	@ 0xed
 8009236:	33ff      	adds	r3, #255	@ 0xff
 8009238:	2202      	movs	r2, #2
 800923a:	701a      	strb	r2, [r3, #0]
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	33ee      	adds	r3, #238	@ 0xee
 8009240:	33ff      	adds	r3, #255	@ 0xff
 8009242:	2200      	movs	r2, #0
 8009244:	701a      	strb	r2, [r3, #0]
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	33ef      	adds	r3, #239	@ 0xef
 800924a:	33ff      	adds	r3, #255	@ 0xff
 800924c:	2200      	movs	r2, #0
 800924e:	701a      	strb	r2, [r3, #0]
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	33f0      	adds	r3, #240	@ 0xf0
 8009254:	33ff      	adds	r3, #255	@ 0xff
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BS_55AA, 0xAA55);
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	33ff      	adds	r3, #255	@ 0xff
 800925e:	33ff      	adds	r3, #255	@ 0xff
 8009260:	2255      	movs	r2, #85	@ 0x55
 8009262:	701a      	strb	r2, [r3, #0]
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	4a14      	ldr	r2, [pc, #80]	@ (80092b8 <f_mkfs+0x9b0>)
 8009268:	4694      	mov	ip, r2
 800926a:	4463      	add	r3, ip
 800926c:	22aa      	movs	r2, #170	@ 0xaa
 800926e:	701a      	strb	r2, [r3, #0]
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 8009270:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	69f9      	ldr	r1, [r7, #28]
 8009276:	244f      	movs	r4, #79	@ 0x4f
 8009278:	193b      	adds	r3, r7, r4
 800927a:	7818      	ldrb	r0, [r3, #0]
 800927c:	2301      	movs	r3, #1
 800927e:	f7fb fc49 	bl	8004b14 <disk_write>
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
 8009282:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009284:	1dda      	adds	r2, r3, #7
 8009286:	69f9      	ldr	r1, [r7, #28]
 8009288:	193b      	adds	r3, r7, r4
 800928a:	7818      	ldrb	r0, [r3, #0]
 800928c:	2301      	movs	r3, #1
 800928e:	f7fb fc41 	bl	8004b14 <disk_write>
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
 8009292:	234f      	movs	r3, #79	@ 0x4f
 8009294:	18fb      	adds	r3, r7, r3
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	2200      	movs	r2, #0
 800929a:	2100      	movs	r1, #0
 800929c:	0018      	movs	r0, r3
 800929e:	f7fb fc61 	bl	8004b64 <disk_ioctl>
 80092a2:	0003      	movs	r3, r0
 80092a4:	1e5a      	subs	r2, r3, #1
 80092a6:	4193      	sbcs	r3, r2
 80092a8:	b2db      	uxtb	r3, r3
}
 80092aa:	0018      	movs	r0, r3
 80092ac:	46bd      	mov	sp, r7
 80092ae:	b018      	add	sp, #96	@ 0x60
 80092b0:	bdb0      	pop	{r4, r5, r7, pc}
 80092b2:	46c0      	nop			@ (mov r8, r8)
 80092b4:	ffffff00 	.word	0xffffff00
 80092b8:	000001ff 	.word	0x000001ff

080092bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80092bc:	b590      	push	{r4, r7, lr}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	1dfb      	adds	r3, r7, #7
 80092c8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 80092ca:	2417      	movs	r4, #23
 80092cc:	193b      	adds	r3, r7, r4
 80092ce:	2201      	movs	r2, #1
 80092d0:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 80092d2:	2016      	movs	r0, #22
 80092d4:	183b      	adds	r3, r7, r0
 80092d6:	2200      	movs	r2, #0
 80092d8:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 80092da:	4b21      	ldr	r3, [pc, #132]	@ (8009360 <FATFS_LinkDriverEx+0xa4>)
 80092dc:	7a5b      	ldrb	r3, [r3, #9]
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d836      	bhi.n	8009352 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 80092e4:	4b1e      	ldr	r3, [pc, #120]	@ (8009360 <FATFS_LinkDriverEx+0xa4>)
 80092e6:	7a5b      	ldrb	r3, [r3, #9]
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	001a      	movs	r2, r3
 80092ec:	4b1c      	ldr	r3, [pc, #112]	@ (8009360 <FATFS_LinkDriverEx+0xa4>)
 80092ee:	2100      	movs	r1, #0
 80092f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80092f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009360 <FATFS_LinkDriverEx+0xa4>)
 80092f4:	7a5b      	ldrb	r3, [r3, #9]
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	4a19      	ldr	r2, [pc, #100]	@ (8009360 <FATFS_LinkDriverEx+0xa4>)
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	18d3      	adds	r3, r2, r3
 80092fe:	3304      	adds	r3, #4
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 8009304:	4b16      	ldr	r3, [pc, #88]	@ (8009360 <FATFS_LinkDriverEx+0xa4>)
 8009306:	7a5b      	ldrb	r3, [r3, #9]
 8009308:	b2db      	uxtb	r3, r3
 800930a:	001a      	movs	r2, r3
 800930c:	4b14      	ldr	r3, [pc, #80]	@ (8009360 <FATFS_LinkDriverEx+0xa4>)
 800930e:	189b      	adds	r3, r3, r2
 8009310:	1dfa      	adds	r2, r7, #7
 8009312:	7812      	ldrb	r2, [r2, #0]
 8009314:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009316:	4b12      	ldr	r3, [pc, #72]	@ (8009360 <FATFS_LinkDriverEx+0xa4>)
 8009318:	7a5b      	ldrb	r3, [r3, #9]
 800931a:	b2db      	uxtb	r3, r3
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	b2d1      	uxtb	r1, r2
 8009320:	4a0f      	ldr	r2, [pc, #60]	@ (8009360 <FATFS_LinkDriverEx+0xa4>)
 8009322:	7251      	strb	r1, [r2, #9]
 8009324:	183a      	adds	r2, r7, r0
 8009326:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8009328:	183b      	adds	r3, r7, r0
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	3330      	adds	r3, #48	@ 0x30
 800932e:	b2da      	uxtb	r2, r3
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	3301      	adds	r3, #1
 8009338:	223a      	movs	r2, #58	@ 0x3a
 800933a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	3302      	adds	r3, #2
 8009340:	222f      	movs	r2, #47	@ 0x2f
 8009342:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	3303      	adds	r3, #3
 8009348:	2200      	movs	r2, #0
 800934a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800934c:	193b      	adds	r3, r7, r4
 800934e:	2200      	movs	r2, #0
 8009350:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8009352:	2317      	movs	r3, #23
 8009354:	18fb      	adds	r3, r7, r3
 8009356:	781b      	ldrb	r3, [r3, #0]
}
 8009358:	0018      	movs	r0, r3
 800935a:	46bd      	mov	sp, r7
 800935c:	b007      	add	sp, #28
 800935e:	bd90      	pop	{r4, r7, pc}
 8009360:	200006e0 	.word	0x200006e0

08009364 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	0018      	movs	r0, r3
 8009376:	f7ff ffa1 	bl	80092bc <FATFS_LinkDriverEx>
 800937a:	0003      	movs	r3, r0
}
 800937c:	0018      	movs	r0, r3
 800937e:	46bd      	mov	sp, r7
 8009380:	b002      	add	sp, #8
 8009382:	bd80      	pop	{r7, pc}

08009384 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	0002      	movs	r2, r0
 800938c:	6039      	str	r1, [r7, #0]
 800938e:	1dbb      	adds	r3, r7, #6
 8009390:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009392:	1dbb      	adds	r3, r7, #6
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	2b7f      	cmp	r3, #127	@ 0x7f
 8009398:	d805      	bhi.n	80093a6 <ff_convert+0x22>
		c = chr;
 800939a:	230e      	movs	r3, #14
 800939c:	18fb      	adds	r3, r7, r3
 800939e:	1dba      	adds	r2, r7, #6
 80093a0:	8812      	ldrh	r2, [r2, #0]
 80093a2:	801a      	strh	r2, [r3, #0]
 80093a4:	e037      	b.n	8009416 <ff_convert+0x92>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d010      	beq.n	80093ce <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80093ac:	1dbb      	adds	r3, r7, #6
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	2bff      	cmp	r3, #255	@ 0xff
 80093b2:	d807      	bhi.n	80093c4 <ff_convert+0x40>
 80093b4:	1dbb      	adds	r3, r7, #6
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	3b80      	subs	r3, #128	@ 0x80
 80093ba:	001a      	movs	r2, r3
 80093bc:	4b19      	ldr	r3, [pc, #100]	@ (8009424 <ff_convert+0xa0>)
 80093be:	0052      	lsls	r2, r2, #1
 80093c0:	5ad2      	ldrh	r2, [r2, r3]
 80093c2:	e000      	b.n	80093c6 <ff_convert+0x42>
 80093c4:	2200      	movs	r2, #0
 80093c6:	230e      	movs	r3, #14
 80093c8:	18fb      	adds	r3, r7, r3
 80093ca:	801a      	strh	r2, [r3, #0]
 80093cc:	e023      	b.n	8009416 <ff_convert+0x92>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80093ce:	230e      	movs	r3, #14
 80093d0:	18fb      	adds	r3, r7, r3
 80093d2:	2200      	movs	r2, #0
 80093d4:	801a      	strh	r2, [r3, #0]
 80093d6:	e00e      	b.n	80093f6 <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 80093d8:	210e      	movs	r1, #14
 80093da:	187b      	adds	r3, r7, r1
 80093dc:	881a      	ldrh	r2, [r3, #0]
 80093de:	4b11      	ldr	r3, [pc, #68]	@ (8009424 <ff_convert+0xa0>)
 80093e0:	0052      	lsls	r2, r2, #1
 80093e2:	5ad3      	ldrh	r3, [r2, r3]
 80093e4:	1dba      	adds	r2, r7, #6
 80093e6:	8812      	ldrh	r2, [r2, #0]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d00a      	beq.n	8009402 <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 80093ec:	187b      	adds	r3, r7, r1
 80093ee:	881a      	ldrh	r2, [r3, #0]
 80093f0:	187b      	adds	r3, r7, r1
 80093f2:	3201      	adds	r2, #1
 80093f4:	801a      	strh	r2, [r3, #0]
 80093f6:	230e      	movs	r3, #14
 80093f8:	18fb      	adds	r3, r7, r3
 80093fa:	881b      	ldrh	r3, [r3, #0]
 80093fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80093fe:	d9eb      	bls.n	80093d8 <ff_convert+0x54>
 8009400:	e000      	b.n	8009404 <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 8009402:	46c0      	nop			@ (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 8009404:	210e      	movs	r1, #14
 8009406:	187b      	adds	r3, r7, r1
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	3380      	adds	r3, #128	@ 0x80
 800940c:	b29a      	uxth	r2, r3
 800940e:	187b      	adds	r3, r7, r1
 8009410:	21ff      	movs	r1, #255	@ 0xff
 8009412:	400a      	ands	r2, r1
 8009414:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 8009416:	230e      	movs	r3, #14
 8009418:	18fb      	adds	r3, r7, r3
 800941a:	881b      	ldrh	r3, [r3, #0]
}
 800941c:	0018      	movs	r0, r3
 800941e:	46bd      	mov	sp, r7
 8009420:	b004      	add	sp, #16
 8009422:	bd80      	pop	{r7, pc}
 8009424:	0800aea4 	.word	0x0800aea4

08009428 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	0002      	movs	r2, r0
 8009430:	1dbb      	adds	r3, r7, #6
 8009432:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009434:	2300      	movs	r3, #0
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	e002      	b.n	8009440 <ff_wtoupper+0x18>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3301      	adds	r3, #1
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	4b0f      	ldr	r3, [pc, #60]	@ (8009480 <ff_wtoupper+0x58>)
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	0052      	lsls	r2, r2, #1
 8009446:	5ad3      	ldrh	r3, [r2, r3]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d007      	beq.n	800945c <ff_wtoupper+0x34>
 800944c:	4b0c      	ldr	r3, [pc, #48]	@ (8009480 <ff_wtoupper+0x58>)
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	0052      	lsls	r2, r2, #1
 8009452:	5ad3      	ldrh	r3, [r2, r3]
 8009454:	1dba      	adds	r2, r7, #6
 8009456:	8812      	ldrh	r2, [r2, #0]
 8009458:	429a      	cmp	r2, r3
 800945a:	d1ee      	bne.n	800943a <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800945c:	4b08      	ldr	r3, [pc, #32]	@ (8009480 <ff_wtoupper+0x58>)
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	0052      	lsls	r2, r2, #1
 8009462:	5ad3      	ldrh	r3, [r2, r3]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d004      	beq.n	8009472 <ff_wtoupper+0x4a>
 8009468:	4b06      	ldr	r3, [pc, #24]	@ (8009484 <ff_wtoupper+0x5c>)
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	0052      	lsls	r2, r2, #1
 800946e:	5ad3      	ldrh	r3, [r2, r3]
 8009470:	e001      	b.n	8009476 <ff_wtoupper+0x4e>
 8009472:	1dbb      	adds	r3, r7, #6
 8009474:	881b      	ldrh	r3, [r3, #0]
}
 8009476:	0018      	movs	r0, r3
 8009478:	46bd      	mov	sp, r7
 800947a:	b004      	add	sp, #16
 800947c:	bd80      	pop	{r7, pc}
 800947e:	46c0      	nop			@ (mov r8, r8)
 8009480:	0800afa4 	.word	0x0800afa4
 8009484:	0800b184 	.word	0x0800b184

08009488 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	0018      	movs	r0, r3
 8009494:	f000 f812 	bl	80094bc <malloc>
 8009498:	0003      	movs	r3, r0
}
 800949a:	0018      	movs	r0, r3
 800949c:	46bd      	mov	sp, r7
 800949e:	b002      	add	sp, #8
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b082      	sub	sp, #8
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Discard the memory block with POSIX API */
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	0018      	movs	r0, r3
 80094ae:	f000 f80f 	bl	80094d0 <free>
}
 80094b2:	46c0      	nop			@ (mov r8, r8)
 80094b4:	46bd      	mov	sp, r7
 80094b6:	b002      	add	sp, #8
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <malloc>:
 80094bc:	b510      	push	{r4, lr}
 80094be:	4b03      	ldr	r3, [pc, #12]	@ (80094cc <malloc+0x10>)
 80094c0:	0001      	movs	r1, r0
 80094c2:	6818      	ldr	r0, [r3, #0]
 80094c4:	f000 f830 	bl	8009528 <_malloc_r>
 80094c8:	bd10      	pop	{r4, pc}
 80094ca:	46c0      	nop			@ (mov r8, r8)
 80094cc:	20000018 	.word	0x20000018

080094d0 <free>:
 80094d0:	b510      	push	{r4, lr}
 80094d2:	4b03      	ldr	r3, [pc, #12]	@ (80094e0 <free+0x10>)
 80094d4:	0001      	movs	r1, r0
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	f000 fba2 	bl	8009c20 <_free_r>
 80094dc:	bd10      	pop	{r4, pc}
 80094de:	46c0      	nop			@ (mov r8, r8)
 80094e0:	20000018 	.word	0x20000018

080094e4 <sbrk_aligned>:
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	4e0f      	ldr	r6, [pc, #60]	@ (8009524 <sbrk_aligned+0x40>)
 80094e8:	000d      	movs	r5, r1
 80094ea:	6831      	ldr	r1, [r6, #0]
 80094ec:	0004      	movs	r4, r0
 80094ee:	2900      	cmp	r1, #0
 80094f0:	d102      	bne.n	80094f8 <sbrk_aligned+0x14>
 80094f2:	f000 fb41 	bl	8009b78 <_sbrk_r>
 80094f6:	6030      	str	r0, [r6, #0]
 80094f8:	0029      	movs	r1, r5
 80094fa:	0020      	movs	r0, r4
 80094fc:	f000 fb3c 	bl	8009b78 <_sbrk_r>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d103      	bne.n	800950c <sbrk_aligned+0x28>
 8009504:	2501      	movs	r5, #1
 8009506:	426d      	negs	r5, r5
 8009508:	0028      	movs	r0, r5
 800950a:	bd70      	pop	{r4, r5, r6, pc}
 800950c:	2303      	movs	r3, #3
 800950e:	1cc5      	adds	r5, r0, #3
 8009510:	439d      	bics	r5, r3
 8009512:	42a8      	cmp	r0, r5
 8009514:	d0f8      	beq.n	8009508 <sbrk_aligned+0x24>
 8009516:	1a29      	subs	r1, r5, r0
 8009518:	0020      	movs	r0, r4
 800951a:	f000 fb2d 	bl	8009b78 <_sbrk_r>
 800951e:	3001      	adds	r0, #1
 8009520:	d1f2      	bne.n	8009508 <sbrk_aligned+0x24>
 8009522:	e7ef      	b.n	8009504 <sbrk_aligned+0x20>
 8009524:	200006ec 	.word	0x200006ec

08009528 <_malloc_r>:
 8009528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800952a:	2203      	movs	r2, #3
 800952c:	1ccb      	adds	r3, r1, #3
 800952e:	4393      	bics	r3, r2
 8009530:	3308      	adds	r3, #8
 8009532:	0005      	movs	r5, r0
 8009534:	001f      	movs	r7, r3
 8009536:	2b0c      	cmp	r3, #12
 8009538:	d234      	bcs.n	80095a4 <_malloc_r+0x7c>
 800953a:	270c      	movs	r7, #12
 800953c:	42b9      	cmp	r1, r7
 800953e:	d833      	bhi.n	80095a8 <_malloc_r+0x80>
 8009540:	0028      	movs	r0, r5
 8009542:	f000 f871 	bl	8009628 <__malloc_lock>
 8009546:	4e37      	ldr	r6, [pc, #220]	@ (8009624 <_malloc_r+0xfc>)
 8009548:	6833      	ldr	r3, [r6, #0]
 800954a:	001c      	movs	r4, r3
 800954c:	2c00      	cmp	r4, #0
 800954e:	d12f      	bne.n	80095b0 <_malloc_r+0x88>
 8009550:	0039      	movs	r1, r7
 8009552:	0028      	movs	r0, r5
 8009554:	f7ff ffc6 	bl	80094e4 <sbrk_aligned>
 8009558:	0004      	movs	r4, r0
 800955a:	1c43      	adds	r3, r0, #1
 800955c:	d15f      	bne.n	800961e <_malloc_r+0xf6>
 800955e:	6834      	ldr	r4, [r6, #0]
 8009560:	9400      	str	r4, [sp, #0]
 8009562:	9b00      	ldr	r3, [sp, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d14a      	bne.n	80095fe <_malloc_r+0xd6>
 8009568:	2c00      	cmp	r4, #0
 800956a:	d052      	beq.n	8009612 <_malloc_r+0xea>
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	0028      	movs	r0, r5
 8009570:	18e3      	adds	r3, r4, r3
 8009572:	9900      	ldr	r1, [sp, #0]
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	f000 faff 	bl	8009b78 <_sbrk_r>
 800957a:	9b01      	ldr	r3, [sp, #4]
 800957c:	4283      	cmp	r3, r0
 800957e:	d148      	bne.n	8009612 <_malloc_r+0xea>
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	0028      	movs	r0, r5
 8009584:	1aff      	subs	r7, r7, r3
 8009586:	0039      	movs	r1, r7
 8009588:	f7ff ffac 	bl	80094e4 <sbrk_aligned>
 800958c:	3001      	adds	r0, #1
 800958e:	d040      	beq.n	8009612 <_malloc_r+0xea>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	19db      	adds	r3, r3, r7
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	6833      	ldr	r3, [r6, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	2a00      	cmp	r2, #0
 800959c:	d133      	bne.n	8009606 <_malloc_r+0xde>
 800959e:	9b00      	ldr	r3, [sp, #0]
 80095a0:	6033      	str	r3, [r6, #0]
 80095a2:	e019      	b.n	80095d8 <_malloc_r+0xb0>
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	dac9      	bge.n	800953c <_malloc_r+0x14>
 80095a8:	230c      	movs	r3, #12
 80095aa:	602b      	str	r3, [r5, #0]
 80095ac:	2000      	movs	r0, #0
 80095ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095b0:	6821      	ldr	r1, [r4, #0]
 80095b2:	1bc9      	subs	r1, r1, r7
 80095b4:	d420      	bmi.n	80095f8 <_malloc_r+0xd0>
 80095b6:	290b      	cmp	r1, #11
 80095b8:	d90a      	bls.n	80095d0 <_malloc_r+0xa8>
 80095ba:	19e2      	adds	r2, r4, r7
 80095bc:	6027      	str	r7, [r4, #0]
 80095be:	42a3      	cmp	r3, r4
 80095c0:	d104      	bne.n	80095cc <_malloc_r+0xa4>
 80095c2:	6032      	str	r2, [r6, #0]
 80095c4:	6863      	ldr	r3, [r4, #4]
 80095c6:	6011      	str	r1, [r2, #0]
 80095c8:	6053      	str	r3, [r2, #4]
 80095ca:	e005      	b.n	80095d8 <_malloc_r+0xb0>
 80095cc:	605a      	str	r2, [r3, #4]
 80095ce:	e7f9      	b.n	80095c4 <_malloc_r+0x9c>
 80095d0:	6862      	ldr	r2, [r4, #4]
 80095d2:	42a3      	cmp	r3, r4
 80095d4:	d10e      	bne.n	80095f4 <_malloc_r+0xcc>
 80095d6:	6032      	str	r2, [r6, #0]
 80095d8:	0028      	movs	r0, r5
 80095da:	f000 f82d 	bl	8009638 <__malloc_unlock>
 80095de:	0020      	movs	r0, r4
 80095e0:	2207      	movs	r2, #7
 80095e2:	300b      	adds	r0, #11
 80095e4:	1d23      	adds	r3, r4, #4
 80095e6:	4390      	bics	r0, r2
 80095e8:	1ac2      	subs	r2, r0, r3
 80095ea:	4298      	cmp	r0, r3
 80095ec:	d0df      	beq.n	80095ae <_malloc_r+0x86>
 80095ee:	1a1b      	subs	r3, r3, r0
 80095f0:	50a3      	str	r3, [r4, r2]
 80095f2:	e7dc      	b.n	80095ae <_malloc_r+0x86>
 80095f4:	605a      	str	r2, [r3, #4]
 80095f6:	e7ef      	b.n	80095d8 <_malloc_r+0xb0>
 80095f8:	0023      	movs	r3, r4
 80095fa:	6864      	ldr	r4, [r4, #4]
 80095fc:	e7a6      	b.n	800954c <_malloc_r+0x24>
 80095fe:	9c00      	ldr	r4, [sp, #0]
 8009600:	6863      	ldr	r3, [r4, #4]
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	e7ad      	b.n	8009562 <_malloc_r+0x3a>
 8009606:	001a      	movs	r2, r3
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	42a3      	cmp	r3, r4
 800960c:	d1fb      	bne.n	8009606 <_malloc_r+0xde>
 800960e:	2300      	movs	r3, #0
 8009610:	e7da      	b.n	80095c8 <_malloc_r+0xa0>
 8009612:	230c      	movs	r3, #12
 8009614:	0028      	movs	r0, r5
 8009616:	602b      	str	r3, [r5, #0]
 8009618:	f000 f80e 	bl	8009638 <__malloc_unlock>
 800961c:	e7c6      	b.n	80095ac <_malloc_r+0x84>
 800961e:	6007      	str	r7, [r0, #0]
 8009620:	e7da      	b.n	80095d8 <_malloc_r+0xb0>
 8009622:	46c0      	nop			@ (mov r8, r8)
 8009624:	200006f0 	.word	0x200006f0

08009628 <__malloc_lock>:
 8009628:	b510      	push	{r4, lr}
 800962a:	4802      	ldr	r0, [pc, #8]	@ (8009634 <__malloc_lock+0xc>)
 800962c:	f000 faf5 	bl	8009c1a <__retarget_lock_acquire_recursive>
 8009630:	bd10      	pop	{r4, pc}
 8009632:	46c0      	nop			@ (mov r8, r8)
 8009634:	20000834 	.word	0x20000834

08009638 <__malloc_unlock>:
 8009638:	b510      	push	{r4, lr}
 800963a:	4802      	ldr	r0, [pc, #8]	@ (8009644 <__malloc_unlock+0xc>)
 800963c:	f000 faee 	bl	8009c1c <__retarget_lock_release_recursive>
 8009640:	bd10      	pop	{r4, pc}
 8009642:	46c0      	nop			@ (mov r8, r8)
 8009644:	20000834 	.word	0x20000834

08009648 <std>:
 8009648:	2300      	movs	r3, #0
 800964a:	b510      	push	{r4, lr}
 800964c:	0004      	movs	r4, r0
 800964e:	6003      	str	r3, [r0, #0]
 8009650:	6043      	str	r3, [r0, #4]
 8009652:	6083      	str	r3, [r0, #8]
 8009654:	8181      	strh	r1, [r0, #12]
 8009656:	6643      	str	r3, [r0, #100]	@ 0x64
 8009658:	81c2      	strh	r2, [r0, #14]
 800965a:	6103      	str	r3, [r0, #16]
 800965c:	6143      	str	r3, [r0, #20]
 800965e:	6183      	str	r3, [r0, #24]
 8009660:	0019      	movs	r1, r3
 8009662:	2208      	movs	r2, #8
 8009664:	305c      	adds	r0, #92	@ 0x5c
 8009666:	f000 fa45 	bl	8009af4 <memset>
 800966a:	4b0b      	ldr	r3, [pc, #44]	@ (8009698 <std+0x50>)
 800966c:	6224      	str	r4, [r4, #32]
 800966e:	6263      	str	r3, [r4, #36]	@ 0x24
 8009670:	4b0a      	ldr	r3, [pc, #40]	@ (800969c <std+0x54>)
 8009672:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009674:	4b0a      	ldr	r3, [pc, #40]	@ (80096a0 <std+0x58>)
 8009676:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009678:	4b0a      	ldr	r3, [pc, #40]	@ (80096a4 <std+0x5c>)
 800967a:	6323      	str	r3, [r4, #48]	@ 0x30
 800967c:	4b0a      	ldr	r3, [pc, #40]	@ (80096a8 <std+0x60>)
 800967e:	429c      	cmp	r4, r3
 8009680:	d005      	beq.n	800968e <std+0x46>
 8009682:	4b0a      	ldr	r3, [pc, #40]	@ (80096ac <std+0x64>)
 8009684:	429c      	cmp	r4, r3
 8009686:	d002      	beq.n	800968e <std+0x46>
 8009688:	4b09      	ldr	r3, [pc, #36]	@ (80096b0 <std+0x68>)
 800968a:	429c      	cmp	r4, r3
 800968c:	d103      	bne.n	8009696 <std+0x4e>
 800968e:	0020      	movs	r0, r4
 8009690:	3058      	adds	r0, #88	@ 0x58
 8009692:	f000 fac1 	bl	8009c18 <__retarget_lock_init_recursive>
 8009696:	bd10      	pop	{r4, pc}
 8009698:	0800991d 	.word	0x0800991d
 800969c:	08009945 	.word	0x08009945
 80096a0:	0800997d 	.word	0x0800997d
 80096a4:	080099a9 	.word	0x080099a9
 80096a8:	200006f4 	.word	0x200006f4
 80096ac:	2000075c 	.word	0x2000075c
 80096b0:	200007c4 	.word	0x200007c4

080096b4 <stdio_exit_handler>:
 80096b4:	b510      	push	{r4, lr}
 80096b6:	4a03      	ldr	r2, [pc, #12]	@ (80096c4 <stdio_exit_handler+0x10>)
 80096b8:	4903      	ldr	r1, [pc, #12]	@ (80096c8 <stdio_exit_handler+0x14>)
 80096ba:	4804      	ldr	r0, [pc, #16]	@ (80096cc <stdio_exit_handler+0x18>)
 80096bc:	f000 f86c 	bl	8009798 <_fwalk_sglue>
 80096c0:	bd10      	pop	{r4, pc}
 80096c2:	46c0      	nop			@ (mov r8, r8)
 80096c4:	2000000c 	.word	0x2000000c
 80096c8:	0800a5fd 	.word	0x0800a5fd
 80096cc:	2000001c 	.word	0x2000001c

080096d0 <cleanup_stdio>:
 80096d0:	6841      	ldr	r1, [r0, #4]
 80096d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009700 <cleanup_stdio+0x30>)
 80096d4:	b510      	push	{r4, lr}
 80096d6:	0004      	movs	r4, r0
 80096d8:	4299      	cmp	r1, r3
 80096da:	d001      	beq.n	80096e0 <cleanup_stdio+0x10>
 80096dc:	f000 ff8e 	bl	800a5fc <_fflush_r>
 80096e0:	68a1      	ldr	r1, [r4, #8]
 80096e2:	4b08      	ldr	r3, [pc, #32]	@ (8009704 <cleanup_stdio+0x34>)
 80096e4:	4299      	cmp	r1, r3
 80096e6:	d002      	beq.n	80096ee <cleanup_stdio+0x1e>
 80096e8:	0020      	movs	r0, r4
 80096ea:	f000 ff87 	bl	800a5fc <_fflush_r>
 80096ee:	68e1      	ldr	r1, [r4, #12]
 80096f0:	4b05      	ldr	r3, [pc, #20]	@ (8009708 <cleanup_stdio+0x38>)
 80096f2:	4299      	cmp	r1, r3
 80096f4:	d002      	beq.n	80096fc <cleanup_stdio+0x2c>
 80096f6:	0020      	movs	r0, r4
 80096f8:	f000 ff80 	bl	800a5fc <_fflush_r>
 80096fc:	bd10      	pop	{r4, pc}
 80096fe:	46c0      	nop			@ (mov r8, r8)
 8009700:	200006f4 	.word	0x200006f4
 8009704:	2000075c 	.word	0x2000075c
 8009708:	200007c4 	.word	0x200007c4

0800970c <global_stdio_init.part.0>:
 800970c:	b510      	push	{r4, lr}
 800970e:	4b09      	ldr	r3, [pc, #36]	@ (8009734 <global_stdio_init.part.0+0x28>)
 8009710:	4a09      	ldr	r2, [pc, #36]	@ (8009738 <global_stdio_init.part.0+0x2c>)
 8009712:	2104      	movs	r1, #4
 8009714:	601a      	str	r2, [r3, #0]
 8009716:	4809      	ldr	r0, [pc, #36]	@ (800973c <global_stdio_init.part.0+0x30>)
 8009718:	2200      	movs	r2, #0
 800971a:	f7ff ff95 	bl	8009648 <std>
 800971e:	2201      	movs	r2, #1
 8009720:	2109      	movs	r1, #9
 8009722:	4807      	ldr	r0, [pc, #28]	@ (8009740 <global_stdio_init.part.0+0x34>)
 8009724:	f7ff ff90 	bl	8009648 <std>
 8009728:	2202      	movs	r2, #2
 800972a:	2112      	movs	r1, #18
 800972c:	4805      	ldr	r0, [pc, #20]	@ (8009744 <global_stdio_init.part.0+0x38>)
 800972e:	f7ff ff8b 	bl	8009648 <std>
 8009732:	bd10      	pop	{r4, pc}
 8009734:	2000082c 	.word	0x2000082c
 8009738:	080096b5 	.word	0x080096b5
 800973c:	200006f4 	.word	0x200006f4
 8009740:	2000075c 	.word	0x2000075c
 8009744:	200007c4 	.word	0x200007c4

08009748 <__sfp_lock_acquire>:
 8009748:	b510      	push	{r4, lr}
 800974a:	4802      	ldr	r0, [pc, #8]	@ (8009754 <__sfp_lock_acquire+0xc>)
 800974c:	f000 fa65 	bl	8009c1a <__retarget_lock_acquire_recursive>
 8009750:	bd10      	pop	{r4, pc}
 8009752:	46c0      	nop			@ (mov r8, r8)
 8009754:	20000835 	.word	0x20000835

08009758 <__sfp_lock_release>:
 8009758:	b510      	push	{r4, lr}
 800975a:	4802      	ldr	r0, [pc, #8]	@ (8009764 <__sfp_lock_release+0xc>)
 800975c:	f000 fa5e 	bl	8009c1c <__retarget_lock_release_recursive>
 8009760:	bd10      	pop	{r4, pc}
 8009762:	46c0      	nop			@ (mov r8, r8)
 8009764:	20000835 	.word	0x20000835

08009768 <__sinit>:
 8009768:	b510      	push	{r4, lr}
 800976a:	0004      	movs	r4, r0
 800976c:	f7ff ffec 	bl	8009748 <__sfp_lock_acquire>
 8009770:	6a23      	ldr	r3, [r4, #32]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d002      	beq.n	800977c <__sinit+0x14>
 8009776:	f7ff ffef 	bl	8009758 <__sfp_lock_release>
 800977a:	bd10      	pop	{r4, pc}
 800977c:	4b04      	ldr	r3, [pc, #16]	@ (8009790 <__sinit+0x28>)
 800977e:	6223      	str	r3, [r4, #32]
 8009780:	4b04      	ldr	r3, [pc, #16]	@ (8009794 <__sinit+0x2c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1f6      	bne.n	8009776 <__sinit+0xe>
 8009788:	f7ff ffc0 	bl	800970c <global_stdio_init.part.0>
 800978c:	e7f3      	b.n	8009776 <__sinit+0xe>
 800978e:	46c0      	nop			@ (mov r8, r8)
 8009790:	080096d1 	.word	0x080096d1
 8009794:	2000082c 	.word	0x2000082c

08009798 <_fwalk_sglue>:
 8009798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800979a:	0014      	movs	r4, r2
 800979c:	2600      	movs	r6, #0
 800979e:	9000      	str	r0, [sp, #0]
 80097a0:	9101      	str	r1, [sp, #4]
 80097a2:	68a5      	ldr	r5, [r4, #8]
 80097a4:	6867      	ldr	r7, [r4, #4]
 80097a6:	3f01      	subs	r7, #1
 80097a8:	d504      	bpl.n	80097b4 <_fwalk_sglue+0x1c>
 80097aa:	6824      	ldr	r4, [r4, #0]
 80097ac:	2c00      	cmp	r4, #0
 80097ae:	d1f8      	bne.n	80097a2 <_fwalk_sglue+0xa>
 80097b0:	0030      	movs	r0, r6
 80097b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097b4:	89ab      	ldrh	r3, [r5, #12]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d908      	bls.n	80097cc <_fwalk_sglue+0x34>
 80097ba:	220e      	movs	r2, #14
 80097bc:	5eab      	ldrsh	r3, [r5, r2]
 80097be:	3301      	adds	r3, #1
 80097c0:	d004      	beq.n	80097cc <_fwalk_sglue+0x34>
 80097c2:	0029      	movs	r1, r5
 80097c4:	9800      	ldr	r0, [sp, #0]
 80097c6:	9b01      	ldr	r3, [sp, #4]
 80097c8:	4798      	blx	r3
 80097ca:	4306      	orrs	r6, r0
 80097cc:	3568      	adds	r5, #104	@ 0x68
 80097ce:	e7ea      	b.n	80097a6 <_fwalk_sglue+0xe>

080097d0 <iprintf>:
 80097d0:	b40f      	push	{r0, r1, r2, r3}
 80097d2:	b507      	push	{r0, r1, r2, lr}
 80097d4:	4905      	ldr	r1, [pc, #20]	@ (80097ec <iprintf+0x1c>)
 80097d6:	ab04      	add	r3, sp, #16
 80097d8:	6808      	ldr	r0, [r1, #0]
 80097da:	cb04      	ldmia	r3!, {r2}
 80097dc:	6881      	ldr	r1, [r0, #8]
 80097de:	9301      	str	r3, [sp, #4]
 80097e0:	f000 fbee 	bl	8009fc0 <_vfiprintf_r>
 80097e4:	b003      	add	sp, #12
 80097e6:	bc08      	pop	{r3}
 80097e8:	b004      	add	sp, #16
 80097ea:	4718      	bx	r3
 80097ec:	20000018 	.word	0x20000018

080097f0 <_puts_r>:
 80097f0:	6a03      	ldr	r3, [r0, #32]
 80097f2:	b570      	push	{r4, r5, r6, lr}
 80097f4:	0005      	movs	r5, r0
 80097f6:	000e      	movs	r6, r1
 80097f8:	6884      	ldr	r4, [r0, #8]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <_puts_r+0x12>
 80097fe:	f7ff ffb3 	bl	8009768 <__sinit>
 8009802:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009804:	07db      	lsls	r3, r3, #31
 8009806:	d405      	bmi.n	8009814 <_puts_r+0x24>
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	059b      	lsls	r3, r3, #22
 800980c:	d402      	bmi.n	8009814 <_puts_r+0x24>
 800980e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009810:	f000 fa03 	bl	8009c1a <__retarget_lock_acquire_recursive>
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	071b      	lsls	r3, r3, #28
 8009818:	d502      	bpl.n	8009820 <_puts_r+0x30>
 800981a:	6923      	ldr	r3, [r4, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d11f      	bne.n	8009860 <_puts_r+0x70>
 8009820:	0021      	movs	r1, r4
 8009822:	0028      	movs	r0, r5
 8009824:	f000 f908 	bl	8009a38 <__swsetup_r>
 8009828:	2800      	cmp	r0, #0
 800982a:	d019      	beq.n	8009860 <_puts_r+0x70>
 800982c:	2501      	movs	r5, #1
 800982e:	426d      	negs	r5, r5
 8009830:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009832:	07db      	lsls	r3, r3, #31
 8009834:	d405      	bmi.n	8009842 <_puts_r+0x52>
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	059b      	lsls	r3, r3, #22
 800983a:	d402      	bmi.n	8009842 <_puts_r+0x52>
 800983c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800983e:	f000 f9ed 	bl	8009c1c <__retarget_lock_release_recursive>
 8009842:	0028      	movs	r0, r5
 8009844:	bd70      	pop	{r4, r5, r6, pc}
 8009846:	3601      	adds	r6, #1
 8009848:	60a3      	str	r3, [r4, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	da04      	bge.n	8009858 <_puts_r+0x68>
 800984e:	69a2      	ldr	r2, [r4, #24]
 8009850:	429a      	cmp	r2, r3
 8009852:	dc16      	bgt.n	8009882 <_puts_r+0x92>
 8009854:	290a      	cmp	r1, #10
 8009856:	d014      	beq.n	8009882 <_puts_r+0x92>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	1c5a      	adds	r2, r3, #1
 800985c:	6022      	str	r2, [r4, #0]
 800985e:	7019      	strb	r1, [r3, #0]
 8009860:	68a3      	ldr	r3, [r4, #8]
 8009862:	7831      	ldrb	r1, [r6, #0]
 8009864:	3b01      	subs	r3, #1
 8009866:	2900      	cmp	r1, #0
 8009868:	d1ed      	bne.n	8009846 <_puts_r+0x56>
 800986a:	60a3      	str	r3, [r4, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	da0f      	bge.n	8009890 <_puts_r+0xa0>
 8009870:	0022      	movs	r2, r4
 8009872:	0028      	movs	r0, r5
 8009874:	310a      	adds	r1, #10
 8009876:	f000 f89d 	bl	80099b4 <__swbuf_r>
 800987a:	3001      	adds	r0, #1
 800987c:	d0d6      	beq.n	800982c <_puts_r+0x3c>
 800987e:	250a      	movs	r5, #10
 8009880:	e7d6      	b.n	8009830 <_puts_r+0x40>
 8009882:	0022      	movs	r2, r4
 8009884:	0028      	movs	r0, r5
 8009886:	f000 f895 	bl	80099b4 <__swbuf_r>
 800988a:	3001      	adds	r0, #1
 800988c:	d1e8      	bne.n	8009860 <_puts_r+0x70>
 800988e:	e7cd      	b.n	800982c <_puts_r+0x3c>
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	6022      	str	r2, [r4, #0]
 8009896:	220a      	movs	r2, #10
 8009898:	701a      	strb	r2, [r3, #0]
 800989a:	e7f0      	b.n	800987e <_puts_r+0x8e>

0800989c <puts>:
 800989c:	b510      	push	{r4, lr}
 800989e:	4b03      	ldr	r3, [pc, #12]	@ (80098ac <puts+0x10>)
 80098a0:	0001      	movs	r1, r0
 80098a2:	6818      	ldr	r0, [r3, #0]
 80098a4:	f7ff ffa4 	bl	80097f0 <_puts_r>
 80098a8:	bd10      	pop	{r4, pc}
 80098aa:	46c0      	nop			@ (mov r8, r8)
 80098ac:	20000018 	.word	0x20000018

080098b0 <sniprintf>:
 80098b0:	b40c      	push	{r2, r3}
 80098b2:	b530      	push	{r4, r5, lr}
 80098b4:	4b18      	ldr	r3, [pc, #96]	@ (8009918 <sniprintf+0x68>)
 80098b6:	000c      	movs	r4, r1
 80098b8:	681d      	ldr	r5, [r3, #0]
 80098ba:	b09d      	sub	sp, #116	@ 0x74
 80098bc:	2900      	cmp	r1, #0
 80098be:	da08      	bge.n	80098d2 <sniprintf+0x22>
 80098c0:	238b      	movs	r3, #139	@ 0x8b
 80098c2:	2001      	movs	r0, #1
 80098c4:	602b      	str	r3, [r5, #0]
 80098c6:	4240      	negs	r0, r0
 80098c8:	b01d      	add	sp, #116	@ 0x74
 80098ca:	bc30      	pop	{r4, r5}
 80098cc:	bc08      	pop	{r3}
 80098ce:	b002      	add	sp, #8
 80098d0:	4718      	bx	r3
 80098d2:	2382      	movs	r3, #130	@ 0x82
 80098d4:	466a      	mov	r2, sp
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	8293      	strh	r3, [r2, #20]
 80098da:	2300      	movs	r3, #0
 80098dc:	9002      	str	r0, [sp, #8]
 80098de:	931b      	str	r3, [sp, #108]	@ 0x6c
 80098e0:	9006      	str	r0, [sp, #24]
 80098e2:	4299      	cmp	r1, r3
 80098e4:	d000      	beq.n	80098e8 <sniprintf+0x38>
 80098e6:	1e4b      	subs	r3, r1, #1
 80098e8:	9304      	str	r3, [sp, #16]
 80098ea:	9307      	str	r3, [sp, #28]
 80098ec:	2301      	movs	r3, #1
 80098ee:	466a      	mov	r2, sp
 80098f0:	425b      	negs	r3, r3
 80098f2:	82d3      	strh	r3, [r2, #22]
 80098f4:	0028      	movs	r0, r5
 80098f6:	ab21      	add	r3, sp, #132	@ 0x84
 80098f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80098fa:	a902      	add	r1, sp, #8
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	f000 fa39 	bl	8009d74 <_svfiprintf_r>
 8009902:	1c43      	adds	r3, r0, #1
 8009904:	da01      	bge.n	800990a <sniprintf+0x5a>
 8009906:	238b      	movs	r3, #139	@ 0x8b
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	2c00      	cmp	r4, #0
 800990c:	d0dc      	beq.n	80098c8 <sniprintf+0x18>
 800990e:	2200      	movs	r2, #0
 8009910:	9b02      	ldr	r3, [sp, #8]
 8009912:	701a      	strb	r2, [r3, #0]
 8009914:	e7d8      	b.n	80098c8 <sniprintf+0x18>
 8009916:	46c0      	nop			@ (mov r8, r8)
 8009918:	20000018 	.word	0x20000018

0800991c <__sread>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	000c      	movs	r4, r1
 8009920:	250e      	movs	r5, #14
 8009922:	5f49      	ldrsh	r1, [r1, r5]
 8009924:	f000 f914 	bl	8009b50 <_read_r>
 8009928:	2800      	cmp	r0, #0
 800992a:	db03      	blt.n	8009934 <__sread+0x18>
 800992c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800992e:	181b      	adds	r3, r3, r0
 8009930:	6563      	str	r3, [r4, #84]	@ 0x54
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	4a02      	ldr	r2, [pc, #8]	@ (8009940 <__sread+0x24>)
 8009938:	4013      	ands	r3, r2
 800993a:	81a3      	strh	r3, [r4, #12]
 800993c:	e7f9      	b.n	8009932 <__sread+0x16>
 800993e:	46c0      	nop			@ (mov r8, r8)
 8009940:	ffffefff 	.word	0xffffefff

08009944 <__swrite>:
 8009944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009946:	001f      	movs	r7, r3
 8009948:	898b      	ldrh	r3, [r1, #12]
 800994a:	0005      	movs	r5, r0
 800994c:	000c      	movs	r4, r1
 800994e:	0016      	movs	r6, r2
 8009950:	05db      	lsls	r3, r3, #23
 8009952:	d505      	bpl.n	8009960 <__swrite+0x1c>
 8009954:	230e      	movs	r3, #14
 8009956:	5ec9      	ldrsh	r1, [r1, r3]
 8009958:	2200      	movs	r2, #0
 800995a:	2302      	movs	r3, #2
 800995c:	f000 f8e4 	bl	8009b28 <_lseek_r>
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	4a05      	ldr	r2, [pc, #20]	@ (8009978 <__swrite+0x34>)
 8009964:	0028      	movs	r0, r5
 8009966:	4013      	ands	r3, r2
 8009968:	81a3      	strh	r3, [r4, #12]
 800996a:	0032      	movs	r2, r6
 800996c:	230e      	movs	r3, #14
 800996e:	5ee1      	ldrsh	r1, [r4, r3]
 8009970:	003b      	movs	r3, r7
 8009972:	f000 f913 	bl	8009b9c <_write_r>
 8009976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009978:	ffffefff 	.word	0xffffefff

0800997c <__sseek>:
 800997c:	b570      	push	{r4, r5, r6, lr}
 800997e:	000c      	movs	r4, r1
 8009980:	250e      	movs	r5, #14
 8009982:	5f49      	ldrsh	r1, [r1, r5]
 8009984:	f000 f8d0 	bl	8009b28 <_lseek_r>
 8009988:	89a3      	ldrh	r3, [r4, #12]
 800998a:	1c42      	adds	r2, r0, #1
 800998c:	d103      	bne.n	8009996 <__sseek+0x1a>
 800998e:	4a05      	ldr	r2, [pc, #20]	@ (80099a4 <__sseek+0x28>)
 8009990:	4013      	ands	r3, r2
 8009992:	81a3      	strh	r3, [r4, #12]
 8009994:	bd70      	pop	{r4, r5, r6, pc}
 8009996:	2280      	movs	r2, #128	@ 0x80
 8009998:	0152      	lsls	r2, r2, #5
 800999a:	4313      	orrs	r3, r2
 800999c:	81a3      	strh	r3, [r4, #12]
 800999e:	6560      	str	r0, [r4, #84]	@ 0x54
 80099a0:	e7f8      	b.n	8009994 <__sseek+0x18>
 80099a2:	46c0      	nop			@ (mov r8, r8)
 80099a4:	ffffefff 	.word	0xffffefff

080099a8 <__sclose>:
 80099a8:	b510      	push	{r4, lr}
 80099aa:	230e      	movs	r3, #14
 80099ac:	5ec9      	ldrsh	r1, [r1, r3]
 80099ae:	f000 f8a9 	bl	8009b04 <_close_r>
 80099b2:	bd10      	pop	{r4, pc}

080099b4 <__swbuf_r>:
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b6:	0006      	movs	r6, r0
 80099b8:	000d      	movs	r5, r1
 80099ba:	0014      	movs	r4, r2
 80099bc:	2800      	cmp	r0, #0
 80099be:	d004      	beq.n	80099ca <__swbuf_r+0x16>
 80099c0:	6a03      	ldr	r3, [r0, #32]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <__swbuf_r+0x16>
 80099c6:	f7ff fecf 	bl	8009768 <__sinit>
 80099ca:	69a3      	ldr	r3, [r4, #24]
 80099cc:	60a3      	str	r3, [r4, #8]
 80099ce:	89a3      	ldrh	r3, [r4, #12]
 80099d0:	071b      	lsls	r3, r3, #28
 80099d2:	d502      	bpl.n	80099da <__swbuf_r+0x26>
 80099d4:	6923      	ldr	r3, [r4, #16]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d109      	bne.n	80099ee <__swbuf_r+0x3a>
 80099da:	0021      	movs	r1, r4
 80099dc:	0030      	movs	r0, r6
 80099de:	f000 f82b 	bl	8009a38 <__swsetup_r>
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d003      	beq.n	80099ee <__swbuf_r+0x3a>
 80099e6:	2501      	movs	r5, #1
 80099e8:	426d      	negs	r5, r5
 80099ea:	0028      	movs	r0, r5
 80099ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ee:	6923      	ldr	r3, [r4, #16]
 80099f0:	6820      	ldr	r0, [r4, #0]
 80099f2:	b2ef      	uxtb	r7, r5
 80099f4:	1ac0      	subs	r0, r0, r3
 80099f6:	6963      	ldr	r3, [r4, #20]
 80099f8:	b2ed      	uxtb	r5, r5
 80099fa:	4283      	cmp	r3, r0
 80099fc:	dc05      	bgt.n	8009a0a <__swbuf_r+0x56>
 80099fe:	0021      	movs	r1, r4
 8009a00:	0030      	movs	r0, r6
 8009a02:	f000 fdfb 	bl	800a5fc <_fflush_r>
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d1ed      	bne.n	80099e6 <__swbuf_r+0x32>
 8009a0a:	68a3      	ldr	r3, [r4, #8]
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	60a3      	str	r3, [r4, #8]
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	1c5a      	adds	r2, r3, #1
 8009a16:	6022      	str	r2, [r4, #0]
 8009a18:	701f      	strb	r7, [r3, #0]
 8009a1a:	6963      	ldr	r3, [r4, #20]
 8009a1c:	4283      	cmp	r3, r0
 8009a1e:	d004      	beq.n	8009a2a <__swbuf_r+0x76>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	07db      	lsls	r3, r3, #31
 8009a24:	d5e1      	bpl.n	80099ea <__swbuf_r+0x36>
 8009a26:	2d0a      	cmp	r5, #10
 8009a28:	d1df      	bne.n	80099ea <__swbuf_r+0x36>
 8009a2a:	0021      	movs	r1, r4
 8009a2c:	0030      	movs	r0, r6
 8009a2e:	f000 fde5 	bl	800a5fc <_fflush_r>
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d0d9      	beq.n	80099ea <__swbuf_r+0x36>
 8009a36:	e7d6      	b.n	80099e6 <__swbuf_r+0x32>

08009a38 <__swsetup_r>:
 8009a38:	4b2d      	ldr	r3, [pc, #180]	@ (8009af0 <__swsetup_r+0xb8>)
 8009a3a:	b570      	push	{r4, r5, r6, lr}
 8009a3c:	0005      	movs	r5, r0
 8009a3e:	6818      	ldr	r0, [r3, #0]
 8009a40:	000c      	movs	r4, r1
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d004      	beq.n	8009a50 <__swsetup_r+0x18>
 8009a46:	6a03      	ldr	r3, [r0, #32]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d101      	bne.n	8009a50 <__swsetup_r+0x18>
 8009a4c:	f7ff fe8c 	bl	8009768 <__sinit>
 8009a50:	220c      	movs	r2, #12
 8009a52:	5ea3      	ldrsh	r3, [r4, r2]
 8009a54:	071a      	lsls	r2, r3, #28
 8009a56:	d423      	bmi.n	8009aa0 <__swsetup_r+0x68>
 8009a58:	06da      	lsls	r2, r3, #27
 8009a5a:	d407      	bmi.n	8009a6c <__swsetup_r+0x34>
 8009a5c:	2209      	movs	r2, #9
 8009a5e:	602a      	str	r2, [r5, #0]
 8009a60:	2240      	movs	r2, #64	@ 0x40
 8009a62:	2001      	movs	r0, #1
 8009a64:	4313      	orrs	r3, r2
 8009a66:	81a3      	strh	r3, [r4, #12]
 8009a68:	4240      	negs	r0, r0
 8009a6a:	e03a      	b.n	8009ae2 <__swsetup_r+0xaa>
 8009a6c:	075b      	lsls	r3, r3, #29
 8009a6e:	d513      	bpl.n	8009a98 <__swsetup_r+0x60>
 8009a70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a72:	2900      	cmp	r1, #0
 8009a74:	d008      	beq.n	8009a88 <__swsetup_r+0x50>
 8009a76:	0023      	movs	r3, r4
 8009a78:	3344      	adds	r3, #68	@ 0x44
 8009a7a:	4299      	cmp	r1, r3
 8009a7c:	d002      	beq.n	8009a84 <__swsetup_r+0x4c>
 8009a7e:	0028      	movs	r0, r5
 8009a80:	f000 f8ce 	bl	8009c20 <_free_r>
 8009a84:	2300      	movs	r3, #0
 8009a86:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a88:	2224      	movs	r2, #36	@ 0x24
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	4393      	bics	r3, r2
 8009a8e:	81a3      	strh	r3, [r4, #12]
 8009a90:	2300      	movs	r3, #0
 8009a92:	6063      	str	r3, [r4, #4]
 8009a94:	6923      	ldr	r3, [r4, #16]
 8009a96:	6023      	str	r3, [r4, #0]
 8009a98:	2308      	movs	r3, #8
 8009a9a:	89a2      	ldrh	r2, [r4, #12]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	81a3      	strh	r3, [r4, #12]
 8009aa0:	6923      	ldr	r3, [r4, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10b      	bne.n	8009abe <__swsetup_r+0x86>
 8009aa6:	21a0      	movs	r1, #160	@ 0xa0
 8009aa8:	2280      	movs	r2, #128	@ 0x80
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	0089      	lsls	r1, r1, #2
 8009aae:	0092      	lsls	r2, r2, #2
 8009ab0:	400b      	ands	r3, r1
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d003      	beq.n	8009abe <__swsetup_r+0x86>
 8009ab6:	0021      	movs	r1, r4
 8009ab8:	0028      	movs	r0, r5
 8009aba:	f000 fdf5 	bl	800a6a8 <__smakebuf_r>
 8009abe:	220c      	movs	r2, #12
 8009ac0:	5ea3      	ldrsh	r3, [r4, r2]
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	001a      	movs	r2, r3
 8009ac6:	400a      	ands	r2, r1
 8009ac8:	420b      	tst	r3, r1
 8009aca:	d00b      	beq.n	8009ae4 <__swsetup_r+0xac>
 8009acc:	2200      	movs	r2, #0
 8009ace:	60a2      	str	r2, [r4, #8]
 8009ad0:	6962      	ldr	r2, [r4, #20]
 8009ad2:	4252      	negs	r2, r2
 8009ad4:	61a2      	str	r2, [r4, #24]
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	6922      	ldr	r2, [r4, #16]
 8009ada:	4282      	cmp	r2, r0
 8009adc:	d101      	bne.n	8009ae2 <__swsetup_r+0xaa>
 8009ade:	061a      	lsls	r2, r3, #24
 8009ae0:	d4be      	bmi.n	8009a60 <__swsetup_r+0x28>
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}
 8009ae4:	0799      	lsls	r1, r3, #30
 8009ae6:	d400      	bmi.n	8009aea <__swsetup_r+0xb2>
 8009ae8:	6962      	ldr	r2, [r4, #20]
 8009aea:	60a2      	str	r2, [r4, #8]
 8009aec:	e7f3      	b.n	8009ad6 <__swsetup_r+0x9e>
 8009aee:	46c0      	nop			@ (mov r8, r8)
 8009af0:	20000018 	.word	0x20000018

08009af4 <memset>:
 8009af4:	0003      	movs	r3, r0
 8009af6:	1882      	adds	r2, r0, r2
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d100      	bne.n	8009afe <memset+0xa>
 8009afc:	4770      	bx	lr
 8009afe:	7019      	strb	r1, [r3, #0]
 8009b00:	3301      	adds	r3, #1
 8009b02:	e7f9      	b.n	8009af8 <memset+0x4>

08009b04 <_close_r>:
 8009b04:	2300      	movs	r3, #0
 8009b06:	b570      	push	{r4, r5, r6, lr}
 8009b08:	4d06      	ldr	r5, [pc, #24]	@ (8009b24 <_close_r+0x20>)
 8009b0a:	0004      	movs	r4, r0
 8009b0c:	0008      	movs	r0, r1
 8009b0e:	602b      	str	r3, [r5, #0]
 8009b10:	f7f7 ffc7 	bl	8001aa2 <_close>
 8009b14:	1c43      	adds	r3, r0, #1
 8009b16:	d103      	bne.n	8009b20 <_close_r+0x1c>
 8009b18:	682b      	ldr	r3, [r5, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d000      	beq.n	8009b20 <_close_r+0x1c>
 8009b1e:	6023      	str	r3, [r4, #0]
 8009b20:	bd70      	pop	{r4, r5, r6, pc}
 8009b22:	46c0      	nop			@ (mov r8, r8)
 8009b24:	20000830 	.word	0x20000830

08009b28 <_lseek_r>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	0004      	movs	r4, r0
 8009b2c:	0008      	movs	r0, r1
 8009b2e:	0011      	movs	r1, r2
 8009b30:	001a      	movs	r2, r3
 8009b32:	2300      	movs	r3, #0
 8009b34:	4d05      	ldr	r5, [pc, #20]	@ (8009b4c <_lseek_r+0x24>)
 8009b36:	602b      	str	r3, [r5, #0]
 8009b38:	f7f7 ffd4 	bl	8001ae4 <_lseek>
 8009b3c:	1c43      	adds	r3, r0, #1
 8009b3e:	d103      	bne.n	8009b48 <_lseek_r+0x20>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d000      	beq.n	8009b48 <_lseek_r+0x20>
 8009b46:	6023      	str	r3, [r4, #0]
 8009b48:	bd70      	pop	{r4, r5, r6, pc}
 8009b4a:	46c0      	nop			@ (mov r8, r8)
 8009b4c:	20000830 	.word	0x20000830

08009b50 <_read_r>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	0004      	movs	r4, r0
 8009b54:	0008      	movs	r0, r1
 8009b56:	0011      	movs	r1, r2
 8009b58:	001a      	movs	r2, r3
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	4d05      	ldr	r5, [pc, #20]	@ (8009b74 <_read_r+0x24>)
 8009b5e:	602b      	str	r3, [r5, #0]
 8009b60:	f7f7 ff82 	bl	8001a68 <_read>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d103      	bne.n	8009b70 <_read_r+0x20>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d000      	beq.n	8009b70 <_read_r+0x20>
 8009b6e:	6023      	str	r3, [r4, #0]
 8009b70:	bd70      	pop	{r4, r5, r6, pc}
 8009b72:	46c0      	nop			@ (mov r8, r8)
 8009b74:	20000830 	.word	0x20000830

08009b78 <_sbrk_r>:
 8009b78:	2300      	movs	r3, #0
 8009b7a:	b570      	push	{r4, r5, r6, lr}
 8009b7c:	4d06      	ldr	r5, [pc, #24]	@ (8009b98 <_sbrk_r+0x20>)
 8009b7e:	0004      	movs	r4, r0
 8009b80:	0008      	movs	r0, r1
 8009b82:	602b      	str	r3, [r5, #0]
 8009b84:	f7f7 ffba 	bl	8001afc <_sbrk>
 8009b88:	1c43      	adds	r3, r0, #1
 8009b8a:	d103      	bne.n	8009b94 <_sbrk_r+0x1c>
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d000      	beq.n	8009b94 <_sbrk_r+0x1c>
 8009b92:	6023      	str	r3, [r4, #0]
 8009b94:	bd70      	pop	{r4, r5, r6, pc}
 8009b96:	46c0      	nop			@ (mov r8, r8)
 8009b98:	20000830 	.word	0x20000830

08009b9c <_write_r>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	0004      	movs	r4, r0
 8009ba0:	0008      	movs	r0, r1
 8009ba2:	0011      	movs	r1, r2
 8009ba4:	001a      	movs	r2, r3
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	4d05      	ldr	r5, [pc, #20]	@ (8009bc0 <_write_r+0x24>)
 8009baa:	602b      	str	r3, [r5, #0]
 8009bac:	f7f6 fb54 	bl	8000258 <_write>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d103      	bne.n	8009bbc <_write_r+0x20>
 8009bb4:	682b      	ldr	r3, [r5, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d000      	beq.n	8009bbc <_write_r+0x20>
 8009bba:	6023      	str	r3, [r4, #0]
 8009bbc:	bd70      	pop	{r4, r5, r6, pc}
 8009bbe:	46c0      	nop			@ (mov r8, r8)
 8009bc0:	20000830 	.word	0x20000830

08009bc4 <__errno>:
 8009bc4:	4b01      	ldr	r3, [pc, #4]	@ (8009bcc <__errno+0x8>)
 8009bc6:	6818      	ldr	r0, [r3, #0]
 8009bc8:	4770      	bx	lr
 8009bca:	46c0      	nop			@ (mov r8, r8)
 8009bcc:	20000018 	.word	0x20000018

08009bd0 <__libc_init_array>:
 8009bd0:	b570      	push	{r4, r5, r6, lr}
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	4c0c      	ldr	r4, [pc, #48]	@ (8009c08 <__libc_init_array+0x38>)
 8009bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8009c0c <__libc_init_array+0x3c>)
 8009bd8:	1b64      	subs	r4, r4, r5
 8009bda:	10a4      	asrs	r4, r4, #2
 8009bdc:	42a6      	cmp	r6, r4
 8009bde:	d109      	bne.n	8009bf4 <__libc_init_array+0x24>
 8009be0:	2600      	movs	r6, #0
 8009be2:	f000 fe25 	bl	800a830 <_init>
 8009be6:	4c0a      	ldr	r4, [pc, #40]	@ (8009c10 <__libc_init_array+0x40>)
 8009be8:	4d0a      	ldr	r5, [pc, #40]	@ (8009c14 <__libc_init_array+0x44>)
 8009bea:	1b64      	subs	r4, r4, r5
 8009bec:	10a4      	asrs	r4, r4, #2
 8009bee:	42a6      	cmp	r6, r4
 8009bf0:	d105      	bne.n	8009bfe <__libc_init_array+0x2e>
 8009bf2:	bd70      	pop	{r4, r5, r6, pc}
 8009bf4:	00b3      	lsls	r3, r6, #2
 8009bf6:	58eb      	ldr	r3, [r5, r3]
 8009bf8:	4798      	blx	r3
 8009bfa:	3601      	adds	r6, #1
 8009bfc:	e7ee      	b.n	8009bdc <__libc_init_array+0xc>
 8009bfe:	00b3      	lsls	r3, r6, #2
 8009c00:	58eb      	ldr	r3, [r5, r3]
 8009c02:	4798      	blx	r3
 8009c04:	3601      	adds	r6, #1
 8009c06:	e7f2      	b.n	8009bee <__libc_init_array+0x1e>
 8009c08:	0800b398 	.word	0x0800b398
 8009c0c:	0800b398 	.word	0x0800b398
 8009c10:	0800b39c 	.word	0x0800b39c
 8009c14:	0800b398 	.word	0x0800b398

08009c18 <__retarget_lock_init_recursive>:
 8009c18:	4770      	bx	lr

08009c1a <__retarget_lock_acquire_recursive>:
 8009c1a:	4770      	bx	lr

08009c1c <__retarget_lock_release_recursive>:
 8009c1c:	4770      	bx	lr
	...

08009c20 <_free_r>:
 8009c20:	b570      	push	{r4, r5, r6, lr}
 8009c22:	0005      	movs	r5, r0
 8009c24:	1e0c      	subs	r4, r1, #0
 8009c26:	d010      	beq.n	8009c4a <_free_r+0x2a>
 8009c28:	3c04      	subs	r4, #4
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	da00      	bge.n	8009c32 <_free_r+0x12>
 8009c30:	18e4      	adds	r4, r4, r3
 8009c32:	0028      	movs	r0, r5
 8009c34:	f7ff fcf8 	bl	8009628 <__malloc_lock>
 8009c38:	4a1d      	ldr	r2, [pc, #116]	@ (8009cb0 <_free_r+0x90>)
 8009c3a:	6813      	ldr	r3, [r2, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d105      	bne.n	8009c4c <_free_r+0x2c>
 8009c40:	6063      	str	r3, [r4, #4]
 8009c42:	6014      	str	r4, [r2, #0]
 8009c44:	0028      	movs	r0, r5
 8009c46:	f7ff fcf7 	bl	8009638 <__malloc_unlock>
 8009c4a:	bd70      	pop	{r4, r5, r6, pc}
 8009c4c:	42a3      	cmp	r3, r4
 8009c4e:	d908      	bls.n	8009c62 <_free_r+0x42>
 8009c50:	6820      	ldr	r0, [r4, #0]
 8009c52:	1821      	adds	r1, r4, r0
 8009c54:	428b      	cmp	r3, r1
 8009c56:	d1f3      	bne.n	8009c40 <_free_r+0x20>
 8009c58:	6819      	ldr	r1, [r3, #0]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	1809      	adds	r1, r1, r0
 8009c5e:	6021      	str	r1, [r4, #0]
 8009c60:	e7ee      	b.n	8009c40 <_free_r+0x20>
 8009c62:	001a      	movs	r2, r3
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <_free_r+0x4e>
 8009c6a:	42a3      	cmp	r3, r4
 8009c6c:	d9f9      	bls.n	8009c62 <_free_r+0x42>
 8009c6e:	6811      	ldr	r1, [r2, #0]
 8009c70:	1850      	adds	r0, r2, r1
 8009c72:	42a0      	cmp	r0, r4
 8009c74:	d10b      	bne.n	8009c8e <_free_r+0x6e>
 8009c76:	6820      	ldr	r0, [r4, #0]
 8009c78:	1809      	adds	r1, r1, r0
 8009c7a:	1850      	adds	r0, r2, r1
 8009c7c:	6011      	str	r1, [r2, #0]
 8009c7e:	4283      	cmp	r3, r0
 8009c80:	d1e0      	bne.n	8009c44 <_free_r+0x24>
 8009c82:	6818      	ldr	r0, [r3, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	1841      	adds	r1, r0, r1
 8009c88:	6011      	str	r1, [r2, #0]
 8009c8a:	6053      	str	r3, [r2, #4]
 8009c8c:	e7da      	b.n	8009c44 <_free_r+0x24>
 8009c8e:	42a0      	cmp	r0, r4
 8009c90:	d902      	bls.n	8009c98 <_free_r+0x78>
 8009c92:	230c      	movs	r3, #12
 8009c94:	602b      	str	r3, [r5, #0]
 8009c96:	e7d5      	b.n	8009c44 <_free_r+0x24>
 8009c98:	6820      	ldr	r0, [r4, #0]
 8009c9a:	1821      	adds	r1, r4, r0
 8009c9c:	428b      	cmp	r3, r1
 8009c9e:	d103      	bne.n	8009ca8 <_free_r+0x88>
 8009ca0:	6819      	ldr	r1, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	1809      	adds	r1, r1, r0
 8009ca6:	6021      	str	r1, [r4, #0]
 8009ca8:	6063      	str	r3, [r4, #4]
 8009caa:	6054      	str	r4, [r2, #4]
 8009cac:	e7ca      	b.n	8009c44 <_free_r+0x24>
 8009cae:	46c0      	nop			@ (mov r8, r8)
 8009cb0:	200006f0 	.word	0x200006f0

08009cb4 <__ssputs_r>:
 8009cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cb6:	688e      	ldr	r6, [r1, #8]
 8009cb8:	b085      	sub	sp, #20
 8009cba:	001f      	movs	r7, r3
 8009cbc:	000c      	movs	r4, r1
 8009cbe:	680b      	ldr	r3, [r1, #0]
 8009cc0:	9002      	str	r0, [sp, #8]
 8009cc2:	9203      	str	r2, [sp, #12]
 8009cc4:	42be      	cmp	r6, r7
 8009cc6:	d830      	bhi.n	8009d2a <__ssputs_r+0x76>
 8009cc8:	210c      	movs	r1, #12
 8009cca:	5e62      	ldrsh	r2, [r4, r1]
 8009ccc:	2190      	movs	r1, #144	@ 0x90
 8009cce:	00c9      	lsls	r1, r1, #3
 8009cd0:	420a      	tst	r2, r1
 8009cd2:	d028      	beq.n	8009d26 <__ssputs_r+0x72>
 8009cd4:	2003      	movs	r0, #3
 8009cd6:	6921      	ldr	r1, [r4, #16]
 8009cd8:	1a5b      	subs	r3, r3, r1
 8009cda:	9301      	str	r3, [sp, #4]
 8009cdc:	6963      	ldr	r3, [r4, #20]
 8009cde:	4343      	muls	r3, r0
 8009ce0:	9801      	ldr	r0, [sp, #4]
 8009ce2:	0fdd      	lsrs	r5, r3, #31
 8009ce4:	18ed      	adds	r5, r5, r3
 8009ce6:	1c7b      	adds	r3, r7, #1
 8009ce8:	181b      	adds	r3, r3, r0
 8009cea:	106d      	asrs	r5, r5, #1
 8009cec:	42ab      	cmp	r3, r5
 8009cee:	d900      	bls.n	8009cf2 <__ssputs_r+0x3e>
 8009cf0:	001d      	movs	r5, r3
 8009cf2:	0552      	lsls	r2, r2, #21
 8009cf4:	d528      	bpl.n	8009d48 <__ssputs_r+0x94>
 8009cf6:	0029      	movs	r1, r5
 8009cf8:	9802      	ldr	r0, [sp, #8]
 8009cfa:	f7ff fc15 	bl	8009528 <_malloc_r>
 8009cfe:	1e06      	subs	r6, r0, #0
 8009d00:	d02c      	beq.n	8009d5c <__ssputs_r+0xa8>
 8009d02:	9a01      	ldr	r2, [sp, #4]
 8009d04:	6921      	ldr	r1, [r4, #16]
 8009d06:	f000 fd52 	bl	800a7ae <memcpy>
 8009d0a:	89a2      	ldrh	r2, [r4, #12]
 8009d0c:	4b18      	ldr	r3, [pc, #96]	@ (8009d70 <__ssputs_r+0xbc>)
 8009d0e:	401a      	ands	r2, r3
 8009d10:	2380      	movs	r3, #128	@ 0x80
 8009d12:	4313      	orrs	r3, r2
 8009d14:	81a3      	strh	r3, [r4, #12]
 8009d16:	9b01      	ldr	r3, [sp, #4]
 8009d18:	6126      	str	r6, [r4, #16]
 8009d1a:	18f6      	adds	r6, r6, r3
 8009d1c:	6026      	str	r6, [r4, #0]
 8009d1e:	003e      	movs	r6, r7
 8009d20:	6165      	str	r5, [r4, #20]
 8009d22:	1aed      	subs	r5, r5, r3
 8009d24:	60a5      	str	r5, [r4, #8]
 8009d26:	42be      	cmp	r6, r7
 8009d28:	d900      	bls.n	8009d2c <__ssputs_r+0x78>
 8009d2a:	003e      	movs	r6, r7
 8009d2c:	0032      	movs	r2, r6
 8009d2e:	9903      	ldr	r1, [sp, #12]
 8009d30:	6820      	ldr	r0, [r4, #0]
 8009d32:	f000 fcfa 	bl	800a72a <memmove>
 8009d36:	2000      	movs	r0, #0
 8009d38:	68a3      	ldr	r3, [r4, #8]
 8009d3a:	1b9b      	subs	r3, r3, r6
 8009d3c:	60a3      	str	r3, [r4, #8]
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	199b      	adds	r3, r3, r6
 8009d42:	6023      	str	r3, [r4, #0]
 8009d44:	b005      	add	sp, #20
 8009d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d48:	002a      	movs	r2, r5
 8009d4a:	9802      	ldr	r0, [sp, #8]
 8009d4c:	f000 fd38 	bl	800a7c0 <_realloc_r>
 8009d50:	1e06      	subs	r6, r0, #0
 8009d52:	d1e0      	bne.n	8009d16 <__ssputs_r+0x62>
 8009d54:	6921      	ldr	r1, [r4, #16]
 8009d56:	9802      	ldr	r0, [sp, #8]
 8009d58:	f7ff ff62 	bl	8009c20 <_free_r>
 8009d5c:	230c      	movs	r3, #12
 8009d5e:	2001      	movs	r0, #1
 8009d60:	9a02      	ldr	r2, [sp, #8]
 8009d62:	4240      	negs	r0, r0
 8009d64:	6013      	str	r3, [r2, #0]
 8009d66:	89a2      	ldrh	r2, [r4, #12]
 8009d68:	3334      	adds	r3, #52	@ 0x34
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	81a3      	strh	r3, [r4, #12]
 8009d6e:	e7e9      	b.n	8009d44 <__ssputs_r+0x90>
 8009d70:	fffffb7f 	.word	0xfffffb7f

08009d74 <_svfiprintf_r>:
 8009d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d76:	b0a1      	sub	sp, #132	@ 0x84
 8009d78:	9003      	str	r0, [sp, #12]
 8009d7a:	001d      	movs	r5, r3
 8009d7c:	898b      	ldrh	r3, [r1, #12]
 8009d7e:	000f      	movs	r7, r1
 8009d80:	0016      	movs	r6, r2
 8009d82:	061b      	lsls	r3, r3, #24
 8009d84:	d511      	bpl.n	8009daa <_svfiprintf_r+0x36>
 8009d86:	690b      	ldr	r3, [r1, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10e      	bne.n	8009daa <_svfiprintf_r+0x36>
 8009d8c:	2140      	movs	r1, #64	@ 0x40
 8009d8e:	f7ff fbcb 	bl	8009528 <_malloc_r>
 8009d92:	6038      	str	r0, [r7, #0]
 8009d94:	6138      	str	r0, [r7, #16]
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d105      	bne.n	8009da6 <_svfiprintf_r+0x32>
 8009d9a:	230c      	movs	r3, #12
 8009d9c:	9a03      	ldr	r2, [sp, #12]
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	2001      	movs	r0, #1
 8009da2:	4240      	negs	r0, r0
 8009da4:	e0cf      	b.n	8009f46 <_svfiprintf_r+0x1d2>
 8009da6:	2340      	movs	r3, #64	@ 0x40
 8009da8:	617b      	str	r3, [r7, #20]
 8009daa:	2300      	movs	r3, #0
 8009dac:	ac08      	add	r4, sp, #32
 8009dae:	6163      	str	r3, [r4, #20]
 8009db0:	3320      	adds	r3, #32
 8009db2:	7663      	strb	r3, [r4, #25]
 8009db4:	3310      	adds	r3, #16
 8009db6:	76a3      	strb	r3, [r4, #26]
 8009db8:	9507      	str	r5, [sp, #28]
 8009dba:	0035      	movs	r5, r6
 8009dbc:	782b      	ldrb	r3, [r5, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <_svfiprintf_r+0x52>
 8009dc2:	2b25      	cmp	r3, #37	@ 0x25
 8009dc4:	d148      	bne.n	8009e58 <_svfiprintf_r+0xe4>
 8009dc6:	1bab      	subs	r3, r5, r6
 8009dc8:	9305      	str	r3, [sp, #20]
 8009dca:	42b5      	cmp	r5, r6
 8009dcc:	d00b      	beq.n	8009de6 <_svfiprintf_r+0x72>
 8009dce:	0032      	movs	r2, r6
 8009dd0:	0039      	movs	r1, r7
 8009dd2:	9803      	ldr	r0, [sp, #12]
 8009dd4:	f7ff ff6e 	bl	8009cb4 <__ssputs_r>
 8009dd8:	3001      	adds	r0, #1
 8009dda:	d100      	bne.n	8009dde <_svfiprintf_r+0x6a>
 8009ddc:	e0ae      	b.n	8009f3c <_svfiprintf_r+0x1c8>
 8009dde:	6963      	ldr	r3, [r4, #20]
 8009de0:	9a05      	ldr	r2, [sp, #20]
 8009de2:	189b      	adds	r3, r3, r2
 8009de4:	6163      	str	r3, [r4, #20]
 8009de6:	782b      	ldrb	r3, [r5, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d100      	bne.n	8009dee <_svfiprintf_r+0x7a>
 8009dec:	e0a6      	b.n	8009f3c <_svfiprintf_r+0x1c8>
 8009dee:	2201      	movs	r2, #1
 8009df0:	2300      	movs	r3, #0
 8009df2:	4252      	negs	r2, r2
 8009df4:	6062      	str	r2, [r4, #4]
 8009df6:	a904      	add	r1, sp, #16
 8009df8:	3254      	adds	r2, #84	@ 0x54
 8009dfa:	1852      	adds	r2, r2, r1
 8009dfc:	1c6e      	adds	r6, r5, #1
 8009dfe:	6023      	str	r3, [r4, #0]
 8009e00:	60e3      	str	r3, [r4, #12]
 8009e02:	60a3      	str	r3, [r4, #8]
 8009e04:	7013      	strb	r3, [r2, #0]
 8009e06:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009e08:	4b54      	ldr	r3, [pc, #336]	@ (8009f5c <_svfiprintf_r+0x1e8>)
 8009e0a:	2205      	movs	r2, #5
 8009e0c:	0018      	movs	r0, r3
 8009e0e:	7831      	ldrb	r1, [r6, #0]
 8009e10:	9305      	str	r3, [sp, #20]
 8009e12:	f000 fcc1 	bl	800a798 <memchr>
 8009e16:	1c75      	adds	r5, r6, #1
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	d11f      	bne.n	8009e5c <_svfiprintf_r+0xe8>
 8009e1c:	6822      	ldr	r2, [r4, #0]
 8009e1e:	06d3      	lsls	r3, r2, #27
 8009e20:	d504      	bpl.n	8009e2c <_svfiprintf_r+0xb8>
 8009e22:	2353      	movs	r3, #83	@ 0x53
 8009e24:	a904      	add	r1, sp, #16
 8009e26:	185b      	adds	r3, r3, r1
 8009e28:	2120      	movs	r1, #32
 8009e2a:	7019      	strb	r1, [r3, #0]
 8009e2c:	0713      	lsls	r3, r2, #28
 8009e2e:	d504      	bpl.n	8009e3a <_svfiprintf_r+0xc6>
 8009e30:	2353      	movs	r3, #83	@ 0x53
 8009e32:	a904      	add	r1, sp, #16
 8009e34:	185b      	adds	r3, r3, r1
 8009e36:	212b      	movs	r1, #43	@ 0x2b
 8009e38:	7019      	strb	r1, [r3, #0]
 8009e3a:	7833      	ldrb	r3, [r6, #0]
 8009e3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e3e:	d016      	beq.n	8009e6e <_svfiprintf_r+0xfa>
 8009e40:	0035      	movs	r5, r6
 8009e42:	2100      	movs	r1, #0
 8009e44:	200a      	movs	r0, #10
 8009e46:	68e3      	ldr	r3, [r4, #12]
 8009e48:	782a      	ldrb	r2, [r5, #0]
 8009e4a:	1c6e      	adds	r6, r5, #1
 8009e4c:	3a30      	subs	r2, #48	@ 0x30
 8009e4e:	2a09      	cmp	r2, #9
 8009e50:	d950      	bls.n	8009ef4 <_svfiprintf_r+0x180>
 8009e52:	2900      	cmp	r1, #0
 8009e54:	d111      	bne.n	8009e7a <_svfiprintf_r+0x106>
 8009e56:	e017      	b.n	8009e88 <_svfiprintf_r+0x114>
 8009e58:	3501      	adds	r5, #1
 8009e5a:	e7af      	b.n	8009dbc <_svfiprintf_r+0x48>
 8009e5c:	9b05      	ldr	r3, [sp, #20]
 8009e5e:	6822      	ldr	r2, [r4, #0]
 8009e60:	1ac0      	subs	r0, r0, r3
 8009e62:	2301      	movs	r3, #1
 8009e64:	4083      	lsls	r3, r0
 8009e66:	4313      	orrs	r3, r2
 8009e68:	002e      	movs	r6, r5
 8009e6a:	6023      	str	r3, [r4, #0]
 8009e6c:	e7cc      	b.n	8009e08 <_svfiprintf_r+0x94>
 8009e6e:	9b07      	ldr	r3, [sp, #28]
 8009e70:	1d19      	adds	r1, r3, #4
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	9107      	str	r1, [sp, #28]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	db01      	blt.n	8009e7e <_svfiprintf_r+0x10a>
 8009e7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e7c:	e004      	b.n	8009e88 <_svfiprintf_r+0x114>
 8009e7e:	425b      	negs	r3, r3
 8009e80:	60e3      	str	r3, [r4, #12]
 8009e82:	2302      	movs	r3, #2
 8009e84:	4313      	orrs	r3, r2
 8009e86:	6023      	str	r3, [r4, #0]
 8009e88:	782b      	ldrb	r3, [r5, #0]
 8009e8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e8c:	d10c      	bne.n	8009ea8 <_svfiprintf_r+0x134>
 8009e8e:	786b      	ldrb	r3, [r5, #1]
 8009e90:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e92:	d134      	bne.n	8009efe <_svfiprintf_r+0x18a>
 8009e94:	9b07      	ldr	r3, [sp, #28]
 8009e96:	3502      	adds	r5, #2
 8009e98:	1d1a      	adds	r2, r3, #4
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	9207      	str	r2, [sp, #28]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	da01      	bge.n	8009ea6 <_svfiprintf_r+0x132>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	425b      	negs	r3, r3
 8009ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ea8:	4e2d      	ldr	r6, [pc, #180]	@ (8009f60 <_svfiprintf_r+0x1ec>)
 8009eaa:	2203      	movs	r2, #3
 8009eac:	0030      	movs	r0, r6
 8009eae:	7829      	ldrb	r1, [r5, #0]
 8009eb0:	f000 fc72 	bl	800a798 <memchr>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d006      	beq.n	8009ec6 <_svfiprintf_r+0x152>
 8009eb8:	2340      	movs	r3, #64	@ 0x40
 8009eba:	1b80      	subs	r0, r0, r6
 8009ebc:	4083      	lsls	r3, r0
 8009ebe:	6822      	ldr	r2, [r4, #0]
 8009ec0:	3501      	adds	r5, #1
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	7829      	ldrb	r1, [r5, #0]
 8009ec8:	2206      	movs	r2, #6
 8009eca:	4826      	ldr	r0, [pc, #152]	@ (8009f64 <_svfiprintf_r+0x1f0>)
 8009ecc:	1c6e      	adds	r6, r5, #1
 8009ece:	7621      	strb	r1, [r4, #24]
 8009ed0:	f000 fc62 	bl	800a798 <memchr>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d038      	beq.n	8009f4a <_svfiprintf_r+0x1d6>
 8009ed8:	4b23      	ldr	r3, [pc, #140]	@ (8009f68 <_svfiprintf_r+0x1f4>)
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d122      	bne.n	8009f24 <_svfiprintf_r+0x1b0>
 8009ede:	2207      	movs	r2, #7
 8009ee0:	9b07      	ldr	r3, [sp, #28]
 8009ee2:	3307      	adds	r3, #7
 8009ee4:	4393      	bics	r3, r2
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	9307      	str	r3, [sp, #28]
 8009eea:	6963      	ldr	r3, [r4, #20]
 8009eec:	9a04      	ldr	r2, [sp, #16]
 8009eee:	189b      	adds	r3, r3, r2
 8009ef0:	6163      	str	r3, [r4, #20]
 8009ef2:	e762      	b.n	8009dba <_svfiprintf_r+0x46>
 8009ef4:	4343      	muls	r3, r0
 8009ef6:	0035      	movs	r5, r6
 8009ef8:	2101      	movs	r1, #1
 8009efa:	189b      	adds	r3, r3, r2
 8009efc:	e7a4      	b.n	8009e48 <_svfiprintf_r+0xd4>
 8009efe:	2300      	movs	r3, #0
 8009f00:	200a      	movs	r0, #10
 8009f02:	0019      	movs	r1, r3
 8009f04:	3501      	adds	r5, #1
 8009f06:	6063      	str	r3, [r4, #4]
 8009f08:	782a      	ldrb	r2, [r5, #0]
 8009f0a:	1c6e      	adds	r6, r5, #1
 8009f0c:	3a30      	subs	r2, #48	@ 0x30
 8009f0e:	2a09      	cmp	r2, #9
 8009f10:	d903      	bls.n	8009f1a <_svfiprintf_r+0x1a6>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d0c8      	beq.n	8009ea8 <_svfiprintf_r+0x134>
 8009f16:	9109      	str	r1, [sp, #36]	@ 0x24
 8009f18:	e7c6      	b.n	8009ea8 <_svfiprintf_r+0x134>
 8009f1a:	4341      	muls	r1, r0
 8009f1c:	0035      	movs	r5, r6
 8009f1e:	2301      	movs	r3, #1
 8009f20:	1889      	adds	r1, r1, r2
 8009f22:	e7f1      	b.n	8009f08 <_svfiprintf_r+0x194>
 8009f24:	aa07      	add	r2, sp, #28
 8009f26:	9200      	str	r2, [sp, #0]
 8009f28:	0021      	movs	r1, r4
 8009f2a:	003a      	movs	r2, r7
 8009f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8009f6c <_svfiprintf_r+0x1f8>)
 8009f2e:	9803      	ldr	r0, [sp, #12]
 8009f30:	e000      	b.n	8009f34 <_svfiprintf_r+0x1c0>
 8009f32:	bf00      	nop
 8009f34:	9004      	str	r0, [sp, #16]
 8009f36:	9b04      	ldr	r3, [sp, #16]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	d1d6      	bne.n	8009eea <_svfiprintf_r+0x176>
 8009f3c:	89bb      	ldrh	r3, [r7, #12]
 8009f3e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009f40:	065b      	lsls	r3, r3, #25
 8009f42:	d500      	bpl.n	8009f46 <_svfiprintf_r+0x1d2>
 8009f44:	e72c      	b.n	8009da0 <_svfiprintf_r+0x2c>
 8009f46:	b021      	add	sp, #132	@ 0x84
 8009f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f4a:	aa07      	add	r2, sp, #28
 8009f4c:	9200      	str	r2, [sp, #0]
 8009f4e:	0021      	movs	r1, r4
 8009f50:	003a      	movs	r2, r7
 8009f52:	4b06      	ldr	r3, [pc, #24]	@ (8009f6c <_svfiprintf_r+0x1f8>)
 8009f54:	9803      	ldr	r0, [sp, #12]
 8009f56:	f000 f9bf 	bl	800a2d8 <_printf_i>
 8009f5a:	e7eb      	b.n	8009f34 <_svfiprintf_r+0x1c0>
 8009f5c:	0800b364 	.word	0x0800b364
 8009f60:	0800b36a 	.word	0x0800b36a
 8009f64:	0800b36e 	.word	0x0800b36e
 8009f68:	00000000 	.word	0x00000000
 8009f6c:	08009cb5 	.word	0x08009cb5

08009f70 <__sfputc_r>:
 8009f70:	6893      	ldr	r3, [r2, #8]
 8009f72:	b510      	push	{r4, lr}
 8009f74:	3b01      	subs	r3, #1
 8009f76:	6093      	str	r3, [r2, #8]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	da04      	bge.n	8009f86 <__sfputc_r+0x16>
 8009f7c:	6994      	ldr	r4, [r2, #24]
 8009f7e:	42a3      	cmp	r3, r4
 8009f80:	db07      	blt.n	8009f92 <__sfputc_r+0x22>
 8009f82:	290a      	cmp	r1, #10
 8009f84:	d005      	beq.n	8009f92 <__sfputc_r+0x22>
 8009f86:	6813      	ldr	r3, [r2, #0]
 8009f88:	1c58      	adds	r0, r3, #1
 8009f8a:	6010      	str	r0, [r2, #0]
 8009f8c:	7019      	strb	r1, [r3, #0]
 8009f8e:	0008      	movs	r0, r1
 8009f90:	bd10      	pop	{r4, pc}
 8009f92:	f7ff fd0f 	bl	80099b4 <__swbuf_r>
 8009f96:	0001      	movs	r1, r0
 8009f98:	e7f9      	b.n	8009f8e <__sfputc_r+0x1e>

08009f9a <__sfputs_r>:
 8009f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9c:	0006      	movs	r6, r0
 8009f9e:	000f      	movs	r7, r1
 8009fa0:	0014      	movs	r4, r2
 8009fa2:	18d5      	adds	r5, r2, r3
 8009fa4:	42ac      	cmp	r4, r5
 8009fa6:	d101      	bne.n	8009fac <__sfputs_r+0x12>
 8009fa8:	2000      	movs	r0, #0
 8009faa:	e007      	b.n	8009fbc <__sfputs_r+0x22>
 8009fac:	7821      	ldrb	r1, [r4, #0]
 8009fae:	003a      	movs	r2, r7
 8009fb0:	0030      	movs	r0, r6
 8009fb2:	f7ff ffdd 	bl	8009f70 <__sfputc_r>
 8009fb6:	3401      	adds	r4, #1
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d1f3      	bne.n	8009fa4 <__sfputs_r+0xa>
 8009fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fc0 <_vfiprintf_r>:
 8009fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fc2:	b0a1      	sub	sp, #132	@ 0x84
 8009fc4:	000f      	movs	r7, r1
 8009fc6:	0015      	movs	r5, r2
 8009fc8:	001e      	movs	r6, r3
 8009fca:	9003      	str	r0, [sp, #12]
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d004      	beq.n	8009fda <_vfiprintf_r+0x1a>
 8009fd0:	6a03      	ldr	r3, [r0, #32]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <_vfiprintf_r+0x1a>
 8009fd6:	f7ff fbc7 	bl	8009768 <__sinit>
 8009fda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fdc:	07db      	lsls	r3, r3, #31
 8009fde:	d405      	bmi.n	8009fec <_vfiprintf_r+0x2c>
 8009fe0:	89bb      	ldrh	r3, [r7, #12]
 8009fe2:	059b      	lsls	r3, r3, #22
 8009fe4:	d402      	bmi.n	8009fec <_vfiprintf_r+0x2c>
 8009fe6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009fe8:	f7ff fe17 	bl	8009c1a <__retarget_lock_acquire_recursive>
 8009fec:	89bb      	ldrh	r3, [r7, #12]
 8009fee:	071b      	lsls	r3, r3, #28
 8009ff0:	d502      	bpl.n	8009ff8 <_vfiprintf_r+0x38>
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d113      	bne.n	800a020 <_vfiprintf_r+0x60>
 8009ff8:	0039      	movs	r1, r7
 8009ffa:	9803      	ldr	r0, [sp, #12]
 8009ffc:	f7ff fd1c 	bl	8009a38 <__swsetup_r>
 800a000:	2800      	cmp	r0, #0
 800a002:	d00d      	beq.n	800a020 <_vfiprintf_r+0x60>
 800a004:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a006:	07db      	lsls	r3, r3, #31
 800a008:	d503      	bpl.n	800a012 <_vfiprintf_r+0x52>
 800a00a:	2001      	movs	r0, #1
 800a00c:	4240      	negs	r0, r0
 800a00e:	b021      	add	sp, #132	@ 0x84
 800a010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a012:	89bb      	ldrh	r3, [r7, #12]
 800a014:	059b      	lsls	r3, r3, #22
 800a016:	d4f8      	bmi.n	800a00a <_vfiprintf_r+0x4a>
 800a018:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a01a:	f7ff fdff 	bl	8009c1c <__retarget_lock_release_recursive>
 800a01e:	e7f4      	b.n	800a00a <_vfiprintf_r+0x4a>
 800a020:	2300      	movs	r3, #0
 800a022:	ac08      	add	r4, sp, #32
 800a024:	6163      	str	r3, [r4, #20]
 800a026:	3320      	adds	r3, #32
 800a028:	7663      	strb	r3, [r4, #25]
 800a02a:	3310      	adds	r3, #16
 800a02c:	76a3      	strb	r3, [r4, #26]
 800a02e:	9607      	str	r6, [sp, #28]
 800a030:	002e      	movs	r6, r5
 800a032:	7833      	ldrb	r3, [r6, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <_vfiprintf_r+0x7c>
 800a038:	2b25      	cmp	r3, #37	@ 0x25
 800a03a:	d148      	bne.n	800a0ce <_vfiprintf_r+0x10e>
 800a03c:	1b73      	subs	r3, r6, r5
 800a03e:	9305      	str	r3, [sp, #20]
 800a040:	42ae      	cmp	r6, r5
 800a042:	d00b      	beq.n	800a05c <_vfiprintf_r+0x9c>
 800a044:	002a      	movs	r2, r5
 800a046:	0039      	movs	r1, r7
 800a048:	9803      	ldr	r0, [sp, #12]
 800a04a:	f7ff ffa6 	bl	8009f9a <__sfputs_r>
 800a04e:	3001      	adds	r0, #1
 800a050:	d100      	bne.n	800a054 <_vfiprintf_r+0x94>
 800a052:	e0ae      	b.n	800a1b2 <_vfiprintf_r+0x1f2>
 800a054:	6963      	ldr	r3, [r4, #20]
 800a056:	9a05      	ldr	r2, [sp, #20]
 800a058:	189b      	adds	r3, r3, r2
 800a05a:	6163      	str	r3, [r4, #20]
 800a05c:	7833      	ldrb	r3, [r6, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d100      	bne.n	800a064 <_vfiprintf_r+0xa4>
 800a062:	e0a6      	b.n	800a1b2 <_vfiprintf_r+0x1f2>
 800a064:	2201      	movs	r2, #1
 800a066:	2300      	movs	r3, #0
 800a068:	4252      	negs	r2, r2
 800a06a:	6062      	str	r2, [r4, #4]
 800a06c:	a904      	add	r1, sp, #16
 800a06e:	3254      	adds	r2, #84	@ 0x54
 800a070:	1852      	adds	r2, r2, r1
 800a072:	1c75      	adds	r5, r6, #1
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	60e3      	str	r3, [r4, #12]
 800a078:	60a3      	str	r3, [r4, #8]
 800a07a:	7013      	strb	r3, [r2, #0]
 800a07c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a07e:	4b59      	ldr	r3, [pc, #356]	@ (800a1e4 <_vfiprintf_r+0x224>)
 800a080:	2205      	movs	r2, #5
 800a082:	0018      	movs	r0, r3
 800a084:	7829      	ldrb	r1, [r5, #0]
 800a086:	9305      	str	r3, [sp, #20]
 800a088:	f000 fb86 	bl	800a798 <memchr>
 800a08c:	1c6e      	adds	r6, r5, #1
 800a08e:	2800      	cmp	r0, #0
 800a090:	d11f      	bne.n	800a0d2 <_vfiprintf_r+0x112>
 800a092:	6822      	ldr	r2, [r4, #0]
 800a094:	06d3      	lsls	r3, r2, #27
 800a096:	d504      	bpl.n	800a0a2 <_vfiprintf_r+0xe2>
 800a098:	2353      	movs	r3, #83	@ 0x53
 800a09a:	a904      	add	r1, sp, #16
 800a09c:	185b      	adds	r3, r3, r1
 800a09e:	2120      	movs	r1, #32
 800a0a0:	7019      	strb	r1, [r3, #0]
 800a0a2:	0713      	lsls	r3, r2, #28
 800a0a4:	d504      	bpl.n	800a0b0 <_vfiprintf_r+0xf0>
 800a0a6:	2353      	movs	r3, #83	@ 0x53
 800a0a8:	a904      	add	r1, sp, #16
 800a0aa:	185b      	adds	r3, r3, r1
 800a0ac:	212b      	movs	r1, #43	@ 0x2b
 800a0ae:	7019      	strb	r1, [r3, #0]
 800a0b0:	782b      	ldrb	r3, [r5, #0]
 800a0b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0b4:	d016      	beq.n	800a0e4 <_vfiprintf_r+0x124>
 800a0b6:	002e      	movs	r6, r5
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	200a      	movs	r0, #10
 800a0bc:	68e3      	ldr	r3, [r4, #12]
 800a0be:	7832      	ldrb	r2, [r6, #0]
 800a0c0:	1c75      	adds	r5, r6, #1
 800a0c2:	3a30      	subs	r2, #48	@ 0x30
 800a0c4:	2a09      	cmp	r2, #9
 800a0c6:	d950      	bls.n	800a16a <_vfiprintf_r+0x1aa>
 800a0c8:	2900      	cmp	r1, #0
 800a0ca:	d111      	bne.n	800a0f0 <_vfiprintf_r+0x130>
 800a0cc:	e017      	b.n	800a0fe <_vfiprintf_r+0x13e>
 800a0ce:	3601      	adds	r6, #1
 800a0d0:	e7af      	b.n	800a032 <_vfiprintf_r+0x72>
 800a0d2:	9b05      	ldr	r3, [sp, #20]
 800a0d4:	6822      	ldr	r2, [r4, #0]
 800a0d6:	1ac0      	subs	r0, r0, r3
 800a0d8:	2301      	movs	r3, #1
 800a0da:	4083      	lsls	r3, r0
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	0035      	movs	r5, r6
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	e7cc      	b.n	800a07e <_vfiprintf_r+0xbe>
 800a0e4:	9b07      	ldr	r3, [sp, #28]
 800a0e6:	1d19      	adds	r1, r3, #4
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	9107      	str	r1, [sp, #28]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	db01      	blt.n	800a0f4 <_vfiprintf_r+0x134>
 800a0f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0f2:	e004      	b.n	800a0fe <_vfiprintf_r+0x13e>
 800a0f4:	425b      	negs	r3, r3
 800a0f6:	60e3      	str	r3, [r4, #12]
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	7833      	ldrb	r3, [r6, #0]
 800a100:	2b2e      	cmp	r3, #46	@ 0x2e
 800a102:	d10c      	bne.n	800a11e <_vfiprintf_r+0x15e>
 800a104:	7873      	ldrb	r3, [r6, #1]
 800a106:	2b2a      	cmp	r3, #42	@ 0x2a
 800a108:	d134      	bne.n	800a174 <_vfiprintf_r+0x1b4>
 800a10a:	9b07      	ldr	r3, [sp, #28]
 800a10c:	3602      	adds	r6, #2
 800a10e:	1d1a      	adds	r2, r3, #4
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	9207      	str	r2, [sp, #28]
 800a114:	2b00      	cmp	r3, #0
 800a116:	da01      	bge.n	800a11c <_vfiprintf_r+0x15c>
 800a118:	2301      	movs	r3, #1
 800a11a:	425b      	negs	r3, r3
 800a11c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a11e:	4d32      	ldr	r5, [pc, #200]	@ (800a1e8 <_vfiprintf_r+0x228>)
 800a120:	2203      	movs	r2, #3
 800a122:	0028      	movs	r0, r5
 800a124:	7831      	ldrb	r1, [r6, #0]
 800a126:	f000 fb37 	bl	800a798 <memchr>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d006      	beq.n	800a13c <_vfiprintf_r+0x17c>
 800a12e:	2340      	movs	r3, #64	@ 0x40
 800a130:	1b40      	subs	r0, r0, r5
 800a132:	4083      	lsls	r3, r0
 800a134:	6822      	ldr	r2, [r4, #0]
 800a136:	3601      	adds	r6, #1
 800a138:	4313      	orrs	r3, r2
 800a13a:	6023      	str	r3, [r4, #0]
 800a13c:	7831      	ldrb	r1, [r6, #0]
 800a13e:	2206      	movs	r2, #6
 800a140:	482a      	ldr	r0, [pc, #168]	@ (800a1ec <_vfiprintf_r+0x22c>)
 800a142:	1c75      	adds	r5, r6, #1
 800a144:	7621      	strb	r1, [r4, #24]
 800a146:	f000 fb27 	bl	800a798 <memchr>
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d040      	beq.n	800a1d0 <_vfiprintf_r+0x210>
 800a14e:	4b28      	ldr	r3, [pc, #160]	@ (800a1f0 <_vfiprintf_r+0x230>)
 800a150:	2b00      	cmp	r3, #0
 800a152:	d122      	bne.n	800a19a <_vfiprintf_r+0x1da>
 800a154:	2207      	movs	r2, #7
 800a156:	9b07      	ldr	r3, [sp, #28]
 800a158:	3307      	adds	r3, #7
 800a15a:	4393      	bics	r3, r2
 800a15c:	3308      	adds	r3, #8
 800a15e:	9307      	str	r3, [sp, #28]
 800a160:	6963      	ldr	r3, [r4, #20]
 800a162:	9a04      	ldr	r2, [sp, #16]
 800a164:	189b      	adds	r3, r3, r2
 800a166:	6163      	str	r3, [r4, #20]
 800a168:	e762      	b.n	800a030 <_vfiprintf_r+0x70>
 800a16a:	4343      	muls	r3, r0
 800a16c:	002e      	movs	r6, r5
 800a16e:	2101      	movs	r1, #1
 800a170:	189b      	adds	r3, r3, r2
 800a172:	e7a4      	b.n	800a0be <_vfiprintf_r+0xfe>
 800a174:	2300      	movs	r3, #0
 800a176:	200a      	movs	r0, #10
 800a178:	0019      	movs	r1, r3
 800a17a:	3601      	adds	r6, #1
 800a17c:	6063      	str	r3, [r4, #4]
 800a17e:	7832      	ldrb	r2, [r6, #0]
 800a180:	1c75      	adds	r5, r6, #1
 800a182:	3a30      	subs	r2, #48	@ 0x30
 800a184:	2a09      	cmp	r2, #9
 800a186:	d903      	bls.n	800a190 <_vfiprintf_r+0x1d0>
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d0c8      	beq.n	800a11e <_vfiprintf_r+0x15e>
 800a18c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a18e:	e7c6      	b.n	800a11e <_vfiprintf_r+0x15e>
 800a190:	4341      	muls	r1, r0
 800a192:	002e      	movs	r6, r5
 800a194:	2301      	movs	r3, #1
 800a196:	1889      	adds	r1, r1, r2
 800a198:	e7f1      	b.n	800a17e <_vfiprintf_r+0x1be>
 800a19a:	aa07      	add	r2, sp, #28
 800a19c:	9200      	str	r2, [sp, #0]
 800a19e:	0021      	movs	r1, r4
 800a1a0:	003a      	movs	r2, r7
 800a1a2:	4b14      	ldr	r3, [pc, #80]	@ (800a1f4 <_vfiprintf_r+0x234>)
 800a1a4:	9803      	ldr	r0, [sp, #12]
 800a1a6:	e000      	b.n	800a1aa <_vfiprintf_r+0x1ea>
 800a1a8:	bf00      	nop
 800a1aa:	9004      	str	r0, [sp, #16]
 800a1ac:	9b04      	ldr	r3, [sp, #16]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	d1d6      	bne.n	800a160 <_vfiprintf_r+0x1a0>
 800a1b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1b4:	07db      	lsls	r3, r3, #31
 800a1b6:	d405      	bmi.n	800a1c4 <_vfiprintf_r+0x204>
 800a1b8:	89bb      	ldrh	r3, [r7, #12]
 800a1ba:	059b      	lsls	r3, r3, #22
 800a1bc:	d402      	bmi.n	800a1c4 <_vfiprintf_r+0x204>
 800a1be:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a1c0:	f7ff fd2c 	bl	8009c1c <__retarget_lock_release_recursive>
 800a1c4:	89bb      	ldrh	r3, [r7, #12]
 800a1c6:	065b      	lsls	r3, r3, #25
 800a1c8:	d500      	bpl.n	800a1cc <_vfiprintf_r+0x20c>
 800a1ca:	e71e      	b.n	800a00a <_vfiprintf_r+0x4a>
 800a1cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a1ce:	e71e      	b.n	800a00e <_vfiprintf_r+0x4e>
 800a1d0:	aa07      	add	r2, sp, #28
 800a1d2:	9200      	str	r2, [sp, #0]
 800a1d4:	0021      	movs	r1, r4
 800a1d6:	003a      	movs	r2, r7
 800a1d8:	4b06      	ldr	r3, [pc, #24]	@ (800a1f4 <_vfiprintf_r+0x234>)
 800a1da:	9803      	ldr	r0, [sp, #12]
 800a1dc:	f000 f87c 	bl	800a2d8 <_printf_i>
 800a1e0:	e7e3      	b.n	800a1aa <_vfiprintf_r+0x1ea>
 800a1e2:	46c0      	nop			@ (mov r8, r8)
 800a1e4:	0800b364 	.word	0x0800b364
 800a1e8:	0800b36a 	.word	0x0800b36a
 800a1ec:	0800b36e 	.word	0x0800b36e
 800a1f0:	00000000 	.word	0x00000000
 800a1f4:	08009f9b 	.word	0x08009f9b

0800a1f8 <_printf_common>:
 800a1f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1fa:	0016      	movs	r6, r2
 800a1fc:	9301      	str	r3, [sp, #4]
 800a1fe:	688a      	ldr	r2, [r1, #8]
 800a200:	690b      	ldr	r3, [r1, #16]
 800a202:	000c      	movs	r4, r1
 800a204:	9000      	str	r0, [sp, #0]
 800a206:	4293      	cmp	r3, r2
 800a208:	da00      	bge.n	800a20c <_printf_common+0x14>
 800a20a:	0013      	movs	r3, r2
 800a20c:	0022      	movs	r2, r4
 800a20e:	6033      	str	r3, [r6, #0]
 800a210:	3243      	adds	r2, #67	@ 0x43
 800a212:	7812      	ldrb	r2, [r2, #0]
 800a214:	2a00      	cmp	r2, #0
 800a216:	d001      	beq.n	800a21c <_printf_common+0x24>
 800a218:	3301      	adds	r3, #1
 800a21a:	6033      	str	r3, [r6, #0]
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	069b      	lsls	r3, r3, #26
 800a220:	d502      	bpl.n	800a228 <_printf_common+0x30>
 800a222:	6833      	ldr	r3, [r6, #0]
 800a224:	3302      	adds	r3, #2
 800a226:	6033      	str	r3, [r6, #0]
 800a228:	6822      	ldr	r2, [r4, #0]
 800a22a:	2306      	movs	r3, #6
 800a22c:	0015      	movs	r5, r2
 800a22e:	401d      	ands	r5, r3
 800a230:	421a      	tst	r2, r3
 800a232:	d027      	beq.n	800a284 <_printf_common+0x8c>
 800a234:	0023      	movs	r3, r4
 800a236:	3343      	adds	r3, #67	@ 0x43
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	1e5a      	subs	r2, r3, #1
 800a23c:	4193      	sbcs	r3, r2
 800a23e:	6822      	ldr	r2, [r4, #0]
 800a240:	0692      	lsls	r2, r2, #26
 800a242:	d430      	bmi.n	800a2a6 <_printf_common+0xae>
 800a244:	0022      	movs	r2, r4
 800a246:	9901      	ldr	r1, [sp, #4]
 800a248:	9800      	ldr	r0, [sp, #0]
 800a24a:	9d08      	ldr	r5, [sp, #32]
 800a24c:	3243      	adds	r2, #67	@ 0x43
 800a24e:	47a8      	blx	r5
 800a250:	3001      	adds	r0, #1
 800a252:	d025      	beq.n	800a2a0 <_printf_common+0xa8>
 800a254:	2206      	movs	r2, #6
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	2500      	movs	r5, #0
 800a25a:	4013      	ands	r3, r2
 800a25c:	2b04      	cmp	r3, #4
 800a25e:	d105      	bne.n	800a26c <_printf_common+0x74>
 800a260:	6833      	ldr	r3, [r6, #0]
 800a262:	68e5      	ldr	r5, [r4, #12]
 800a264:	1aed      	subs	r5, r5, r3
 800a266:	43eb      	mvns	r3, r5
 800a268:	17db      	asrs	r3, r3, #31
 800a26a:	401d      	ands	r5, r3
 800a26c:	68a3      	ldr	r3, [r4, #8]
 800a26e:	6922      	ldr	r2, [r4, #16]
 800a270:	4293      	cmp	r3, r2
 800a272:	dd01      	ble.n	800a278 <_printf_common+0x80>
 800a274:	1a9b      	subs	r3, r3, r2
 800a276:	18ed      	adds	r5, r5, r3
 800a278:	2600      	movs	r6, #0
 800a27a:	42b5      	cmp	r5, r6
 800a27c:	d120      	bne.n	800a2c0 <_printf_common+0xc8>
 800a27e:	2000      	movs	r0, #0
 800a280:	e010      	b.n	800a2a4 <_printf_common+0xac>
 800a282:	3501      	adds	r5, #1
 800a284:	68e3      	ldr	r3, [r4, #12]
 800a286:	6832      	ldr	r2, [r6, #0]
 800a288:	1a9b      	subs	r3, r3, r2
 800a28a:	42ab      	cmp	r3, r5
 800a28c:	ddd2      	ble.n	800a234 <_printf_common+0x3c>
 800a28e:	0022      	movs	r2, r4
 800a290:	2301      	movs	r3, #1
 800a292:	9901      	ldr	r1, [sp, #4]
 800a294:	9800      	ldr	r0, [sp, #0]
 800a296:	9f08      	ldr	r7, [sp, #32]
 800a298:	3219      	adds	r2, #25
 800a29a:	47b8      	blx	r7
 800a29c:	3001      	adds	r0, #1
 800a29e:	d1f0      	bne.n	800a282 <_printf_common+0x8a>
 800a2a0:	2001      	movs	r0, #1
 800a2a2:	4240      	negs	r0, r0
 800a2a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2a6:	2030      	movs	r0, #48	@ 0x30
 800a2a8:	18e1      	adds	r1, r4, r3
 800a2aa:	3143      	adds	r1, #67	@ 0x43
 800a2ac:	7008      	strb	r0, [r1, #0]
 800a2ae:	0021      	movs	r1, r4
 800a2b0:	1c5a      	adds	r2, r3, #1
 800a2b2:	3145      	adds	r1, #69	@ 0x45
 800a2b4:	7809      	ldrb	r1, [r1, #0]
 800a2b6:	18a2      	adds	r2, r4, r2
 800a2b8:	3243      	adds	r2, #67	@ 0x43
 800a2ba:	3302      	adds	r3, #2
 800a2bc:	7011      	strb	r1, [r2, #0]
 800a2be:	e7c1      	b.n	800a244 <_printf_common+0x4c>
 800a2c0:	0022      	movs	r2, r4
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	9901      	ldr	r1, [sp, #4]
 800a2c6:	9800      	ldr	r0, [sp, #0]
 800a2c8:	9f08      	ldr	r7, [sp, #32]
 800a2ca:	321a      	adds	r2, #26
 800a2cc:	47b8      	blx	r7
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	d0e6      	beq.n	800a2a0 <_printf_common+0xa8>
 800a2d2:	3601      	adds	r6, #1
 800a2d4:	e7d1      	b.n	800a27a <_printf_common+0x82>
	...

0800a2d8 <_printf_i>:
 800a2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2da:	b08b      	sub	sp, #44	@ 0x2c
 800a2dc:	9206      	str	r2, [sp, #24]
 800a2de:	000a      	movs	r2, r1
 800a2e0:	3243      	adds	r2, #67	@ 0x43
 800a2e2:	9307      	str	r3, [sp, #28]
 800a2e4:	9005      	str	r0, [sp, #20]
 800a2e6:	9203      	str	r2, [sp, #12]
 800a2e8:	7e0a      	ldrb	r2, [r1, #24]
 800a2ea:	000c      	movs	r4, r1
 800a2ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a2ee:	2a78      	cmp	r2, #120	@ 0x78
 800a2f0:	d809      	bhi.n	800a306 <_printf_i+0x2e>
 800a2f2:	2a62      	cmp	r2, #98	@ 0x62
 800a2f4:	d80b      	bhi.n	800a30e <_printf_i+0x36>
 800a2f6:	2a00      	cmp	r2, #0
 800a2f8:	d100      	bne.n	800a2fc <_printf_i+0x24>
 800a2fa:	e0ba      	b.n	800a472 <_printf_i+0x19a>
 800a2fc:	497a      	ldr	r1, [pc, #488]	@ (800a4e8 <_printf_i+0x210>)
 800a2fe:	9104      	str	r1, [sp, #16]
 800a300:	2a58      	cmp	r2, #88	@ 0x58
 800a302:	d100      	bne.n	800a306 <_printf_i+0x2e>
 800a304:	e08e      	b.n	800a424 <_printf_i+0x14c>
 800a306:	0025      	movs	r5, r4
 800a308:	3542      	adds	r5, #66	@ 0x42
 800a30a:	702a      	strb	r2, [r5, #0]
 800a30c:	e022      	b.n	800a354 <_printf_i+0x7c>
 800a30e:	0010      	movs	r0, r2
 800a310:	3863      	subs	r0, #99	@ 0x63
 800a312:	2815      	cmp	r0, #21
 800a314:	d8f7      	bhi.n	800a306 <_printf_i+0x2e>
 800a316:	f7f5 ff09 	bl	800012c <__gnu_thumb1_case_shi>
 800a31a:	0016      	.short	0x0016
 800a31c:	fff6001f 	.word	0xfff6001f
 800a320:	fff6fff6 	.word	0xfff6fff6
 800a324:	001ffff6 	.word	0x001ffff6
 800a328:	fff6fff6 	.word	0xfff6fff6
 800a32c:	fff6fff6 	.word	0xfff6fff6
 800a330:	0036009f 	.word	0x0036009f
 800a334:	fff6007e 	.word	0xfff6007e
 800a338:	00b0fff6 	.word	0x00b0fff6
 800a33c:	0036fff6 	.word	0x0036fff6
 800a340:	fff6fff6 	.word	0xfff6fff6
 800a344:	0082      	.short	0x0082
 800a346:	0025      	movs	r5, r4
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	3542      	adds	r5, #66	@ 0x42
 800a34c:	1d11      	adds	r1, r2, #4
 800a34e:	6019      	str	r1, [r3, #0]
 800a350:	6813      	ldr	r3, [r2, #0]
 800a352:	702b      	strb	r3, [r5, #0]
 800a354:	2301      	movs	r3, #1
 800a356:	e09e      	b.n	800a496 <_printf_i+0x1be>
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	6809      	ldr	r1, [r1, #0]
 800a35c:	1d02      	adds	r2, r0, #4
 800a35e:	060d      	lsls	r5, r1, #24
 800a360:	d50b      	bpl.n	800a37a <_printf_i+0xa2>
 800a362:	6806      	ldr	r6, [r0, #0]
 800a364:	601a      	str	r2, [r3, #0]
 800a366:	2e00      	cmp	r6, #0
 800a368:	da03      	bge.n	800a372 <_printf_i+0x9a>
 800a36a:	232d      	movs	r3, #45	@ 0x2d
 800a36c:	9a03      	ldr	r2, [sp, #12]
 800a36e:	4276      	negs	r6, r6
 800a370:	7013      	strb	r3, [r2, #0]
 800a372:	4b5d      	ldr	r3, [pc, #372]	@ (800a4e8 <_printf_i+0x210>)
 800a374:	270a      	movs	r7, #10
 800a376:	9304      	str	r3, [sp, #16]
 800a378:	e018      	b.n	800a3ac <_printf_i+0xd4>
 800a37a:	6806      	ldr	r6, [r0, #0]
 800a37c:	601a      	str	r2, [r3, #0]
 800a37e:	0649      	lsls	r1, r1, #25
 800a380:	d5f1      	bpl.n	800a366 <_printf_i+0x8e>
 800a382:	b236      	sxth	r6, r6
 800a384:	e7ef      	b.n	800a366 <_printf_i+0x8e>
 800a386:	6808      	ldr	r0, [r1, #0]
 800a388:	6819      	ldr	r1, [r3, #0]
 800a38a:	c940      	ldmia	r1!, {r6}
 800a38c:	0605      	lsls	r5, r0, #24
 800a38e:	d402      	bmi.n	800a396 <_printf_i+0xbe>
 800a390:	0640      	lsls	r0, r0, #25
 800a392:	d500      	bpl.n	800a396 <_printf_i+0xbe>
 800a394:	b2b6      	uxth	r6, r6
 800a396:	6019      	str	r1, [r3, #0]
 800a398:	4b53      	ldr	r3, [pc, #332]	@ (800a4e8 <_printf_i+0x210>)
 800a39a:	270a      	movs	r7, #10
 800a39c:	9304      	str	r3, [sp, #16]
 800a39e:	2a6f      	cmp	r2, #111	@ 0x6f
 800a3a0:	d100      	bne.n	800a3a4 <_printf_i+0xcc>
 800a3a2:	3f02      	subs	r7, #2
 800a3a4:	0023      	movs	r3, r4
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	3343      	adds	r3, #67	@ 0x43
 800a3aa:	701a      	strb	r2, [r3, #0]
 800a3ac:	6863      	ldr	r3, [r4, #4]
 800a3ae:	60a3      	str	r3, [r4, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	db06      	blt.n	800a3c2 <_printf_i+0xea>
 800a3b4:	2104      	movs	r1, #4
 800a3b6:	6822      	ldr	r2, [r4, #0]
 800a3b8:	9d03      	ldr	r5, [sp, #12]
 800a3ba:	438a      	bics	r2, r1
 800a3bc:	6022      	str	r2, [r4, #0]
 800a3be:	4333      	orrs	r3, r6
 800a3c0:	d00c      	beq.n	800a3dc <_printf_i+0x104>
 800a3c2:	9d03      	ldr	r5, [sp, #12]
 800a3c4:	0030      	movs	r0, r6
 800a3c6:	0039      	movs	r1, r7
 800a3c8:	f7f5 ff40 	bl	800024c <__aeabi_uidivmod>
 800a3cc:	9b04      	ldr	r3, [sp, #16]
 800a3ce:	3d01      	subs	r5, #1
 800a3d0:	5c5b      	ldrb	r3, [r3, r1]
 800a3d2:	702b      	strb	r3, [r5, #0]
 800a3d4:	0033      	movs	r3, r6
 800a3d6:	0006      	movs	r6, r0
 800a3d8:	429f      	cmp	r7, r3
 800a3da:	d9f3      	bls.n	800a3c4 <_printf_i+0xec>
 800a3dc:	2f08      	cmp	r7, #8
 800a3de:	d109      	bne.n	800a3f4 <_printf_i+0x11c>
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	07db      	lsls	r3, r3, #31
 800a3e4:	d506      	bpl.n	800a3f4 <_printf_i+0x11c>
 800a3e6:	6862      	ldr	r2, [r4, #4]
 800a3e8:	6923      	ldr	r3, [r4, #16]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	dc02      	bgt.n	800a3f4 <_printf_i+0x11c>
 800a3ee:	2330      	movs	r3, #48	@ 0x30
 800a3f0:	3d01      	subs	r5, #1
 800a3f2:	702b      	strb	r3, [r5, #0]
 800a3f4:	9b03      	ldr	r3, [sp, #12]
 800a3f6:	1b5b      	subs	r3, r3, r5
 800a3f8:	6123      	str	r3, [r4, #16]
 800a3fa:	9b07      	ldr	r3, [sp, #28]
 800a3fc:	0021      	movs	r1, r4
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	9805      	ldr	r0, [sp, #20]
 800a402:	9b06      	ldr	r3, [sp, #24]
 800a404:	aa09      	add	r2, sp, #36	@ 0x24
 800a406:	f7ff fef7 	bl	800a1f8 <_printf_common>
 800a40a:	3001      	adds	r0, #1
 800a40c:	d148      	bne.n	800a4a0 <_printf_i+0x1c8>
 800a40e:	2001      	movs	r0, #1
 800a410:	4240      	negs	r0, r0
 800a412:	b00b      	add	sp, #44	@ 0x2c
 800a414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a416:	2220      	movs	r2, #32
 800a418:	6809      	ldr	r1, [r1, #0]
 800a41a:	430a      	orrs	r2, r1
 800a41c:	6022      	str	r2, [r4, #0]
 800a41e:	2278      	movs	r2, #120	@ 0x78
 800a420:	4932      	ldr	r1, [pc, #200]	@ (800a4ec <_printf_i+0x214>)
 800a422:	9104      	str	r1, [sp, #16]
 800a424:	0021      	movs	r1, r4
 800a426:	3145      	adds	r1, #69	@ 0x45
 800a428:	700a      	strb	r2, [r1, #0]
 800a42a:	6819      	ldr	r1, [r3, #0]
 800a42c:	6822      	ldr	r2, [r4, #0]
 800a42e:	c940      	ldmia	r1!, {r6}
 800a430:	0610      	lsls	r0, r2, #24
 800a432:	d402      	bmi.n	800a43a <_printf_i+0x162>
 800a434:	0650      	lsls	r0, r2, #25
 800a436:	d500      	bpl.n	800a43a <_printf_i+0x162>
 800a438:	b2b6      	uxth	r6, r6
 800a43a:	6019      	str	r1, [r3, #0]
 800a43c:	07d3      	lsls	r3, r2, #31
 800a43e:	d502      	bpl.n	800a446 <_printf_i+0x16e>
 800a440:	2320      	movs	r3, #32
 800a442:	4313      	orrs	r3, r2
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	2e00      	cmp	r6, #0
 800a448:	d001      	beq.n	800a44e <_printf_i+0x176>
 800a44a:	2710      	movs	r7, #16
 800a44c:	e7aa      	b.n	800a3a4 <_printf_i+0xcc>
 800a44e:	2220      	movs	r2, #32
 800a450:	6823      	ldr	r3, [r4, #0]
 800a452:	4393      	bics	r3, r2
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	e7f8      	b.n	800a44a <_printf_i+0x172>
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	680d      	ldr	r5, [r1, #0]
 800a45c:	1d10      	adds	r0, r2, #4
 800a45e:	6949      	ldr	r1, [r1, #20]
 800a460:	6018      	str	r0, [r3, #0]
 800a462:	6813      	ldr	r3, [r2, #0]
 800a464:	062e      	lsls	r6, r5, #24
 800a466:	d501      	bpl.n	800a46c <_printf_i+0x194>
 800a468:	6019      	str	r1, [r3, #0]
 800a46a:	e002      	b.n	800a472 <_printf_i+0x19a>
 800a46c:	066d      	lsls	r5, r5, #25
 800a46e:	d5fb      	bpl.n	800a468 <_printf_i+0x190>
 800a470:	8019      	strh	r1, [r3, #0]
 800a472:	2300      	movs	r3, #0
 800a474:	9d03      	ldr	r5, [sp, #12]
 800a476:	6123      	str	r3, [r4, #16]
 800a478:	e7bf      	b.n	800a3fa <_printf_i+0x122>
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	1d11      	adds	r1, r2, #4
 800a47e:	6019      	str	r1, [r3, #0]
 800a480:	6815      	ldr	r5, [r2, #0]
 800a482:	2100      	movs	r1, #0
 800a484:	0028      	movs	r0, r5
 800a486:	6862      	ldr	r2, [r4, #4]
 800a488:	f000 f986 	bl	800a798 <memchr>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d001      	beq.n	800a494 <_printf_i+0x1bc>
 800a490:	1b40      	subs	r0, r0, r5
 800a492:	6060      	str	r0, [r4, #4]
 800a494:	6863      	ldr	r3, [r4, #4]
 800a496:	6123      	str	r3, [r4, #16]
 800a498:	2300      	movs	r3, #0
 800a49a:	9a03      	ldr	r2, [sp, #12]
 800a49c:	7013      	strb	r3, [r2, #0]
 800a49e:	e7ac      	b.n	800a3fa <_printf_i+0x122>
 800a4a0:	002a      	movs	r2, r5
 800a4a2:	6923      	ldr	r3, [r4, #16]
 800a4a4:	9906      	ldr	r1, [sp, #24]
 800a4a6:	9805      	ldr	r0, [sp, #20]
 800a4a8:	9d07      	ldr	r5, [sp, #28]
 800a4aa:	47a8      	blx	r5
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	d0ae      	beq.n	800a40e <_printf_i+0x136>
 800a4b0:	6823      	ldr	r3, [r4, #0]
 800a4b2:	079b      	lsls	r3, r3, #30
 800a4b4:	d415      	bmi.n	800a4e2 <_printf_i+0x20a>
 800a4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b8:	68e0      	ldr	r0, [r4, #12]
 800a4ba:	4298      	cmp	r0, r3
 800a4bc:	daa9      	bge.n	800a412 <_printf_i+0x13a>
 800a4be:	0018      	movs	r0, r3
 800a4c0:	e7a7      	b.n	800a412 <_printf_i+0x13a>
 800a4c2:	0022      	movs	r2, r4
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	9906      	ldr	r1, [sp, #24]
 800a4c8:	9805      	ldr	r0, [sp, #20]
 800a4ca:	9e07      	ldr	r6, [sp, #28]
 800a4cc:	3219      	adds	r2, #25
 800a4ce:	47b0      	blx	r6
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d09c      	beq.n	800a40e <_printf_i+0x136>
 800a4d4:	3501      	adds	r5, #1
 800a4d6:	68e3      	ldr	r3, [r4, #12]
 800a4d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4da:	1a9b      	subs	r3, r3, r2
 800a4dc:	42ab      	cmp	r3, r5
 800a4de:	dcf0      	bgt.n	800a4c2 <_printf_i+0x1ea>
 800a4e0:	e7e9      	b.n	800a4b6 <_printf_i+0x1de>
 800a4e2:	2500      	movs	r5, #0
 800a4e4:	e7f7      	b.n	800a4d6 <_printf_i+0x1fe>
 800a4e6:	46c0      	nop			@ (mov r8, r8)
 800a4e8:	0800b375 	.word	0x0800b375
 800a4ec:	0800b386 	.word	0x0800b386

0800a4f0 <__sflush_r>:
 800a4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4f2:	220c      	movs	r2, #12
 800a4f4:	5e8b      	ldrsh	r3, [r1, r2]
 800a4f6:	0005      	movs	r5, r0
 800a4f8:	000c      	movs	r4, r1
 800a4fa:	071a      	lsls	r2, r3, #28
 800a4fc:	d456      	bmi.n	800a5ac <__sflush_r+0xbc>
 800a4fe:	684a      	ldr	r2, [r1, #4]
 800a500:	2a00      	cmp	r2, #0
 800a502:	dc02      	bgt.n	800a50a <__sflush_r+0x1a>
 800a504:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800a506:	2a00      	cmp	r2, #0
 800a508:	dd4e      	ble.n	800a5a8 <__sflush_r+0xb8>
 800a50a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a50c:	2f00      	cmp	r7, #0
 800a50e:	d04b      	beq.n	800a5a8 <__sflush_r+0xb8>
 800a510:	2200      	movs	r2, #0
 800a512:	2080      	movs	r0, #128	@ 0x80
 800a514:	682e      	ldr	r6, [r5, #0]
 800a516:	602a      	str	r2, [r5, #0]
 800a518:	001a      	movs	r2, r3
 800a51a:	0140      	lsls	r0, r0, #5
 800a51c:	6a21      	ldr	r1, [r4, #32]
 800a51e:	4002      	ands	r2, r0
 800a520:	4203      	tst	r3, r0
 800a522:	d033      	beq.n	800a58c <__sflush_r+0x9c>
 800a524:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a526:	89a3      	ldrh	r3, [r4, #12]
 800a528:	075b      	lsls	r3, r3, #29
 800a52a:	d506      	bpl.n	800a53a <__sflush_r+0x4a>
 800a52c:	6863      	ldr	r3, [r4, #4]
 800a52e:	1ad2      	subs	r2, r2, r3
 800a530:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <__sflush_r+0x4a>
 800a536:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a538:	1ad2      	subs	r2, r2, r3
 800a53a:	2300      	movs	r3, #0
 800a53c:	0028      	movs	r0, r5
 800a53e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a540:	6a21      	ldr	r1, [r4, #32]
 800a542:	47b8      	blx	r7
 800a544:	89a2      	ldrh	r2, [r4, #12]
 800a546:	1c43      	adds	r3, r0, #1
 800a548:	d106      	bne.n	800a558 <__sflush_r+0x68>
 800a54a:	6829      	ldr	r1, [r5, #0]
 800a54c:	291d      	cmp	r1, #29
 800a54e:	d846      	bhi.n	800a5de <__sflush_r+0xee>
 800a550:	4b29      	ldr	r3, [pc, #164]	@ (800a5f8 <__sflush_r+0x108>)
 800a552:	40cb      	lsrs	r3, r1
 800a554:	07db      	lsls	r3, r3, #31
 800a556:	d542      	bpl.n	800a5de <__sflush_r+0xee>
 800a558:	2300      	movs	r3, #0
 800a55a:	6063      	str	r3, [r4, #4]
 800a55c:	6923      	ldr	r3, [r4, #16]
 800a55e:	6023      	str	r3, [r4, #0]
 800a560:	04d2      	lsls	r2, r2, #19
 800a562:	d505      	bpl.n	800a570 <__sflush_r+0x80>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <__sflush_r+0x7e>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d100      	bne.n	800a570 <__sflush_r+0x80>
 800a56e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a572:	602e      	str	r6, [r5, #0]
 800a574:	2900      	cmp	r1, #0
 800a576:	d017      	beq.n	800a5a8 <__sflush_r+0xb8>
 800a578:	0023      	movs	r3, r4
 800a57a:	3344      	adds	r3, #68	@ 0x44
 800a57c:	4299      	cmp	r1, r3
 800a57e:	d002      	beq.n	800a586 <__sflush_r+0x96>
 800a580:	0028      	movs	r0, r5
 800a582:	f7ff fb4d 	bl	8009c20 <_free_r>
 800a586:	2300      	movs	r3, #0
 800a588:	6363      	str	r3, [r4, #52]	@ 0x34
 800a58a:	e00d      	b.n	800a5a8 <__sflush_r+0xb8>
 800a58c:	2301      	movs	r3, #1
 800a58e:	0028      	movs	r0, r5
 800a590:	47b8      	blx	r7
 800a592:	0002      	movs	r2, r0
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d1c6      	bne.n	800a526 <__sflush_r+0x36>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d0c3      	beq.n	800a526 <__sflush_r+0x36>
 800a59e:	2b1d      	cmp	r3, #29
 800a5a0:	d001      	beq.n	800a5a6 <__sflush_r+0xb6>
 800a5a2:	2b16      	cmp	r3, #22
 800a5a4:	d11a      	bne.n	800a5dc <__sflush_r+0xec>
 800a5a6:	602e      	str	r6, [r5, #0]
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	e01e      	b.n	800a5ea <__sflush_r+0xfa>
 800a5ac:	690e      	ldr	r6, [r1, #16]
 800a5ae:	2e00      	cmp	r6, #0
 800a5b0:	d0fa      	beq.n	800a5a8 <__sflush_r+0xb8>
 800a5b2:	680f      	ldr	r7, [r1, #0]
 800a5b4:	600e      	str	r6, [r1, #0]
 800a5b6:	1bba      	subs	r2, r7, r6
 800a5b8:	9201      	str	r2, [sp, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	079b      	lsls	r3, r3, #30
 800a5be:	d100      	bne.n	800a5c2 <__sflush_r+0xd2>
 800a5c0:	694a      	ldr	r2, [r1, #20]
 800a5c2:	60a2      	str	r2, [r4, #8]
 800a5c4:	9b01      	ldr	r3, [sp, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	ddee      	ble.n	800a5a8 <__sflush_r+0xb8>
 800a5ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a5cc:	0032      	movs	r2, r6
 800a5ce:	001f      	movs	r7, r3
 800a5d0:	0028      	movs	r0, r5
 800a5d2:	9b01      	ldr	r3, [sp, #4]
 800a5d4:	6a21      	ldr	r1, [r4, #32]
 800a5d6:	47b8      	blx	r7
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	dc07      	bgt.n	800a5ec <__sflush_r+0xfc>
 800a5dc:	89a2      	ldrh	r2, [r4, #12]
 800a5de:	2340      	movs	r3, #64	@ 0x40
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	b21b      	sxth	r3, r3
 800a5e6:	81a3      	strh	r3, [r4, #12]
 800a5e8:	4240      	negs	r0, r0
 800a5ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5ec:	9b01      	ldr	r3, [sp, #4]
 800a5ee:	1836      	adds	r6, r6, r0
 800a5f0:	1a1b      	subs	r3, r3, r0
 800a5f2:	9301      	str	r3, [sp, #4]
 800a5f4:	e7e6      	b.n	800a5c4 <__sflush_r+0xd4>
 800a5f6:	46c0      	nop			@ (mov r8, r8)
 800a5f8:	20400001 	.word	0x20400001

0800a5fc <_fflush_r>:
 800a5fc:	690b      	ldr	r3, [r1, #16]
 800a5fe:	b570      	push	{r4, r5, r6, lr}
 800a600:	0005      	movs	r5, r0
 800a602:	000c      	movs	r4, r1
 800a604:	2b00      	cmp	r3, #0
 800a606:	d102      	bne.n	800a60e <_fflush_r+0x12>
 800a608:	2500      	movs	r5, #0
 800a60a:	0028      	movs	r0, r5
 800a60c:	bd70      	pop	{r4, r5, r6, pc}
 800a60e:	2800      	cmp	r0, #0
 800a610:	d004      	beq.n	800a61c <_fflush_r+0x20>
 800a612:	6a03      	ldr	r3, [r0, #32]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d101      	bne.n	800a61c <_fflush_r+0x20>
 800a618:	f7ff f8a6 	bl	8009768 <__sinit>
 800a61c:	220c      	movs	r2, #12
 800a61e:	5ea3      	ldrsh	r3, [r4, r2]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d0f1      	beq.n	800a608 <_fflush_r+0xc>
 800a624:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a626:	07d2      	lsls	r2, r2, #31
 800a628:	d404      	bmi.n	800a634 <_fflush_r+0x38>
 800a62a:	059b      	lsls	r3, r3, #22
 800a62c:	d402      	bmi.n	800a634 <_fflush_r+0x38>
 800a62e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a630:	f7ff faf3 	bl	8009c1a <__retarget_lock_acquire_recursive>
 800a634:	0028      	movs	r0, r5
 800a636:	0021      	movs	r1, r4
 800a638:	f7ff ff5a 	bl	800a4f0 <__sflush_r>
 800a63c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a63e:	0005      	movs	r5, r0
 800a640:	07db      	lsls	r3, r3, #31
 800a642:	d4e2      	bmi.n	800a60a <_fflush_r+0xe>
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	059b      	lsls	r3, r3, #22
 800a648:	d4df      	bmi.n	800a60a <_fflush_r+0xe>
 800a64a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a64c:	f7ff fae6 	bl	8009c1c <__retarget_lock_release_recursive>
 800a650:	e7db      	b.n	800a60a <_fflush_r+0xe>
	...

0800a654 <__swhatbuf_r>:
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	000e      	movs	r6, r1
 800a658:	001d      	movs	r5, r3
 800a65a:	230e      	movs	r3, #14
 800a65c:	5ec9      	ldrsh	r1, [r1, r3]
 800a65e:	0014      	movs	r4, r2
 800a660:	b096      	sub	sp, #88	@ 0x58
 800a662:	2900      	cmp	r1, #0
 800a664:	da0c      	bge.n	800a680 <__swhatbuf_r+0x2c>
 800a666:	89b2      	ldrh	r2, [r6, #12]
 800a668:	2380      	movs	r3, #128	@ 0x80
 800a66a:	0011      	movs	r1, r2
 800a66c:	4019      	ands	r1, r3
 800a66e:	421a      	tst	r2, r3
 800a670:	d114      	bne.n	800a69c <__swhatbuf_r+0x48>
 800a672:	2380      	movs	r3, #128	@ 0x80
 800a674:	00db      	lsls	r3, r3, #3
 800a676:	2000      	movs	r0, #0
 800a678:	6029      	str	r1, [r5, #0]
 800a67a:	6023      	str	r3, [r4, #0]
 800a67c:	b016      	add	sp, #88	@ 0x58
 800a67e:	bd70      	pop	{r4, r5, r6, pc}
 800a680:	466a      	mov	r2, sp
 800a682:	f000 f865 	bl	800a750 <_fstat_r>
 800a686:	2800      	cmp	r0, #0
 800a688:	dbed      	blt.n	800a666 <__swhatbuf_r+0x12>
 800a68a:	23f0      	movs	r3, #240	@ 0xf0
 800a68c:	9901      	ldr	r1, [sp, #4]
 800a68e:	021b      	lsls	r3, r3, #8
 800a690:	4019      	ands	r1, r3
 800a692:	4b04      	ldr	r3, [pc, #16]	@ (800a6a4 <__swhatbuf_r+0x50>)
 800a694:	18c9      	adds	r1, r1, r3
 800a696:	424b      	negs	r3, r1
 800a698:	4159      	adcs	r1, r3
 800a69a:	e7ea      	b.n	800a672 <__swhatbuf_r+0x1e>
 800a69c:	2100      	movs	r1, #0
 800a69e:	2340      	movs	r3, #64	@ 0x40
 800a6a0:	e7e9      	b.n	800a676 <__swhatbuf_r+0x22>
 800a6a2:	46c0      	nop			@ (mov r8, r8)
 800a6a4:	ffffe000 	.word	0xffffe000

0800a6a8 <__smakebuf_r>:
 800a6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6aa:	2602      	movs	r6, #2
 800a6ac:	898b      	ldrh	r3, [r1, #12]
 800a6ae:	0005      	movs	r5, r0
 800a6b0:	000c      	movs	r4, r1
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	4233      	tst	r3, r6
 800a6b6:	d007      	beq.n	800a6c8 <__smakebuf_r+0x20>
 800a6b8:	0023      	movs	r3, r4
 800a6ba:	3347      	adds	r3, #71	@ 0x47
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	6123      	str	r3, [r4, #16]
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	6163      	str	r3, [r4, #20]
 800a6c4:	b005      	add	sp, #20
 800a6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6c8:	ab03      	add	r3, sp, #12
 800a6ca:	aa02      	add	r2, sp, #8
 800a6cc:	f7ff ffc2 	bl	800a654 <__swhatbuf_r>
 800a6d0:	9f02      	ldr	r7, [sp, #8]
 800a6d2:	9001      	str	r0, [sp, #4]
 800a6d4:	0039      	movs	r1, r7
 800a6d6:	0028      	movs	r0, r5
 800a6d8:	f7fe ff26 	bl	8009528 <_malloc_r>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d108      	bne.n	800a6f2 <__smakebuf_r+0x4a>
 800a6e0:	220c      	movs	r2, #12
 800a6e2:	5ea3      	ldrsh	r3, [r4, r2]
 800a6e4:	059a      	lsls	r2, r3, #22
 800a6e6:	d4ed      	bmi.n	800a6c4 <__smakebuf_r+0x1c>
 800a6e8:	2203      	movs	r2, #3
 800a6ea:	4393      	bics	r3, r2
 800a6ec:	431e      	orrs	r6, r3
 800a6ee:	81a6      	strh	r6, [r4, #12]
 800a6f0:	e7e2      	b.n	800a6b8 <__smakebuf_r+0x10>
 800a6f2:	2380      	movs	r3, #128	@ 0x80
 800a6f4:	89a2      	ldrh	r2, [r4, #12]
 800a6f6:	6020      	str	r0, [r4, #0]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	81a3      	strh	r3, [r4, #12]
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	6120      	str	r0, [r4, #16]
 800a700:	6167      	str	r7, [r4, #20]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00c      	beq.n	800a720 <__smakebuf_r+0x78>
 800a706:	0028      	movs	r0, r5
 800a708:	230e      	movs	r3, #14
 800a70a:	5ee1      	ldrsh	r1, [r4, r3]
 800a70c:	f000 f832 	bl	800a774 <_isatty_r>
 800a710:	2800      	cmp	r0, #0
 800a712:	d005      	beq.n	800a720 <__smakebuf_r+0x78>
 800a714:	2303      	movs	r3, #3
 800a716:	89a2      	ldrh	r2, [r4, #12]
 800a718:	439a      	bics	r2, r3
 800a71a:	3b02      	subs	r3, #2
 800a71c:	4313      	orrs	r3, r2
 800a71e:	81a3      	strh	r3, [r4, #12]
 800a720:	89a3      	ldrh	r3, [r4, #12]
 800a722:	9a01      	ldr	r2, [sp, #4]
 800a724:	4313      	orrs	r3, r2
 800a726:	81a3      	strh	r3, [r4, #12]
 800a728:	e7cc      	b.n	800a6c4 <__smakebuf_r+0x1c>

0800a72a <memmove>:
 800a72a:	b510      	push	{r4, lr}
 800a72c:	4288      	cmp	r0, r1
 800a72e:	d902      	bls.n	800a736 <memmove+0xc>
 800a730:	188b      	adds	r3, r1, r2
 800a732:	4298      	cmp	r0, r3
 800a734:	d308      	bcc.n	800a748 <memmove+0x1e>
 800a736:	2300      	movs	r3, #0
 800a738:	429a      	cmp	r2, r3
 800a73a:	d007      	beq.n	800a74c <memmove+0x22>
 800a73c:	5ccc      	ldrb	r4, [r1, r3]
 800a73e:	54c4      	strb	r4, [r0, r3]
 800a740:	3301      	adds	r3, #1
 800a742:	e7f9      	b.n	800a738 <memmove+0xe>
 800a744:	5c8b      	ldrb	r3, [r1, r2]
 800a746:	5483      	strb	r3, [r0, r2]
 800a748:	3a01      	subs	r2, #1
 800a74a:	d2fb      	bcs.n	800a744 <memmove+0x1a>
 800a74c:	bd10      	pop	{r4, pc}
	...

0800a750 <_fstat_r>:
 800a750:	2300      	movs	r3, #0
 800a752:	b570      	push	{r4, r5, r6, lr}
 800a754:	4d06      	ldr	r5, [pc, #24]	@ (800a770 <_fstat_r+0x20>)
 800a756:	0004      	movs	r4, r0
 800a758:	0008      	movs	r0, r1
 800a75a:	0011      	movs	r1, r2
 800a75c:	602b      	str	r3, [r5, #0]
 800a75e:	f7f7 f9aa 	bl	8001ab6 <_fstat>
 800a762:	1c43      	adds	r3, r0, #1
 800a764:	d103      	bne.n	800a76e <_fstat_r+0x1e>
 800a766:	682b      	ldr	r3, [r5, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d000      	beq.n	800a76e <_fstat_r+0x1e>
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	bd70      	pop	{r4, r5, r6, pc}
 800a770:	20000830 	.word	0x20000830

0800a774 <_isatty_r>:
 800a774:	2300      	movs	r3, #0
 800a776:	b570      	push	{r4, r5, r6, lr}
 800a778:	4d06      	ldr	r5, [pc, #24]	@ (800a794 <_isatty_r+0x20>)
 800a77a:	0004      	movs	r4, r0
 800a77c:	0008      	movs	r0, r1
 800a77e:	602b      	str	r3, [r5, #0]
 800a780:	f7f7 f9a7 	bl	8001ad2 <_isatty>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d103      	bne.n	800a790 <_isatty_r+0x1c>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d000      	beq.n	800a790 <_isatty_r+0x1c>
 800a78e:	6023      	str	r3, [r4, #0]
 800a790:	bd70      	pop	{r4, r5, r6, pc}
 800a792:	46c0      	nop			@ (mov r8, r8)
 800a794:	20000830 	.word	0x20000830

0800a798 <memchr>:
 800a798:	b2c9      	uxtb	r1, r1
 800a79a:	1882      	adds	r2, r0, r2
 800a79c:	4290      	cmp	r0, r2
 800a79e:	d101      	bne.n	800a7a4 <memchr+0xc>
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	4770      	bx	lr
 800a7a4:	7803      	ldrb	r3, [r0, #0]
 800a7a6:	428b      	cmp	r3, r1
 800a7a8:	d0fb      	beq.n	800a7a2 <memchr+0xa>
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	e7f6      	b.n	800a79c <memchr+0x4>

0800a7ae <memcpy>:
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d100      	bne.n	800a7b8 <memcpy+0xa>
 800a7b6:	bd10      	pop	{r4, pc}
 800a7b8:	5ccc      	ldrb	r4, [r1, r3]
 800a7ba:	54c4      	strb	r4, [r0, r3]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	e7f8      	b.n	800a7b2 <memcpy+0x4>

0800a7c0 <_realloc_r>:
 800a7c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7c2:	0006      	movs	r6, r0
 800a7c4:	000c      	movs	r4, r1
 800a7c6:	0015      	movs	r5, r2
 800a7c8:	2900      	cmp	r1, #0
 800a7ca:	d105      	bne.n	800a7d8 <_realloc_r+0x18>
 800a7cc:	0011      	movs	r1, r2
 800a7ce:	f7fe feab 	bl	8009528 <_malloc_r>
 800a7d2:	0004      	movs	r4, r0
 800a7d4:	0020      	movs	r0, r4
 800a7d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a7d8:	2a00      	cmp	r2, #0
 800a7da:	d103      	bne.n	800a7e4 <_realloc_r+0x24>
 800a7dc:	f7ff fa20 	bl	8009c20 <_free_r>
 800a7e0:	002c      	movs	r4, r5
 800a7e2:	e7f7      	b.n	800a7d4 <_realloc_r+0x14>
 800a7e4:	f000 f81c 	bl	800a820 <_malloc_usable_size_r>
 800a7e8:	0007      	movs	r7, r0
 800a7ea:	4285      	cmp	r5, r0
 800a7ec:	d802      	bhi.n	800a7f4 <_realloc_r+0x34>
 800a7ee:	0843      	lsrs	r3, r0, #1
 800a7f0:	42ab      	cmp	r3, r5
 800a7f2:	d3ef      	bcc.n	800a7d4 <_realloc_r+0x14>
 800a7f4:	0029      	movs	r1, r5
 800a7f6:	0030      	movs	r0, r6
 800a7f8:	f7fe fe96 	bl	8009528 <_malloc_r>
 800a7fc:	9001      	str	r0, [sp, #4]
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d101      	bne.n	800a806 <_realloc_r+0x46>
 800a802:	9c01      	ldr	r4, [sp, #4]
 800a804:	e7e6      	b.n	800a7d4 <_realloc_r+0x14>
 800a806:	002a      	movs	r2, r5
 800a808:	42bd      	cmp	r5, r7
 800a80a:	d900      	bls.n	800a80e <_realloc_r+0x4e>
 800a80c:	003a      	movs	r2, r7
 800a80e:	0021      	movs	r1, r4
 800a810:	9801      	ldr	r0, [sp, #4]
 800a812:	f7ff ffcc 	bl	800a7ae <memcpy>
 800a816:	0021      	movs	r1, r4
 800a818:	0030      	movs	r0, r6
 800a81a:	f7ff fa01 	bl	8009c20 <_free_r>
 800a81e:	e7f0      	b.n	800a802 <_realloc_r+0x42>

0800a820 <_malloc_usable_size_r>:
 800a820:	1f0b      	subs	r3, r1, #4
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	1f18      	subs	r0, r3, #4
 800a826:	2b00      	cmp	r3, #0
 800a828:	da01      	bge.n	800a82e <_malloc_usable_size_r+0xe>
 800a82a:	580b      	ldr	r3, [r1, r0]
 800a82c:	18c0      	adds	r0, r0, r3
 800a82e:	4770      	bx	lr

0800a830 <_init>:
 800a830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a832:	46c0      	nop			@ (mov r8, r8)
 800a834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a836:	bc08      	pop	{r3}
 800a838:	469e      	mov	lr, r3
 800a83a:	4770      	bx	lr

0800a83c <_fini>:
 800a83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83e:	46c0      	nop			@ (mov r8, r8)
 800a840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a842:	bc08      	pop	{r3}
 800a844:	469e      	mov	lr, r3
 800a846:	4770      	bx	lr
