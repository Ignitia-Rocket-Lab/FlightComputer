
SD  FatFs  FileGeneratorV4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb5c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b88  0800bc1c  0800bc1c  0000cc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7a4  0800c7a4  0000e068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800c7a4  0800c7a4  0000e068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800c7a4  0800c7a4  0000e068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7a4  0800c7a4  0000d7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7a8  0800c7a8  0000d7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800c7ac  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d0  20000068  0800c814  0000e068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000838  0800c814  0000e838  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010be8  00000000  00000000  0000e090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032fd  00000000  00000000  0001ec78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00021f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0b  00000000  00000000  00022de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014795  00000000  00000000  000238eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c25  00000000  00000000  00038080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ec23  00000000  00000000  0004eca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd8c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003abc  00000000  00000000  000bd90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000c13c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bc04 	.word	0x0800bc04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800bc04 	.word	0x0800bc04

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800025e:	4b0c      	ldr	r3, [pc, #48]	@ (8000290 <MX_DMA_Init+0x38>)
 8000260:	695a      	ldr	r2, [r3, #20]
 8000262:	4b0b      	ldr	r3, [pc, #44]	@ (8000290 <MX_DMA_Init+0x38>)
 8000264:	2101      	movs	r1, #1
 8000266:	430a      	orrs	r2, r1
 8000268:	615a      	str	r2, [r3, #20]
 800026a:	4b09      	ldr	r3, [pc, #36]	@ (8000290 <MX_DMA_Init+0x38>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	2201      	movs	r2, #1
 8000270:	4013      	ands	r3, r2
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000276:	2200      	movs	r2, #0
 8000278:	2100      	movs	r1, #0
 800027a:	200a      	movs	r0, #10
 800027c:	f001 fefa 	bl	8002074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000280:	200a      	movs	r0, #10
 8000282:	f001 ff0c 	bl	800209e <HAL_NVIC_EnableIRQ>

}
 8000286:	46c0      	nop			@ (mov r8, r8)
 8000288:	46bd      	mov	sp, r7
 800028a:	b002      	add	sp, #8
 800028c:	bd80      	pop	{r7, pc}
 800028e:	46c0      	nop			@ (mov r8, r8)
 8000290:	40021000 	.word	0x40021000

08000294 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b089      	sub	sp, #36	@ 0x24
 8000298:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029a:	240c      	movs	r4, #12
 800029c:	193b      	adds	r3, r7, r4
 800029e:	0018      	movs	r0, r3
 80002a0:	2314      	movs	r3, #20
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f00a fe0f 	bl	800aec8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002aa:	4b39      	ldr	r3, [pc, #228]	@ (8000390 <MX_GPIO_Init+0xfc>)
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	4b38      	ldr	r3, [pc, #224]	@ (8000390 <MX_GPIO_Init+0xfc>)
 80002b0:	2180      	movs	r1, #128	@ 0x80
 80002b2:	0309      	lsls	r1, r1, #12
 80002b4:	430a      	orrs	r2, r1
 80002b6:	615a      	str	r2, [r3, #20]
 80002b8:	4b35      	ldr	r3, [pc, #212]	@ (8000390 <MX_GPIO_Init+0xfc>)
 80002ba:	695a      	ldr	r2, [r3, #20]
 80002bc:	2380      	movs	r3, #128	@ 0x80
 80002be:	031b      	lsls	r3, r3, #12
 80002c0:	4013      	ands	r3, r2
 80002c2:	60bb      	str	r3, [r7, #8]
 80002c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c6:	4b32      	ldr	r3, [pc, #200]	@ (8000390 <MX_GPIO_Init+0xfc>)
 80002c8:	695a      	ldr	r2, [r3, #20]
 80002ca:	4b31      	ldr	r3, [pc, #196]	@ (8000390 <MX_GPIO_Init+0xfc>)
 80002cc:	2180      	movs	r1, #128	@ 0x80
 80002ce:	03c9      	lsls	r1, r1, #15
 80002d0:	430a      	orrs	r2, r1
 80002d2:	615a      	str	r2, [r3, #20]
 80002d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000390 <MX_GPIO_Init+0xfc>)
 80002d6:	695a      	ldr	r2, [r3, #20]
 80002d8:	2380      	movs	r3, #128	@ 0x80
 80002da:	03db      	lsls	r3, r3, #15
 80002dc:	4013      	ands	r3, r2
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000390 <MX_GPIO_Init+0xfc>)
 80002e4:	695a      	ldr	r2, [r3, #20]
 80002e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000390 <MX_GPIO_Init+0xfc>)
 80002e8:	2180      	movs	r1, #128	@ 0x80
 80002ea:	0289      	lsls	r1, r1, #10
 80002ec:	430a      	orrs	r2, r1
 80002ee:	615a      	str	r2, [r3, #20]
 80002f0:	4b27      	ldr	r3, [pc, #156]	@ (8000390 <MX_GPIO_Init+0xfc>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	2380      	movs	r3, #128	@ 0x80
 80002f6:	029b      	lsls	r3, r3, #10
 80002f8:	4013      	ands	r3, r2
 80002fa:	603b      	str	r3, [r7, #0]
 80002fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80002fe:	2390      	movs	r3, #144	@ 0x90
 8000300:	05db      	lsls	r3, r3, #23
 8000302:	2201      	movs	r2, #1
 8000304:	2110      	movs	r1, #16
 8000306:	0018      	movs	r0, r3
 8000308:	f002 fa6c 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800030c:	2380      	movs	r3, #128	@ 0x80
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	4820      	ldr	r0, [pc, #128]	@ (8000394 <MX_GPIO_Init+0x100>)
 8000312:	2200      	movs	r2, #0
 8000314:	0019      	movs	r1, r3
 8000316:	f002 fa65 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TestSelect_Pin */
  GPIO_InitStruct.Pin = TestSelect_Pin;
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2201      	movs	r2, #1
 800031e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000320:	193b      	adds	r3, r7, r4
 8000322:	2200      	movs	r2, #0
 8000324:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000326:	193b      	adds	r3, r7, r4
 8000328:	2202      	movs	r2, #2
 800032a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TestSelect_GPIO_Port, &GPIO_InitStruct);
 800032c:	193b      	adds	r3, r7, r4
 800032e:	4a19      	ldr	r2, [pc, #100]	@ (8000394 <MX_GPIO_Init+0x100>)
 8000330:	0019      	movs	r1, r3
 8000332:	0010      	movs	r0, r2
 8000334:	f002 f8e6 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000338:	193b      	adds	r3, r7, r4
 800033a:	2210      	movs	r2, #16
 800033c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	193b      	adds	r3, r7, r4
 8000340:	2201      	movs	r2, #1
 8000342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	193b      	adds	r3, r7, r4
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034a:	193b      	adds	r3, r7, r4
 800034c:	2203      	movs	r2, #3
 800034e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000350:	193a      	adds	r2, r7, r4
 8000352:	2390      	movs	r3, #144	@ 0x90
 8000354:	05db      	lsls	r3, r3, #23
 8000356:	0011      	movs	r1, r2
 8000358:	0018      	movs	r0, r3
 800035a:	f002 f8d3 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800035e:	0021      	movs	r1, r4
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2280      	movs	r2, #128	@ 0x80
 8000364:	0052      	lsls	r2, r2, #1
 8000366:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2201      	movs	r2, #1
 800036c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800037a:	187b      	adds	r3, r7, r1
 800037c:	4a05      	ldr	r2, [pc, #20]	@ (8000394 <MX_GPIO_Init+0x100>)
 800037e:	0019      	movs	r1, r3
 8000380:	0010      	movs	r0, r2
 8000382:	f002 f8bf 	bl	8002504 <HAL_GPIO_Init>

}
 8000386:	46c0      	nop			@ (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b009      	add	sp, #36	@ 0x24
 800038c:	bd90      	pop	{r4, r7, pc}
 800038e:	46c0      	nop			@ (mov r8, r8)
 8000390:	40021000 	.word	0x40021000
 8000394:	48000800 	.word	0x48000800

08000398 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int fd, unsigned char *buf, int len) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d002      	beq.n	80003b0 <_write+0x18>
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d106      	bne.n	80003be <_write+0x26>
    HAL_UART_Transmit(&huart2, buf, len, 999);  // Print to the UART
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b04      	ldr	r3, [pc, #16]	@ (80003c8 <_write+0x30>)
 80003b6:	68b9      	ldr	r1, [r7, #8]
 80003b8:	4804      	ldr	r0, [pc, #16]	@ (80003cc <_write+0x34>)
 80003ba:	f004 f8df 	bl	800457c <HAL_UART_Transmit>
  }
  return len;
 80003be:	687b      	ldr	r3, [r7, #4]
}
 80003c0:	0018      	movs	r0, r3
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b004      	add	sp, #16
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	000003e7 	.word	0x000003e7
 80003cc:	20000634 	.word	0x20000634

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b09c      	sub	sp, #112	@ 0x70
 80003d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d6:	f001 fd3d 	bl	8001e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003da:	f000 f829 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003de:	f7ff ff59 	bl	8000294 <MX_GPIO_Init>
  MX_DMA_Init();
 80003e2:	f7ff ff39 	bl	8000258 <MX_DMA_Init>
  MX_SPI1_Init();
 80003e6:	f001 fac5 	bl	8001974 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80003ea:	f001 fc85 	bl	8001cf8 <MX_USART2_UART_Init>
  char fileName[32];
  char folderPath[64];

  const char *initalText;

  initalText = "hola";
 80003ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <main+0x58>)
 80003f0:	663b      	str	r3, [r7, #96]	@ 0x60

  sd_create_and_write_file(fileName, sizeof(fileName), folderPath, sizeof(folderPath), initalText);
 80003f2:	003a      	movs	r2, r7
 80003f4:	2340      	movs	r3, #64	@ 0x40
 80003f6:	18f8      	adds	r0, r7, r3
 80003f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2340      	movs	r3, #64	@ 0x40
 80003fe:	2120      	movs	r1, #32
 8000400:	f000 fe64 	bl	80010cc <sd_create_and_write_file>


  // Escribe texto inicial en el archivo
  for(int i;i<10;i++){
 8000404:	e009      	b.n	800041a <main+0x4a>
	  sd_append_file_with_directory(fileName, "sda\n", folderPath);
 8000406:	003a      	movs	r2, r7
 8000408:	4908      	ldr	r1, [pc, #32]	@ (800042c <main+0x5c>)
 800040a:	2340      	movs	r3, #64	@ 0x40
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	0018      	movs	r0, r3
 8000410:	f000 fcfe 	bl	8000e10 <sd_append_file_with_directory>
  for(int i;i<10;i++){
 8000414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000416:	3301      	adds	r3, #1
 8000418:	667b      	str	r3, [r7, #100]	@ 0x64
 800041a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800041c:	2b09      	cmp	r3, #9
 800041e:	ddf2      	ble.n	8000406 <main+0x36>
  }

  sd_unmount();
 8000420:	f000 fa3e 	bl	80008a0 <sd_unmount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000424:	46c0      	nop			@ (mov r8, r8)
 8000426:	e7fd      	b.n	8000424 <main+0x54>
 8000428:	0800bc1c 	.word	0x0800bc1c
 800042c:	0800bc24 	.word	0x0800bc24

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b590      	push	{r4, r7, lr}
 8000432:	b091      	sub	sp, #68	@ 0x44
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	2410      	movs	r4, #16
 8000438:	193b      	adds	r3, r7, r4
 800043a:	0018      	movs	r0, r3
 800043c:	2330      	movs	r3, #48	@ 0x30
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f00a fd41 	bl	800aec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000446:	003b      	movs	r3, r7
 8000448:	0018      	movs	r0, r3
 800044a:	2310      	movs	r3, #16
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f00a fd3a 	bl	800aec8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000454:	0021      	movs	r1, r4
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2201      	movs	r2, #1
 800045a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2201      	movs	r2, #1
 8000460:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2202      	movs	r2, #2
 8000466:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2280      	movs	r2, #128	@ 0x80
 800046c:	0252      	lsls	r2, r2, #9
 800046e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2280      	movs	r2, #128	@ 0x80
 8000474:	0352      	lsls	r2, r2, #13
 8000476:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2200      	movs	r2, #0
 800047c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047e:	187b      	adds	r3, r7, r1
 8000480:	0018      	movs	r0, r3
 8000482:	f002 f9cd 	bl	8002820 <HAL_RCC_OscConfig>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800048a:	f000 f819 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048e:	003b      	movs	r3, r7
 8000490:	2207      	movs	r2, #7
 8000492:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000494:	003b      	movs	r3, r7
 8000496:	2202      	movs	r2, #2
 8000498:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049a:	003b      	movs	r3, r7
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a0:	003b      	movs	r3, r7
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a6:	003b      	movs	r3, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	0018      	movs	r0, r3
 80004ac:	f002 fcd2 	bl	8002e54 <HAL_RCC_ClockConfig>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004b4:	f000 f804 	bl	80004c0 <Error_Handler>
  }
}
 80004b8:	46c0      	nop			@ (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b011      	add	sp, #68	@ 0x44
 80004be:	bd90      	pop	{r4, r7, pc}

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	46c0      	nop			@ (mov r8, r8)
 80004ca:	e7fd      	b.n	80004c8 <Error_Handler+0x8>

080004cc <SD_disk_status>:
#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"


DSTATUS SD_disk_status(BYTE drv) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	0002      	movs	r2, r0
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	701a      	strb	r2, [r3, #0]
    if (drv != 0)
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <SD_disk_status+0x18>
        return STA_NOINIT;
 80004e0:	2301      	movs	r3, #1
 80004e2:	e000      	b.n	80004e6 <SD_disk_status+0x1a>
    return 0;
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	0018      	movs	r0, r3
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b002      	add	sp, #8
 80004ec:	bd80      	pop	{r7, pc}

080004ee <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b082      	sub	sp, #8
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	0002      	movs	r2, r0
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	701a      	strb	r2, [r3, #0]
    if (drv != 0)
 80004fa:	1dfb      	adds	r3, r7, #7
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SD_disk_initialize+0x18>
        return STA_NOINIT;
 8000502:	2301      	movs	r3, #1
 8000504:	e005      	b.n	8000512 <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 8000506:	f000 ff29 	bl	800135c <SD_SPI_Init>
 800050a:	0003      	movs	r3, r0
 800050c:	1e5a      	subs	r2, r3, #1
 800050e:	4193      	sbcs	r3, r2
 8000510:	b2db      	uxtb	r3, r3
}
 8000512:	0018      	movs	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	b002      	add	sp, #8
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	210f      	movs	r1, #15
 800052a:	187b      	adds	r3, r7, r1
 800052c:	1c02      	adds	r2, r0, #0
 800052e:	701a      	strb	r2, [r3, #0]
    if (pdrv != 0 || count == 0)
 8000530:	187b      	adds	r3, r7, r1
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d102      	bne.n	800053e <SD_disk_read+0x22>
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d101      	bne.n	8000542 <SD_disk_read+0x26>
        return RES_PARERR;
 800053e:	2304      	movs	r3, #4
 8000540:	e00f      	b.n	8000562 <SD_disk_read+0x46>
    if (!card_initialized) return RES_NOTRDY;
 8000542:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <SD_disk_read+0x50>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d101      	bne.n	800054e <SD_disk_read+0x32>
 800054a:	2303      	movs	r3, #3
 800054c:	e009      	b.n	8000562 <SD_disk_read+0x46>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 800054e:	683a      	ldr	r2, [r7, #0]
 8000550:	6879      	ldr	r1, [r7, #4]
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	0018      	movs	r0, r3
 8000556:	f001 f833 	bl	80015c0 <SD_ReadBlocks>
 800055a:	0003      	movs	r3, r0
 800055c:	1e5a      	subs	r2, r3, #1
 800055e:	4193      	sbcs	r3, r2
 8000560:	b2db      	uxtb	r3, r3
}
 8000562:	0018      	movs	r0, r3
 8000564:	46bd      	mov	sp, r7
 8000566:	b004      	add	sp, #16
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	20000341 	.word	0x20000341

08000570 <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  BYTE *buff, DWORD sector, UINT count) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	60b9      	str	r1, [r7, #8]
 8000578:	607a      	str	r2, [r7, #4]
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	1c02      	adds	r2, r0, #0
 8000582:	701a      	strb	r2, [r3, #0]
    if (pdrv || !count) return RES_PARERR;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d102      	bne.n	8000592 <SD_disk_write+0x22>
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d101      	bne.n	8000596 <SD_disk_write+0x26>
 8000592:	2304      	movs	r3, #4
 8000594:	e00f      	b.n	80005b6 <SD_disk_write+0x46>
    if (!card_initialized) return RES_NOTRDY;
 8000596:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <SD_disk_write+0x50>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d101      	bne.n	80005a2 <SD_disk_write+0x32>
 800059e:	2303      	movs	r3, #3
 80005a0:	e009      	b.n	80005b6 <SD_disk_write+0x46>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	6879      	ldr	r1, [r7, #4]
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 f8fb 	bl	80017a4 <SD_WriteBlocks>
 80005ae:	0003      	movs	r3, r0
 80005b0:	1e5a      	subs	r2, r3, #1
 80005b2:	4193      	sbcs	r3, r2
 80005b4:	b2db      	uxtb	r3, r3
}
 80005b6:	0018      	movs	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b004      	add	sp, #16
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	20000341 	.word	0x20000341

080005c4 <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	603a      	str	r2, [r7, #0]
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	1c02      	adds	r2, r0, #0
 80005d0:	701a      	strb	r2, [r3, #0]
 80005d2:	1dbb      	adds	r3, r7, #6
 80005d4:	1c0a      	adds	r2, r1, #0
 80005d6:	701a      	strb	r2, [r3, #0]
    if (pdrv != 0)
 80005d8:	1dfb      	adds	r3, r7, #7
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SD_disk_ioctl+0x20>
        return RES_PARERR;
 80005e0:	2304      	movs	r3, #4
 80005e2:	e020      	b.n	8000626 <SD_disk_ioctl+0x62>

    switch (cmd) {
 80005e4:	1dbb      	adds	r3, r7, #6
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	d016      	beq.n	800061a <SD_disk_ioctl+0x56>
 80005ec:	dc1a      	bgt.n	8000624 <SD_disk_ioctl+0x60>
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d007      	beq.n	8000602 <SD_disk_ioctl+0x3e>
 80005f2:	dc17      	bgt.n	8000624 <SD_disk_ioctl+0x60>
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <SD_disk_ioctl+0x3a>
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d008      	beq.n	800060e <SD_disk_ioctl+0x4a>
 80005fc:	e012      	b.n	8000624 <SD_disk_ioctl+0x60>
    case CTRL_SYNC:
        return RES_OK;
 80005fe:	2300      	movs	r3, #0
 8000600:	e011      	b.n	8000626 <SD_disk_ioctl+0x62>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	2280      	movs	r2, #128	@ 0x80
 8000606:	0092      	lsls	r2, r2, #2
 8000608:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e00b      	b.n	8000626 <SD_disk_ioctl+0x62>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	2280      	movs	r2, #128	@ 0x80
 8000612:	0252      	lsls	r2, r2, #9
 8000614:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8000616:	2300      	movs	r3, #0
 8000618:	e005      	b.n	8000626 <SD_disk_ioctl+0x62>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	2201      	movs	r2, #1
 800061e:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8000620:	2300      	movs	r3, #0
 8000622:	e000      	b.n	8000626 <SD_disk_ioctl+0x62>
    default:
        return RES_PARERR;
 8000624:	2304      	movs	r3, #4
    }
}
 8000626:	0018      	movs	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <sd_format>:
#include "ffconf.h"

char sd_path[4];
FATFS fs;

int sd_format(void) {
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
	// Pre-mount required for legacy FatFS
	f_mount(&fs, sd_path, 0);
 8000636:	4910      	ldr	r1, [pc, #64]	@ (8000678 <sd_format+0x48>)
 8000638:	4b10      	ldr	r3, [pc, #64]	@ (800067c <sd_format+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	0018      	movs	r0, r3
 800063e:	f007 fe35 	bl	80082ac <f_mount>

	FRESULT res;
	res = f_mkfs(sd_path, 1, 0);
 8000642:	1dfc      	adds	r4, r7, #7
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <sd_format+0x48>)
 8000646:	2200      	movs	r2, #0
 8000648:	2101      	movs	r1, #1
 800064a:	0018      	movs	r0, r3
 800064c:	f009 fb46 	bl	8009cdc <f_mkfs>
 8000650:	0003      	movs	r3, r0
 8000652:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) {
 8000654:	1dfb      	adds	r3, r7, #7
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d006      	beq.n	800066a <sd_format+0x3a>
		printf("Format failed: f_mkfs returned %d\r\n", res);
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781a      	ldrb	r2, [r3, #0]
 8000660:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <sd_format+0x50>)
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f00a fa9d 	bl	800aba4 <iprintf>
	}
		return res;
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	781b      	ldrb	r3, [r3, #0]
}
 800066e:	0018      	movs	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	b003      	add	sp, #12
 8000674:	bd90      	pop	{r4, r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	20000084 	.word	0x20000084
 800067c:	20000088 	.word	0x20000088
 8000680:	0800bc2c 	.word	0x0800bc2c

08000684 <sd_get_space_kb>:

int sd_get_space_kb(void) {
 8000684:	b5b0      	push	{r4, r5, r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
	FATFS *pfs;
	DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
	FRESULT res = f_getfree(sd_path, &fre_clust, &pfs);
 800068a:	251f      	movs	r5, #31
 800068c:	197c      	adds	r4, r7, r5
 800068e:	2308      	movs	r3, #8
 8000690:	18fa      	adds	r2, r7, r3
 8000692:	1d39      	adds	r1, r7, #4
 8000694:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <sd_get_space_kb+0x70>)
 8000696:	0018      	movs	r0, r3
 8000698:	f009 f808 	bl	80096ac <f_getfree>
 800069c:	0003      	movs	r3, r0
 800069e:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 80006a0:	197b      	adds	r3, r7, r5
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <sd_get_space_kb+0x2a>
 80006a8:	197b      	adds	r3, r7, r5
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	e01d      	b.n	80006ea <sd_get_space_kb+0x66>

	tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	2385      	movs	r3, #133	@ 0x85
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	58d3      	ldr	r3, [r2, r3]
 80006b6:	3b02      	subs	r3, #2
 80006b8:	68ba      	ldr	r2, [r7, #8]
 80006ba:	490f      	ldr	r1, [pc, #60]	@ (80006f8 <sd_get_space_kb+0x74>)
 80006bc:	5c52      	ldrb	r2, [r2, r1]
 80006be:	4353      	muls	r3, r2
 80006c0:	61bb      	str	r3, [r7, #24]
	fre_sect = fre_clust * pfs->csize;
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	4a0c      	ldr	r2, [pc, #48]	@ (80006f8 <sd_get_space_kb+0x74>)
 80006c6:	5c9b      	ldrb	r3, [r3, r2]
 80006c8:	001a      	movs	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4353      	muls	r3, r2
 80006ce:	617b      	str	r3, [r7, #20]
	total_kb = tot_sect / 2;
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	085b      	lsrs	r3, r3, #1
 80006d4:	613b      	str	r3, [r7, #16]
	free_kb = fre_sect / 2;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	085b      	lsrs	r3, r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
	printf("Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb);
 80006dc:	68fa      	ldr	r2, [r7, #12]
 80006de:	6939      	ldr	r1, [r7, #16]
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <sd_get_space_kb+0x78>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f00a fa5e 	bl	800aba4 <iprintf>
	return FR_OK;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	0018      	movs	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b008      	add	sp, #32
 80006f0:	bdb0      	pop	{r4, r5, r7, pc}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	20000084 	.word	0x20000084
 80006f8:	00000202 	.word	0x00000202
 80006fc:	0800bc50 	.word	0x0800bc50

08000700 <sd_mount>:

int sd_mount(void) {
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
	FRESULT res;
	extern uint8_t sd_is_sdhc(void);

	GPIOC->ODR &= ~(1<<1); //Output error led PC1
 8000706:	4b52      	ldr	r3, [pc, #328]	@ (8000850 <sd_mount+0x150>)
 8000708:	695a      	ldr	r2, [r3, #20]
 800070a:	4b51      	ldr	r3, [pc, #324]	@ (8000850 <sd_mount+0x150>)
 800070c:	2102      	movs	r1, #2
 800070e:	438a      	bics	r2, r1
 8000710:	615a      	str	r2, [r3, #20]

	printf("Linking SD driver...\r\n");
 8000712:	4b50      	ldr	r3, [pc, #320]	@ (8000854 <sd_mount+0x154>)
 8000714:	0018      	movs	r0, r3
 8000716:	f00a faab 	bl	800ac70 <puts>
	if (FATFS_LinkDriver(&SD_Driver, sd_path) != 0) {
 800071a:	4a4f      	ldr	r2, [pc, #316]	@ (8000858 <sd_mount+0x158>)
 800071c:	4b4f      	ldr	r3, [pc, #316]	@ (800085c <sd_mount+0x15c>)
 800071e:	0011      	movs	r1, r2
 8000720:	0018      	movs	r0, r3
 8000722:	f00a f809 	bl	800a738 <FATFS_LinkDriver>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d005      	beq.n	8000736 <sd_mount+0x36>
		printf("FATFS_LinkDriver failed\n");
 800072a:	4b4d      	ldr	r3, [pc, #308]	@ (8000860 <sd_mount+0x160>)
 800072c:	0018      	movs	r0, r3
 800072e:	f00a fa9f 	bl	800ac70 <puts>
		return FR_DISK_ERR;
 8000732:	2301      	movs	r3, #1
 8000734:	e088      	b.n	8000848 <sd_mount+0x148>
	}

	printf("Initializing disk...\r\n");
 8000736:	4b4b      	ldr	r3, [pc, #300]	@ (8000864 <sd_mount+0x164>)
 8000738:	0018      	movs	r0, r3
 800073a:	f00a fa99 	bl	800ac70 <puts>
	DSTATUS stat = disk_initialize(0);
 800073e:	1dfc      	adds	r4, r7, #7
 8000740:	2000      	movs	r0, #0
 8000742:	f004 fe99 	bl	8005478 <disk_initialize>
 8000746:	0003      	movs	r3, r0
 8000748:	7023      	strb	r3, [r4, #0]
	if (stat != 0) {
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00c      	beq.n	800076c <sd_mount+0x6c>
		printf("disk_initialize failed: 0x%02X\n", stat);
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	4b44      	ldr	r3, [pc, #272]	@ (8000868 <sd_mount+0x168>)
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f00a fa22 	bl	800aba4 <iprintf>
		printf("FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n");
 8000760:	4b42      	ldr	r3, [pc, #264]	@ (800086c <sd_mount+0x16c>)
 8000762:	0018      	movs	r0, r3
 8000764:	f00a fa84 	bl	800ac70 <puts>
		return FR_NOT_READY;
 8000768:	2303      	movs	r3, #3
 800076a:	e06d      	b.n	8000848 <sd_mount+0x148>
	}

	printf("Attempting mount at %s...\r\n", sd_path);
 800076c:	4a3a      	ldr	r2, [pc, #232]	@ (8000858 <sd_mount+0x158>)
 800076e:	4b40      	ldr	r3, [pc, #256]	@ (8000870 <sd_mount+0x170>)
 8000770:	0011      	movs	r1, r2
 8000772:	0018      	movs	r0, r3
 8000774:	f00a fa16 	bl	800aba4 <iprintf>
	res = f_mount(&fs, sd_path, 1);
 8000778:	1dbc      	adds	r4, r7, #6
 800077a:	4937      	ldr	r1, [pc, #220]	@ (8000858 <sd_mount+0x158>)
 800077c:	4b3d      	ldr	r3, [pc, #244]	@ (8000874 <sd_mount+0x174>)
 800077e:	2201      	movs	r2, #1
 8000780:	0018      	movs	r0, r3
 8000782:	f007 fd93 	bl	80082ac <f_mount>
 8000786:	0003      	movs	r3, r0
 8000788:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800078a:	1dbb      	adds	r3, r7, #6
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d115      	bne.n	80007be <sd_mount+0xbe>
	{
		printf("SD card mounted successfully at %s\r\n", sd_path);
 8000792:	4a31      	ldr	r2, [pc, #196]	@ (8000858 <sd_mount+0x158>)
 8000794:	4b38      	ldr	r3, [pc, #224]	@ (8000878 <sd_mount+0x178>)
 8000796:	0011      	movs	r1, r2
 8000798:	0018      	movs	r0, r3
 800079a:	f00a fa03 	bl	800aba4 <iprintf>
		printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 800079e:	f000 fdd3 	bl	8001348 <sd_is_sdhc>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <sd_mount+0xaa>
 80007a6:	4b35      	ldr	r3, [pc, #212]	@ (800087c <sd_mount+0x17c>)
 80007a8:	e000      	b.n	80007ac <sd_mount+0xac>
 80007aa:	4b35      	ldr	r3, [pc, #212]	@ (8000880 <sd_mount+0x180>)
 80007ac:	4a35      	ldr	r2, [pc, #212]	@ (8000884 <sd_mount+0x184>)
 80007ae:	0019      	movs	r1, r3
 80007b0:	0010      	movs	r0, r2
 80007b2:	f00a f9f7 	bl	800aba4 <iprintf>

		// Capacity and free space reporting
		sd_get_space_kb();
 80007b6:	f7ff ff65 	bl	8000684 <sd_get_space_kb>
		return FR_OK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e044      	b.n	8000848 <sd_mount+0x148>
	}

//	 Handle no filesystem by creating one
	if (res == FR_NO_FILESYSTEM)
 80007be:	1dbb      	adds	r3, r7, #6
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b0d      	cmp	r3, #13
 80007c4:	d137      	bne.n	8000836 <sd_mount+0x136>
	{
		printf("No filesystem found on SD card. Attempting format...\r\nThis will create 32MB Partition (Most Probably)\r\n");
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <sd_mount+0x188>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f00a fa51 	bl	800ac70 <puts>
		printf("If you need the full sized SD card, use the computer to format into FAT32\r\n");
 80007ce:	4b2f      	ldr	r3, [pc, #188]	@ (800088c <sd_mount+0x18c>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f00a fa4d 	bl	800ac70 <puts>
		sd_format();
 80007d6:	f7ff ff2b 	bl	8000630 <sd_format>

		printf("Retrying mount after format...\r\n");
 80007da:	4b2d      	ldr	r3, [pc, #180]	@ (8000890 <sd_mount+0x190>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f00a fa47 	bl	800ac70 <puts>
		res = f_mount(&fs, sd_path, 1);
 80007e2:	1dbc      	adds	r4, r7, #6
 80007e4:	491c      	ldr	r1, [pc, #112]	@ (8000858 <sd_mount+0x158>)
 80007e6:	4b23      	ldr	r3, [pc, #140]	@ (8000874 <sd_mount+0x174>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	0018      	movs	r0, r3
 80007ec:	f007 fd5e 	bl	80082ac <f_mount>
 80007f0:	0003      	movs	r3, r0
 80007f2:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80007f4:	1dbb      	adds	r3, r7, #6
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d112      	bne.n	8000822 <sd_mount+0x122>
			printf("SD card formatted and mounted successfully.\r\n");
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <sd_mount+0x194>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f00a fa36 	bl	800ac70 <puts>
			printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 8000804:	f000 fda0 	bl	8001348 <sd_is_sdhc>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <sd_mount+0x110>
 800080c:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <sd_mount+0x17c>)
 800080e:	e000      	b.n	8000812 <sd_mount+0x112>
 8000810:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <sd_mount+0x180>)
 8000812:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <sd_mount+0x184>)
 8000814:	0019      	movs	r1, r3
 8000816:	0010      	movs	r0, r2
 8000818:	f00a f9c4 	bl	800aba4 <iprintf>

			// Report capacity after format
			sd_get_space_kb();
 800081c:	f7ff ff32 	bl	8000684 <sd_get_space_kb>
 8000820:	e006      	b.n	8000830 <sd_mount+0x130>
		}
		else {
			printf("Mount failed even after format: %d\r\n", res);
 8000822:	1dbb      	adds	r3, r7, #6
 8000824:	781a      	ldrb	r2, [r3, #0]
 8000826:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <sd_mount+0x198>)
 8000828:	0011      	movs	r1, r2
 800082a:	0018      	movs	r0, r3
 800082c:	f00a f9ba 	bl	800aba4 <iprintf>
		}
		return res;
 8000830:	1dbb      	adds	r3, r7, #6
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	e008      	b.n	8000848 <sd_mount+0x148>
	}

	// Any other mount error
	printf("Mount failed with code: %d\r\n", res);
 8000836:	1dbb      	adds	r3, r7, #6
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	4b18      	ldr	r3, [pc, #96]	@ (800089c <sd_mount+0x19c>)
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f00a f9b0 	bl	800aba4 <iprintf>
	return res;
 8000844:	1dbb      	adds	r3, r7, #6
 8000846:	781b      	ldrb	r3, [r3, #0]
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	b003      	add	sp, #12
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	48000800 	.word	0x48000800
 8000854:	0800bc70 	.word	0x0800bc70
 8000858:	20000084 	.word	0x20000084
 800085c:	0800c1a4 	.word	0x0800c1a4
 8000860:	0800bc88 	.word	0x0800bc88
 8000864:	0800bca0 	.word	0x0800bca0
 8000868:	0800bcb8 	.word	0x0800bcb8
 800086c:	0800bcd8 	.word	0x0800bcd8
 8000870:	0800bd10 	.word	0x0800bd10
 8000874:	20000088 	.word	0x20000088
 8000878:	0800bd2c 	.word	0x0800bd2c
 800087c:	0800bd54 	.word	0x0800bd54
 8000880:	0800bd60 	.word	0x0800bd60
 8000884:	0800bd68 	.word	0x0800bd68
 8000888:	0800bd78 	.word	0x0800bd78
 800088c:	0800bde0 	.word	0x0800bde0
 8000890:	0800be2c 	.word	0x0800be2c
 8000894:	0800be4c 	.word	0x0800be4c
 8000898:	0800be7c 	.word	0x0800be7c
 800089c:	0800bea4 	.word	0x0800bea4

080008a0 <sd_unmount>:


int sd_unmount(void) {
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
	FRESULT res = f_mount(NULL, sd_path, 1);
 80008a6:	1dfc      	adds	r4, r7, #7
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <sd_unmount+0x3c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	0019      	movs	r1, r3
 80008ae:	2000      	movs	r0, #0
 80008b0:	f007 fcfc 	bl	80082ac <f_mount>
 80008b4:	0003      	movs	r3, r0
 80008b6:	7023      	strb	r3, [r4, #0]
	printf("SD card unmounted: %s\r\n", (res == FR_OK) ? "OK" : "Failed");
 80008b8:	1dfb      	adds	r3, r7, #7
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d101      	bne.n	80008c4 <sd_unmount+0x24>
 80008c0:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <sd_unmount+0x40>)
 80008c2:	e000      	b.n	80008c6 <sd_unmount+0x26>
 80008c4:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <sd_unmount+0x44>)
 80008c6:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <sd_unmount+0x48>)
 80008c8:	0019      	movs	r1, r3
 80008ca:	0010      	movs	r0, r2
 80008cc:	f00a f96a 	bl	800aba4 <iprintf>
	return res;
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	781b      	ldrb	r3, [r3, #0]
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b003      	add	sp, #12
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	20000084 	.word	0x20000084
 80008e0:	0800bec4 	.word	0x0800bec4
 80008e4:	0800bec8 	.word	0x0800bec8
 80008e8:	0800bed0 	.word	0x0800bed0

080008ec <sd_write_file>:

int sd_write_file(const char *filename, const char *text) {
 80008ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ee:	4c23      	ldr	r4, [pc, #140]	@ (800097c <sd_write_file+0x90>)
 80008f0:	44a5      	add	sp, r4
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	6039      	str	r1, [r7, #0]
	FIL file;
	UINT bw;
	FRESULT res = f_open(&file, filename, FA_CREATE_ALWAYS | FA_WRITE);
 80008f8:	4d21      	ldr	r5, [pc, #132]	@ (8000980 <sd_write_file+0x94>)
 80008fa:	197c      	adds	r4, r7, r5
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	2310      	movs	r3, #16
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	220a      	movs	r2, #10
 8000904:	0018      	movs	r0, r3
 8000906:	f007 fd21 	bl	800834c <f_open>
 800090a:	0003      	movs	r3, r0
 800090c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800090e:	197b      	adds	r3, r7, r5
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <sd_write_file+0x30>
 8000916:	197b      	adds	r3, r7, r5
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	e028      	b.n	800096e <sd_write_file+0x82>

	res = f_write(&file, text, strlen(text), &bw);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff fbfc 	bl	800011c <strlen>
 8000924:	0002      	movs	r2, r0
 8000926:	4d16      	ldr	r5, [pc, #88]	@ (8000980 <sd_write_file+0x94>)
 8000928:	197c      	adds	r4, r7, r5
 800092a:	230c      	movs	r3, #12
 800092c:	18fb      	adds	r3, r7, r3
 800092e:	6839      	ldr	r1, [r7, #0]
 8000930:	2610      	movs	r6, #16
 8000932:	19b8      	adds	r0, r7, r6
 8000934:	f007 ffb2 	bl	800889c <f_write>
 8000938:	0003      	movs	r3, r0
 800093a:	7023      	strb	r3, [r4, #0]
	f_close(&file);
 800093c:	19bb      	adds	r3, r7, r6
 800093e:	0018      	movs	r0, r3
 8000940:	f008 fa6a 	bl	8008e18 <f_close>
	printf("Write %u bytes to %s\r\n", bw, filename);
 8000944:	68f9      	ldr	r1, [r7, #12]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <sd_write_file+0x98>)
 800094a:	0018      	movs	r0, r3
 800094c:	f00a f92a 	bl	800aba4 <iprintf>
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
 8000950:	197b      	adds	r3, r7, r5
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d107      	bne.n	8000968 <sd_write_file+0x7c>
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff fbde 	bl	800011c <strlen>
 8000960:	0002      	movs	r2, r0
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d001      	beq.n	800096c <sd_write_file+0x80>
 8000968:	2301      	movs	r3, #1
 800096a:	e000      	b.n	800096e <sd_write_file+0x82>
 800096c:	2300      	movs	r3, #0
}
 800096e:	0018      	movs	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	2391      	movs	r3, #145	@ 0x91
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	449d      	add	sp, r3
 8000978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	fffffdbc 	.word	0xfffffdbc
 8000980:	0000023f 	.word	0x0000023f
 8000984:	0800bee8 	.word	0x0800bee8

08000988 <sd_append_file>:

int sd_append_file(const char *filename, const char *text) {
 8000988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098a:	4c32      	ldr	r4, [pc, #200]	@ (8000a54 <sd_append_file+0xcc>)
 800098c:	44a5      	add	sp, r4
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
	FIL file;
	UINT bw;
	FRESULT res = f_open(&file, filename, FA_OPEN_ALWAYS | FA_WRITE);
 8000994:	4d30      	ldr	r5, [pc, #192]	@ (8000a58 <sd_append_file+0xd0>)
 8000996:	197c      	adds	r4, r7, r5
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	2310      	movs	r3, #16
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	2212      	movs	r2, #18
 80009a0:	0018      	movs	r0, r3
 80009a2:	f007 fcd3 	bl	800834c <f_open>
 80009a6:	0003      	movs	r3, r0
 80009a8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 80009aa:	197b      	adds	r3, r7, r5
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <sd_append_file+0x30>
 80009b2:	197b      	adds	r3, r7, r5
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	e046      	b.n	8000a46 <sd_append_file+0xbe>

	res = f_lseek(&file, f_size(&file));
 80009b8:	4b28      	ldr	r3, [pc, #160]	@ (8000a5c <sd_append_file+0xd4>)
 80009ba:	2290      	movs	r2, #144	@ 0x90
 80009bc:	0092      	lsls	r2, r2, #2
 80009be:	189b      	adds	r3, r3, r2
 80009c0:	19da      	adds	r2, r3, r7
 80009c2:	2383      	movs	r3, #131	@ 0x83
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	58d2      	ldr	r2, [r2, r3]
 80009c8:	4d23      	ldr	r5, [pc, #140]	@ (8000a58 <sd_append_file+0xd0>)
 80009ca:	197c      	adds	r4, r7, r5
 80009cc:	2610      	movs	r6, #16
 80009ce:	19bb      	adds	r3, r7, r6
 80009d0:	0011      	movs	r1, r2
 80009d2:	0018      	movs	r0, r3
 80009d4:	f008 fa58 	bl	8008e88 <f_lseek>
 80009d8:	0003      	movs	r3, r0
 80009da:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) {
 80009dc:	002c      	movs	r4, r5
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d006      	beq.n	80009f4 <sd_append_file+0x6c>
		f_close(&file);
 80009e6:	19bb      	adds	r3, r7, r6
 80009e8:	0018      	movs	r0, r3
 80009ea:	f008 fa15 	bl	8008e18 <f_close>
		return res;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	e028      	b.n	8000a46 <sd_append_file+0xbe>
	}

	res = f_write(&file, text, strlen(text), &bw);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fb90 	bl	800011c <strlen>
 80009fc:	0002      	movs	r2, r0
 80009fe:	4d16      	ldr	r5, [pc, #88]	@ (8000a58 <sd_append_file+0xd0>)
 8000a00:	197c      	adds	r4, r7, r5
 8000a02:	230c      	movs	r3, #12
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	6839      	ldr	r1, [r7, #0]
 8000a08:	2610      	movs	r6, #16
 8000a0a:	19b8      	adds	r0, r7, r6
 8000a0c:	f007 ff46 	bl	800889c <f_write>
 8000a10:	0003      	movs	r3, r0
 8000a12:	7023      	strb	r3, [r4, #0]
	f_close(&file);
 8000a14:	19bb      	adds	r3, r7, r6
 8000a16:	0018      	movs	r0, r3
 8000a18:	f008 f9fe 	bl	8008e18 <f_close>
	printf("Appended %u bytes to %s\r\n", bw, filename);
 8000a1c:	68f9      	ldr	r1, [r7, #12]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <sd_append_file+0xd8>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f00a f8be 	bl	800aba4 <iprintf>
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
 8000a28:	197b      	adds	r3, r7, r5
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d107      	bne.n	8000a40 <sd_append_file+0xb8>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	0018      	movs	r0, r3
 8000a34:	f7ff fb72 	bl	800011c <strlen>
 8000a38:	0002      	movs	r2, r0
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d001      	beq.n	8000a44 <sd_append_file+0xbc>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e000      	b.n	8000a46 <sd_append_file+0xbe>
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	0018      	movs	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	2391      	movs	r3, #145	@ 0x91
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	449d      	add	sp, r3
 8000a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	fffffdbc 	.word	0xfffffdbc
 8000a58:	0000023f 	.word	0x0000023f
 8000a5c:	fffffdd0 	.word	0xfffffdd0
 8000a60:	0800bf00 	.word	0x0800bf00

08000a64 <sd_create_directory>:
	FRESULT res = f_rename(oldname, newname);
	printf("Rename %s to %s: %s\r\n", oldname, newname, (res == FR_OK ? "OK" : "Failed"));
	return res;
}

FRESULT sd_create_directory(const char *path) {
 8000a64:	b5b0      	push	{r4, r5, r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	FRESULT res = f_mkdir(path);
 8000a6c:	250f      	movs	r5, #15
 8000a6e:	197c      	adds	r4, r7, r5
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	0018      	movs	r0, r3
 8000a74:	f008 fefe 	bl	8009874 <f_mkdir>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	7023      	strb	r3, [r4, #0]
	printf("Create directory %s: %s\r\n", path, (res == FR_OK ? "OK" : "Failed"));
 8000a7c:	197b      	adds	r3, r7, r5
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <sd_create_directory+0x24>
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <sd_create_directory+0x40>)
 8000a86:	e000      	b.n	8000a8a <sd_create_directory+0x26>
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <sd_create_directory+0x44>)
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	4807      	ldr	r0, [pc, #28]	@ (8000aac <sd_create_directory+0x48>)
 8000a8e:	001a      	movs	r2, r3
 8000a90:	f00a f888 	bl	800aba4 <iprintf>
	return res;
 8000a94:	230f      	movs	r3, #15
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b004      	add	sp, #16
 8000aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	0800bec4 	.word	0x0800bec4
 8000aa8:	0800bec8 	.word	0x0800bec8
 8000aac:	0800c008 	.word	0x0800c008

08000ab0 <sd_list_directory_recursive>:

void sd_list_directory_recursive(const char *path, int depth) {
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	4c57      	ldr	r4, [pc, #348]	@ (8000c10 <sd_list_directory_recursive+0x160>)
 8000ab4:	44a5      	add	sp, r4
 8000ab6:	af02      	add	r7, sp, #8
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
	DIR dir;
	FILINFO fno;
	char lfn[256];
	fno.lfname = lfn;
 8000abc:	4b55      	ldr	r3, [pc, #340]	@ (8000c14 <sd_list_directory_recursive+0x164>)
 8000abe:	21f6      	movs	r1, #246	@ 0xf6
 8000ac0:	0089      	lsls	r1, r1, #2
 8000ac2:	185b      	adds	r3, r3, r1
 8000ac4:	19db      	adds	r3, r3, r7
 8000ac6:	2288      	movs	r2, #136	@ 0x88
 8000ac8:	18ba      	adds	r2, r7, r2
 8000aca:	619a      	str	r2, [r3, #24]
	fno.lfsize = sizeof(lfn);
 8000acc:	4b51      	ldr	r3, [pc, #324]	@ (8000c14 <sd_list_directory_recursive+0x164>)
 8000ace:	185b      	adds	r3, r3, r1
 8000ad0:	19db      	adds	r3, r3, r7
 8000ad2:	2280      	movs	r2, #128	@ 0x80
 8000ad4:	0052      	lsls	r2, r2, #1
 8000ad6:	61da      	str	r2, [r3, #28]
	FRESULT res = f_opendir(&dir, path);
 8000ad8:	4d4f      	ldr	r5, [pc, #316]	@ (8000c18 <sd_list_directory_recursive+0x168>)
 8000ada:	197c      	adds	r4, r7, r5
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	23d4      	movs	r3, #212	@ 0xd4
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	0011      	movs	r1, r2
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f008 fc7a 	bl	80093e0 <f_opendir>
 8000aec:	0003      	movs	r3, r0
 8000aee:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) {
 8000af0:	197b      	adds	r3, r7, r5
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d007      	beq.n	8000b08 <sd_list_directory_recursive+0x58>
		printf("%*s[ERR] Cannot open: %s\r\n", depth * 2, "", path);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	0059      	lsls	r1, r3, #1
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a47      	ldr	r2, [pc, #284]	@ (8000c1c <sd_list_directory_recursive+0x16c>)
 8000b00:	4847      	ldr	r0, [pc, #284]	@ (8000c20 <sd_list_directory_recursive+0x170>)
 8000b02:	f00a f84f 	bl	800aba4 <iprintf>
 8000b06:	e07e      	b.n	8000c06 <sd_list_directory_recursive+0x156>
		return;
	}

	while (1) {
		res = f_readdir(&dir, &fno);
 8000b08:	4d43      	ldr	r5, [pc, #268]	@ (8000c18 <sd_list_directory_recursive+0x168>)
 8000b0a:	197c      	adds	r4, r7, r5
 8000b0c:	23c4      	movs	r3, #196	@ 0xc4
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	18fa      	adds	r2, r7, r3
 8000b12:	23d4      	movs	r3, #212	@ 0xd4
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	0011      	movs	r1, r2
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f008 fd50 	bl	80095c0 <f_readdir>
 8000b20:	0003      	movs	r3, r0
 8000b22:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK || fno.fname[0] == 0) break;
 8000b24:	197b      	adds	r3, r7, r5
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d166      	bne.n	8000bfa <sd_list_directory_recursive+0x14a>
 8000b2c:	4b39      	ldr	r3, [pc, #228]	@ (8000c14 <sd_list_directory_recursive+0x164>)
 8000b2e:	22f6      	movs	r2, #246	@ 0xf6
 8000b30:	0092      	lsls	r2, r2, #2
 8000b32:	189b      	adds	r3, r3, r2
 8000b34:	19db      	adds	r3, r3, r7
 8000b36:	7a5b      	ldrb	r3, [r3, #9]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d05e      	beq.n	8000bfa <sd_list_directory_recursive+0x14a>

		const char *name = (*fno.lfname) ? fno.lfname : fno.fname;
 8000b3c:	4b35      	ldr	r3, [pc, #212]	@ (8000c14 <sd_list_directory_recursive+0x164>)
 8000b3e:	189b      	adds	r3, r3, r2
 8000b40:	19db      	adds	r3, r3, r7
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d004      	beq.n	8000b54 <sd_list_directory_recursive+0xa4>
 8000b4a:	4b32      	ldr	r3, [pc, #200]	@ (8000c14 <sd_list_directory_recursive+0x164>)
 8000b4c:	189b      	adds	r3, r3, r2
 8000b4e:	19db      	adds	r3, r3, r7
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	e003      	b.n	8000b5c <sd_list_directory_recursive+0xac>
 8000b54:	23c4      	movs	r3, #196	@ 0xc4
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	3309      	adds	r3, #9
 8000b5c:	21f4      	movs	r1, #244	@ 0xf4
 8000b5e:	0089      	lsls	r1, r1, #2
 8000b60:	187a      	adds	r2, r7, r1
 8000b62:	6013      	str	r3, [r2, #0]

		if (fno.fattrib & AM_DIR) {
 8000b64:	4b2b      	ldr	r3, [pc, #172]	@ (8000c14 <sd_list_directory_recursive+0x164>)
 8000b66:	22f6      	movs	r2, #246	@ 0xf6
 8000b68:	0092      	lsls	r2, r2, #2
 8000b6a:	189b      	adds	r3, r3, r2
 8000b6c:	19db      	adds	r3, r3, r7
 8000b6e:	7a1b      	ldrb	r3, [r3, #8]
 8000b70:	001a      	movs	r2, r3
 8000b72:	2310      	movs	r3, #16
 8000b74:	4013      	ands	r3, r2
 8000b76:	d02d      	beq.n	8000bd4 <sd_list_directory_recursive+0x124>
			if (strcmp(name, ".") && strcmp(name, "..")) {
 8000b78:	4a2a      	ldr	r2, [pc, #168]	@ (8000c24 <sd_list_directory_recursive+0x174>)
 8000b7a:	000c      	movs	r4, r1
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	0011      	movs	r1, r2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff fac0 	bl	8000108 <strcmp>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d0bd      	beq.n	8000b08 <sd_list_directory_recursive+0x58>
 8000b8c:	4a26      	ldr	r2, [pc, #152]	@ (8000c28 <sd_list_directory_recursive+0x178>)
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff fab7 	bl	8000108 <strcmp>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d0b4      	beq.n	8000b08 <sd_list_directory_recursive+0x58>
				printf("%*s ->(Folder) %s\r\n", depth * 2, "", name);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	0059      	lsls	r1, r3, #1
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8000c1c <sd_list_directory_recursive+0x16c>)
 8000ba8:	4820      	ldr	r0, [pc, #128]	@ (8000c2c <sd_list_directory_recursive+0x17c>)
 8000baa:	f009 fffb 	bl	800aba4 <iprintf>
				char newpath[128];
				snprintf(newpath, sizeof(newpath), "%s/%s", path, name);
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c30 <sd_list_directory_recursive+0x180>)
 8000bb2:	2508      	movs	r5, #8
 8000bb4:	1978      	adds	r0, r7, r5
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	000b      	movs	r3, r1
 8000bbe:	2180      	movs	r1, #128	@ 0x80
 8000bc0:	f00a f860 	bl	800ac84 <sniprintf>
				sd_list_directory_recursive(newpath, depth + 1);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	197b      	adds	r3, r7, r5
 8000bca:	0011      	movs	r1, r2
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff ff6f 	bl	8000ab0 <sd_list_directory_recursive>
 8000bd2:	e799      	b.n	8000b08 <sd_list_directory_recursive+0x58>
			}
		} else {
			printf("%*s 	->(Archivo) %s (%lu bytes)\r\n", depth * 2, "", name, (unsigned long)fno.fsize);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	0059      	lsls	r1, r3, #1
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <sd_list_directory_recursive+0x164>)
 8000bda:	22f6      	movs	r2, #246	@ 0xf6
 8000bdc:	0092      	lsls	r2, r2, #2
 8000bde:	189b      	adds	r3, r3, r2
 8000be0:	19db      	adds	r3, r3, r7
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	22f4      	movs	r2, #244	@ 0xf4
 8000be6:	0092      	lsls	r2, r2, #2
 8000be8:	18ba      	adds	r2, r7, r2
 8000bea:	6814      	ldr	r4, [r2, #0]
 8000bec:	4a0b      	ldr	r2, [pc, #44]	@ (8000c1c <sd_list_directory_recursive+0x16c>)
 8000bee:	4811      	ldr	r0, [pc, #68]	@ (8000c34 <sd_list_directory_recursive+0x184>)
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	0023      	movs	r3, r4
 8000bf4:	f009 ffd6 	bl	800aba4 <iprintf>
	while (1) {
 8000bf8:	e786      	b.n	8000b08 <sd_list_directory_recursive+0x58>
		}
	}
	f_closedir(&dir);
 8000bfa:	23d4      	movs	r3, #212	@ 0xd4
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	0018      	movs	r0, r3
 8000c02:	f008 fcab 	bl	800955c <f_closedir>
}
 8000c06:	46bd      	mov	sp, r7
 8000c08:	23f6      	movs	r3, #246	@ 0xf6
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	449d      	add	sp, r3
 8000c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c10:	fffffc20 	.word	0xfffffc20
 8000c14:	fffffdb0 	.word	0xfffffdb0
 8000c18:	000003d7 	.word	0x000003d7
 8000c1c:	0800c024 	.word	0x0800c024
 8000c20:	0800c028 	.word	0x0800c028
 8000c24:	0800c044 	.word	0x0800c044
 8000c28:	0800c048 	.word	0x0800c048
 8000c2c:	0800c04c 	.word	0x0800c04c
 8000c30:	0800c060 	.word	0x0800c060
 8000c34:	0800c068 	.word	0x0800c068

08000c38 <sd_list_files>:

void sd_list_files(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	printf("->Files on SD Card:\r\n");
 8000c3c:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <sd_list_files+0x24>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f00a f816 	bl	800ac70 <puts>
	sd_list_directory_recursive(sd_path, 0);
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <sd_list_files+0x28>)
 8000c46:	2100      	movs	r1, #0
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff ff31 	bl	8000ab0 <sd_list_directory_recursive>
	printf("\r\n\r\n");
 8000c4e:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <sd_list_files+0x2c>)
 8000c50:	0018      	movs	r0, r3
 8000c52:	f00a f80d 	bl	800ac70 <puts>
}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	0800c08c 	.word	0x0800c08c
 8000c60:	20000084 	.word	0x20000084
 8000c64:	0800c0a4 	.word	0x0800c0a4

08000c68 <sd_find_in_directory>:

char* sd_find_in_directory(const char *path, const char *target_name, int depth) {
 8000c68:	b5b0      	push	{r4, r5, r7, lr}
 8000c6a:	4c50      	ldr	r4, [pc, #320]	@ (8000dac <sd_find_in_directory+0x144>)
 8000c6c:	44a5      	add	sp, r4
 8000c6e:	af02      	add	r7, sp, #8
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
	DIR dir;
	FILINFO fno;
	char lfn[256];
	static char found_path[128];  // Ruta que se devuelve si se encuentra

	fno.lfname = lfn;
 8000c76:	4b4e      	ldr	r3, [pc, #312]	@ (8000db0 <sd_find_in_directory+0x148>)
 8000c78:	21d8      	movs	r1, #216	@ 0xd8
 8000c7a:	0089      	lsls	r1, r1, #2
 8000c7c:	185b      	adds	r3, r3, r1
 8000c7e:	19db      	adds	r3, r3, r7
 8000c80:	2210      	movs	r2, #16
 8000c82:	18ba      	adds	r2, r7, r2
 8000c84:	619a      	str	r2, [r3, #24]
	fno.lfsize = sizeof(lfn);
 8000c86:	4b4a      	ldr	r3, [pc, #296]	@ (8000db0 <sd_find_in_directory+0x148>)
 8000c88:	185b      	adds	r3, r3, r1
 8000c8a:	19db      	adds	r3, r3, r7
 8000c8c:	2280      	movs	r2, #128	@ 0x80
 8000c8e:	0052      	lsls	r2, r2, #1
 8000c90:	61da      	str	r2, [r3, #28]

	FRESULT res = f_opendir(&dir, path);
 8000c92:	4d48      	ldr	r5, [pc, #288]	@ (8000db4 <sd_find_in_directory+0x14c>)
 8000c94:	197c      	adds	r4, r7, r5
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	2398      	movs	r3, #152	@ 0x98
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f008 fb9d 	bl	80093e0 <f_opendir>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) {
 8000caa:	197b      	adds	r3, r7, r5
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d008      	beq.n	8000cc4 <sd_find_in_directory+0x5c>
		printf("%*s[ERR] Cannot open: %s\r\n", depth * 2, "", path);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0059      	lsls	r1, r3, #1
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4a3f      	ldr	r2, [pc, #252]	@ (8000db8 <sd_find_in_directory+0x150>)
 8000cba:	4840      	ldr	r0, [pc, #256]	@ (8000dbc <sd_find_in_directory+0x154>)
 8000cbc:	f009 ff72 	bl	800aba4 <iprintf>
		return NULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e06c      	b.n	8000d9e <sd_find_in_directory+0x136>
	}

	while (1) {
		res = f_readdir(&dir, &fno);
 8000cc4:	4d3b      	ldr	r5, [pc, #236]	@ (8000db4 <sd_find_in_directory+0x14c>)
 8000cc6:	197c      	adds	r4, r7, r5
 8000cc8:	2388      	movs	r3, #136	@ 0x88
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	18fa      	adds	r2, r7, r3
 8000cce:	2398      	movs	r3, #152	@ 0x98
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	0011      	movs	r1, r2
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f008 fc72 	bl	80095c0 <f_readdir>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK || fno.fname[0] == 0) break;
 8000ce0:	197b      	adds	r3, r7, r5
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d153      	bne.n	8000d90 <sd_find_in_directory+0x128>
 8000ce8:	4b31      	ldr	r3, [pc, #196]	@ (8000db0 <sd_find_in_directory+0x148>)
 8000cea:	22d8      	movs	r2, #216	@ 0xd8
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	189b      	adds	r3, r3, r2
 8000cf0:	19db      	adds	r3, r3, r7
 8000cf2:	7a5b      	ldrb	r3, [r3, #9]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d04b      	beq.n	8000d90 <sd_find_in_directory+0x128>

		const char *name = (*fno.lfname) ? fno.lfname : fno.fname;
 8000cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000db0 <sd_find_in_directory+0x148>)
 8000cfa:	189b      	adds	r3, r3, r2
 8000cfc:	19db      	adds	r3, r3, r7
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d004      	beq.n	8000d10 <sd_find_in_directory+0xa8>
 8000d06:	4b2a      	ldr	r3, [pc, #168]	@ (8000db0 <sd_find_in_directory+0x148>)
 8000d08:	189b      	adds	r3, r3, r2
 8000d0a:	19db      	adds	r3, r3, r7
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	e003      	b.n	8000d18 <sd_find_in_directory+0xb0>
 8000d10:	2388      	movs	r3, #136	@ 0x88
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	3309      	adds	r3, #9
 8000d18:	21d6      	movs	r1, #214	@ 0xd6
 8000d1a:	0089      	lsls	r1, r1, #2
 8000d1c:	187a      	adds	r2, r7, r1
 8000d1e:	6013      	str	r3, [r2, #0]

		if (fno.fattrib & AM_DIR) {
 8000d20:	4b23      	ldr	r3, [pc, #140]	@ (8000db0 <sd_find_in_directory+0x148>)
 8000d22:	22d8      	movs	r2, #216	@ 0xd8
 8000d24:	0092      	lsls	r2, r2, #2
 8000d26:	189b      	adds	r3, r3, r2
 8000d28:	19db      	adds	r3, r3, r7
 8000d2a:	7a1b      	ldrb	r3, [r3, #8]
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	2310      	movs	r3, #16
 8000d30:	4013      	ands	r3, r2
 8000d32:	d0c7      	beq.n	8000cc4 <sd_find_in_directory+0x5c>
			if (strcmp(name, ".") && strcmp(name, "..")) {
 8000d34:	4a22      	ldr	r2, [pc, #136]	@ (8000dc0 <sd_find_in_directory+0x158>)
 8000d36:	000c      	movs	r4, r1
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	0011      	movs	r1, r2
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff f9e2 	bl	8000108 <strcmp>
 8000d44:	1e03      	subs	r3, r0, #0
 8000d46:	d0bd      	beq.n	8000cc4 <sd_find_in_directory+0x5c>
 8000d48:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc4 <sd_find_in_directory+0x15c>)
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	0011      	movs	r1, r2
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff f9d9 	bl	8000108 <strcmp>
 8000d56:	1e03      	subs	r3, r0, #0
 8000d58:	d0b4      	beq.n	8000cc4 <sd_find_in_directory+0x5c>
				if (strcmp(name, target_name) == 0) {
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	0011      	movs	r1, r2
 8000d62:	0018      	movs	r0, r3
 8000d64:	f7ff f9d0 	bl	8000108 <strcmp>
 8000d68:	1e03      	subs	r3, r0, #0
 8000d6a:	d1ab      	bne.n	8000cc4 <sd_find_in_directory+0x5c>
					snprintf(found_path, sizeof(found_path), "%s/%s", path, name);
 8000d6c:	68f9      	ldr	r1, [r7, #12]
 8000d6e:	4a16      	ldr	r2, [pc, #88]	@ (8000dc8 <sd_find_in_directory+0x160>)
 8000d70:	4816      	ldr	r0, [pc, #88]	@ (8000dcc <sd_find_in_directory+0x164>)
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	000b      	movs	r3, r1
 8000d7a:	2180      	movs	r1, #128	@ 0x80
 8000d7c:	f009 ff82 	bl	800ac84 <sniprintf>
					f_closedir(&dir);
 8000d80:	2398      	movs	r3, #152	@ 0x98
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	0018      	movs	r0, r3
 8000d88:	f008 fbe8 	bl	800955c <f_closedir>
					return found_path;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <sd_find_in_directory+0x164>)
 8000d8e:	e006      	b.n	8000d9e <sd_find_in_directory+0x136>
			}
		}
	}


	f_closedir(&dir);
 8000d90:	2398      	movs	r3, #152	@ 0x98
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	0018      	movs	r0, r3
 8000d98:	f008 fbe0 	bl	800955c <f_closedir>
	return NULL;  // Si no se encuentra nada
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	0018      	movs	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	23d8      	movs	r3, #216	@ 0xd8
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	449d      	add	sp, r3
 8000da8:	bdb0      	pop	{r4, r5, r7, pc}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	fffffc98 	.word	0xfffffc98
 8000db0:	fffffdb0 	.word	0xfffffdb0
 8000db4:	0000035f 	.word	0x0000035f
 8000db8:	0800c024 	.word	0x0800c024
 8000dbc:	0800c028 	.word	0x0800c028
 8000dc0:	0800c044 	.word	0x0800c044
 8000dc4:	0800c048 	.word	0x0800c048
 8000dc8:	0800c060 	.word	0x0800c060
 8000dcc:	200002b8 	.word	0x200002b8

08000dd0 <sd_write_file_with_directory>:

uint8_t sd_write_file_with_directory(const char *filename, const char *text, const char *folder_path) {
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b0c6      	sub	sp, #280	@ 0x118
 8000dd4:	af02      	add	r7, sp, #8
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
    char full_path[256];
    snprintf(full_path, sizeof(full_path), "/%s/%s", folder_path, filename);
 8000ddc:	687c      	ldr	r4, [r7, #4]
 8000dde:	4a0b      	ldr	r2, [pc, #44]	@ (8000e0c <sd_write_file_with_directory+0x3c>)
 8000de0:	2380      	movs	r3, #128	@ 0x80
 8000de2:	0059      	lsls	r1, r3, #1
 8000de4:	2510      	movs	r5, #16
 8000de6:	1978      	adds	r0, r7, r5
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	0023      	movs	r3, r4
 8000dee:	f009 ff49 	bl	800ac84 <sniprintf>
    return sd_write_file(full_path, text);
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	197b      	adds	r3, r7, r5
 8000df6:	0011      	movs	r1, r2
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff fd77 	bl	80008ec <sd_write_file>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	b2db      	uxtb	r3, r3
}
 8000e02:	0018      	movs	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b044      	add	sp, #272	@ 0x110
 8000e08:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	0800c0a8 	.word	0x0800c0a8

08000e10 <sd_append_file_with_directory>:

uint8_t sd_append_file_with_directory(const char *filename, const char *text, const char *folder_path) {
 8000e10:	b5b0      	push	{r4, r5, r7, lr}
 8000e12:	b0c6      	sub	sp, #280	@ 0x118
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
    char full_path[256];
    snprintf(full_path, sizeof(full_path), "/%s/%s", folder_path, filename);
 8000e1c:	687c      	ldr	r4, [r7, #4]
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e4c <sd_append_file_with_directory+0x3c>)
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	0059      	lsls	r1, r3, #1
 8000e24:	2510      	movs	r5, #16
 8000e26:	1978      	adds	r0, r7, r5
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	0023      	movs	r3, r4
 8000e2e:	f009 ff29 	bl	800ac84 <sniprintf>
    return sd_append_file(full_path, text);
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	197b      	adds	r3, r7, r5
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff fda5 	bl	8000988 <sd_append_file>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	b2db      	uxtb	r3, r3
}
 8000e42:	0018      	movs	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b044      	add	sp, #272	@ 0x110
 8000e48:	bdb0      	pop	{r4, r5, r7, pc}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	0800c0a8 	.word	0x0800c0a8

08000e50 <sd_file_exists_in_directory>:

uint8_t sd_file_exists_in_directory(const char *folder, const char *folder_path) {
 8000e50:	b5b0      	push	{r4, r5, r7, lr}
 8000e52:	4c41      	ldr	r4, [pc, #260]	@ (8000f58 <sd_file_exists_in_directory+0x108>)
 8000e54:	44a5      	add	sp, r4
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
    DIR dir;
    FILINFO fno;
    char lfn[256];

    fno.lfname = lfn;
 8000e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f5c <sd_file_exists_in_directory+0x10c>)
 8000e5e:	21d6      	movs	r1, #214	@ 0xd6
 8000e60:	0089      	lsls	r1, r1, #2
 8000e62:	185b      	adds	r3, r3, r1
 8000e64:	19db      	adds	r3, r3, r7
 8000e66:	2208      	movs	r2, #8
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	619a      	str	r2, [r3, #24]
    fno.lfsize = sizeof(lfn);
 8000e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f5c <sd_file_exists_in_directory+0x10c>)
 8000e6e:	185b      	adds	r3, r3, r1
 8000e70:	19db      	adds	r3, r3, r7
 8000e72:	2280      	movs	r2, #128	@ 0x80
 8000e74:	0052      	lsls	r2, r2, #1
 8000e76:	61da      	str	r2, [r3, #28]

    FRESULT res = f_opendir(&dir, folder);
 8000e78:	4d39      	ldr	r5, [pc, #228]	@ (8000f60 <sd_file_exists_in_directory+0x110>)
 8000e7a:	197c      	adds	r4, r7, r5
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	2394      	movs	r3, #148	@ 0x94
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	0011      	movs	r1, r2
 8000e86:	0018      	movs	r0, r3
 8000e88:	f008 faaa 	bl	80093e0 <f_opendir>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	7023      	strb	r3, [r4, #0]
    if (res != FR_OK) {
 8000e90:	197b      	adds	r3, r7, r5
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d008      	beq.n	8000eaa <sd_file_exists_in_directory+0x5a>
        printf("[ERR] Cannot open directory: %s (Error: %d)\r\n", folder, res);
 8000e98:	197b      	adds	r3, r7, r5
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	4b31      	ldr	r3, [pc, #196]	@ (8000f64 <sd_file_exists_in_directory+0x114>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f009 fe7f 	bl	800aba4 <iprintf>
        return -1;
 8000ea6:	23ff      	movs	r3, #255	@ 0xff
 8000ea8:	e04f      	b.n	8000f4a <sd_file_exists_in_directory+0xfa>
    }

    while (1) {
        res = f_readdir(&dir, &fno);
 8000eaa:	4d2d      	ldr	r5, [pc, #180]	@ (8000f60 <sd_file_exists_in_directory+0x110>)
 8000eac:	197c      	adds	r4, r7, r5
 8000eae:	2384      	movs	r3, #132	@ 0x84
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	18fa      	adds	r2, r7, r3
 8000eb4:	2394      	movs	r3, #148	@ 0x94
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	0011      	movs	r1, r2
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f008 fb7f 	bl	80095c0 <f_readdir>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	7023      	strb	r3, [r4, #0]
        if (res != FR_OK || fno.fname[0] == 0) break;
 8000ec6:	197b      	adds	r3, r7, r5
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d136      	bne.n	8000f3c <sd_file_exists_in_directory+0xec>
 8000ece:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <sd_file_exists_in_directory+0x10c>)
 8000ed0:	22d6      	movs	r2, #214	@ 0xd6
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	189b      	adds	r3, r3, r2
 8000ed6:	19db      	adds	r3, r3, r7
 8000ed8:	7a5b      	ldrb	r3, [r3, #9]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d02e      	beq.n	8000f3c <sd_file_exists_in_directory+0xec>

        const char *name = (*fno.lfname) ? fno.lfname : fno.fname;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <sd_file_exists_in_directory+0x10c>)
 8000ee0:	189b      	adds	r3, r3, r2
 8000ee2:	19db      	adds	r3, r3, r7
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d004      	beq.n	8000ef6 <sd_file_exists_in_directory+0xa6>
 8000eec:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <sd_file_exists_in_directory+0x10c>)
 8000eee:	189b      	adds	r3, r3, r2
 8000ef0:	19db      	adds	r3, r3, r7
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	e003      	b.n	8000efe <sd_file_exists_in_directory+0xae>
 8000ef6:	2384      	movs	r3, #132	@ 0x84
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	3309      	adds	r3, #9
 8000efe:	21d4      	movs	r1, #212	@ 0xd4
 8000f00:	0089      	lsls	r1, r1, #2
 8000f02:	187a      	adds	r2, r7, r1
 8000f04:	6013      	str	r3, [r2, #0]

        if (!(fno.fattrib & AM_DIR)) {
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <sd_file_exists_in_directory+0x10c>)
 8000f08:	22d6      	movs	r2, #214	@ 0xd6
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	189b      	adds	r3, r3, r2
 8000f0e:	19db      	adds	r3, r3, r7
 8000f10:	7a1b      	ldrb	r3, [r3, #8]
 8000f12:	001a      	movs	r2, r3
 8000f14:	2310      	movs	r3, #16
 8000f16:	4013      	ands	r3, r2
 8000f18:	d1c7      	bne.n	8000eaa <sd_file_exists_in_directory+0x5a>
            if (strcmp(name, folder_path) == 0) {
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	0011      	movs	r1, r2
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff f8f0 	bl	8000108 <strcmp>
 8000f28:	1e03      	subs	r3, r0, #0
 8000f2a:	d1be      	bne.n	8000eaa <sd_file_exists_in_directory+0x5a>
                f_closedir(&dir);
 8000f2c:	2394      	movs	r3, #148	@ 0x94
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	0018      	movs	r0, r3
 8000f34:	f008 fb12 	bl	800955c <f_closedir>
                return 1;  // File found
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e006      	b.n	8000f4a <sd_file_exists_in_directory+0xfa>
            }
        }
    }

    f_closedir(&dir);
 8000f3c:	2394      	movs	r3, #148	@ 0x94
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	0018      	movs	r0, r3
 8000f44:	f008 fb0a 	bl	800955c <f_closedir>
    return 0;  // File not found
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	23d6      	movs	r3, #214	@ 0xd6
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	449d      	add	sp, r3
 8000f54:	bdb0      	pop	{r4, r5, r7, pc}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	fffffca8 	.word	0xfffffca8
 8000f5c:	fffffdb0 	.word	0xfffffdb0
 8000f60:	00000357 	.word	0x00000357
 8000f64:	0800c0b0 	.word	0x0800c0b0

08000f68 <get_folder_name_and_signal_led>:

//Output can be either "Test" or "Flight", PC8 led as high for "Test" and low for "Flight"
const char* get_folder_name_and_signal_led() {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	  uint8_t read; //variable para la lectura de PC0
	  const char *writingFolder; //Array para nombre de carpeta en la que se trabajara

	  read = (GPIOC->IDR & (1<<0));	//resultado de estado de PC0
 8000f6e:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <get_folder_name_and_signal_led+0x4c>)
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	1cfb      	adds	r3, r7, #3
 8000f76:	2101      	movs	r1, #1
 8000f78:	400a      	ands	r2, r1
 8000f7a:	701a      	strb	r2, [r3, #0]

	  //Switch a tierra selecciona modo de vuelo
	  //Switch a voltaje selecciona modo de vuelo y prende led de señal
	  if (read == 0) {
 8000f7c:	1cfb      	adds	r3, r7, #3
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d108      	bne.n	8000f96 <get_folder_name_and_signal_led+0x2e>
	      GPIOC->ODR &= ~(1 << 8);
 8000f84:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <get_folder_name_and_signal_led+0x4c>)
 8000f86:	695a      	ldr	r2, [r3, #20]
 8000f88:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <get_folder_name_and_signal_led+0x4c>)
 8000f8a:	490b      	ldr	r1, [pc, #44]	@ (8000fb8 <get_folder_name_and_signal_led+0x50>)
 8000f8c:	400a      	ands	r2, r1
 8000f8e:	615a      	str	r2, [r3, #20]
	      writingFolder = "Flight";
 8000f90:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <get_folder_name_and_signal_led+0x54>)
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	e008      	b.n	8000fa8 <get_folder_name_and_signal_led+0x40>
	  } else {
	      GPIOC->ODR |= (1 << 8);
 8000f96:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <get_folder_name_and_signal_led+0x4c>)
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <get_folder_name_and_signal_led+0x4c>)
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	0049      	lsls	r1, r1, #1
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	615a      	str	r2, [r3, #20]
	      writingFolder = "Test";
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <get_folder_name_and_signal_led+0x58>)
 8000fa6:	607b      	str	r3, [r7, #4]
	  }

	  return writingFolder;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	0018      	movs	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b002      	add	sp, #8
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	48000800 	.word	0x48000800
 8000fb8:	fffffeff 	.word	0xfffffeff
 8000fbc:	0800c0e0 	.word	0x0800c0e0
 8000fc0:	0800c0e8 	.word	0x0800c0e8

08000fc4 <get_folder_path>:

void get_folder_path(char *folder_path, size_t size, const char *writingFolder) {
 8000fc4:	b5b0      	push	{r4, r5, r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
    const char *found = sd_find_in_directory("/", writingFolder, 0);
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <get_folder_path+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f7ff fe46 	bl	8000c68 <sd_find_in_directory>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	617b      	str	r3, [r7, #20]
    if (found) {
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <get_folder_path+0x30>
        snprintf(folder_path, size, "%s", found);
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8001058 <get_folder_path+0x94>)
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f009 fe49 	bl	800ac84 <sniprintf>
            printf("Error al crear carpeta %s: %d\r\n", folder_path, res);
            // En caso de error, podrías asignar un fallback o dejarla como "/"
            snprintf(folder_path, size, "/");
        }
    }
}
 8000ff2:	e02a      	b.n	800104a <get_folder_path+0x86>
        snprintf(folder_path, size, "/%s", writingFolder);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a19      	ldr	r2, [pc, #100]	@ (800105c <get_folder_path+0x98>)
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f009 fe42 	bl	800ac84 <sniprintf>
        FRESULT res = sd_create_directory(folder_path);
 8001000:	2513      	movs	r5, #19
 8001002:	197c      	adds	r4, r7, r5
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	0018      	movs	r0, r3
 8001008:	f7ff fd2c 	bl	8000a64 <sd_create_directory>
 800100c:	0003      	movs	r3, r0
 800100e:	7023      	strb	r3, [r4, #0]
        if (res == FR_OK || res == FR_EXIST) {
 8001010:	197b      	adds	r3, r7, r5
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <get_folder_path+0x5c>
 8001018:	197b      	adds	r3, r7, r5
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b08      	cmp	r3, #8
 800101e:	d106      	bne.n	800102e <get_folder_path+0x6a>
            printf("Carpeta creada o ya existente: %s\r\n", folder_path);
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <get_folder_path+0x9c>)
 8001024:	0011      	movs	r1, r2
 8001026:	0018      	movs	r0, r3
 8001028:	f009 fdbc 	bl	800aba4 <iprintf>
}
 800102c:	e00d      	b.n	800104a <get_folder_path+0x86>
            printf("Error al crear carpeta %s: %d\r\n", folder_path, res);
 800102e:	2313      	movs	r3, #19
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	68f9      	ldr	r1, [r7, #12]
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <get_folder_path+0xa0>)
 8001038:	0018      	movs	r0, r3
 800103a:	f009 fdb3 	bl	800aba4 <iprintf>
            snprintf(folder_path, size, "/");
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <get_folder_path+0x90>)
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	0018      	movs	r0, r3
 8001046:	f009 fe1d 	bl	800ac84 <sniprintf>
}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b006      	add	sp, #24
 8001050:	bdb0      	pop	{r4, r5, r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	0800c0f0 	.word	0x0800c0f0
 8001058:	0800c0f4 	.word	0x0800c0f4
 800105c:	0800c0f8 	.word	0x0800c0f8
 8001060:	0800c0fc 	.word	0x0800c0fc
 8001064:	0800c120 	.word	0x0800c120

08001068 <get_file_name>:

void get_file_name(char *fileName, size_t size, const char *writingFolder, const char *folder_path) {
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b089      	sub	sp, #36	@ 0x24
 800106c:	af02      	add	r7, sp, #8
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
    uint32_t iteration = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
    uint8_t fileNameGenerated = 0;
 800107a:	2313      	movs	r3, #19
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]

    do {
        snprintf(fileName, size, "%s_%lu.csv", writingFolder, iteration);
 8001082:	687c      	ldr	r4, [r7, #4]
 8001084:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <get_file_name+0x60>)
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	0023      	movs	r3, r4
 8001090:	f009 fdf8 	bl	800ac84 <sniprintf>

        if (sd_file_exists_in_directory(folder_path, fileName) == 0) {
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	0011      	movs	r1, r2
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff fed8 	bl	8000e50 <sd_file_exists_in_directory>
 80010a0:	1e03      	subs	r3, r0, #0
 80010a2:	d104      	bne.n	80010ae <get_file_name+0x46>
            fileNameGenerated = 1;  // Archivo no existe, lo puedes usar
 80010a4:	2313      	movs	r3, #19
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	e002      	b.n	80010b4 <get_file_name+0x4c>
        } else {
            iteration++;  // Archivo existe, intenta con el siguiente
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
        }
    } while (!fileNameGenerated);
 80010b4:	2313      	movs	r3, #19
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0e1      	beq.n	8001082 <get_file_name+0x1a>
}
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	46c0      	nop			@ (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b007      	add	sp, #28
 80010c6:	bd90      	pop	{r4, r7, pc}
 80010c8:	0800c140 	.word	0x0800c140

080010cc <sd_create_and_write_file>:

// Función condensada para montar, generar carpeta y escribir archivo
void sd_create_and_write_file(char *fileName, size_t fileNameSize,
                              char *folderPath, size_t folderPathSize,
                              const char *initialText) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	603b      	str	r3, [r7, #0]
    const char *writingFolder;

    // Determina carpeta y señaliza LED
    writingFolder = get_folder_name_and_signal_led();  // "Test" o "Flight"
 80010da:	f7ff ff45 	bl	8000f68 <get_folder_name_and_signal_led>
 80010de:	0003      	movs	r3, r0
 80010e0:	617b      	str	r3, [r7, #20]

    // Monta SD y lista archivos (opcional, según necesidad)
    sd_mount();
 80010e2:	f7ff fb0d 	bl	8000700 <sd_mount>
    sd_list_files();
 80010e6:	f7ff fda7 	bl	8000c38 <sd_list_files>

    // Obtiene ruta y nombre del archivo
    get_folder_path(folderPath, folderPathSize, writingFolder);
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	6839      	ldr	r1, [r7, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff ff67 	bl	8000fc4 <get_folder_path>
    get_file_name(fileName, fileNameSize, writingFolder, folderPath);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f7ff ffb3 	bl	8001068 <get_file_name>

    // Escribe texto inicial en el archivo
    sd_write_file_with_directory(fileName, initialText, folderPath);
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6a39      	ldr	r1, [r7, #32]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff fe61 	bl	8000dd0 <sd_write_file_with_directory>
}
 800110e:	46c0      	nop			@ (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b006      	add	sp, #24
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_SPI_TxCpltCallback>:

#if USE_DMA
volatile int dma_tx_done = 0;
volatile int dma_rx_done = 0;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	if (hspi == &SD_SPI_HANDLE) dma_tx_done = 1;
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_SPI_TxCpltCallback+0x20>)
 8001124:	429a      	cmp	r2, r3
 8001126:	d102      	bne.n	800112e <HAL_SPI_TxCpltCallback+0x16>
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <HAL_SPI_TxCpltCallback+0x24>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]
}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b002      	add	sp, #8
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	20000544 	.word	0x20000544
 800113c:	20000338 	.word	0x20000338

08001140 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) dma_rx_done = 1;
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_SPI_TxRxCpltCallback+0x20>)
 800114c:	429a      	cmp	r2, r3
 800114e:	d102      	bne.n	8001156 <HAL_SPI_TxRxCpltCallback+0x16>
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <HAL_SPI_TxRxCpltCallback+0x24>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]
}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	46bd      	mov	sp, r7
 800115a:	b002      	add	sp, #8
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	20000544 	.word	0x20000544
 8001164:	2000033c 	.word	0x2000033c

08001168 <SD_TransmitByte>:
#endif

static void SD_TransmitByte(uint8_t data) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	0002      	movs	r2, r0
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 8001174:	2301      	movs	r3, #1
 8001176:	425b      	negs	r3, r3
 8001178:	1df9      	adds	r1, r7, #7
 800117a:	4804      	ldr	r0, [pc, #16]	@ (800118c <SD_TransmitByte+0x24>)
 800117c:	2201      	movs	r2, #1
 800117e:	f002 f865 	bl	800324c <HAL_SPI_Transmit>
}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b002      	add	sp, #8
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	20000544 	.word	0x20000544

08001190 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	22ff      	movs	r2, #255	@ 0xff
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	1dbb      	adds	r3, r7, #6
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 80011a2:	1dba      	adds	r2, r7, #6
 80011a4:	1df9      	adds	r1, r7, #7
 80011a6:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <SD_ReceiveByte+0x30>)
 80011a8:	2301      	movs	r3, #1
 80011aa:	425b      	negs	r3, r3
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2301      	movs	r3, #1
 80011b0:	f002 f9ac 	bl	800350c <HAL_SPI_TransmitReceive>
    return data;
 80011b4:	1dbb      	adds	r3, r7, #6
 80011b6:	781b      	ldrb	r3, [r3, #0]
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b002      	add	sp, #8
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000544 	.word	0x20000544

080011c4 <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	000a      	movs	r2, r1
 80011ce:	1cbb      	adds	r3, r7, #2
 80011d0:	801a      	strh	r2, [r3, #0]
#if USE_DMA
    dma_tx_done = 0;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <SD_TransmitBuffer+0x38>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
 80011d8:	1cbb      	adds	r3, r7, #2
 80011da:	881a      	ldrh	r2, [r3, #0]
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <SD_TransmitBuffer+0x3c>)
 80011e0:	0018      	movs	r0, r3
 80011e2:	f002 fb75 	bl	80038d0 <HAL_SPI_Transmit_DMA>
    while (!dma_tx_done);
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <SD_TransmitBuffer+0x38>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0fb      	beq.n	80011e8 <SD_TransmitBuffer+0x24>
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
#endif
}
 80011f0:	46c0      	nop			@ (mov r8, r8)
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b002      	add	sp, #8
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	20000338 	.word	0x20000338
 8001200:	20000544 	.word	0x20000544

08001204 <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	000a      	movs	r2, r1
 800120e:	1cbb      	adds	r3, r7, #2
 8001210:	801a      	strh	r2, [r3, #0]
#if USE_DMA
	static uint8_t tx_dummy[512];
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	e007      	b.n	8001228 <SD_ReceiveBuffer+0x24>
 8001218:	4a10      	ldr	r2, [pc, #64]	@ (800125c <SD_ReceiveBuffer+0x58>)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	18d3      	adds	r3, r2, r3
 800121e:	22ff      	movs	r2, #255	@ 0xff
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3301      	adds	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	1cbb      	adds	r3, r7, #2
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	429a      	cmp	r2, r3
 8001230:	dbf2      	blt.n	8001218 <SD_ReceiveBuffer+0x14>
    dma_rx_done = 0;
 8001232:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <SD_ReceiveBuffer+0x5c>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_dummy, buffer, len);
 8001238:	1cbb      	adds	r3, r7, #2
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4907      	ldr	r1, [pc, #28]	@ (800125c <SD_ReceiveBuffer+0x58>)
 8001240:	4808      	ldr	r0, [pc, #32]	@ (8001264 <SD_ReceiveBuffer+0x60>)
 8001242:	f002 fc47 	bl	8003ad4 <HAL_SPI_TransmitReceive_DMA>
    while (!dma_rx_done);
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <SD_ReceiveBuffer+0x5c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0fb      	beq.n	8001248 <SD_ReceiveBuffer+0x44>
#else
    for (uint16_t i = 0; i < len; i++) {
        buffer[i] = SD_ReceiveByte();
    }
#endif
}
 8001250:	46c0      	nop			@ (mov r8, r8)
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b004      	add	sp, #16
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	20000344 	.word	0x20000344
 8001260:	2000033c 	.word	0x2000033c
 8001264:	20000544 	.word	0x20000544

08001268 <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 800126e:	f000 fe4b 	bl	8001f08 <HAL_GetTick>
 8001272:	0003      	movs	r3, r0
 8001274:	33f5      	adds	r3, #245	@ 0xf5
 8001276:	33ff      	adds	r3, #255	@ 0xff
 8001278:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 800127a:	1cfc      	adds	r4, r7, #3
 800127c:	f7ff ff88 	bl	8001190 <SD_ReceiveByte>
 8001280:	0003      	movs	r3, r0
 8001282:	7023      	strb	r3, [r4, #0]
        if (resp == 0xFF) return SD_OK;
 8001284:	1cfb      	adds	r3, r7, #3
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2bff      	cmp	r3, #255	@ 0xff
 800128a:	d101      	bne.n	8001290 <SD_WaitReady+0x28>
 800128c:	2300      	movs	r3, #0
 800128e:	e006      	b.n	800129e <SD_WaitReady+0x36>
    } while (HAL_GetTick() < timeout);
 8001290:	f000 fe3a 	bl	8001f08 <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4293      	cmp	r3, r2
 800129a:	d8ee      	bhi.n	800127a <SD_WaitReady+0x12>
    return SD_ERROR;
 800129c:	2301      	movs	r3, #1
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b003      	add	sp, #12
 80012a4:	bd90      	pop	{r4, r7, pc}

080012a6 <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 80012a6:	b5b0      	push	{r4, r5, r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	0011      	movs	r1, r2
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	1c02      	adds	r2, r0, #0
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	1dbb      	adds	r3, r7, #6
 80012b8:	1c0a      	adds	r2, r1, #0
 80012ba:	701a      	strb	r2, [r3, #0]
    uint8_t response, retry = 0xFF;
 80012bc:	230f      	movs	r3, #15
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	22ff      	movs	r2, #255	@ 0xff
 80012c2:	701a      	strb	r2, [r3, #0]

    SD_WaitReady();
 80012c4:	f7ff ffd0 	bl	8001268 <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 80012c8:	1dfb      	adds	r3, r7, #7
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2240      	movs	r2, #64	@ 0x40
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff ff48 	bl	8001168 <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	0e1b      	lsrs	r3, r3, #24
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff ff42 	bl	8001168 <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	0c1b      	lsrs	r3, r3, #16
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7ff ff3c 	bl	8001168 <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	0a1b      	lsrs	r3, r3, #8
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7ff ff36 	bl	8001168 <SD_TransmitByte>
    SD_TransmitByte(arg);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff ff31 	bl	8001168 <SD_TransmitByte>
    SD_TransmitByte(crc);
 8001306:	1dbb      	adds	r3, r7, #6
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	0018      	movs	r0, r3
 800130c:	f7ff ff2c 	bl	8001168 <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 8001310:	250e      	movs	r5, #14
 8001312:	197c      	adds	r4, r7, r5
 8001314:	f7ff ff3c 	bl	8001190 <SD_ReceiveByte>
 8001318:	0003      	movs	r3, r0
 800131a:	7023      	strb	r3, [r4, #0]
    } while ((response & 0x80) && --retry);
 800131c:	197b      	adds	r3, r7, r5
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b25b      	sxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	da09      	bge.n	800133a <SD_SendCommand+0x94>
 8001326:	210f      	movs	r1, #15
 8001328:	187b      	adds	r3, r7, r1
 800132a:	187a      	adds	r2, r7, r1
 800132c:	7812      	ldrb	r2, [r2, #0]
 800132e:	3a01      	subs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
 8001332:	187b      	adds	r3, r7, r1
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1ea      	bne.n	8001310 <SD_SendCommand+0x6a>

    return response;
 800133a:	230e      	movs	r3, #14
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	781b      	ldrb	r3, [r3, #0]
}
 8001340:	0018      	movs	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	b004      	add	sp, #16
 8001346:	bdb0      	pop	{r4, r5, r7, pc}

08001348 <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
    return sdhc;
 800134c:	4b02      	ldr	r3, [pc, #8]	@ (8001358 <sd_is_sdhc+0x10>)
 800134e:	781b      	ldrb	r3, [r3, #0]
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	20000340 	.word	0x20000340

0800135c <SD_SPI_Init>:
uint8_t card_initialized = 0;

SD_Status SD_SPI_Init(void) {
 800135c:	b5b0      	push	{r4, r5, r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 8001362:	2390      	movs	r3, #144	@ 0x90
 8001364:	05db      	lsls	r3, r3, #23
 8001366:	2201      	movs	r2, #1
 8001368:	2110      	movs	r1, #16
 800136a:	0018      	movs	r0, r3
 800136c:	f001 fa3a 	bl	80027e4 <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 8001370:	230f      	movs	r3, #15
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	e008      	b.n	800138c <SD_SPI_Init+0x30>
 800137a:	20ff      	movs	r0, #255	@ 0xff
 800137c:	f7ff fef4 	bl	8001168 <SD_TransmitByte>
 8001380:	210f      	movs	r1, #15
 8001382:	187b      	adds	r3, r7, r1
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	187b      	adds	r3, r7, r1
 8001388:	3201      	adds	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
 800138c:	230f      	movs	r3, #15
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b09      	cmp	r3, #9
 8001394:	d9f1      	bls.n	800137a <SD_SPI_Init+0x1e>

    SD_CS_LOW();
 8001396:	2390      	movs	r3, #144	@ 0x90
 8001398:	05db      	lsls	r3, r3, #23
 800139a:	2200      	movs	r2, #0
 800139c:	2110      	movs	r1, #16
 800139e:	0018      	movs	r0, r3
 80013a0:	f001 fa20 	bl	80027e4 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 80013a4:	250e      	movs	r5, #14
 80013a6:	197c      	adds	r4, r7, r5
 80013a8:	2295      	movs	r2, #149	@ 0x95
 80013aa:	2100      	movs	r1, #0
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff ff7a 	bl	80012a6 <SD_SendCommand>
 80013b2:	0003      	movs	r3, r0
 80013b4:	7023      	strb	r3, [r4, #0]
    SD_CS_HIGH();
 80013b6:	2390      	movs	r3, #144	@ 0x90
 80013b8:	05db      	lsls	r3, r3, #23
 80013ba:	2201      	movs	r2, #1
 80013bc:	2110      	movs	r1, #16
 80013be:	0018      	movs	r0, r3
 80013c0:	f001 fa10 	bl	80027e4 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 80013c4:	20ff      	movs	r0, #255	@ 0xff
 80013c6:	f7ff fecf 	bl	8001168 <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 80013ca:	197b      	adds	r3, r7, r5
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d001      	beq.n	80013d6 <SD_SPI_Init+0x7a>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e0ec      	b.n	80015b0 <SD_SPI_Init+0x254>

    SD_CS_LOW();
 80013d6:	2390      	movs	r3, #144	@ 0x90
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	2200      	movs	r2, #0
 80013dc:	2110      	movs	r1, #16
 80013de:	0018      	movs	r0, r3
 80013e0:	f001 fa00 	bl	80027e4 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 80013e4:	230e      	movs	r3, #14
 80013e6:	18fc      	adds	r4, r7, r3
 80013e8:	23d5      	movs	r3, #213	@ 0xd5
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2287      	movs	r2, #135	@ 0x87
 80013ee:	0019      	movs	r1, r3
 80013f0:	2008      	movs	r0, #8
 80013f2:	f7ff ff58 	bl	80012a6 <SD_SendCommand>
 80013f6:	0003      	movs	r3, r0
 80013f8:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 80013fa:	230f      	movs	r3, #15
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e00d      	b.n	8001420 <SD_SPI_Init+0xc4>
 8001404:	250f      	movs	r5, #15
 8001406:	197b      	adds	r3, r7, r5
 8001408:	781c      	ldrb	r4, [r3, #0]
 800140a:	f7ff fec1 	bl	8001190 <SD_ReceiveByte>
 800140e:	0003      	movs	r3, r0
 8001410:	001a      	movs	r2, r3
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	551a      	strb	r2, [r3, r4]
 8001416:	197b      	adds	r3, r7, r5
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	197b      	adds	r3, r7, r5
 800141c:	3201      	adds	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	230f      	movs	r3, #15
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b03      	cmp	r3, #3
 8001428:	d9ec      	bls.n	8001404 <SD_SPI_Init+0xa8>
    SD_CS_HIGH();
 800142a:	2390      	movs	r3, #144	@ 0x90
 800142c:	05db      	lsls	r3, r3, #23
 800142e:	2201      	movs	r2, #1
 8001430:	2110      	movs	r1, #16
 8001432:	0018      	movs	r0, r3
 8001434:	f001 f9d6 	bl	80027e4 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001438:	20ff      	movs	r0, #255	@ 0xff
 800143a:	f7ff fe95 	bl	8001168 <SD_TransmitByte>

    sdhc = 0;
 800143e:	4b5e      	ldr	r3, [pc, #376]	@ (80015b8 <SD_SPI_Init+0x25c>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 8001444:	f000 fd60 	bl	8001f08 <HAL_GetTick>
 8001448:	0003      	movs	r3, r0
 800144a:	22fa      	movs	r2, #250	@ 0xfa
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	4694      	mov	ip, r2
 8001450:	4463      	add	r3, ip
 8001452:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001454:	230e      	movs	r3, #14
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d000      	beq.n	8001460 <SD_SPI_Init+0x104>
 800145e:	e072      	b.n	8001546 <SD_SPI_Init+0x1ea>
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	789b      	ldrb	r3, [r3, #2]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d16e      	bne.n	8001546 <SD_SPI_Init+0x1ea>
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	78db      	ldrb	r3, [r3, #3]
 800146c:	2baa      	cmp	r3, #170	@ 0xaa
 800146e:	d16a      	bne.n	8001546 <SD_SPI_Init+0x1ea>
        do {
            SD_CS_LOW();
 8001470:	2390      	movs	r3, #144	@ 0x90
 8001472:	05db      	lsls	r3, r3, #23
 8001474:	2200      	movs	r2, #0
 8001476:	2110      	movs	r1, #16
 8001478:	0018      	movs	r0, r3
 800147a:	f001 f9b3 	bl	80027e4 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 800147e:	22ff      	movs	r2, #255	@ 0xff
 8001480:	2100      	movs	r1, #0
 8001482:	2037      	movs	r0, #55	@ 0x37
 8001484:	f7ff ff0f 	bl	80012a6 <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 8001488:	250e      	movs	r5, #14
 800148a:	197c      	adds	r4, r7, r5
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	05db      	lsls	r3, r3, #23
 8001490:	22ff      	movs	r2, #255	@ 0xff
 8001492:	0019      	movs	r1, r3
 8001494:	2029      	movs	r0, #41	@ 0x29
 8001496:	f7ff ff06 	bl	80012a6 <SD_SendCommand>
 800149a:	0003      	movs	r3, r0
 800149c:	7023      	strb	r3, [r4, #0]
            SD_CS_HIGH();
 800149e:	2390      	movs	r3, #144	@ 0x90
 80014a0:	05db      	lsls	r3, r3, #23
 80014a2:	2201      	movs	r2, #1
 80014a4:	2110      	movs	r1, #16
 80014a6:	0018      	movs	r0, r3
 80014a8:	f001 f99c 	bl	80027e4 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 80014ac:	20ff      	movs	r0, #255	@ 0xff
 80014ae:	f7ff fe5b 	bl	8001168 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 80014b2:	197b      	adds	r3, r7, r5
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <SD_SPI_Init+0x16a>
 80014ba:	f000 fd25 	bl	8001f08 <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d8d4      	bhi.n	8001470 <SD_SPI_Init+0x114>

        if (response != 0x00) return SD_ERROR;
 80014c6:	230e      	movs	r3, #14
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SD_SPI_Init+0x178>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e06d      	b.n	80015b0 <SD_SPI_Init+0x254>

        SD_CS_LOW();
 80014d4:	2390      	movs	r3, #144	@ 0x90
 80014d6:	05db      	lsls	r3, r3, #23
 80014d8:	2200      	movs	r2, #0
 80014da:	2110      	movs	r1, #16
 80014dc:	0018      	movs	r0, r3
 80014de:	f001 f981 	bl	80027e4 <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 80014e2:	230e      	movs	r3, #14
 80014e4:	18fc      	adds	r4, r7, r3
 80014e6:	22ff      	movs	r2, #255	@ 0xff
 80014e8:	2100      	movs	r1, #0
 80014ea:	203a      	movs	r0, #58	@ 0x3a
 80014ec:	f7ff fedb 	bl	80012a6 <SD_SendCommand>
 80014f0:	0003      	movs	r3, r0
 80014f2:	7023      	strb	r3, [r4, #0]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 80014f4:	230f      	movs	r3, #15
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	e00d      	b.n	800151a <SD_SPI_Init+0x1be>
 80014fe:	250f      	movs	r5, #15
 8001500:	197b      	adds	r3, r7, r5
 8001502:	781c      	ldrb	r4, [r3, #0]
 8001504:	f7ff fe44 	bl	8001190 <SD_ReceiveByte>
 8001508:	0003      	movs	r3, r0
 800150a:	001a      	movs	r2, r3
 800150c:	003b      	movs	r3, r7
 800150e:	551a      	strb	r2, [r3, r4]
 8001510:	197b      	adds	r3, r7, r5
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	197b      	adds	r3, r7, r5
 8001516:	3201      	adds	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	230f      	movs	r3, #15
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b03      	cmp	r3, #3
 8001522:	d9ec      	bls.n	80014fe <SD_SPI_Init+0x1a2>
        SD_CS_HIGH();
 8001524:	2390      	movs	r3, #144	@ 0x90
 8001526:	05db      	lsls	r3, r3, #23
 8001528:	2201      	movs	r2, #1
 800152a:	2110      	movs	r1, #16
 800152c:	0018      	movs	r0, r3
 800152e:	f001 f959 	bl	80027e4 <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 8001532:	003b      	movs	r3, r7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	001a      	movs	r2, r3
 8001538:	2340      	movs	r3, #64	@ 0x40
 800153a:	4013      	ands	r3, r2
 800153c:	d033      	beq.n	80015a6 <SD_SPI_Init+0x24a>
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <SD_SPI_Init+0x25c>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001544:	e02f      	b.n	80015a6 <SD_SPI_Init+0x24a>
    } else {
        do {
            SD_CS_LOW();
 8001546:	2390      	movs	r3, #144	@ 0x90
 8001548:	05db      	lsls	r3, r3, #23
 800154a:	2200      	movs	r2, #0
 800154c:	2110      	movs	r1, #16
 800154e:	0018      	movs	r0, r3
 8001550:	f001 f948 	bl	80027e4 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001554:	22ff      	movs	r2, #255	@ 0xff
 8001556:	2100      	movs	r1, #0
 8001558:	2037      	movs	r0, #55	@ 0x37
 800155a:	f7ff fea4 	bl	80012a6 <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 800155e:	250e      	movs	r5, #14
 8001560:	197c      	adds	r4, r7, r5
 8001562:	22ff      	movs	r2, #255	@ 0xff
 8001564:	2100      	movs	r1, #0
 8001566:	2029      	movs	r0, #41	@ 0x29
 8001568:	f7ff fe9d 	bl	80012a6 <SD_SendCommand>
 800156c:	0003      	movs	r3, r0
 800156e:	7023      	strb	r3, [r4, #0]
            SD_CS_HIGH();
 8001570:	2390      	movs	r3, #144	@ 0x90
 8001572:	05db      	lsls	r3, r3, #23
 8001574:	2201      	movs	r2, #1
 8001576:	2110      	movs	r1, #16
 8001578:	0018      	movs	r0, r3
 800157a:	f001 f933 	bl	80027e4 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 800157e:	20ff      	movs	r0, #255	@ 0xff
 8001580:	f7ff fdf2 	bl	8001168 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8001584:	197b      	adds	r3, r7, r5
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <SD_SPI_Init+0x23c>
 800158c:	f000 fcbc 	bl	8001f08 <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	4293      	cmp	r3, r2
 8001596:	d8d6      	bhi.n	8001546 <SD_SPI_Init+0x1ea>
        if (response != 0x00) return SD_ERROR;
 8001598:	230e      	movs	r3, #14
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <SD_SPI_Init+0x24c>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e004      	b.n	80015b0 <SD_SPI_Init+0x254>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 80015a6:	46c0      	nop			@ (mov r8, r8)
    }

    card_initialized = 1;
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <SD_SPI_Init+0x260>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b004      	add	sp, #16
 80015b6:	bdb0      	pop	{r4, r5, r7, pc}
 80015b8:	20000340 	.word	0x20000340
 80015bc:	20000341 	.word	0x20000341

080015c0 <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <SD_ReadBlocks+0x16>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e064      	b.n	80016a0 <SD_ReadBlocks+0xe0>
    if (!sdhc) sector *= 512;
 80015d6:	4b34      	ldr	r3, [pc, #208]	@ (80016a8 <SD_ReadBlocks+0xe8>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <SD_ReadBlocks+0x24>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	025b      	lsls	r3, r3, #9
 80015e2:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d153      	bne.n	8001692 <SD_ReadBlocks+0xd2>
        SD_CS_LOW();
 80015ea:	2390      	movs	r3, #144	@ 0x90
 80015ec:	05db      	lsls	r3, r3, #23
 80015ee:	2200      	movs	r2, #0
 80015f0:	2110      	movs	r1, #16
 80015f2:	0018      	movs	r0, r3
 80015f4:	f001 f8f6 	bl	80027e4 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	22ff      	movs	r2, #255	@ 0xff
 80015fc:	0019      	movs	r1, r3
 80015fe:	2011      	movs	r0, #17
 8001600:	f7ff fe51 	bl	80012a6 <SD_SendCommand>
 8001604:	1e03      	subs	r3, r0, #0
 8001606:	d008      	beq.n	800161a <SD_ReadBlocks+0x5a>
            SD_CS_HIGH();
 8001608:	2390      	movs	r3, #144	@ 0x90
 800160a:	05db      	lsls	r3, r3, #23
 800160c:	2201      	movs	r2, #1
 800160e:	2110      	movs	r1, #16
 8001610:	0018      	movs	r0, r3
 8001612:	f001 f8e7 	bl	80027e4 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e042      	b.n	80016a0 <SD_ReadBlocks+0xe0>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 800161a:	f000 fc75 	bl	8001f08 <HAL_GetTick>
 800161e:	0003      	movs	r3, r0
 8001620:	33c8      	adds	r3, #200	@ 0xc8
 8001622:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 8001624:	2513      	movs	r5, #19
 8001626:	197c      	adds	r4, r7, r5
 8001628:	f7ff fdb2 	bl	8001190 <SD_ReceiveByte>
 800162c:	0003      	movs	r3, r0
 800162e:	7023      	strb	r3, [r4, #0]
            if (token == 0xFE) break;
 8001630:	197b      	adds	r3, r7, r5
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2bfe      	cmp	r3, #254	@ 0xfe
 8001636:	d006      	beq.n	8001646 <SD_ReadBlocks+0x86>
        } while (HAL_GetTick() < timeout);
 8001638:	f000 fc66 	bl	8001f08 <HAL_GetTick>
 800163c:	0002      	movs	r2, r0
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	4293      	cmp	r3, r2
 8001642:	d8ef      	bhi.n	8001624 <SD_ReadBlocks+0x64>
 8001644:	e000      	b.n	8001648 <SD_ReadBlocks+0x88>
            if (token == 0xFE) break;
 8001646:	46c0      	nop			@ (mov r8, r8)
        if (token != 0xFE) {
 8001648:	2313      	movs	r3, #19
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001650:	d008      	beq.n	8001664 <SD_ReadBlocks+0xa4>
            SD_CS_HIGH();
 8001652:	2390      	movs	r3, #144	@ 0x90
 8001654:	05db      	lsls	r3, r3, #23
 8001656:	2201      	movs	r2, #1
 8001658:	2110      	movs	r1, #16
 800165a:	0018      	movs	r0, r3
 800165c:	f001 f8c2 	bl	80027e4 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e01d      	b.n	80016a0 <SD_ReadBlocks+0xe0>
        }

        SD_ReceiveBuffer(buff, 512);
 8001664:	2380      	movs	r3, #128	@ 0x80
 8001666:	009a      	lsls	r2, r3, #2
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	0011      	movs	r1, r2
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff fdc9 	bl	8001204 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 8001672:	f7ff fd8d 	bl	8001190 <SD_ReceiveByte>
        SD_ReceiveByte();
 8001676:	f7ff fd8b 	bl	8001190 <SD_ReceiveByte>
        SD_CS_HIGH();
 800167a:	2390      	movs	r3, #144	@ 0x90
 800167c:	05db      	lsls	r3, r3, #23
 800167e:	2201      	movs	r2, #1
 8001680:	2110      	movs	r1, #16
 8001682:	0018      	movs	r0, r3
 8001684:	f001 f8ae 	bl	80027e4 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8001688:	20ff      	movs	r0, #255	@ 0xff
 800168a:	f7ff fd6d 	bl	8001168 <SD_TransmitByte>
        return SD_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e006      	b.n	80016a0 <SD_ReadBlocks+0xe0>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	0018      	movs	r0, r3
 800169a:	f000 f807 	bl	80016ac <SD_ReadMultiBlocks>
 800169e:	0003      	movs	r3, r0
    }
}
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b006      	add	sp, #24
 80016a6:	bdb0      	pop	{r4, r5, r7, pc}
 80016a8:	20000340 	.word	0x20000340

080016ac <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 80016ac:	b5b0      	push	{r4, r5, r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <SD_ReadMultiBlocks+0x16>
 80016be:	2301      	movs	r3, #1
 80016c0:	e069      	b.n	8001796 <SD_ReadMultiBlocks+0xea>
    if (!sdhc) sector *= 512;
 80016c2:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <SD_ReadMultiBlocks+0xf4>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <SD_ReadMultiBlocks+0x24>
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	025b      	lsls	r3, r3, #9
 80016ce:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 80016d0:	2390      	movs	r3, #144	@ 0x90
 80016d2:	05db      	lsls	r3, r3, #23
 80016d4:	2200      	movs	r2, #0
 80016d6:	2110      	movs	r1, #16
 80016d8:	0018      	movs	r0, r3
 80016da:	f001 f883 	bl	80027e4 <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	22ff      	movs	r2, #255	@ 0xff
 80016e2:	0019      	movs	r1, r3
 80016e4:	2012      	movs	r0, #18
 80016e6:	f7ff fdde 	bl	80012a6 <SD_SendCommand>
 80016ea:	1e03      	subs	r3, r0, #0
 80016ec:	d03e      	beq.n	800176c <SD_ReadMultiBlocks+0xc0>
        SD_CS_HIGH();
 80016ee:	2390      	movs	r3, #144	@ 0x90
 80016f0:	05db      	lsls	r3, r3, #23
 80016f2:	2201      	movs	r2, #1
 80016f4:	2110      	movs	r1, #16
 80016f6:	0018      	movs	r0, r3
 80016f8:	f001 f874 	bl	80027e4 <HAL_GPIO_WritePin>
        return SD_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e04a      	b.n	8001796 <SD_ReadMultiBlocks+0xea>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001700:	f000 fc02 	bl	8001f08 <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	33c8      	adds	r3, #200	@ 0xc8
 8001708:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 800170a:	2513      	movs	r5, #19
 800170c:	197c      	adds	r4, r7, r5
 800170e:	f7ff fd3f 	bl	8001190 <SD_ReceiveByte>
 8001712:	0003      	movs	r3, r0
 8001714:	7023      	strb	r3, [r4, #0]
            if (token == 0xFE) break;
 8001716:	197b      	adds	r3, r7, r5
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2bfe      	cmp	r3, #254	@ 0xfe
 800171c:	d006      	beq.n	800172c <SD_ReadMultiBlocks+0x80>
        } while (HAL_GetTick() < timeout);
 800171e:	f000 fbf3 	bl	8001f08 <HAL_GetTick>
 8001722:	0002      	movs	r2, r0
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	4293      	cmp	r3, r2
 8001728:	d8ef      	bhi.n	800170a <SD_ReadMultiBlocks+0x5e>
 800172a:	e000      	b.n	800172e <SD_ReadMultiBlocks+0x82>
            if (token == 0xFE) break;
 800172c:	46c0      	nop			@ (mov r8, r8)

        if (token != 0xFE) {
 800172e:	2313      	movs	r3, #19
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2bfe      	cmp	r3, #254	@ 0xfe
 8001736:	d008      	beq.n	800174a <SD_ReadMultiBlocks+0x9e>
            SD_CS_HIGH();
 8001738:	2390      	movs	r3, #144	@ 0x90
 800173a:	05db      	lsls	r3, r3, #23
 800173c:	2201      	movs	r2, #1
 800173e:	2110      	movs	r1, #16
 8001740:	0018      	movs	r0, r3
 8001742:	f001 f84f 	bl	80027e4 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e025      	b.n	8001796 <SD_ReadMultiBlocks+0xea>
        }

        SD_ReceiveBuffer(buff, 512);
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	009a      	lsls	r2, r3, #2
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	0011      	movs	r1, r2
 8001752:	0018      	movs	r0, r3
 8001754:	f7ff fd56 	bl	8001204 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 8001758:	f7ff fd1a 	bl	8001190 <SD_ReceiveByte>
        SD_ReceiveByte();
 800175c:	f7ff fd18 	bl	8001190 <SD_ReceiveByte>

        buff += 512;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2280      	movs	r2, #128	@ 0x80
 8001764:	0092      	lsls	r2, r2, #2
 8001766:	4694      	mov	ip, r2
 8001768:	4463      	add	r3, ip
 800176a:	60fb      	str	r3, [r7, #12]
    while (count--) {
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	1e5a      	subs	r2, r3, #1
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1c4      	bne.n	8001700 <SD_ReadMultiBlocks+0x54>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 8001776:	22ff      	movs	r2, #255	@ 0xff
 8001778:	2100      	movs	r1, #0
 800177a:	200c      	movs	r0, #12
 800177c:	f7ff fd93 	bl	80012a6 <SD_SendCommand>
    SD_CS_HIGH();
 8001780:	2390      	movs	r3, #144	@ 0x90
 8001782:	05db      	lsls	r3, r3, #23
 8001784:	2201      	movs	r2, #1
 8001786:	2110      	movs	r1, #16
 8001788:	0018      	movs	r0, r3
 800178a:	f001 f82b 	bl	80027e4 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 800178e:	20ff      	movs	r0, #255	@ 0xff
 8001790:	f7ff fcea 	bl	8001168 <SD_TransmitByte>

    return SD_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b006      	add	sp, #24
 800179c:	bdb0      	pop	{r4, r5, r7, pc}
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	20000340 	.word	0x20000340

080017a4 <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 80017a4:	b5b0      	push	{r4, r5, r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <SD_WriteBlocks+0x16>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e05e      	b.n	8001878 <SD_WriteBlocks+0xd4>
    if (!sdhc) sector *= 512;
 80017ba:	4b31      	ldr	r3, [pc, #196]	@ (8001880 <SD_WriteBlocks+0xdc>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <SD_WriteBlocks+0x24>
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	025b      	lsls	r3, r3, #9
 80017c6:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d14d      	bne.n	800186a <SD_WriteBlocks+0xc6>
        SD_CS_LOW();
 80017ce:	2390      	movs	r3, #144	@ 0x90
 80017d0:	05db      	lsls	r3, r3, #23
 80017d2:	2200      	movs	r2, #0
 80017d4:	2110      	movs	r1, #16
 80017d6:	0018      	movs	r0, r3
 80017d8:	f001 f804 	bl	80027e4 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	22ff      	movs	r2, #255	@ 0xff
 80017e0:	0019      	movs	r1, r3
 80017e2:	2018      	movs	r0, #24
 80017e4:	f7ff fd5f 	bl	80012a6 <SD_SendCommand>
 80017e8:	1e03      	subs	r3, r0, #0
 80017ea:	d008      	beq.n	80017fe <SD_WriteBlocks+0x5a>
            SD_CS_HIGH();
 80017ec:	2390      	movs	r3, #144	@ 0x90
 80017ee:	05db      	lsls	r3, r3, #23
 80017f0:	2201      	movs	r2, #1
 80017f2:	2110      	movs	r1, #16
 80017f4:	0018      	movs	r0, r3
 80017f6:	f000 fff5 	bl	80027e4 <HAL_GPIO_WritePin>
            return SD_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e03c      	b.n	8001878 <SD_WriteBlocks+0xd4>
        }

        SD_TransmitByte(0xFE);
 80017fe:	20fe      	movs	r0, #254	@ 0xfe
 8001800:	f7ff fcb2 	bl	8001168 <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	009a      	lsls	r2, r3, #2
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	0011      	movs	r1, r2
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff fcd9 	bl	80011c4 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 8001812:	20ff      	movs	r0, #255	@ 0xff
 8001814:	f7ff fca8 	bl	8001168 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8001818:	20ff      	movs	r0, #255	@ 0xff
 800181a:	f7ff fca5 	bl	8001168 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 800181e:	2517      	movs	r5, #23
 8001820:	197c      	adds	r4, r7, r5
 8001822:	f7ff fcb5 	bl	8001190 <SD_ReceiveByte>
 8001826:	0003      	movs	r3, r0
 8001828:	7023      	strb	r3, [r4, #0]
        if ((resp & 0x1F) != 0x05) {
 800182a:	197b      	adds	r3, r7, r5
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	221f      	movs	r2, #31
 8001830:	4013      	ands	r3, r2
 8001832:	2b05      	cmp	r3, #5
 8001834:	d008      	beq.n	8001848 <SD_WriteBlocks+0xa4>
            SD_CS_HIGH();
 8001836:	2390      	movs	r3, #144	@ 0x90
 8001838:	05db      	lsls	r3, r3, #23
 800183a:	2201      	movs	r2, #1
 800183c:	2110      	movs	r1, #16
 800183e:	0018      	movs	r0, r3
 8001840:	f000 ffd0 	bl	80027e4 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e017      	b.n	8001878 <SD_WriteBlocks+0xd4>
        }

        while (SD_ReceiveByte() == 0);
 8001848:	46c0      	nop			@ (mov r8, r8)
 800184a:	f7ff fca1 	bl	8001190 <SD_ReceiveByte>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d0fb      	beq.n	800184a <SD_WriteBlocks+0xa6>
        SD_CS_HIGH();
 8001852:	2390      	movs	r3, #144	@ 0x90
 8001854:	05db      	lsls	r3, r3, #23
 8001856:	2201      	movs	r2, #1
 8001858:	2110      	movs	r1, #16
 800185a:	0018      	movs	r0, r3
 800185c:	f000 ffc2 	bl	80027e4 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8001860:	20ff      	movs	r0, #255	@ 0xff
 8001862:	f7ff fc81 	bl	8001168 <SD_TransmitByte>

        return SD_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	e006      	b.n	8001878 <SD_WriteBlocks+0xd4>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	0018      	movs	r0, r3
 8001872:	f000 f807 	bl	8001884 <SD_WriteMultiBlocks>
 8001876:	0003      	movs	r3, r0
    }
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	b006      	add	sp, #24
 800187e:	bdb0      	pop	{r4, r5, r7, pc}
 8001880:	20000340 	.word	0x20000340

08001884 <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8001884:	b5b0      	push	{r4, r5, r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <SD_WriteMultiBlocks+0x16>
 8001896:	2301      	movs	r3, #1
 8001898:	e066      	b.n	8001968 <SD_WriteMultiBlocks+0xe4>
    if (!sdhc) sector *= 512;
 800189a:	4b35      	ldr	r3, [pc, #212]	@ (8001970 <SD_WriteMultiBlocks+0xec>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <SD_WriteMultiBlocks+0x24>
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	025b      	lsls	r3, r3, #9
 80018a6:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 80018a8:	2390      	movs	r3, #144	@ 0x90
 80018aa:	05db      	lsls	r3, r3, #23
 80018ac:	2200      	movs	r2, #0
 80018ae:	2110      	movs	r1, #16
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 ff97 	bl	80027e4 <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	22ff      	movs	r2, #255	@ 0xff
 80018ba:	0019      	movs	r1, r3
 80018bc:	2019      	movs	r0, #25
 80018be:	f7ff fcf2 	bl	80012a6 <SD_SendCommand>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d038      	beq.n	8001938 <SD_WriteMultiBlocks+0xb4>
        SD_CS_HIGH();
 80018c6:	2390      	movs	r3, #144	@ 0x90
 80018c8:	05db      	lsls	r3, r3, #23
 80018ca:	2201      	movs	r2, #1
 80018cc:	2110      	movs	r1, #16
 80018ce:	0018      	movs	r0, r3
 80018d0:	f000 ff88 	bl	80027e4 <HAL_GPIO_WritePin>
        return SD_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e047      	b.n	8001968 <SD_WriteMultiBlocks+0xe4>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 80018d8:	20fc      	movs	r0, #252	@ 0xfc
 80018da:	f7ff fc45 	bl	8001168 <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	009a      	lsls	r2, r3, #2
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	0011      	movs	r1, r2
 80018e6:	0018      	movs	r0, r3
 80018e8:	f7ff fc6c 	bl	80011c4 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 80018ec:	20ff      	movs	r0, #255	@ 0xff
 80018ee:	f7ff fc3b 	bl	8001168 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 80018f2:	20ff      	movs	r0, #255	@ 0xff
 80018f4:	f7ff fc38 	bl	8001168 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 80018f8:	2517      	movs	r5, #23
 80018fa:	197c      	adds	r4, r7, r5
 80018fc:	f7ff fc48 	bl	8001190 <SD_ReceiveByte>
 8001900:	0003      	movs	r3, r0
 8001902:	7023      	strb	r3, [r4, #0]
        if ((resp & 0x1F) != 0x05) {
 8001904:	197b      	adds	r3, r7, r5
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	221f      	movs	r2, #31
 800190a:	4013      	ands	r3, r2
 800190c:	2b05      	cmp	r3, #5
 800190e:	d008      	beq.n	8001922 <SD_WriteMultiBlocks+0x9e>
            SD_CS_HIGH();
 8001910:	2390      	movs	r3, #144	@ 0x90
 8001912:	05db      	lsls	r3, r3, #23
 8001914:	2201      	movs	r2, #1
 8001916:	2110      	movs	r1, #16
 8001918:	0018      	movs	r0, r3
 800191a:	f000 ff63 	bl	80027e4 <HAL_GPIO_WritePin>
            return SD_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e022      	b.n	8001968 <SD_WriteMultiBlocks+0xe4>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	f7ff fc34 	bl	8001190 <SD_ReceiveByte>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d0fb      	beq.n	8001924 <SD_WriteMultiBlocks+0xa0>
        buff += 512;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2280      	movs	r2, #128	@ 0x80
 8001930:	0092      	lsls	r2, r2, #2
 8001932:	4694      	mov	ip, r2
 8001934:	4463      	add	r3, ip
 8001936:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	1e5a      	subs	r2, r3, #1
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1ca      	bne.n	80018d8 <SD_WriteMultiBlocks+0x54>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 8001942:	20fd      	movs	r0, #253	@ 0xfd
 8001944:	f7ff fc10 	bl	8001168 <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 8001948:	46c0      	nop			@ (mov r8, r8)
 800194a:	f7ff fc21 	bl	8001190 <SD_ReceiveByte>
 800194e:	1e03      	subs	r3, r0, #0
 8001950:	d0fb      	beq.n	800194a <SD_WriteMultiBlocks+0xc6>

    SD_CS_HIGH();
 8001952:	2390      	movs	r3, #144	@ 0x90
 8001954:	05db      	lsls	r3, r3, #23
 8001956:	2201      	movs	r2, #1
 8001958:	2110      	movs	r1, #16
 800195a:	0018      	movs	r0, r3
 800195c:	f000 ff42 	bl	80027e4 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001960:	20ff      	movs	r0, #255	@ 0xff
 8001962:	f7ff fc01 	bl	8001168 <SD_TransmitByte>

    return SD_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b006      	add	sp, #24
 800196e:	bdb0      	pop	{r4, r5, r7, pc}
 8001970:	20000340 	.word	0x20000340

08001974 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001978:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <MX_SPI1_Init+0x74>)
 800197a:	4a1c      	ldr	r2, [pc, #112]	@ (80019ec <MX_SPI1_Init+0x78>)
 800197c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800197e:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <MX_SPI1_Init+0x74>)
 8001980:	2282      	movs	r2, #130	@ 0x82
 8001982:	0052      	lsls	r2, r2, #1
 8001984:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001986:	4b18      	ldr	r3, [pc, #96]	@ (80019e8 <MX_SPI1_Init+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800198c:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <MX_SPI1_Init+0x74>)
 800198e:	22e0      	movs	r2, #224	@ 0xe0
 8001990:	00d2      	lsls	r2, r2, #3
 8001992:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001994:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <MX_SPI1_Init+0x74>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800199a:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <MX_SPI1_Init+0x74>)
 800199c:	2200      	movs	r2, #0
 800199e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <MX_SPI1_Init+0x74>)
 80019a2:	2280      	movs	r2, #128	@ 0x80
 80019a4:	0092      	lsls	r2, r2, #2
 80019a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <MX_SPI1_Init+0x74>)
 80019aa:	2220      	movs	r2, #32
 80019ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <MX_SPI1_Init+0x74>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <MX_SPI1_Init+0x74>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <MX_SPI1_Init+0x74>)
 80019bc:	2200      	movs	r2, #0
 80019be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019c0:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <MX_SPI1_Init+0x74>)
 80019c2:	2207      	movs	r2, #7
 80019c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <MX_SPI1_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <MX_SPI1_Init+0x74>)
 80019ce:	2208      	movs	r2, #8
 80019d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019d2:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <MX_SPI1_Init+0x74>)
 80019d4:	0018      	movs	r0, r3
 80019d6:	f001 fb81 	bl	80030dc <HAL_SPI_Init>
 80019da:	1e03      	subs	r3, r0, #0
 80019dc:	d001      	beq.n	80019e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019de:	f7fe fd6f 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000544 	.word	0x20000544
 80019ec:	40013000 	.word	0x40013000

080019f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b08b      	sub	sp, #44	@ 0x2c
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	2414      	movs	r4, #20
 80019fa:	193b      	adds	r3, r7, r4
 80019fc:	0018      	movs	r0, r3
 80019fe:	2314      	movs	r3, #20
 8001a00:	001a      	movs	r2, r3
 8001a02:	2100      	movs	r1, #0
 8001a04:	f009 fa60 	bl	800aec8 <memset>
  if(spiHandle->Instance==SPI1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a43      	ldr	r2, [pc, #268]	@ (8001b1c <HAL_SPI_MspInit+0x12c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d000      	beq.n	8001a14 <HAL_SPI_MspInit+0x24>
 8001a12:	e07e      	b.n	8001b12 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a14:	4b42      	ldr	r3, [pc, #264]	@ (8001b20 <HAL_SPI_MspInit+0x130>)
 8001a16:	699a      	ldr	r2, [r3, #24]
 8001a18:	4b41      	ldr	r3, [pc, #260]	@ (8001b20 <HAL_SPI_MspInit+0x130>)
 8001a1a:	2180      	movs	r1, #128	@ 0x80
 8001a1c:	0149      	lsls	r1, r1, #5
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	619a      	str	r2, [r3, #24]
 8001a22:	4b3f      	ldr	r3, [pc, #252]	@ (8001b20 <HAL_SPI_MspInit+0x130>)
 8001a24:	699a      	ldr	r2, [r3, #24]
 8001a26:	2380      	movs	r3, #128	@ 0x80
 8001a28:	015b      	lsls	r3, r3, #5
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a30:	4b3b      	ldr	r3, [pc, #236]	@ (8001b20 <HAL_SPI_MspInit+0x130>)
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	4b3a      	ldr	r3, [pc, #232]	@ (8001b20 <HAL_SPI_MspInit+0x130>)
 8001a36:	2180      	movs	r1, #128	@ 0x80
 8001a38:	0289      	lsls	r1, r1, #10
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	615a      	str	r2, [r3, #20]
 8001a3e:	4b38      	ldr	r3, [pc, #224]	@ (8001b20 <HAL_SPI_MspInit+0x130>)
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	2380      	movs	r3, #128	@ 0x80
 8001a44:	029b      	lsls	r3, r3, #10
 8001a46:	4013      	ands	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	22e0      	movs	r2, #224	@ 0xe0
 8001a52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	2202      	movs	r2, #2
 8001a58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	2203      	movs	r2, #3
 8001a64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001a66:	187b      	adds	r3, r7, r1
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6c:	187a      	adds	r2, r7, r1
 8001a6e:	2390      	movs	r3, #144	@ 0x90
 8001a70:	05db      	lsls	r3, r3, #23
 8001a72:	0011      	movs	r1, r2
 8001a74:	0018      	movs	r0, r3
 8001a76:	f000 fd45 	bl	8002504 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <HAL_SPI_MspInit+0x134>)
 8001a7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001b28 <HAL_SPI_MspInit+0x138>)
 8001a7e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a80:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <HAL_SPI_MspInit+0x134>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a86:	4b27      	ldr	r3, [pc, #156]	@ (8001b24 <HAL_SPI_MspInit+0x134>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a8c:	4b25      	ldr	r3, [pc, #148]	@ (8001b24 <HAL_SPI_MspInit+0x134>)
 8001a8e:	2280      	movs	r2, #128	@ 0x80
 8001a90:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a92:	4b24      	ldr	r3, [pc, #144]	@ (8001b24 <HAL_SPI_MspInit+0x134>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a98:	4b22      	ldr	r3, [pc, #136]	@ (8001b24 <HAL_SPI_MspInit+0x134>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	@ (8001b24 <HAL_SPI_MspInit+0x134>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <HAL_SPI_MspInit+0x134>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b24 <HAL_SPI_MspInit+0x134>)
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 fb13 	bl	80020d8 <HAL_DMA_Init>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001ab6:	f7fe fd03 	bl	80004c0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a19      	ldr	r2, [pc, #100]	@ (8001b24 <HAL_SPI_MspInit+0x134>)
 8001abe:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <HAL_SPI_MspInit+0x134>)
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <HAL_SPI_MspInit+0x13c>)
 8001ac8:	4a19      	ldr	r2, [pc, #100]	@ (8001b30 <HAL_SPI_MspInit+0x140>)
 8001aca:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001acc:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <HAL_SPI_MspInit+0x13c>)
 8001ace:	2210      	movs	r2, #16
 8001ad0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad2:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <HAL_SPI_MspInit+0x13c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad8:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <HAL_SPI_MspInit+0x13c>)
 8001ada:	2280      	movs	r2, #128	@ 0x80
 8001adc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ade:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <HAL_SPI_MspInit+0x13c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <HAL_SPI_MspInit+0x13c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <HAL_SPI_MspInit+0x13c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001af0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <HAL_SPI_MspInit+0x13c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001af6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <HAL_SPI_MspInit+0x13c>)
 8001af8:	0018      	movs	r0, r3
 8001afa:	f000 faed 	bl	80020d8 <HAL_DMA_Init>
 8001afe:	1e03      	subs	r3, r0, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_SPI_MspInit+0x116>
    {
      Error_Handler();
 8001b02:	f7fe fcdd 	bl	80004c0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a08      	ldr	r2, [pc, #32]	@ (8001b2c <HAL_SPI_MspInit+0x13c>)
 8001b0a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b0c:	4b07      	ldr	r3, [pc, #28]	@ (8001b2c <HAL_SPI_MspInit+0x13c>)
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b00b      	add	sp, #44	@ 0x2c
 8001b18:	bd90      	pop	{r4, r7, pc}
 8001b1a:	46c0      	nop			@ (mov r8, r8)
 8001b1c:	40013000 	.word	0x40013000
 8001b20:	40021000 	.word	0x40021000
 8001b24:	200005a8 	.word	0x200005a8
 8001b28:	4002001c 	.word	0x4002001c
 8001b2c:	200005ec 	.word	0x200005ec
 8001b30:	40020030 	.word	0x40020030

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b3c:	699a      	ldr	r2, [r3, #24]
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b40:	2101      	movs	r1, #1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	619a      	str	r2, [r3, #24]
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b54:	69da      	ldr	r2, [r3, #28]
 8001b56:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b58:	2180      	movs	r1, #128	@ 0x80
 8001b5a:	0549      	lsls	r1, r1, #21
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	61da      	str	r2, [r3, #28]
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_MspInit+0x44>)
 8001b62:	69da      	ldr	r2, [r3, #28]
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	055b      	lsls	r3, r3, #21
 8001b68:	4013      	ands	r3, r2
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b002      	add	sp, #8
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			@ (mov r8, r8)
 8001b78:	40021000 	.word	0x40021000

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b80:	46c0      	nop			@ (mov r8, r8)
 8001b82:	e7fd      	b.n	8001b80 <NMI_Handler+0x4>

08001b84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	e7fd      	b.n	8001b88 <HardFault_Handler+0x4>

08001b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b90:	46c0      	nop			@ (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba4:	f000 f99e 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 fbb9 	bl	800232e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f000 fbb5 	bl	800232e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001bc4:	46c0      	nop			@ (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	200005a8 	.word	0x200005a8
 8001bd0:	200005ec 	.word	0x200005ec

08001bd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bd8:	4b03      	ldr	r3, [pc, #12]	@ (8001be8 <USART2_IRQHandler+0x14>)
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f002 fd6e 	bl	80046bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001be0:	46c0      	nop			@ (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	20000634 	.word	0x20000634

08001bec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e00a      	b.n	8001c14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bfe:	e000      	b.n	8001c02 <_read+0x16>
 8001c00:	bf00      	nop
 8001c02:	0001      	movs	r1, r0
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	60ba      	str	r2, [r7, #8]
 8001c0a:	b2ca      	uxtb	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dbf0      	blt.n	8001bfe <_read+0x12>
  }

  return len;
 8001c1c:	687b      	ldr	r3, [r7, #4]
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b006      	add	sp, #24
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	425b      	negs	r3, r3
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b002      	add	sp, #8
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2280      	movs	r2, #128	@ 0x80
 8001c48:	0192      	lsls	r2, r2, #6
 8001c4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b002      	add	sp, #8
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_isatty>:

int _isatty(int file)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b002      	add	sp, #8
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	0018      	movs	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b004      	add	sp, #16
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c88:	4a14      	ldr	r2, [pc, #80]	@ (8001cdc <_sbrk+0x5c>)
 8001c8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <_sbrk+0x60>)
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c94:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <_sbrk+0x64>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ce8 <_sbrk+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca2:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	18d3      	adds	r3, r2, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d207      	bcs.n	8001cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb0:	f009 f972 	bl	800af98 <__errno>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	425b      	negs	r3, r3
 8001cbe:	e009      	b.n	8001cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cc6:	4b07      	ldr	r3, [pc, #28]	@ (8001ce4 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	18d2      	adds	r2, r2, r3
 8001cce:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <_sbrk+0x64>)
 8001cd0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b006      	add	sp, #24
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20002000 	.word	0x20002000
 8001ce0:	00000400 	.word	0x00000400
 8001ce4:	20000630 	.word	0x20000630
 8001ce8:	20000838 	.word	0x20000838

08001cec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001cf0:	46c0      	nop			@ (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cfc:	4b14      	ldr	r3, [pc, #80]	@ (8001d50 <MX_USART2_UART_Init+0x58>)
 8001cfe:	4a15      	ldr	r2, [pc, #84]	@ (8001d54 <MX_USART2_UART_Init+0x5c>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d02:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <MX_USART2_UART_Init+0x58>)
 8001d04:	22e1      	movs	r2, #225	@ 0xe1
 8001d06:	0252      	lsls	r2, r2, #9
 8001d08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <MX_USART2_UART_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <MX_USART2_UART_Init+0x58>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <MX_USART2_UART_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <MX_USART2_UART_Init+0x58>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <MX_USART2_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <MX_USART2_UART_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <MX_USART2_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <MX_USART2_UART_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d3a:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <MX_USART2_UART_Init+0x58>)
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f002 fbc9 	bl	80044d4 <HAL_UART_Init>
 8001d42:	1e03      	subs	r3, r0, #0
 8001d44:	d001      	beq.n	8001d4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d46:	f7fe fbbb 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d4a:	46c0      	nop			@ (mov r8, r8)
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000634 	.word	0x20000634
 8001d54:	40004400 	.word	0x40004400

08001d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b08b      	sub	sp, #44	@ 0x2c
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	2414      	movs	r4, #20
 8001d62:	193b      	adds	r3, r7, r4
 8001d64:	0018      	movs	r0, r3
 8001d66:	2314      	movs	r3, #20
 8001d68:	001a      	movs	r2, r3
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	f009 f8ac 	bl	800aec8 <memset>
  if(uartHandle->Instance==USART2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a20      	ldr	r2, [pc, #128]	@ (8001df8 <HAL_UART_MspInit+0xa0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d13a      	bne.n	8001df0 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_UART_MspInit+0xa4>)
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <HAL_UART_MspInit+0xa4>)
 8001d80:	2180      	movs	r1, #128	@ 0x80
 8001d82:	0289      	lsls	r1, r1, #10
 8001d84:	430a      	orrs	r2, r1
 8001d86:	61da      	str	r2, [r3, #28]
 8001d88:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <HAL_UART_MspInit+0xa4>)
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	2380      	movs	r3, #128	@ 0x80
 8001d8e:	029b      	lsls	r3, r3, #10
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <HAL_UART_MspInit+0xa4>)
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <HAL_UART_MspInit+0xa4>)
 8001d9c:	2180      	movs	r1, #128	@ 0x80
 8001d9e:	0289      	lsls	r1, r1, #10
 8001da0:	430a      	orrs	r2, r1
 8001da2:	615a      	str	r2, [r3, #20]
 8001da4:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <HAL_UART_MspInit+0xa4>)
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	2380      	movs	r3, #128	@ 0x80
 8001daa:	029b      	lsls	r3, r3, #10
 8001dac:	4013      	ands	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001db2:	0021      	movs	r1, r4
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	220c      	movs	r2, #12
 8001db8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc6:	187b      	adds	r3, r7, r1
 8001dc8:	2203      	movs	r2, #3
 8001dca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001dcc:	187b      	adds	r3, r7, r1
 8001dce:	2201      	movs	r2, #1
 8001dd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	187a      	adds	r2, r7, r1
 8001dd4:	2390      	movs	r3, #144	@ 0x90
 8001dd6:	05db      	lsls	r3, r3, #23
 8001dd8:	0011      	movs	r1, r2
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 fb92 	bl	8002504 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	201c      	movs	r0, #28
 8001de6:	f000 f945 	bl	8002074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dea:	201c      	movs	r0, #28
 8001dec:	f000 f957 	bl	800209e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001df0:	46c0      	nop			@ (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b00b      	add	sp, #44	@ 0x2c
 8001df6:	bd90      	pop	{r4, r7, pc}
 8001df8:	40004400 	.word	0x40004400
 8001dfc:	40021000 	.word	0x40021000

08001e00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e00:	480d      	ldr	r0, [pc, #52]	@ (8001e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e02:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001e04:	f7ff ff72 	bl	8001cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e08:	480c      	ldr	r0, [pc, #48]	@ (8001e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e0a:	490d      	ldr	r1, [pc, #52]	@ (8001e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <LoopForever+0xe>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e10:	e002      	b.n	8001e18 <LoopCopyDataInit>

08001e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e16:	3304      	adds	r3, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e1c:	d3f9      	bcc.n	8001e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e20:	4c0a      	ldr	r4, [pc, #40]	@ (8001e4c <LoopForever+0x16>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e24:	e001      	b.n	8001e2a <LoopFillZerobss>

08001e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e28:	3204      	adds	r2, #4

08001e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e2c:	d3fb      	bcc.n	8001e26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e2e:	f009 f8b9 	bl	800afa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e32:	f7fe facd 	bl	80003d0 <main>

08001e36 <LoopForever>:

LoopForever:
    b LoopForever
 8001e36:	e7fe      	b.n	8001e36 <LoopForever>
  ldr   r0, =_estack
 8001e38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001e44:	0800c7ac 	.word	0x0800c7ac
  ldr r2, =_sbss
 8001e48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001e4c:	20000838 	.word	0x20000838

08001e50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC1_COMP_IRQHandler>
	...

08001e54 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <HAL_Init+0x24>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_Init+0x24>)
 8001e5e:	2110      	movs	r1, #16
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 f809 	bl	8001e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e6a:	f7ff fe63 	bl	8001b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	40022000 	.word	0x40022000

08001e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e84:	4b14      	ldr	r3, [pc, #80]	@ (8001ed8 <HAL_InitTick+0x5c>)
 8001e86:	681c      	ldr	r4, [r3, #0]
 8001e88:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <HAL_InitTick+0x60>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	23fa      	movs	r3, #250	@ 0xfa
 8001e90:	0098      	lsls	r0, r3, #2
 8001e92:	f7fe f955 	bl	8000140 <__udivsi3>
 8001e96:	0003      	movs	r3, r0
 8001e98:	0019      	movs	r1, r3
 8001e9a:	0020      	movs	r0, r4
 8001e9c:	f7fe f950 	bl	8000140 <__udivsi3>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 f90b 	bl	80020be <HAL_SYSTICK_Config>
 8001ea8:	1e03      	subs	r3, r0, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e00f      	b.n	8001ed0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d80b      	bhi.n	8001ece <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	425b      	negs	r3, r3
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 f8d8 	bl	8002074 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_InitTick+0x64>)
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b003      	add	sp, #12
 8001ed6:	bd90      	pop	{r4, r7, pc}
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee8:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <HAL_IncTick+0x1c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	001a      	movs	r2, r3
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_IncTick+0x20>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	18d2      	adds	r2, r2, r3
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <HAL_IncTick+0x20>)
 8001ef6:	601a      	str	r2, [r3, #0]
}
 8001ef8:	46c0      	nop			@ (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			@ (mov r8, r8)
 8001f00:	20000008 	.word	0x20000008
 8001f04:	200006bc 	.word	0x200006bc

08001f08 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b02      	ldr	r3, [pc, #8]	@ (8001f18 <HAL_GetTick+0x10>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	200006bc 	.word	0x200006bc

08001f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	0002      	movs	r2, r0
 8001f24:	1dfb      	adds	r3, r7, #7
 8001f26:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f28:	1dfb      	adds	r3, r7, #7
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f2e:	d809      	bhi.n	8001f44 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f30:	1dfb      	adds	r3, r7, #7
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	001a      	movs	r2, r3
 8001f36:	231f      	movs	r3, #31
 8001f38:	401a      	ands	r2, r3
 8001f3a:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <__NVIC_EnableIRQ+0x30>)
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4091      	lsls	r1, r2
 8001f40:	000a      	movs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]
  }
}
 8001f44:	46c0      	nop			@ (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b002      	add	sp, #8
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	0002      	movs	r2, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	1dfb      	adds	r3, r7, #7
 8001f5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f5e:	1dfb      	adds	r3, r7, #7
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f64:	d828      	bhi.n	8001fb8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f66:	4a2f      	ldr	r2, [pc, #188]	@ (8002024 <__NVIC_SetPriority+0xd4>)
 8001f68:	1dfb      	adds	r3, r7, #7
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	33c0      	adds	r3, #192	@ 0xc0
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	589b      	ldr	r3, [r3, r2]
 8001f76:	1dfa      	adds	r2, r7, #7
 8001f78:	7812      	ldrb	r2, [r2, #0]
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	400a      	ands	r2, r1
 8001f80:	00d2      	lsls	r2, r2, #3
 8001f82:	21ff      	movs	r1, #255	@ 0xff
 8001f84:	4091      	lsls	r1, r2
 8001f86:	000a      	movs	r2, r1
 8001f88:	43d2      	mvns	r2, r2
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	019b      	lsls	r3, r3, #6
 8001f92:	22ff      	movs	r2, #255	@ 0xff
 8001f94:	401a      	ands	r2, r3
 8001f96:	1dfb      	adds	r3, r7, #7
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	4003      	ands	r3, r0
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa4:	481f      	ldr	r0, [pc, #124]	@ (8002024 <__NVIC_SetPriority+0xd4>)
 8001fa6:	1dfb      	adds	r3, r7, #7
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	33c0      	adds	r3, #192	@ 0xc0
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fb6:	e031      	b.n	800201c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8002028 <__NVIC_SetPriority+0xd8>)
 8001fba:	1dfb      	adds	r3, r7, #7
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	230f      	movs	r3, #15
 8001fc2:	400b      	ands	r3, r1
 8001fc4:	3b08      	subs	r3, #8
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3306      	adds	r3, #6
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	18d3      	adds	r3, r2, r3
 8001fce:	3304      	adds	r3, #4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	1dfa      	adds	r2, r7, #7
 8001fd4:	7812      	ldrb	r2, [r2, #0]
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	2203      	movs	r2, #3
 8001fda:	400a      	ands	r2, r1
 8001fdc:	00d2      	lsls	r2, r2, #3
 8001fde:	21ff      	movs	r1, #255	@ 0xff
 8001fe0:	4091      	lsls	r1, r2
 8001fe2:	000a      	movs	r2, r1
 8001fe4:	43d2      	mvns	r2, r2
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	019b      	lsls	r3, r3, #6
 8001fee:	22ff      	movs	r2, #255	@ 0xff
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	1dfb      	adds	r3, r7, #7
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	4003      	ands	r3, r0
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002000:	4809      	ldr	r0, [pc, #36]	@ (8002028 <__NVIC_SetPriority+0xd8>)
 8002002:	1dfb      	adds	r3, r7, #7
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	001c      	movs	r4, r3
 8002008:	230f      	movs	r3, #15
 800200a:	4023      	ands	r3, r4
 800200c:	3b08      	subs	r3, #8
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	430a      	orrs	r2, r1
 8002012:	3306      	adds	r3, #6
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	18c3      	adds	r3, r0, r3
 8002018:	3304      	adds	r3, #4
 800201a:	601a      	str	r2, [r3, #0]
}
 800201c:	46c0      	nop			@ (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	b003      	add	sp, #12
 8002022:	bd90      	pop	{r4, r7, pc}
 8002024:	e000e100 	.word	0xe000e100
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	1e5a      	subs	r2, r3, #1
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	045b      	lsls	r3, r3, #17
 800203c:	429a      	cmp	r2, r3
 800203e:	d301      	bcc.n	8002044 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002040:	2301      	movs	r3, #1
 8002042:	e010      	b.n	8002066 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002044:	4b0a      	ldr	r3, [pc, #40]	@ (8002070 <SysTick_Config+0x44>)
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	3a01      	subs	r2, #1
 800204a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204c:	2301      	movs	r3, #1
 800204e:	425b      	negs	r3, r3
 8002050:	2103      	movs	r1, #3
 8002052:	0018      	movs	r0, r3
 8002054:	f7ff ff7c 	bl	8001f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002058:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <SysTick_Config+0x44>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205e:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <SysTick_Config+0x44>)
 8002060:	2207      	movs	r2, #7
 8002062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002064:	2300      	movs	r3, #0
}
 8002066:	0018      	movs	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	b002      	add	sp, #8
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	e000e010 	.word	0xe000e010

08002074 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	210f      	movs	r1, #15
 8002080:	187b      	adds	r3, r7, r1
 8002082:	1c02      	adds	r2, r0, #0
 8002084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	187b      	adds	r3, r7, r1
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b25b      	sxtb	r3, r3
 800208e:	0011      	movs	r1, r2
 8002090:	0018      	movs	r0, r3
 8002092:	f7ff ff5d 	bl	8001f50 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b004      	add	sp, #16
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	0002      	movs	r2, r0
 80020a6:	1dfb      	adds	r3, r7, #7
 80020a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020aa:	1dfb      	adds	r3, r7, #7
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b25b      	sxtb	r3, r3
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff ff33 	bl	8001f1c <__NVIC_EnableIRQ>
}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff ffaf 	bl	800202c <SysTick_Config>
 80020ce:	0003      	movs	r3, r0
}
 80020d0:	0018      	movs	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e036      	b.n	800215c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2221      	movs	r2, #33	@ 0x21
 80020f2:	2102      	movs	r1, #2
 80020f4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4a18      	ldr	r2, [pc, #96]	@ (8002164 <HAL_DMA_Init+0x8c>)
 8002102:	4013      	ands	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800210e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	0018      	movs	r0, r3
 8002140:	f000 f9c4 	bl	80024cc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2221      	movs	r2, #33	@ 0x21
 800214e:	2101      	movs	r1, #1
 8002150:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	2100      	movs	r1, #0
 8002158:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	b004      	add	sp, #16
 8002162:	bd80      	pop	{r7, pc}
 8002164:	ffffc00f 	.word	0xffffc00f

08002168 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002176:	2317      	movs	r3, #23
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2220      	movs	r2, #32
 8002182:	5c9b      	ldrb	r3, [r3, r2]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_DMA_Start_IT+0x24>
 8002188:	2302      	movs	r3, #2
 800218a:	e04f      	b.n	800222c <HAL_DMA_Start_IT+0xc4>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2220      	movs	r2, #32
 8002190:	2101      	movs	r1, #1
 8002192:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2221      	movs	r2, #33	@ 0x21
 8002198:	5c9b      	ldrb	r3, [r3, r2]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d13a      	bne.n	8002216 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2221      	movs	r2, #33	@ 0x21
 80021a4:	2102      	movs	r1, #2
 80021a6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2101      	movs	r1, #1
 80021ba:	438a      	bics	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 f954 	bl	8002472 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d008      	beq.n	80021e4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	210e      	movs	r1, #14
 80021de:	430a      	orrs	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e00f      	b.n	8002204 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	210a      	movs	r1, #10
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2104      	movs	r1, #4
 8002200:	438a      	bics	r2, r1
 8002202:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2101      	movs	r1, #1
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e007      	b.n	8002226 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	2100      	movs	r1, #0
 800221c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800221e:	2317      	movs	r3, #23
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	2202      	movs	r2, #2
 8002224:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002226:	2317      	movs	r3, #23
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	781b      	ldrb	r3, [r3, #0]
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b006      	add	sp, #24
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2221      	movs	r2, #33	@ 0x21
 8002240:	5c9b      	ldrb	r3, [r3, r2]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d008      	beq.n	800225a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2204      	movs	r2, #4
 800224c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	2100      	movs	r1, #0
 8002254:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e020      	b.n	800229c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	210e      	movs	r1, #14
 8002266:	438a      	bics	r2, r1
 8002268:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2101      	movs	r1, #1
 8002276:	438a      	bics	r2, r1
 8002278:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002282:	2101      	movs	r1, #1
 8002284:	4091      	lsls	r1, r2
 8002286:	000a      	movs	r2, r1
 8002288:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2221      	movs	r2, #33	@ 0x21
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2220      	movs	r2, #32
 8002296:	2100      	movs	r1, #0
 8002298:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ac:	210f      	movs	r1, #15
 80022ae:	187b      	adds	r3, r7, r1
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2221      	movs	r2, #33	@ 0x21
 80022b8:	5c9b      	ldrb	r3, [r3, r2]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d006      	beq.n	80022ce <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2204      	movs	r2, #4
 80022c4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e028      	b.n	8002320 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	210e      	movs	r1, #14
 80022da:	438a      	bics	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2101      	movs	r1, #1
 80022ea:	438a      	bics	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f6:	2101      	movs	r1, #1
 80022f8:	4091      	lsls	r1, r2
 80022fa:	000a      	movs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2221      	movs	r2, #33	@ 0x21
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	2100      	movs	r1, #0
 800230c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002312:	2b00      	cmp	r3, #0
 8002314:	d004      	beq.n	8002320 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	0010      	movs	r0, r2
 800231e:	4798      	blx	r3
    }
  }
  return status;
 8002320:	230f      	movs	r3, #15
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	781b      	ldrb	r3, [r3, #0]
}
 8002326:	0018      	movs	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	b004      	add	sp, #16
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	2204      	movs	r2, #4
 800234c:	409a      	lsls	r2, r3
 800234e:	0013      	movs	r3, r2
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4013      	ands	r3, r2
 8002354:	d024      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x72>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2204      	movs	r2, #4
 800235a:	4013      	ands	r3, r2
 800235c:	d020      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2220      	movs	r2, #32
 8002366:	4013      	ands	r3, r2
 8002368:	d107      	bne.n	800237a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2104      	movs	r1, #4
 8002376:	438a      	bics	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002382:	2104      	movs	r1, #4
 8002384:	4091      	lsls	r1, r2
 8002386:	000a      	movs	r2, r1
 8002388:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d100      	bne.n	8002394 <HAL_DMA_IRQHandler+0x66>
 8002392:	e06a      	b.n	800246a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	0010      	movs	r0, r2
 800239c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800239e:	e064      	b.n	800246a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	2202      	movs	r2, #2
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4013      	ands	r3, r2
 80023ae:	d02b      	beq.n	8002408 <HAL_DMA_IRQHandler+0xda>
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2202      	movs	r2, #2
 80023b4:	4013      	ands	r3, r2
 80023b6:	d027      	beq.n	8002408 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2220      	movs	r2, #32
 80023c0:	4013      	ands	r3, r2
 80023c2:	d10b      	bne.n	80023dc <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	210a      	movs	r1, #10
 80023d0:	438a      	bics	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2221      	movs	r2, #33	@ 0x21
 80023d8:	2101      	movs	r1, #1
 80023da:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e4:	2102      	movs	r1, #2
 80023e6:	4091      	lsls	r1, r2
 80023e8:	000a      	movs	r2, r1
 80023ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2220      	movs	r2, #32
 80023f0:	2100      	movs	r1, #0
 80023f2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d036      	beq.n	800246a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	0010      	movs	r0, r2
 8002404:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002406:	e030      	b.n	800246a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	2208      	movs	r2, #8
 800240e:	409a      	lsls	r2, r3
 8002410:	0013      	movs	r3, r2
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4013      	ands	r3, r2
 8002416:	d028      	beq.n	800246a <HAL_DMA_IRQHandler+0x13c>
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2208      	movs	r2, #8
 800241c:	4013      	ands	r3, r2
 800241e:	d024      	beq.n	800246a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	210e      	movs	r1, #14
 800242c:	438a      	bics	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002438:	2101      	movs	r1, #1
 800243a:	4091      	lsls	r1, r2
 800243c:	000a      	movs	r2, r1
 800243e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2221      	movs	r2, #33	@ 0x21
 800244a:	2101      	movs	r1, #1
 800244c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	2100      	movs	r1, #0
 8002454:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	0010      	movs	r0, r2
 8002466:	4798      	blx	r3
    }
  }
}
 8002468:	e7ff      	b.n	800246a <HAL_DMA_IRQHandler+0x13c>
 800246a:	46c0      	nop			@ (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	b004      	add	sp, #16
 8002470:	bd80      	pop	{r7, pc}

08002472 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002488:	2101      	movs	r1, #1
 800248a:	4091      	lsls	r1, r2
 800248c:	000a      	movs	r2, r1
 800248e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b10      	cmp	r3, #16
 800249e:	d108      	bne.n	80024b2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024b0:	e007      	b.n	80024c2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	60da      	str	r2, [r3, #12]
}
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b004      	add	sp, #16
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a08      	ldr	r2, [pc, #32]	@ (80024fc <DMA_CalcBaseAndBitshift+0x30>)
 80024da:	4694      	mov	ip, r2
 80024dc:	4463      	add	r3, ip
 80024de:	2114      	movs	r1, #20
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7fd fe2d 	bl	8000140 <__udivsi3>
 80024e6:	0003      	movs	r3, r0
 80024e8:	009a      	lsls	r2, r3, #2
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a03      	ldr	r2, [pc, #12]	@ (8002500 <DMA_CalcBaseAndBitshift+0x34>)
 80024f2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80024f4:	46c0      	nop			@ (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b002      	add	sp, #8
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	bffdfff8 	.word	0xbffdfff8
 8002500:	40020000 	.word	0x40020000

08002504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002512:	e14f      	b.n	80027b4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2101      	movs	r1, #1
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4091      	lsls	r1, r2
 800251e:	000a      	movs	r2, r1
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d100      	bne.n	800252c <HAL_GPIO_Init+0x28>
 800252a:	e140      	b.n	80027ae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2203      	movs	r2, #3
 8002532:	4013      	ands	r3, r2
 8002534:	2b01      	cmp	r3, #1
 8002536:	d005      	beq.n	8002544 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2203      	movs	r2, #3
 800253e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002540:	2b02      	cmp	r3, #2
 8002542:	d130      	bne.n	80025a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	409a      	lsls	r2, r3
 8002552:	0013      	movs	r3, r2
 8002554:	43da      	mvns	r2, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	409a      	lsls	r2, r3
 8002566:	0013      	movs	r3, r2
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800257a:	2201      	movs	r2, #1
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	409a      	lsls	r2, r3
 8002580:	0013      	movs	r3, r2
 8002582:	43da      	mvns	r2, r3
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	2201      	movs	r2, #1
 8002592:	401a      	ands	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2203      	movs	r2, #3
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d017      	beq.n	80025e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	2203      	movs	r2, #3
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	43da      	mvns	r2, r3
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	409a      	lsls	r2, r3
 80025d4:	0013      	movs	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2203      	movs	r2, #3
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d123      	bne.n	8002636 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	08da      	lsrs	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3208      	adds	r2, #8
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	58d3      	ldr	r3, [r2, r3]
 80025fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2207      	movs	r2, #7
 8002600:	4013      	ands	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	409a      	lsls	r2, r3
 8002608:	0013      	movs	r3, r2
 800260a:	43da      	mvns	r2, r3
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2107      	movs	r1, #7
 800261a:	400b      	ands	r3, r1
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	409a      	lsls	r2, r3
 8002620:	0013      	movs	r3, r2
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	08da      	lsrs	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3208      	adds	r2, #8
 8002630:	0092      	lsls	r2, r2, #2
 8002632:	6939      	ldr	r1, [r7, #16]
 8002634:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	409a      	lsls	r2, r3
 8002644:	0013      	movs	r3, r2
 8002646:	43da      	mvns	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2203      	movs	r2, #3
 8002654:	401a      	ands	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	409a      	lsls	r2, r3
 800265c:	0013      	movs	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	23c0      	movs	r3, #192	@ 0xc0
 8002670:	029b      	lsls	r3, r3, #10
 8002672:	4013      	ands	r3, r2
 8002674:	d100      	bne.n	8002678 <HAL_GPIO_Init+0x174>
 8002676:	e09a      	b.n	80027ae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002678:	4b54      	ldr	r3, [pc, #336]	@ (80027cc <HAL_GPIO_Init+0x2c8>)
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	4b53      	ldr	r3, [pc, #332]	@ (80027cc <HAL_GPIO_Init+0x2c8>)
 800267e:	2101      	movs	r1, #1
 8002680:	430a      	orrs	r2, r1
 8002682:	619a      	str	r2, [r3, #24]
 8002684:	4b51      	ldr	r3, [pc, #324]	@ (80027cc <HAL_GPIO_Init+0x2c8>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2201      	movs	r2, #1
 800268a:	4013      	ands	r3, r2
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002690:	4a4f      	ldr	r2, [pc, #316]	@ (80027d0 <HAL_GPIO_Init+0x2cc>)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	3302      	adds	r3, #2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	589b      	ldr	r3, [r3, r2]
 800269c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2203      	movs	r2, #3
 80026a2:	4013      	ands	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	220f      	movs	r2, #15
 80026a8:	409a      	lsls	r2, r3
 80026aa:	0013      	movs	r3, r2
 80026ac:	43da      	mvns	r2, r3
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	2390      	movs	r3, #144	@ 0x90
 80026b8:	05db      	lsls	r3, r3, #23
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d013      	beq.n	80026e6 <HAL_GPIO_Init+0x1e2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a44      	ldr	r2, [pc, #272]	@ (80027d4 <HAL_GPIO_Init+0x2d0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00d      	beq.n	80026e2 <HAL_GPIO_Init+0x1de>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a43      	ldr	r2, [pc, #268]	@ (80027d8 <HAL_GPIO_Init+0x2d4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d007      	beq.n	80026de <HAL_GPIO_Init+0x1da>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a42      	ldr	r2, [pc, #264]	@ (80027dc <HAL_GPIO_Init+0x2d8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_GPIO_Init+0x1d6>
 80026d6:	2303      	movs	r3, #3
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x1e4>
 80026da:	2305      	movs	r3, #5
 80026dc:	e004      	b.n	80026e8 <HAL_GPIO_Init+0x1e4>
 80026de:	2302      	movs	r3, #2
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_Init+0x1e4>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_GPIO_Init+0x1e4>
 80026e6:	2300      	movs	r3, #0
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	2103      	movs	r1, #3
 80026ec:	400a      	ands	r2, r1
 80026ee:	0092      	lsls	r2, r2, #2
 80026f0:	4093      	lsls	r3, r2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026f8:	4935      	ldr	r1, [pc, #212]	@ (80027d0 <HAL_GPIO_Init+0x2cc>)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	3302      	adds	r3, #2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002706:	4b36      	ldr	r3, [pc, #216]	@ (80027e0 <HAL_GPIO_Init+0x2dc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	43da      	mvns	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	2380      	movs	r3, #128	@ 0x80
 800271c:	035b      	lsls	r3, r3, #13
 800271e:	4013      	ands	r3, r2
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800272a:	4b2d      	ldr	r3, [pc, #180]	@ (80027e0 <HAL_GPIO_Init+0x2dc>)
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002730:	4b2b      	ldr	r3, [pc, #172]	@ (80027e0 <HAL_GPIO_Init+0x2dc>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43da      	mvns	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	2380      	movs	r3, #128	@ 0x80
 8002746:	039b      	lsls	r3, r3, #14
 8002748:	4013      	ands	r3, r2
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002754:	4b22      	ldr	r3, [pc, #136]	@ (80027e0 <HAL_GPIO_Init+0x2dc>)
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800275a:	4b21      	ldr	r3, [pc, #132]	@ (80027e0 <HAL_GPIO_Init+0x2dc>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	43da      	mvns	r2, r3
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	2380      	movs	r3, #128	@ 0x80
 8002770:	029b      	lsls	r3, r3, #10
 8002772:	4013      	ands	r3, r2
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800277e:	4b18      	ldr	r3, [pc, #96]	@ (80027e0 <HAL_GPIO_Init+0x2dc>)
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002784:	4b16      	ldr	r3, [pc, #88]	@ (80027e0 <HAL_GPIO_Init+0x2dc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43da      	mvns	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	2380      	movs	r3, #128	@ 0x80
 800279a:	025b      	lsls	r3, r3, #9
 800279c:	4013      	ands	r3, r2
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027a8:	4b0d      	ldr	r3, [pc, #52]	@ (80027e0 <HAL_GPIO_Init+0x2dc>)
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3301      	adds	r3, #1
 80027b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	40da      	lsrs	r2, r3
 80027bc:	1e13      	subs	r3, r2, #0
 80027be:	d000      	beq.n	80027c2 <HAL_GPIO_Init+0x2be>
 80027c0:	e6a8      	b.n	8002514 <HAL_GPIO_Init+0x10>
  } 
}
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	46c0      	nop			@ (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b006      	add	sp, #24
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40010000 	.word	0x40010000
 80027d4:	48000400 	.word	0x48000400
 80027d8:	48000800 	.word	0x48000800
 80027dc:	48000c00 	.word	0x48000c00
 80027e0:	40010400 	.word	0x40010400

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	0008      	movs	r0, r1
 80027ee:	0011      	movs	r1, r2
 80027f0:	1cbb      	adds	r3, r7, #2
 80027f2:	1c02      	adds	r2, r0, #0
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	1c7b      	adds	r3, r7, #1
 80027f8:	1c0a      	adds	r2, r1, #0
 80027fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027fc:	1c7b      	adds	r3, r7, #1
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002804:	1cbb      	adds	r3, r7, #2
 8002806:	881a      	ldrh	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800280c:	e003      	b.n	8002816 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800280e:	1cbb      	adds	r3, r7, #2
 8002810:	881a      	ldrh	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	b002      	add	sp, #8
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e301      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2201      	movs	r2, #1
 8002838:	4013      	ands	r3, r2
 800283a:	d100      	bne.n	800283e <HAL_RCC_OscConfig+0x1e>
 800283c:	e08d      	b.n	800295a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800283e:	4bc3      	ldr	r3, [pc, #780]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	220c      	movs	r2, #12
 8002844:	4013      	ands	r3, r2
 8002846:	2b04      	cmp	r3, #4
 8002848:	d00e      	beq.n	8002868 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800284a:	4bc0      	ldr	r3, [pc, #768]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	220c      	movs	r2, #12
 8002850:	4013      	ands	r3, r2
 8002852:	2b08      	cmp	r3, #8
 8002854:	d116      	bne.n	8002884 <HAL_RCC_OscConfig+0x64>
 8002856:	4bbd      	ldr	r3, [pc, #756]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	025b      	lsls	r3, r3, #9
 800285e:	401a      	ands	r2, r3
 8002860:	2380      	movs	r3, #128	@ 0x80
 8002862:	025b      	lsls	r3, r3, #9
 8002864:	429a      	cmp	r2, r3
 8002866:	d10d      	bne.n	8002884 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002868:	4bb8      	ldr	r3, [pc, #736]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	2380      	movs	r3, #128	@ 0x80
 800286e:	029b      	lsls	r3, r3, #10
 8002870:	4013      	ands	r3, r2
 8002872:	d100      	bne.n	8002876 <HAL_RCC_OscConfig+0x56>
 8002874:	e070      	b.n	8002958 <HAL_RCC_OscConfig+0x138>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d000      	beq.n	8002880 <HAL_RCC_OscConfig+0x60>
 800287e:	e06b      	b.n	8002958 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e2d8      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d107      	bne.n	800289c <HAL_RCC_OscConfig+0x7c>
 800288c:	4baf      	ldr	r3, [pc, #700]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4bae      	ldr	r3, [pc, #696]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002892:	2180      	movs	r1, #128	@ 0x80
 8002894:	0249      	lsls	r1, r1, #9
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e02f      	b.n	80028fc <HAL_RCC_OscConfig+0xdc>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10c      	bne.n	80028be <HAL_RCC_OscConfig+0x9e>
 80028a4:	4ba9      	ldr	r3, [pc, #676]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4ba8      	ldr	r3, [pc, #672]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80028aa:	49a9      	ldr	r1, [pc, #676]	@ (8002b50 <HAL_RCC_OscConfig+0x330>)
 80028ac:	400a      	ands	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	4ba6      	ldr	r3, [pc, #664]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4ba5      	ldr	r3, [pc, #660]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80028b6:	49a7      	ldr	r1, [pc, #668]	@ (8002b54 <HAL_RCC_OscConfig+0x334>)
 80028b8:	400a      	ands	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e01e      	b.n	80028fc <HAL_RCC_OscConfig+0xdc>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	d10e      	bne.n	80028e4 <HAL_RCC_OscConfig+0xc4>
 80028c6:	4ba1      	ldr	r3, [pc, #644]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4ba0      	ldr	r3, [pc, #640]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80028cc:	2180      	movs	r1, #128	@ 0x80
 80028ce:	02c9      	lsls	r1, r1, #11
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	4b9d      	ldr	r3, [pc, #628]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b9c      	ldr	r3, [pc, #624]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80028da:	2180      	movs	r1, #128	@ 0x80
 80028dc:	0249      	lsls	r1, r1, #9
 80028de:	430a      	orrs	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0xdc>
 80028e4:	4b99      	ldr	r3, [pc, #612]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b98      	ldr	r3, [pc, #608]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80028ea:	4999      	ldr	r1, [pc, #612]	@ (8002b50 <HAL_RCC_OscConfig+0x330>)
 80028ec:	400a      	ands	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	4b96      	ldr	r3, [pc, #600]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b95      	ldr	r3, [pc, #596]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80028f6:	4997      	ldr	r1, [pc, #604]	@ (8002b54 <HAL_RCC_OscConfig+0x334>)
 80028f8:	400a      	ands	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d014      	beq.n	800292e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7ff fb00 	bl	8001f08 <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800290e:	f7ff fafb 	bl	8001f08 <HAL_GetTick>
 8002912:	0002      	movs	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b64      	cmp	r3, #100	@ 0x64
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e28a      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002920:	4b8a      	ldr	r3, [pc, #552]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	@ 0x80
 8002926:	029b      	lsls	r3, r3, #10
 8002928:	4013      	ands	r3, r2
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0xee>
 800292c:	e015      	b.n	800295a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7ff faeb 	bl	8001f08 <HAL_GetTick>
 8002932:	0003      	movs	r3, r0
 8002934:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002938:	f7ff fae6 	bl	8001f08 <HAL_GetTick>
 800293c:	0002      	movs	r2, r0
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	@ 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e275      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294a:	4b80      	ldr	r3, [pc, #512]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	2380      	movs	r3, #128	@ 0x80
 8002950:	029b      	lsls	r3, r3, #10
 8002952:	4013      	ands	r3, r2
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x118>
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002958:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2202      	movs	r2, #2
 8002960:	4013      	ands	r3, r2
 8002962:	d100      	bne.n	8002966 <HAL_RCC_OscConfig+0x146>
 8002964:	e069      	b.n	8002a3a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002966:	4b79      	ldr	r3, [pc, #484]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	220c      	movs	r2, #12
 800296c:	4013      	ands	r3, r2
 800296e:	d00b      	beq.n	8002988 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002970:	4b76      	ldr	r3, [pc, #472]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	220c      	movs	r2, #12
 8002976:	4013      	ands	r3, r2
 8002978:	2b08      	cmp	r3, #8
 800297a:	d11c      	bne.n	80029b6 <HAL_RCC_OscConfig+0x196>
 800297c:	4b73      	ldr	r3, [pc, #460]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	2380      	movs	r3, #128	@ 0x80
 8002982:	025b      	lsls	r3, r3, #9
 8002984:	4013      	ands	r3, r2
 8002986:	d116      	bne.n	80029b6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002988:	4b70      	ldr	r3, [pc, #448]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2202      	movs	r2, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x17e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e24b      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b6b      	ldr	r3, [pc, #428]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	22f8      	movs	r2, #248	@ 0xf8
 80029a4:	4393      	bics	r3, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	00da      	lsls	r2, r3, #3
 80029ae:	4b67      	ldr	r3, [pc, #412]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b4:	e041      	b.n	8002a3a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d024      	beq.n	8002a08 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029be:	4b63      	ldr	r3, [pc, #396]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b62      	ldr	r3, [pc, #392]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80029c4:	2101      	movs	r1, #1
 80029c6:	430a      	orrs	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7ff fa9d 	bl	8001f08 <HAL_GetTick>
 80029ce:	0003      	movs	r3, r0
 80029d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d4:	f7ff fa98 	bl	8001f08 <HAL_GetTick>
 80029d8:	0002      	movs	r2, r0
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e227      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e6:	4b59      	ldr	r3, [pc, #356]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2202      	movs	r2, #2
 80029ec:	4013      	ands	r3, r2
 80029ee:	d0f1      	beq.n	80029d4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b56      	ldr	r3, [pc, #344]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	22f8      	movs	r2, #248	@ 0xf8
 80029f6:	4393      	bics	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	00da      	lsls	r2, r3, #3
 8002a00:	4b52      	ldr	r3, [pc, #328]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002a02:	430a      	orrs	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e018      	b.n	8002a3a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a08:	4b50      	ldr	r3, [pc, #320]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002a0e:	2101      	movs	r1, #1
 8002a10:	438a      	bics	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7ff fa78 	bl	8001f08 <HAL_GetTick>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1e:	f7ff fa73 	bl	8001f08 <HAL_GetTick>
 8002a22:	0002      	movs	r2, r0
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e202      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a30:	4b46      	ldr	r3, [pc, #280]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2202      	movs	r2, #2
 8002a36:	4013      	ands	r3, r2
 8002a38:	d1f1      	bne.n	8002a1e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2208      	movs	r2, #8
 8002a40:	4013      	ands	r3, r2
 8002a42:	d036      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d019      	beq.n	8002a80 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002a4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a50:	4b3e      	ldr	r3, [pc, #248]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	430a      	orrs	r2, r1
 8002a56:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a58:	f7ff fa56 	bl	8001f08 <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a62:	f7ff fa51 	bl	8001f08 <HAL_GetTick>
 8002a66:	0002      	movs	r2, r0
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1e0      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a74:	4b35      	ldr	r3, [pc, #212]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	2202      	movs	r2, #2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d0f1      	beq.n	8002a62 <HAL_RCC_OscConfig+0x242>
 8002a7e:	e018      	b.n	8002ab2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a80:	4b32      	ldr	r3, [pc, #200]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002a82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a84:	4b31      	ldr	r3, [pc, #196]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002a86:	2101      	movs	r1, #1
 8002a88:	438a      	bics	r2, r1
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7ff fa3c 	bl	8001f08 <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a96:	f7ff fa37 	bl	8001f08 <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e1c6      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	4b28      	ldr	r3, [pc, #160]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	2202      	movs	r2, #2
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d1f1      	bne.n	8002a96 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d100      	bne.n	8002abe <HAL_RCC_OscConfig+0x29e>
 8002abc:	e0b4      	b.n	8002c28 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002abe:	201f      	movs	r0, #31
 8002ac0:	183b      	adds	r3, r7, r0
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac6:	4b21      	ldr	r3, [pc, #132]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	2380      	movs	r3, #128	@ 0x80
 8002acc:	055b      	lsls	r3, r3, #21
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d110      	bne.n	8002af4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002ad8:	2180      	movs	r1, #128	@ 0x80
 8002ada:	0549      	lsls	r1, r1, #21
 8002adc:	430a      	orrs	r2, r1
 8002ade:	61da      	str	r2, [r3, #28]
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	055b      	lsls	r3, r3, #21
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002aee:	183b      	adds	r3, r7, r0
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	4b18      	ldr	r3, [pc, #96]	@ (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	2380      	movs	r3, #128	@ 0x80
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4013      	ands	r3, r2
 8002afe:	d11a      	bne.n	8002b36 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b00:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b14      	ldr	r3, [pc, #80]	@ (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002b06:	2180      	movs	r1, #128	@ 0x80
 8002b08:	0049      	lsls	r1, r1, #1
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0e:	f7ff f9fb 	bl	8001f08 <HAL_GetTick>
 8002b12:	0003      	movs	r3, r0
 8002b14:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b18:	f7ff f9f6 	bl	8001f08 <HAL_GetTick>
 8002b1c:	0002      	movs	r2, r0
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	@ 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e185      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4013      	ands	r3, r2
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d10e      	bne.n	8002b5c <HAL_RCC_OscConfig+0x33c>
 8002b3e:	4b03      	ldr	r3, [pc, #12]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002b40:	6a1a      	ldr	r2, [r3, #32]
 8002b42:	4b02      	ldr	r3, [pc, #8]	@ (8002b4c <HAL_RCC_OscConfig+0x32c>)
 8002b44:	2101      	movs	r1, #1
 8002b46:	430a      	orrs	r2, r1
 8002b48:	621a      	str	r2, [r3, #32]
 8002b4a:	e035      	b.n	8002bb8 <HAL_RCC_OscConfig+0x398>
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	fffeffff 	.word	0xfffeffff
 8002b54:	fffbffff 	.word	0xfffbffff
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10c      	bne.n	8002b7e <HAL_RCC_OscConfig+0x35e>
 8002b64:	4bb6      	ldr	r3, [pc, #728]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002b66:	6a1a      	ldr	r2, [r3, #32]
 8002b68:	4bb5      	ldr	r3, [pc, #724]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	438a      	bics	r2, r1
 8002b6e:	621a      	str	r2, [r3, #32]
 8002b70:	4bb3      	ldr	r3, [pc, #716]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002b72:	6a1a      	ldr	r2, [r3, #32]
 8002b74:	4bb2      	ldr	r3, [pc, #712]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002b76:	2104      	movs	r1, #4
 8002b78:	438a      	bics	r2, r1
 8002b7a:	621a      	str	r2, [r3, #32]
 8002b7c:	e01c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x398>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x380>
 8002b86:	4bae      	ldr	r3, [pc, #696]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002b88:	6a1a      	ldr	r2, [r3, #32]
 8002b8a:	4bad      	ldr	r3, [pc, #692]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002b8c:	2104      	movs	r1, #4
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	621a      	str	r2, [r3, #32]
 8002b92:	4bab      	ldr	r3, [pc, #684]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002b94:	6a1a      	ldr	r2, [r3, #32]
 8002b96:	4baa      	ldr	r3, [pc, #680]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002b98:	2101      	movs	r1, #1
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	621a      	str	r2, [r3, #32]
 8002b9e:	e00b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x398>
 8002ba0:	4ba7      	ldr	r3, [pc, #668]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002ba2:	6a1a      	ldr	r2, [r3, #32]
 8002ba4:	4ba6      	ldr	r3, [pc, #664]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	438a      	bics	r2, r1
 8002baa:	621a      	str	r2, [r3, #32]
 8002bac:	4ba4      	ldr	r3, [pc, #656]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002bae:	6a1a      	ldr	r2, [r3, #32]
 8002bb0:	4ba3      	ldr	r3, [pc, #652]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002bb2:	2104      	movs	r1, #4
 8002bb4:	438a      	bics	r2, r1
 8002bb6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d014      	beq.n	8002bea <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc0:	f7ff f9a2 	bl	8001f08 <HAL_GetTick>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc8:	e009      	b.n	8002bde <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bca:	f7ff f99d 	bl	8001f08 <HAL_GetTick>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	4a9b      	ldr	r2, [pc, #620]	@ (8002e44 <HAL_RCC_OscConfig+0x624>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e12b      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bde:	4b98      	ldr	r3, [pc, #608]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	2202      	movs	r2, #2
 8002be4:	4013      	ands	r3, r2
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x3aa>
 8002be8:	e013      	b.n	8002c12 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bea:	f7ff f98d 	bl	8001f08 <HAL_GetTick>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf2:	e009      	b.n	8002c08 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf4:	f7ff f988 	bl	8001f08 <HAL_GetTick>
 8002bf8:	0002      	movs	r2, r0
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	4a91      	ldr	r2, [pc, #580]	@ (8002e44 <HAL_RCC_OscConfig+0x624>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e116      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c08:	4b8d      	ldr	r3, [pc, #564]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c12:	231f      	movs	r3, #31
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1c:	4b88      	ldr	r3, [pc, #544]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002c1e:	69da      	ldr	r2, [r3, #28]
 8002c20:	4b87      	ldr	r3, [pc, #540]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002c22:	4989      	ldr	r1, [pc, #548]	@ (8002e48 <HAL_RCC_OscConfig+0x628>)
 8002c24:	400a      	ands	r2, r1
 8002c26:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d063      	beq.n	8002cfa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d12a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c3a:	4b81      	ldr	r3, [pc, #516]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002c3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c3e:	4b80      	ldr	r3, [pc, #512]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002c40:	2104      	movs	r1, #4
 8002c42:	430a      	orrs	r2, r1
 8002c44:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c46:	4b7e      	ldr	r3, [pc, #504]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c4a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c52:	f7ff f959 	bl	8001f08 <HAL_GetTick>
 8002c56:	0003      	movs	r3, r0
 8002c58:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c5c:	f7ff f954 	bl	8001f08 <HAL_GetTick>
 8002c60:	0002      	movs	r2, r0
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e0e3      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c6e:	4b74      	ldr	r3, [pc, #464]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c72:	2202      	movs	r2, #2
 8002c74:	4013      	ands	r3, r2
 8002c76:	d0f1      	beq.n	8002c5c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c78:	4b71      	ldr	r3, [pc, #452]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c7c:	22f8      	movs	r2, #248	@ 0xf8
 8002c7e:	4393      	bics	r3, r2
 8002c80:	0019      	movs	r1, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	00da      	lsls	r2, r3, #3
 8002c88:	4b6d      	ldr	r3, [pc, #436]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c8e:	e034      	b.n	8002cfa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	3305      	adds	r3, #5
 8002c96:	d111      	bne.n	8002cbc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c98:	4b69      	ldr	r3, [pc, #420]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002c9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c9c:	4b68      	ldr	r3, [pc, #416]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002c9e:	2104      	movs	r1, #4
 8002ca0:	438a      	bics	r2, r1
 8002ca2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ca4:	4b66      	ldr	r3, [pc, #408]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca8:	22f8      	movs	r2, #248	@ 0xf8
 8002caa:	4393      	bics	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	00da      	lsls	r2, r3, #3
 8002cb4:	4b62      	ldr	r3, [pc, #392]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cba:	e01e      	b.n	8002cfa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cbc:	4b60      	ldr	r3, [pc, #384]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002cbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cc0:	4b5f      	ldr	r3, [pc, #380]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002cc2:	2104      	movs	r1, #4
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002cc8:	4b5d      	ldr	r3, [pc, #372]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	438a      	bics	r2, r1
 8002cd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd4:	f7ff f918 	bl	8001f08 <HAL_GetTick>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cde:	f7ff f913 	bl	8001f08 <HAL_GetTick>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0a2      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cf0:	4b53      	ldr	r3, [pc, #332]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d1f1      	bne.n	8002cde <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d100      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4e4>
 8002d02:	e097      	b.n	8002e34 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d04:	4b4e      	ldr	r3, [pc, #312]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	220c      	movs	r2, #12
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d100      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4f2>
 8002d10:	e06b      	b.n	8002dea <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d14c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b49      	ldr	r3, [pc, #292]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4b48      	ldr	r3, [pc, #288]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002d20:	494a      	ldr	r1, [pc, #296]	@ (8002e4c <HAL_RCC_OscConfig+0x62c>)
 8002d22:	400a      	ands	r2, r1
 8002d24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7ff f8ef 	bl	8001f08 <HAL_GetTick>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d30:	f7ff f8ea 	bl	8001f08 <HAL_GetTick>
 8002d34:	0002      	movs	r2, r0
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e079      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d42:	4b3f      	ldr	r3, [pc, #252]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	2380      	movs	r3, #128	@ 0x80
 8002d48:	049b      	lsls	r3, r3, #18
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d52:	220f      	movs	r2, #15
 8002d54:	4393      	bics	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d5c:	4b38      	ldr	r3, [pc, #224]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d62:	4b37      	ldr	r3, [pc, #220]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4a3a      	ldr	r2, [pc, #232]	@ (8002e50 <HAL_RCC_OscConfig+0x630>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	431a      	orrs	r2, r3
 8002d76:	4b32      	ldr	r3, [pc, #200]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7c:	4b30      	ldr	r3, [pc, #192]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4b2f      	ldr	r3, [pc, #188]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002d82:	2180      	movs	r1, #128	@ 0x80
 8002d84:	0449      	lsls	r1, r1, #17
 8002d86:	430a      	orrs	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7ff f8bd 	bl	8001f08 <HAL_GetTick>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d94:	f7ff f8b8 	bl	8001f08 <HAL_GetTick>
 8002d98:	0002      	movs	r2, r0
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e047      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da6:	4b26      	ldr	r3, [pc, #152]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	2380      	movs	r3, #128	@ 0x80
 8002dac:	049b      	lsls	r3, r3, #18
 8002dae:	4013      	ands	r3, r2
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x574>
 8002db2:	e03f      	b.n	8002e34 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db4:	4b22      	ldr	r3, [pc, #136]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b21      	ldr	r3, [pc, #132]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002dba:	4924      	ldr	r1, [pc, #144]	@ (8002e4c <HAL_RCC_OscConfig+0x62c>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7ff f8a2 	bl	8001f08 <HAL_GetTick>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dca:	f7ff f89d 	bl	8001f08 <HAL_GetTick>
 8002dce:	0002      	movs	r2, r0
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e02c      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ddc:	4b18      	ldr	r3, [pc, #96]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	@ 0x80
 8002de2:	049b      	lsls	r3, r3, #18
 8002de4:	4013      	ands	r3, r2
 8002de6:	d1f0      	bne.n	8002dca <HAL_RCC_OscConfig+0x5aa>
 8002de8:	e024      	b.n	8002e34 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e01f      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002df6:	4b12      	ldr	r3, [pc, #72]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002dfc:	4b10      	ldr	r3, [pc, #64]	@ (8002e40 <HAL_RCC_OscConfig+0x620>)
 8002dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e00:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	2380      	movs	r3, #128	@ 0x80
 8002e06:	025b      	lsls	r3, r3, #9
 8002e08:	401a      	ands	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d10e      	bne.n	8002e30 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	220f      	movs	r2, #15
 8002e16:	401a      	ands	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	23f0      	movs	r3, #240	@ 0xf0
 8002e24:	039b      	lsls	r3, r3, #14
 8002e26:	401a      	ands	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	0018      	movs	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b008      	add	sp, #32
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	40021000 	.word	0x40021000
 8002e44:	00001388 	.word	0x00001388
 8002e48:	efffffff 	.word	0xefffffff
 8002e4c:	feffffff 	.word	0xfeffffff
 8002e50:	ffc2ffff 	.word	0xffc2ffff

08002e54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0b3      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd8 <HAL_RCC_ClockConfig+0x184>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4013      	ands	r3, r2
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d911      	bls.n	8002e9a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b58      	ldr	r3, [pc, #352]	@ (8002fd8 <HAL_RCC_ClockConfig+0x184>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4393      	bics	r3, r2
 8002e7e:	0019      	movs	r1, r3
 8002e80:	4b55      	ldr	r3, [pc, #340]	@ (8002fd8 <HAL_RCC_ClockConfig+0x184>)
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e88:	4b53      	ldr	r3, [pc, #332]	@ (8002fd8 <HAL_RCC_ClockConfig+0x184>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4013      	ands	r3, r2
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e09a      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d015      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d006      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002eae:	4b4b      	ldr	r3, [pc, #300]	@ (8002fdc <HAL_RCC_ClockConfig+0x188>)
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8002fdc <HAL_RCC_ClockConfig+0x188>)
 8002eb4:	21e0      	movs	r1, #224	@ 0xe0
 8002eb6:	00c9      	lsls	r1, r1, #3
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b47      	ldr	r3, [pc, #284]	@ (8002fdc <HAL_RCC_ClockConfig+0x188>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	22f0      	movs	r2, #240	@ 0xf0
 8002ec2:	4393      	bics	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	4b44      	ldr	r3, [pc, #272]	@ (8002fdc <HAL_RCC_ClockConfig+0x188>)
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d040      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8002fdc <HAL_RCC_ClockConfig+0x188>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	2380      	movs	r3, #128	@ 0x80
 8002ee8:	029b      	lsls	r3, r3, #10
 8002eea:	4013      	ands	r3, r2
 8002eec:	d114      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e06e      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b38      	ldr	r3, [pc, #224]	@ (8002fdc <HAL_RCC_ClockConfig+0x188>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	2380      	movs	r3, #128	@ 0x80
 8002f00:	049b      	lsls	r3, r3, #18
 8002f02:	4013      	ands	r3, r2
 8002f04:	d108      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e062      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	4b34      	ldr	r3, [pc, #208]	@ (8002fdc <HAL_RCC_ClockConfig+0x188>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	4013      	ands	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e05b      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f18:	4b30      	ldr	r3, [pc, #192]	@ (8002fdc <HAL_RCC_ClockConfig+0x188>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	4393      	bics	r3, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4b2d      	ldr	r3, [pc, #180]	@ (8002fdc <HAL_RCC_ClockConfig+0x188>)
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f2c:	f7fe ffec 	bl	8001f08 <HAL_GetTick>
 8002f30:	0003      	movs	r3, r0
 8002f32:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f34:	e009      	b.n	8002f4a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f36:	f7fe ffe7 	bl	8001f08 <HAL_GetTick>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	4a27      	ldr	r2, [pc, #156]	@ (8002fe0 <HAL_RCC_ClockConfig+0x18c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e042      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b24      	ldr	r3, [pc, #144]	@ (8002fdc <HAL_RCC_ClockConfig+0x188>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	220c      	movs	r2, #12
 8002f50:	401a      	ands	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1ec      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd8 <HAL_RCC_ClockConfig+0x184>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2201      	movs	r2, #1
 8002f62:	4013      	ands	r3, r2
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d211      	bcs.n	8002f8e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd8 <HAL_RCC_ClockConfig+0x184>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4393      	bics	r3, r2
 8002f72:	0019      	movs	r1, r3
 8002f74:	4b18      	ldr	r3, [pc, #96]	@ (8002fd8 <HAL_RCC_ClockConfig+0x184>)
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7c:	4b16      	ldr	r3, [pc, #88]	@ (8002fd8 <HAL_RCC_ClockConfig+0x184>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2201      	movs	r2, #1
 8002f82:	4013      	ands	r3, r2
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d001      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e020      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2204      	movs	r2, #4
 8002f94:	4013      	ands	r3, r2
 8002f96:	d009      	beq.n	8002fac <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f98:	4b10      	ldr	r3, [pc, #64]	@ (8002fdc <HAL_RCC_ClockConfig+0x188>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a11      	ldr	r2, [pc, #68]	@ (8002fe4 <HAL_RCC_ClockConfig+0x190>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002fdc <HAL_RCC_ClockConfig+0x188>)
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002fac:	f000 f820 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002fb0:	0001      	movs	r1, r0
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <HAL_RCC_ClockConfig+0x188>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	220f      	movs	r2, #15
 8002fba:	4013      	ands	r3, r2
 8002fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe8 <HAL_RCC_ClockConfig+0x194>)
 8002fbe:	5cd3      	ldrb	r3, [r2, r3]
 8002fc0:	000a      	movs	r2, r1
 8002fc2:	40da      	lsrs	r2, r3
 8002fc4:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <HAL_RCC_ClockConfig+0x198>)
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fc8:	2003      	movs	r0, #3
 8002fca:	f7fe ff57 	bl	8001e7c <HAL_InitTick>
  
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b004      	add	sp, #16
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40022000 	.word	0x40022000
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	00001388 	.word	0x00001388
 8002fe4:	fffff8ff 	.word	0xfffff8ff
 8002fe8:	0800c1b8 	.word	0x0800c1b8
 8002fec:	20000000 	.word	0x20000000

08002ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	2300      	movs	r3, #0
 8003004:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800300a:	4b20      	ldr	r3, [pc, #128]	@ (800308c <HAL_RCC_GetSysClockFreq+0x9c>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	220c      	movs	r2, #12
 8003014:	4013      	ands	r3, r2
 8003016:	2b04      	cmp	r3, #4
 8003018:	d002      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x30>
 800301a:	2b08      	cmp	r3, #8
 800301c:	d003      	beq.n	8003026 <HAL_RCC_GetSysClockFreq+0x36>
 800301e:	e02c      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003020:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003022:	613b      	str	r3, [r7, #16]
      break;
 8003024:	e02c      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	0c9b      	lsrs	r3, r3, #18
 800302a:	220f      	movs	r2, #15
 800302c:	4013      	ands	r3, r2
 800302e:	4a19      	ldr	r2, [pc, #100]	@ (8003094 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003030:	5cd3      	ldrb	r3, [r2, r3]
 8003032:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003034:	4b15      	ldr	r3, [pc, #84]	@ (800308c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003038:	220f      	movs	r2, #15
 800303a:	4013      	ands	r3, r2
 800303c:	4a16      	ldr	r2, [pc, #88]	@ (8003098 <HAL_RCC_GetSysClockFreq+0xa8>)
 800303e:	5cd3      	ldrb	r3, [r2, r3]
 8003040:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	2380      	movs	r3, #128	@ 0x80
 8003046:	025b      	lsls	r3, r3, #9
 8003048:	4013      	ands	r3, r2
 800304a:	d009      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	4810      	ldr	r0, [pc, #64]	@ (8003090 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003050:	f7fd f876 	bl	8000140 <__udivsi3>
 8003054:	0003      	movs	r3, r0
 8003056:	001a      	movs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4353      	muls	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e009      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	000a      	movs	r2, r1
 8003064:	0152      	lsls	r2, r2, #5
 8003066:	1a52      	subs	r2, r2, r1
 8003068:	0193      	lsls	r3, r2, #6
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	185b      	adds	r3, r3, r1
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	613b      	str	r3, [r7, #16]
      break;
 8003078:	e002      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800307a:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <HAL_RCC_GetSysClockFreq+0xa0>)
 800307c:	613b      	str	r3, [r7, #16]
      break;
 800307e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003080:	693b      	ldr	r3, [r7, #16]
}
 8003082:	0018      	movs	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	b006      	add	sp, #24
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	40021000 	.word	0x40021000
 8003090:	007a1200 	.word	0x007a1200
 8003094:	0800c1d0 	.word	0x0800c1d0
 8003098:	0800c1e0 	.word	0x0800c1e0

0800309c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a0:	4b02      	ldr	r3, [pc, #8]	@ (80030ac <HAL_RCC_GetHCLKFreq+0x10>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	20000000 	.word	0x20000000

080030b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80030b4:	f7ff fff2 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030b8:	0001      	movs	r1, r0
 80030ba:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	2207      	movs	r2, #7
 80030c2:	4013      	ands	r3, r2
 80030c4:	4a04      	ldr	r2, [pc, #16]	@ (80030d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	40d9      	lsrs	r1, r3
 80030ca:	000b      	movs	r3, r1
}    
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	40021000 	.word	0x40021000
 80030d8:	0800c1c8 	.word	0x0800c1c8

080030dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0a8      	b.n	8003240 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	2382      	movs	r3, #130	@ 0x82
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	429a      	cmp	r2, r3
 8003100:	d009      	beq.n	8003116 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	61da      	str	r2, [r3, #28]
 8003108:	e005      	b.n	8003116 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	225d      	movs	r2, #93	@ 0x5d
 8003120:	5c9b      	ldrb	r3, [r3, r2]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	225c      	movs	r2, #92	@ 0x5c
 800312c:	2100      	movs	r1, #0
 800312e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	0018      	movs	r0, r3
 8003134:	f7fe fc5c 	bl	80019f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	225d      	movs	r2, #93	@ 0x5d
 800313c:	2102      	movs	r1, #2
 800313e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2140      	movs	r1, #64	@ 0x40
 800314c:	438a      	bics	r2, r1
 800314e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	23e0      	movs	r3, #224	@ 0xe0
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	429a      	cmp	r2, r3
 800315a:	d902      	bls.n	8003162 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e002      	b.n	8003168 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003162:	2380      	movs	r3, #128	@ 0x80
 8003164:	015b      	lsls	r3, r3, #5
 8003166:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	23f0      	movs	r3, #240	@ 0xf0
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	429a      	cmp	r2, r3
 8003172:	d008      	beq.n	8003186 <HAL_SPI_Init+0xaa>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	23e0      	movs	r3, #224	@ 0xe0
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	429a      	cmp	r2, r3
 800317e:	d002      	beq.n	8003186 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	2382      	movs	r3, #130	@ 0x82
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	401a      	ands	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6899      	ldr	r1, [r3, #8]
 8003194:	2384      	movs	r3, #132	@ 0x84
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	400b      	ands	r3, r1
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2102      	movs	r1, #2
 80031a2:	400b      	ands	r3, r1
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	2101      	movs	r1, #1
 80031ac:	400b      	ands	r3, r1
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6999      	ldr	r1, [r3, #24]
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	400b      	ands	r3, r1
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	2138      	movs	r1, #56	@ 0x38
 80031c2:	400b      	ands	r3, r1
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	2180      	movs	r1, #128	@ 0x80
 80031cc:	400b      	ands	r3, r1
 80031ce:	431a      	orrs	r2, r3
 80031d0:	0011      	movs	r1, r2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031d6:	2380      	movs	r3, #128	@ 0x80
 80031d8:	019b      	lsls	r3, r3, #6
 80031da:	401a      	ands	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	2204      	movs	r2, #4
 80031ec:	401a      	ands	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	2110      	movs	r1, #16
 80031f4:	400b      	ands	r3, r1
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fc:	2108      	movs	r1, #8
 80031fe:	400b      	ands	r3, r1
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68d9      	ldr	r1, [r3, #12]
 8003206:	23f0      	movs	r3, #240	@ 0xf0
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	400b      	ands	r3, r1
 800320c:	431a      	orrs	r2, r3
 800320e:	0011      	movs	r1, r2
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	2380      	movs	r3, #128	@ 0x80
 8003214:	015b      	lsls	r3, r3, #5
 8003216:	401a      	ands	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4907      	ldr	r1, [pc, #28]	@ (8003248 <HAL_SPI_Init+0x16c>)
 800322c:	400a      	ands	r2, r1
 800322e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	225d      	movs	r2, #93	@ 0x5d
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b004      	add	sp, #16
 8003246:	bd80      	pop	{r7, pc}
 8003248:	fffff7ff 	.word	0xfffff7ff

0800324c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	1dbb      	adds	r3, r7, #6
 800325a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800325c:	231f      	movs	r3, #31
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	225c      	movs	r2, #92	@ 0x5c
 8003268:	5c9b      	ldrb	r3, [r3, r2]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_SPI_Transmit+0x26>
 800326e:	2302      	movs	r3, #2
 8003270:	e147      	b.n	8003502 <HAL_SPI_Transmit+0x2b6>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	225c      	movs	r2, #92	@ 0x5c
 8003276:	2101      	movs	r1, #1
 8003278:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800327a:	f7fe fe45 	bl	8001f08 <HAL_GetTick>
 800327e:	0003      	movs	r3, r0
 8003280:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003282:	2316      	movs	r3, #22
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	1dba      	adds	r2, r7, #6
 8003288:	8812      	ldrh	r2, [r2, #0]
 800328a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	225d      	movs	r2, #93	@ 0x5d
 8003290:	5c9b      	ldrb	r3, [r3, r2]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d004      	beq.n	80032a2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003298:	231f      	movs	r3, #31
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	2202      	movs	r2, #2
 800329e:	701a      	strb	r2, [r3, #0]
    goto error;
 80032a0:	e128      	b.n	80034f4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_SPI_Transmit+0x64>
 80032a8:	1dbb      	adds	r3, r7, #6
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80032b0:	231f      	movs	r3, #31
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80032b8:	e11c      	b.n	80034f4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	225d      	movs	r2, #93	@ 0x5d
 80032be:	2103      	movs	r1, #3
 80032c0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1dba      	adds	r2, r7, #6
 80032d2:	8812      	ldrh	r2, [r2, #0]
 80032d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1dba      	adds	r2, r7, #6
 80032da:	8812      	ldrh	r2, [r2, #0]
 80032dc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2244      	movs	r2, #68	@ 0x44
 80032e8:	2100      	movs	r1, #0
 80032ea:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2246      	movs	r2, #70	@ 0x46
 80032f0:	2100      	movs	r1, #0
 80032f2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	2380      	movs	r3, #128	@ 0x80
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	429a      	cmp	r2, r3
 800330a:	d110      	bne.n	800332e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2140      	movs	r1, #64	@ 0x40
 8003318:	438a      	bics	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2180      	movs	r1, #128	@ 0x80
 8003328:	01c9      	lsls	r1, r1, #7
 800332a:	430a      	orrs	r2, r1
 800332c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2240      	movs	r2, #64	@ 0x40
 8003336:	4013      	ands	r3, r2
 8003338:	2b40      	cmp	r3, #64	@ 0x40
 800333a:	d007      	beq.n	800334c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2140      	movs	r1, #64	@ 0x40
 8003348:	430a      	orrs	r2, r1
 800334a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	23e0      	movs	r3, #224	@ 0xe0
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	429a      	cmp	r2, r3
 8003356:	d952      	bls.n	80033fe <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <HAL_SPI_Transmit+0x11e>
 8003360:	2316      	movs	r3, #22
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d143      	bne.n	80033f2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336e:	881a      	ldrh	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337a:	1c9a      	adds	r2, r3, #2
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800338e:	e030      	b.n	80033f2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2202      	movs	r2, #2
 8003398:	4013      	ands	r3, r2
 800339a:	2b02      	cmp	r3, #2
 800339c:	d112      	bne.n	80033c4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a2:	881a      	ldrh	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ae:	1c9a      	adds	r2, r3, #2
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033c2:	e016      	b.n	80033f2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033c4:	f7fe fda0 	bl	8001f08 <HAL_GetTick>
 80033c8:	0002      	movs	r2, r0
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d802      	bhi.n	80033da <HAL_SPI_Transmit+0x18e>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	3301      	adds	r3, #1
 80033d8:	d102      	bne.n	80033e0 <HAL_SPI_Transmit+0x194>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d108      	bne.n	80033f2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80033e0:	231f      	movs	r3, #31
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	2203      	movs	r2, #3
 80033e6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	225d      	movs	r2, #93	@ 0x5d
 80033ec:	2101      	movs	r1, #1
 80033ee:	5499      	strb	r1, [r3, r2]
          goto error;
 80033f0:	e080      	b.n	80034f4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1c9      	bne.n	8003390 <HAL_SPI_Transmit+0x144>
 80033fc:	e053      	b.n	80034a6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d004      	beq.n	8003410 <HAL_SPI_Transmit+0x1c4>
 8003406:	2316      	movs	r3, #22
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d145      	bne.n	800349c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	7812      	ldrb	r2, [r2, #0]
 800341c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003436:	e031      	b.n	800349c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2202      	movs	r2, #2
 8003440:	4013      	ands	r3, r2
 8003442:	2b02      	cmp	r3, #2
 8003444:	d113      	bne.n	800346e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	7812      	ldrb	r2, [r2, #0]
 8003452:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800346c:	e016      	b.n	800349c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800346e:	f7fe fd4b 	bl	8001f08 <HAL_GetTick>
 8003472:	0002      	movs	r2, r0
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d802      	bhi.n	8003484 <HAL_SPI_Transmit+0x238>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	3301      	adds	r3, #1
 8003482:	d102      	bne.n	800348a <HAL_SPI_Transmit+0x23e>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800348a:	231f      	movs	r3, #31
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	2203      	movs	r2, #3
 8003490:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	225d      	movs	r2, #93	@ 0x5d
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
          goto error;
 800349a:	e02b      	b.n	80034f4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1c8      	bne.n	8003438 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	6839      	ldr	r1, [r7, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f000 ffcb 	bl	8004448 <SPI_EndRxTxTransaction>
 80034b2:	1e03      	subs	r3, r0, #0
 80034b4:	d002      	beq.n	80034bc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d004      	beq.n	80034ec <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80034e2:	231f      	movs	r3, #31
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	2201      	movs	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	e003      	b.n	80034f4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	225d      	movs	r2, #93	@ 0x5d
 80034f0:	2101      	movs	r1, #1
 80034f2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	225c      	movs	r2, #92	@ 0x5c
 80034f8:	2100      	movs	r1, #0
 80034fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80034fc:	231f      	movs	r3, #31
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	781b      	ldrb	r3, [r3, #0]
}
 8003502:	0018      	movs	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	b008      	add	sp, #32
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	@ 0x28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	001a      	movs	r2, r3
 800351a:	1cbb      	adds	r3, r7, #2
 800351c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800351e:	2301      	movs	r3, #1
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003522:	2323      	movs	r3, #35	@ 0x23
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	2200      	movs	r2, #0
 8003528:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	225c      	movs	r2, #92	@ 0x5c
 800352e:	5c9b      	ldrb	r3, [r3, r2]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_SPI_TransmitReceive+0x2c>
 8003534:	2302      	movs	r3, #2
 8003536:	e1c4      	b.n	80038c2 <HAL_SPI_TransmitReceive+0x3b6>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	225c      	movs	r2, #92	@ 0x5c
 800353c:	2101      	movs	r1, #1
 800353e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003540:	f7fe fce2 	bl	8001f08 <HAL_GetTick>
 8003544:	0003      	movs	r3, r0
 8003546:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003548:	201b      	movs	r0, #27
 800354a:	183b      	adds	r3, r7, r0
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	215d      	movs	r1, #93	@ 0x5d
 8003550:	5c52      	ldrb	r2, [r2, r1]
 8003552:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800355a:	2312      	movs	r3, #18
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	1cba      	adds	r2, r7, #2
 8003560:	8812      	ldrh	r2, [r2, #0]
 8003562:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003564:	183b      	adds	r3, r7, r0
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d011      	beq.n	8003590 <HAL_SPI_TransmitReceive+0x84>
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	2382      	movs	r3, #130	@ 0x82
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	429a      	cmp	r2, r3
 8003574:	d107      	bne.n	8003586 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d103      	bne.n	8003586 <HAL_SPI_TransmitReceive+0x7a>
 800357e:	183b      	adds	r3, r7, r0
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b04      	cmp	r3, #4
 8003584:	d004      	beq.n	8003590 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003586:	2323      	movs	r3, #35	@ 0x23
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	2202      	movs	r2, #2
 800358c:	701a      	strb	r2, [r3, #0]
    goto error;
 800358e:	e191      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <HAL_SPI_TransmitReceive+0x98>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_SPI_TransmitReceive+0x98>
 800359c:	1cbb      	adds	r3, r7, #2
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d104      	bne.n	80035ae <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80035a4:	2323      	movs	r3, #35	@ 0x23
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80035ac:	e182      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	225d      	movs	r2, #93	@ 0x5d
 80035b2:	5c9b      	ldrb	r3, [r3, r2]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d003      	beq.n	80035c2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	225d      	movs	r2, #93	@ 0x5d
 80035be:	2105      	movs	r1, #5
 80035c0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1cba      	adds	r2, r7, #2
 80035d2:	2146      	movs	r1, #70	@ 0x46
 80035d4:	8812      	ldrh	r2, [r2, #0]
 80035d6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1cba      	adds	r2, r7, #2
 80035dc:	2144      	movs	r1, #68	@ 0x44
 80035de:	8812      	ldrh	r2, [r2, #0]
 80035e0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1cba      	adds	r2, r7, #2
 80035ec:	8812      	ldrh	r2, [r2, #0]
 80035ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1cba      	adds	r2, r7, #2
 80035f4:	8812      	ldrh	r2, [r2, #0]
 80035f6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	23e0      	movs	r3, #224	@ 0xe0
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	429a      	cmp	r2, r3
 800360e:	d908      	bls.n	8003622 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	49ac      	ldr	r1, [pc, #688]	@ (80038cc <HAL_SPI_TransmitReceive+0x3c0>)
 800361c:	400a      	ands	r2, r1
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	e008      	b.n	8003634 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2180      	movs	r1, #128	@ 0x80
 800362e:	0149      	lsls	r1, r1, #5
 8003630:	430a      	orrs	r2, r1
 8003632:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2240      	movs	r2, #64	@ 0x40
 800363c:	4013      	ands	r3, r2
 800363e:	2b40      	cmp	r3, #64	@ 0x40
 8003640:	d007      	beq.n	8003652 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2140      	movs	r1, #64	@ 0x40
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	23e0      	movs	r3, #224	@ 0xe0
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	429a      	cmp	r2, r3
 800365c:	d800      	bhi.n	8003660 <HAL_SPI_TransmitReceive+0x154>
 800365e:	e083      	b.n	8003768 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_SPI_TransmitReceive+0x168>
 8003668:	2312      	movs	r3, #18
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d000      	beq.n	8003674 <HAL_SPI_TransmitReceive+0x168>
 8003672:	e06d      	b.n	8003750 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003678:	881a      	ldrh	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003684:	1c9a      	adds	r2, r3, #2
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003698:	e05a      	b.n	8003750 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2202      	movs	r2, #2
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d11b      	bne.n	80036e0 <HAL_SPI_TransmitReceive+0x1d4>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d016      	beq.n	80036e0 <HAL_SPI_TransmitReceive+0x1d4>
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d113      	bne.n	80036e0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036bc:	881a      	ldrh	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c8:	1c9a      	adds	r2, r3, #2
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2201      	movs	r2, #1
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d11c      	bne.n	8003728 <HAL_SPI_TransmitReceive+0x21c>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2246      	movs	r2, #70	@ 0x46
 80036f2:	5a9b      	ldrh	r3, [r3, r2]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d016      	beq.n	8003728 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	b292      	uxth	r2, r2
 8003706:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	1c9a      	adds	r2, r3, #2
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2246      	movs	r2, #70	@ 0x46
 8003716:	5a9b      	ldrh	r3, [r3, r2]
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b299      	uxth	r1, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2246      	movs	r2, #70	@ 0x46
 8003722:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003724:	2301      	movs	r3, #1
 8003726:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003728:	f7fe fbee 	bl	8001f08 <HAL_GetTick>
 800372c:	0002      	movs	r2, r0
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003734:	429a      	cmp	r2, r3
 8003736:	d80b      	bhi.n	8003750 <HAL_SPI_TransmitReceive+0x244>
 8003738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373a:	3301      	adds	r3, #1
 800373c:	d008      	beq.n	8003750 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800373e:	2323      	movs	r3, #35	@ 0x23
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	2203      	movs	r2, #3
 8003744:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	225d      	movs	r2, #93	@ 0x5d
 800374a:	2101      	movs	r1, #1
 800374c:	5499      	strb	r1, [r3, r2]
        goto error;
 800374e:	e0b1      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d19f      	bne.n	800369a <HAL_SPI_TransmitReceive+0x18e>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2246      	movs	r2, #70	@ 0x46
 800375e:	5a9b      	ldrh	r3, [r3, r2]
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d199      	bne.n	800369a <HAL_SPI_TransmitReceive+0x18e>
 8003766:	e089      	b.n	800387c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_SPI_TransmitReceive+0x270>
 8003770:	2312      	movs	r3, #18
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d000      	beq.n	800377c <HAL_SPI_TransmitReceive+0x270>
 800377a:	e074      	b.n	8003866 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	7812      	ldrb	r2, [r2, #0]
 8003788:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a2:	e060      	b.n	8003866 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2202      	movs	r2, #2
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d11c      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x2e0>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d017      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x2e0>
 80037bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d114      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	330c      	adds	r3, #12
 80037cc:	7812      	ldrb	r2, [r2, #0]
 80037ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2201      	movs	r2, #1
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d11e      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x32c>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2246      	movs	r2, #70	@ 0x46
 80037fe:	5a9b      	ldrh	r3, [r3, r2]
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d018      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	330c      	adds	r3, #12
 800380c:	001a      	movs	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	7812      	ldrb	r2, [r2, #0]
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2246      	movs	r2, #70	@ 0x46
 8003826:	5a9b      	ldrh	r3, [r3, r2]
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b299      	uxth	r1, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2246      	movs	r2, #70	@ 0x46
 8003832:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003834:	2301      	movs	r3, #1
 8003836:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003838:	f7fe fb66 	bl	8001f08 <HAL_GetTick>
 800383c:	0002      	movs	r2, r0
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003844:	429a      	cmp	r2, r3
 8003846:	d802      	bhi.n	800384e <HAL_SPI_TransmitReceive+0x342>
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	3301      	adds	r3, #1
 800384c:	d102      	bne.n	8003854 <HAL_SPI_TransmitReceive+0x348>
 800384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003850:	2b00      	cmp	r3, #0
 8003852:	d108      	bne.n	8003866 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003854:	2323      	movs	r3, #35	@ 0x23
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	2203      	movs	r2, #3
 800385a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	225d      	movs	r2, #93	@ 0x5d
 8003860:	2101      	movs	r1, #1
 8003862:	5499      	strb	r1, [r3, r2]
        goto error;
 8003864:	e026      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d199      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x298>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2246      	movs	r2, #70	@ 0x46
 8003874:	5a9b      	ldrh	r3, [r3, r2]
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d193      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	0018      	movs	r0, r3
 8003884:	f000 fde0 	bl	8004448 <SPI_EndRxTxTransaction>
 8003888:	1e03      	subs	r3, r0, #0
 800388a:	d006      	beq.n	800389a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800388c:	2323      	movs	r3, #35	@ 0x23
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d004      	beq.n	80038ac <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80038a2:	2323      	movs	r3, #35	@ 0x23
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	e003      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	225d      	movs	r2, #93	@ 0x5d
 80038b0:	2101      	movs	r1, #1
 80038b2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	225c      	movs	r2, #92	@ 0x5c
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80038bc:	2323      	movs	r3, #35	@ 0x23
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	781b      	ldrb	r3, [r3, #0]
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b00a      	add	sp, #40	@ 0x28
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	ffffefff 	.word	0xffffefff

080038d0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	1dbb      	adds	r3, r7, #6
 80038dc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038de:	2317      	movs	r3, #23
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	225c      	movs	r2, #92	@ 0x5c
 80038ea:	5c9b      	ldrb	r3, [r3, r2]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_SPI_Transmit_DMA+0x24>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e0e3      	b.n	8003abc <HAL_SPI_Transmit_DMA+0x1ec>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	225c      	movs	r2, #92	@ 0x5c
 80038f8:	2101      	movs	r1, #1
 80038fa:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	225d      	movs	r2, #93	@ 0x5d
 8003900:	5c9b      	ldrb	r3, [r3, r2]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d004      	beq.n	8003912 <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8003908:	2317      	movs	r3, #23
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	2202      	movs	r2, #2
 800390e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003910:	e0cd      	b.n	8003aae <HAL_SPI_Transmit_DMA+0x1de>
  }

  if ((pData == NULL) || (Size == 0U))
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_SPI_Transmit_DMA+0x50>
 8003918:	1dbb      	adds	r3, r7, #6
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d104      	bne.n	800392a <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8003920:	2317      	movs	r3, #23
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
    goto error;
 8003928:	e0c1      	b.n	8003aae <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	225d      	movs	r2, #93	@ 0x5d
 800392e:	2103      	movs	r1, #3
 8003930:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1dba      	adds	r2, r7, #6
 8003942:	8812      	ldrh	r2, [r2, #0]
 8003944:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1dba      	adds	r2, r7, #6
 800394a:	8812      	ldrh	r2, [r2, #0]
 800394c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2244      	movs	r2, #68	@ 0x44
 8003964:	2100      	movs	r1, #0
 8003966:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2246      	movs	r2, #70	@ 0x46
 800396c:	2100      	movs	r1, #0
 800396e:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	2380      	movs	r3, #128	@ 0x80
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	429a      	cmp	r2, r3
 800397a:	d110      	bne.n	800399e <HAL_SPI_Transmit_DMA+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2140      	movs	r1, #64	@ 0x40
 8003988:	438a      	bics	r2, r1
 800398a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2180      	movs	r1, #128	@ 0x80
 8003998:	01c9      	lsls	r1, r1, #7
 800399a:	430a      	orrs	r2, r1
 800399c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a2:	4a48      	ldr	r2, [pc, #288]	@ (8003ac4 <HAL_SPI_Transmit_DMA+0x1f4>)
 80039a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039aa:	4a47      	ldr	r2, [pc, #284]	@ (8003ac8 <HAL_SPI_Transmit_DMA+0x1f8>)
 80039ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b2:	4a46      	ldr	r2, [pc, #280]	@ (8003acc <HAL_SPI_Transmit_DMA+0x1fc>)
 80039b4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ba:	2200      	movs	r2, #0
 80039bc:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4941      	ldr	r1, [pc, #260]	@ (8003ad0 <HAL_SPI_Transmit_DMA+0x200>)
 80039ca:	400a      	ands	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	23e0      	movs	r3, #224	@ 0xe0
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d82f      	bhi.n	8003a3a <HAL_SPI_Transmit_DMA+0x16a>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	2380      	movs	r3, #128	@ 0x80
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d128      	bne.n	8003a3a <HAL_SPI_Transmit_DMA+0x16a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	001a      	movs	r2, r3
 80039f0:	2301      	movs	r3, #1
 80039f2:	4013      	ands	r3, r2
 80039f4:	d10f      	bne.n	8003a16 <HAL_SPI_Transmit_DMA+0x146>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4933      	ldr	r1, [pc, #204]	@ (8003ad0 <HAL_SPI_Transmit_DMA+0x200>)
 8003a02:	400a      	ands	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a14:	e011      	b.n	8003a3a <HAL_SPI_Transmit_DMA+0x16a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2180      	movs	r1, #128	@ 0x80
 8003a22:	01c9      	lsls	r1, r1, #7
 8003a24:	430a      	orrs	r2, r1
 8003a26:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3301      	adds	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	0019      	movs	r1, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a50:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003a52:	f7fe fb89 	bl	8002168 <HAL_DMA_Start_IT>
 8003a56:	1e03      	subs	r3, r0, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5e:	2210      	movs	r2, #16
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003a66:	2317      	movs	r3, #23
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	701a      	strb	r2, [r3, #0]

    goto error;
 8003a6e:	e01e      	b.n	8003aae <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2240      	movs	r2, #64	@ 0x40
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b40      	cmp	r3, #64	@ 0x40
 8003a7c:	d007      	beq.n	8003a8e <HAL_SPI_Transmit_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2140      	movs	r1, #64	@ 0x40
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2120      	movs	r1, #32
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	225c      	movs	r2, #92	@ 0x5c
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ab6:	2317      	movs	r3, #23
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	781b      	ldrb	r3, [r3, #0]
}
 8003abc:	0018      	movs	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b006      	add	sp, #24
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	0800408f 	.word	0x0800408f
 8003ac8:	08003e9d 	.word	0x08003e9d
 8003acc:	080040e9 	.word	0x080040e9
 8003ad0:	ffffbfff 	.word	0xffffbfff

08003ad4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003ad4:	b590      	push	{r4, r7, lr}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	1cbb      	adds	r3, r7, #2
 8003ae4:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ae6:	2317      	movs	r3, #23
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	225c      	movs	r2, #92	@ 0x5c
 8003af2:	5c9b      	ldrb	r3, [r3, r2]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_SPI_TransmitReceive_DMA+0x28>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e190      	b.n	8003e1e <HAL_SPI_TransmitReceive_DMA+0x34a>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	225c      	movs	r2, #92	@ 0x5c
 8003b00:	2101      	movs	r1, #1
 8003b02:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b04:	2016      	movs	r0, #22
 8003b06:	183b      	adds	r3, r7, r0
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	215d      	movs	r1, #93	@ 0x5d
 8003b0c:	5c52      	ldrb	r2, [r2, r1]
 8003b0e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003b16:	0001      	movs	r1, r0
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d011      	beq.n	8003b44 <HAL_SPI_TransmitReceive_DMA+0x70>
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	2382      	movs	r3, #130	@ 0x82
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d107      	bne.n	8003b3a <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d103      	bne.n	8003b3a <HAL_SPI_TransmitReceive_DMA+0x66>
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d004      	beq.n	8003b44 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8003b3a:	2317      	movs	r3, #23
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	2202      	movs	r2, #2
 8003b40:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b42:	e165      	b.n	8003e10 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <HAL_SPI_TransmitReceive_DMA+0x84>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_SPI_TransmitReceive_DMA+0x84>
 8003b50:	1cbb      	adds	r3, r7, #2
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8003b58:	2317      	movs	r3, #23
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b60:	e156      	b.n	8003e10 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	225d      	movs	r2, #93	@ 0x5d
 8003b66:	5c9b      	ldrb	r3, [r3, r2]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d003      	beq.n	8003b76 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	225d      	movs	r2, #93	@ 0x5d
 8003b72:	2105      	movs	r1, #5
 8003b74:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1cba      	adds	r2, r7, #2
 8003b86:	8812      	ldrh	r2, [r2, #0]
 8003b88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1cba      	adds	r2, r7, #2
 8003b8e:	8812      	ldrh	r2, [r2, #0]
 8003b90:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1cba      	adds	r2, r7, #2
 8003b9c:	2144      	movs	r1, #68	@ 0x44
 8003b9e:	8812      	ldrh	r2, [r2, #0]
 8003ba0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1cba      	adds	r2, r7, #2
 8003ba6:	2146      	movs	r1, #70	@ 0x46
 8003ba8:	8812      	ldrh	r2, [r2, #0]
 8003baa:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
#endif /* USE_SPI_CRC */

#if defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F051x8) || defined (STM32F058xx)
  /* Packing mode management is enabled by the DMA settings */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	23e0      	movs	r3, #224	@ 0xe0
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d80b      	bhi.n	8003bdc <HAL_SPI_TransmitReceive_DMA+0x108>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	2380      	movs	r3, #128	@ 0x80
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d104      	bne.n	8003bdc <HAL_SPI_TransmitReceive_DMA+0x108>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8003bd2:	2317      	movs	r3, #23
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
    goto error;
 8003bda:	e119      	b.n	8003e10 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }
#endif /* STM32F030x6 || STM32F030x8 || STM32F031x6 || STM32F038xx || STM32F051x8 || STM32F058xx */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4990      	ldr	r1, [pc, #576]	@ (8003e28 <HAL_SPI_TransmitReceive_DMA+0x354>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	23e0      	movs	r3, #224	@ 0xe0
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d908      	bls.n	8003c0a <HAL_SPI_TransmitReceive_DMA+0x136>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	498a      	ldr	r1, [pc, #552]	@ (8003e2c <HAL_SPI_TransmitReceive_DMA+0x358>)
 8003c04:	400a      	ands	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	e074      	b.n	8003cf4 <HAL_SPI_TransmitReceive_DMA+0x220>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2180      	movs	r1, #128	@ 0x80
 8003c16:	0149      	lsls	r1, r1, #5
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	2380      	movs	r3, #128	@ 0x80
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d127      	bne.n	8003c7a <HAL_SPI_TransmitReceive_DMA+0x1a6>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8003c2e:	001a      	movs	r2, r3
 8003c30:	2301      	movs	r3, #1
 8003c32:	4013      	ands	r3, r2
 8003c34:	d10f      	bne.n	8003c56 <HAL_SPI_TransmitReceive_DMA+0x182>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	497b      	ldr	r1, [pc, #492]	@ (8003e30 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 8003c42:	400a      	ands	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	085b      	lsrs	r3, r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c54:	e011      	b.n	8003c7a <HAL_SPI_TransmitReceive_DMA+0x1a6>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2180      	movs	r1, #128	@ 0x80
 8003c62:	01c9      	lsls	r1, r1, #7
 8003c64:	430a      	orrs	r2, r1
 8003c66:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d135      	bne.n	8003cf4 <HAL_SPI_TransmitReceive_DMA+0x220>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4966      	ldr	r1, [pc, #408]	@ (8003e2c <HAL_SPI_TransmitReceive_DMA+0x358>)
 8003c94:	400a      	ands	r2, r1
 8003c96:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2246      	movs	r2, #70	@ 0x46
 8003c9c:	5a9b      	ldrh	r3, [r3, r2]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	001a      	movs	r2, r3
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d111      	bne.n	8003ccc <HAL_SPI_TransmitReceive_DMA+0x1f8>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4960      	ldr	r1, [pc, #384]	@ (8003e34 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2246      	movs	r2, #70	@ 0x46
 8003cbc:	5a9b      	ldrh	r3, [r3, r2]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	b299      	uxth	r1, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2246      	movs	r2, #70	@ 0x46
 8003cc8:	5299      	strh	r1, [r3, r2]
 8003cca:	e013      	b.n	8003cf4 <HAL_SPI_TransmitReceive_DMA+0x220>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2180      	movs	r1, #128	@ 0x80
 8003cd8:	0189      	lsls	r1, r1, #6
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2246      	movs	r2, #70	@ 0x46
 8003ce2:	5a9b      	ldrh	r3, [r3, r2]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	085b      	lsrs	r3, r3, #1
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	b299      	uxth	r1, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2246      	movs	r2, #70	@ 0x46
 8003cf2:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	225d      	movs	r2, #93	@ 0x5d
 8003cf8:	5c9b      	ldrb	r3, [r3, r2]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d108      	bne.n	8003d12 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d04:	4a4c      	ldr	r2, [pc, #304]	@ (8003e38 <HAL_SPI_TransmitReceive_DMA+0x364>)
 8003d06:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0c:	4a4b      	ldr	r2, [pc, #300]	@ (8003e3c <HAL_SPI_TransmitReceive_DMA+0x368>)
 8003d0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d10:	e007      	b.n	8003d22 <HAL_SPI_TransmitReceive_DMA+0x24e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d16:	4a4a      	ldr	r2, [pc, #296]	@ (8003e40 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8003d18:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1e:	4a49      	ldr	r2, [pc, #292]	@ (8003e44 <HAL_SPI_TransmitReceive_DMA+0x370>)
 8003d20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d26:	4a48      	ldr	r2, [pc, #288]	@ (8003e48 <HAL_SPI_TransmitReceive_DMA+0x374>)
 8003d28:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2e:	2200      	movs	r2, #0
 8003d30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2246      	movs	r2, #70	@ 0x46
 8003d48:	5a9b      	ldrh	r3, [r3, r2]
 8003d4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003d4c:	0022      	movs	r2, r4
 8003d4e:	f7fe fa0b 	bl	8002168 <HAL_DMA_Start_IT>
 8003d52:	1e03      	subs	r3, r0, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_SPI_TransmitReceive_DMA+0x298>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5a:	2210      	movs	r2, #16
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003d62:	2317      	movs	r3, #23
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	2201      	movs	r2, #1
 8003d68:	701a      	strb	r2, [r3, #0]

    goto error;
 8003d6a:	e051      	b.n	8003e10 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2101      	movs	r1, #1
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d80:	2200      	movs	r2, #0
 8003d82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d88:	2200      	movs	r2, #0
 8003d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d98:	2200      	movs	r2, #0
 8003d9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da4:	0019      	movs	r1, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	330c      	adds	r3, #12
 8003dac:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003db2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003db4:	f7fe f9d8 	bl	8002168 <HAL_DMA_Start_IT>
 8003db8:	1e03      	subs	r3, r0, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_SPI_TransmitReceive_DMA+0x2fe>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003dc8:	2317      	movs	r3, #23
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	2201      	movs	r2, #1
 8003dce:	701a      	strb	r2, [r3, #0]

    goto error;
 8003dd0:	e01e      	b.n	8003e10 <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2240      	movs	r2, #64	@ 0x40
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b40      	cmp	r3, #64	@ 0x40
 8003dde:	d007      	beq.n	8003df0 <HAL_SPI_TransmitReceive_DMA+0x31c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2140      	movs	r1, #64	@ 0x40
 8003dec:	430a      	orrs	r2, r1
 8003dee:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2120      	movs	r1, #32
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	225c      	movs	r2, #92	@ 0x5c
 8003e14:	2100      	movs	r1, #0
 8003e16:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003e18:	2317      	movs	r3, #23
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	781b      	ldrb	r3, [r3, #0]
}
 8003e1e:	0018      	movs	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b007      	add	sp, #28
 8003e24:	bd90      	pop	{r4, r7, pc}
 8003e26:	46c0      	nop			@ (mov r8, r8)
 8003e28:	ffff9fff 	.word	0xffff9fff
 8003e2c:	ffffefff 	.word	0xffffefff
 8003e30:	ffffbfff 	.word	0xffffbfff
 8003e34:	ffffdfff 	.word	0xffffdfff
 8003e38:	080040ad 	.word	0x080040ad
 8003e3c:	08003f49 	.word	0x08003f49
 8003e40:	080040cb 	.word	0x080040cb
 8003e44:	08003ff9 	.word	0x08003ff9
 8003e48:	080040e9 	.word	0x080040e9

08003e4c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003e54:	46c0      	nop			@ (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003e64:	46c0      	nop			@ (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b002      	add	sp, #8
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003e74:	46c0      	nop			@ (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003e84:	46c0      	nop			@ (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b002      	add	sp, #8
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e94:	46c0      	nop			@ (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b002      	add	sp, #8
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eaa:	f7fe f82d 	bl	8001f08 <HAL_GetTick>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d03c      	beq.n	8003f3a <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2120      	movs	r1, #32
 8003ecc:	438a      	bics	r2, r1
 8003ece:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2102      	movs	r1, #2
 8003edc:	438a      	bics	r2, r1
 8003ede:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2164      	movs	r1, #100	@ 0x64
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f000 faae 	bl	8004448 <SPI_EndRxTxTransaction>
 8003eec:	1e03      	subs	r3, r0, #0
 8003eee:	d005      	beq.n	8003efc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	225d      	movs	r2, #93	@ 0x5d
 8003f24:	2101      	movs	r1, #1
 8003f26:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	0018      	movs	r0, r3
 8003f34:	f7ff ffaa 	bl	8003e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003f38:	e003      	b.n	8003f42 <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f7fd f8eb 	bl	8001118 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b006      	add	sp, #24
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f56:	f7fd ffd7 	bl	8001f08 <HAL_GetTick>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2220      	movs	r2, #32
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d03e      	beq.n	8003fea <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2120      	movs	r1, #32
 8003f78:	438a      	bics	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10e      	bne.n	8003fa2 <SPI_DMAReceiveCplt+0x5a>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	2382      	movs	r3, #130	@ 0x82
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d108      	bne.n	8003fa2 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2103      	movs	r1, #3
 8003f9c:	438a      	bics	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
 8003fa0:	e007      	b.n	8003fb2 <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2101      	movs	r1, #1
 8003fae:	438a      	bics	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2164      	movs	r1, #100	@ 0x64
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f000 f9e7 	bl	800438c <SPI_EndRxTransaction>
 8003fbe:	1e03      	subs	r3, r0, #0
 8003fc0:	d002      	beq.n	8003fc8 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2246      	movs	r2, #70	@ 0x46
 8003fcc:	2100      	movs	r1, #0
 8003fce:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	225d      	movs	r2, #93	@ 0x5d
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d004      	beq.n	8003fea <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f7ff ff52 	bl	8003e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003fe8:	e003      	b.n	8003ff2 <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7ff ff2d 	bl	8003e4c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b004      	add	sp, #16
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004006:	f7fd ff7f 	bl	8001f08 <HAL_GetTick>
 800400a:	0003      	movs	r3, r0
 800400c:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2220      	movs	r2, #32
 8004016:	4013      	ands	r3, r2
 8004018:	2b20      	cmp	r3, #32
 800401a:	d031      	beq.n	8004080 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2120      	movs	r1, #32
 8004028:	438a      	bics	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2164      	movs	r1, #100	@ 0x64
 8004032:	0018      	movs	r0, r3
 8004034:	f000 fa08 	bl	8004448 <SPI_EndRxTxTransaction>
 8004038:	1e03      	subs	r3, r0, #0
 800403a:	d005      	beq.n	8004048 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004040:	2220      	movs	r2, #32
 8004042:	431a      	orrs	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2103      	movs	r1, #3
 8004054:	438a      	bics	r2, r1
 8004056:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2246      	movs	r2, #70	@ 0x46
 8004062:	2100      	movs	r1, #0
 8004064:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	225d      	movs	r2, #93	@ 0x5d
 800406a:	2101      	movs	r1, #1
 800406c:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004072:	2b00      	cmp	r3, #0
 8004074:	d004      	beq.n	8004080 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	0018      	movs	r0, r3
 800407a:	f7ff ff07 	bl	8003e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800407e:	e003      	b.n	8004088 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	0018      	movs	r0, r3
 8004084:	f7fd f85c 	bl	8001140 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004088:	46bd      	mov	sp, r7
 800408a:	b004      	add	sp, #16
 800408c:	bd80      	pop	{r7, pc}

0800408e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	0018      	movs	r0, r3
 80040a0:	f7ff fedc 	bl	8003e5c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040a4:	46c0      	nop			@ (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b004      	add	sp, #16
 80040aa:	bd80      	pop	{r7, pc}

080040ac <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	0018      	movs	r0, r3
 80040be:	f7ff fed5 	bl	8003e6c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b004      	add	sp, #16
 80040c8:	bd80      	pop	{r7, pc}

080040ca <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	0018      	movs	r0, r3
 80040dc:	f7ff fece 	bl	8003e7c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040e0:	46c0      	nop			@ (mov r8, r8)
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b004      	add	sp, #16
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2103      	movs	r1, #3
 8004102:	438a      	bics	r2, r1
 8004104:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410a:	2210      	movs	r2, #16
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	225d      	movs	r2, #93	@ 0x5d
 8004116:	2101      	movs	r1, #1
 8004118:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	0018      	movs	r0, r3
 800411e:	f7ff feb5 	bl	8003e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004122:	46c0      	nop			@ (mov r8, r8)
 8004124:	46bd      	mov	sp, r7
 8004126:	b004      	add	sp, #16
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	1dfb      	adds	r3, r7, #7
 800413a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800413c:	f7fd fee4 	bl	8001f08 <HAL_GetTick>
 8004140:	0002      	movs	r2, r0
 8004142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	18d3      	adds	r3, r2, r3
 800414a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800414c:	f7fd fedc 	bl	8001f08 <HAL_GetTick>
 8004150:	0003      	movs	r3, r0
 8004152:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004154:	4b3a      	ldr	r3, [pc, #232]	@ (8004240 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	015b      	lsls	r3, r3, #5
 800415a:	0d1b      	lsrs	r3, r3, #20
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	4353      	muls	r3, r2
 8004160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004162:	e058      	b.n	8004216 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	3301      	adds	r3, #1
 8004168:	d055      	beq.n	8004216 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800416a:	f7fd fecd 	bl	8001f08 <HAL_GetTick>
 800416e:	0002      	movs	r2, r0
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	429a      	cmp	r2, r3
 8004178:	d902      	bls.n	8004180 <SPI_WaitFlagStateUntilTimeout+0x54>
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d142      	bne.n	8004206 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	21e0      	movs	r1, #224	@ 0xe0
 800418c:	438a      	bics	r2, r1
 800418e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	2382      	movs	r3, #130	@ 0x82
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	429a      	cmp	r2, r3
 800419a:	d113      	bne.n	80041c4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	2380      	movs	r3, #128	@ 0x80
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d005      	beq.n	80041b4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	2380      	movs	r3, #128	@ 0x80
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d107      	bne.n	80041c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2140      	movs	r1, #64	@ 0x40
 80041c0:	438a      	bics	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041c8:	2380      	movs	r3, #128	@ 0x80
 80041ca:	019b      	lsls	r3, r3, #6
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d110      	bne.n	80041f2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	491a      	ldr	r1, [pc, #104]	@ (8004244 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80041dc:	400a      	ands	r2, r1
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2180      	movs	r1, #128	@ 0x80
 80041ec:	0189      	lsls	r1, r1, #6
 80041ee:	430a      	orrs	r2, r1
 80041f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	225d      	movs	r2, #93	@ 0x5d
 80041f6:	2101      	movs	r1, #1
 80041f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	225c      	movs	r2, #92	@ 0x5c
 80041fe:	2100      	movs	r1, #0
 8004200:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e017      	b.n	8004236 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3b01      	subs	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	425a      	negs	r2, r3
 8004226:	4153      	adcs	r3, r2
 8004228:	b2db      	uxtb	r3, r3
 800422a:	001a      	movs	r2, r3
 800422c:	1dfb      	adds	r3, r7, #7
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d197      	bne.n	8004164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	0018      	movs	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	b008      	add	sp, #32
 800423c:	bd80      	pop	{r7, pc}
 800423e:	46c0      	nop			@ (mov r8, r8)
 8004240:	20000000 	.word	0x20000000
 8004244:	ffffdfff 	.word	0xffffdfff

08004248 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	@ 0x28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004256:	2317      	movs	r3, #23
 8004258:	18fb      	adds	r3, r7, r3
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800425e:	f7fd fe53 	bl	8001f08 <HAL_GetTick>
 8004262:	0002      	movs	r2, r0
 8004264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	18d3      	adds	r3, r2, r3
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800426e:	f7fd fe4b 	bl	8001f08 <HAL_GetTick>
 8004272:	0003      	movs	r3, r0
 8004274:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800427e:	4b41      	ldr	r3, [pc, #260]	@ (8004384 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	0013      	movs	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	189b      	adds	r3, r3, r2
 8004288:	00da      	lsls	r2, r3, #3
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	0d1b      	lsrs	r3, r3, #20
 800428e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004290:	4353      	muls	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004294:	e068      	b.n	8004368 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	23c0      	movs	r3, #192	@ 0xc0
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	429a      	cmp	r2, r3
 800429e:	d10a      	bne.n	80042b6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d107      	bne.n	80042b6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	2117      	movs	r1, #23
 80042ae:	187b      	adds	r3, r7, r1
 80042b0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80042b2:	187b      	adds	r3, r7, r1
 80042b4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	3301      	adds	r3, #1
 80042ba:	d055      	beq.n	8004368 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042bc:	f7fd fe24 	bl	8001f08 <HAL_GetTick>
 80042c0:	0002      	movs	r2, r0
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d902      	bls.n	80042d2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d142      	bne.n	8004358 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	21e0      	movs	r1, #224	@ 0xe0
 80042de:	438a      	bics	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	2382      	movs	r3, #130	@ 0x82
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d113      	bne.n	8004316 <SPI_WaitFifoStateUntilTimeout+0xce>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	2380      	movs	r3, #128	@ 0x80
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d005      	beq.n	8004306 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	2380      	movs	r3, #128	@ 0x80
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	429a      	cmp	r2, r3
 8004304:	d107      	bne.n	8004316 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2140      	movs	r1, #64	@ 0x40
 8004312:	438a      	bics	r2, r1
 8004314:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800431a:	2380      	movs	r3, #128	@ 0x80
 800431c:	019b      	lsls	r3, r3, #6
 800431e:	429a      	cmp	r2, r3
 8004320:	d110      	bne.n	8004344 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4916      	ldr	r1, [pc, #88]	@ (8004388 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800432e:	400a      	ands	r2, r1
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2180      	movs	r1, #128	@ 0x80
 800433e:	0189      	lsls	r1, r1, #6
 8004340:	430a      	orrs	r2, r1
 8004342:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	225d      	movs	r2, #93	@ 0x5d
 8004348:	2101      	movs	r1, #1
 800434a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	225c      	movs	r2, #92	@ 0x5c
 8004350:	2100      	movs	r1, #0
 8004352:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e010      	b.n	800437a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	3b01      	subs	r3, #1
 8004366:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	4013      	ands	r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	d18e      	bne.n	8004296 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b00a      	add	sp, #40	@ 0x28
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			@ (mov r8, r8)
 8004384:	20000000 	.word	0x20000000
 8004388:	ffffdfff 	.word	0xffffdfff

0800438c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	2382      	movs	r3, #130	@ 0x82
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d113      	bne.n	80043cc <SPI_EndRxTransaction+0x40>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	2380      	movs	r3, #128	@ 0x80
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d005      	beq.n	80043bc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	2380      	movs	r3, #128	@ 0x80
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d107      	bne.n	80043cc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2140      	movs	r1, #64	@ 0x40
 80043c8:	438a      	bics	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	0013      	movs	r3, r2
 80043d6:	2200      	movs	r2, #0
 80043d8:	2180      	movs	r1, #128	@ 0x80
 80043da:	f7ff fea7 	bl	800412c <SPI_WaitFlagStateUntilTimeout>
 80043de:	1e03      	subs	r3, r0, #0
 80043e0:	d007      	beq.n	80043f2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e6:	2220      	movs	r2, #32
 80043e8:	431a      	orrs	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e026      	b.n	8004440 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	2382      	movs	r3, #130	@ 0x82
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d11f      	bne.n	800443e <SPI_EndRxTransaction+0xb2>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	2380      	movs	r3, #128	@ 0x80
 8004404:	021b      	lsls	r3, r3, #8
 8004406:	429a      	cmp	r2, r3
 8004408:	d005      	beq.n	8004416 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	2380      	movs	r3, #128	@ 0x80
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	429a      	cmp	r2, r3
 8004414:	d113      	bne.n	800443e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	23c0      	movs	r3, #192	@ 0xc0
 800441a:	00d9      	lsls	r1, r3, #3
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	0013      	movs	r3, r2
 8004424:	2200      	movs	r2, #0
 8004426:	f7ff ff0f 	bl	8004248 <SPI_WaitFifoStateUntilTimeout>
 800442a:	1e03      	subs	r3, r0, #0
 800442c:	d007      	beq.n	800443e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004432:	2220      	movs	r2, #32
 8004434:	431a      	orrs	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e000      	b.n	8004440 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	0018      	movs	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	b004      	add	sp, #16
 8004446:	bd80      	pop	{r7, pc}

08004448 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	23c0      	movs	r3, #192	@ 0xc0
 8004458:	0159      	lsls	r1, r3, #5
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	0013      	movs	r3, r2
 8004462:	2200      	movs	r2, #0
 8004464:	f7ff fef0 	bl	8004248 <SPI_WaitFifoStateUntilTimeout>
 8004468:	1e03      	subs	r3, r0, #0
 800446a:	d007      	beq.n	800447c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004470:	2220      	movs	r2, #32
 8004472:	431a      	orrs	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e027      	b.n	80044cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	0013      	movs	r3, r2
 8004486:	2200      	movs	r2, #0
 8004488:	2180      	movs	r1, #128	@ 0x80
 800448a:	f7ff fe4f 	bl	800412c <SPI_WaitFlagStateUntilTimeout>
 800448e:	1e03      	subs	r3, r0, #0
 8004490:	d007      	beq.n	80044a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004496:	2220      	movs	r2, #32
 8004498:	431a      	orrs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e014      	b.n	80044cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	23c0      	movs	r3, #192	@ 0xc0
 80044a6:	00d9      	lsls	r1, r3, #3
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	0013      	movs	r3, r2
 80044b0:	2200      	movs	r2, #0
 80044b2:	f7ff fec9 	bl	8004248 <SPI_WaitFifoStateUntilTimeout>
 80044b6:	1e03      	subs	r3, r0, #0
 80044b8:	d007      	beq.n	80044ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044be:	2220      	movs	r2, #32
 80044c0:	431a      	orrs	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e000      	b.n	80044cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	0018      	movs	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b004      	add	sp, #16
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e044      	b.n	8004570 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d107      	bne.n	80044fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2278      	movs	r2, #120	@ 0x78
 80044f2:	2100      	movs	r1, #0
 80044f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0018      	movs	r0, r3
 80044fa:	f7fd fc2d 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2224      	movs	r2, #36	@ 0x24
 8004502:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2101      	movs	r1, #1
 8004510:	438a      	bics	r2, r1
 8004512:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	0018      	movs	r0, r3
 8004520:	f000 fd08 	bl	8004f34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	0018      	movs	r0, r3
 8004528:	f000 fbc4 	bl	8004cb4 <UART_SetConfig>
 800452c:	0003      	movs	r3, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e01c      	b.n	8004570 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	490d      	ldr	r1, [pc, #52]	@ (8004578 <HAL_UART_Init+0xa4>)
 8004542:	400a      	ands	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	212a      	movs	r1, #42	@ 0x2a
 8004552:	438a      	bics	r2, r1
 8004554:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2101      	movs	r1, #1
 8004562:	430a      	orrs	r2, r1
 8004564:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0018      	movs	r0, r3
 800456a:	f000 fd97 	bl	800509c <UART_CheckIdleState>
 800456e:	0003      	movs	r3, r0
}
 8004570:	0018      	movs	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	b002      	add	sp, #8
 8004576:	bd80      	pop	{r7, pc}
 8004578:	ffffb7ff 	.word	0xffffb7ff

0800457c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	@ 0x28
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	1dbb      	adds	r3, r7, #6
 800458a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004590:	2b20      	cmp	r3, #32
 8004592:	d000      	beq.n	8004596 <HAL_UART_Transmit+0x1a>
 8004594:	e08c      	b.n	80046b0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_UART_Transmit+0x28>
 800459c:	1dbb      	adds	r3, r7, #6
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e084      	b.n	80046b2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	2380      	movs	r3, #128	@ 0x80
 80045ae:	015b      	lsls	r3, r3, #5
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d109      	bne.n	80045c8 <HAL_UART_Transmit+0x4c>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2201      	movs	r2, #1
 80045c0:	4013      	ands	r3, r2
 80045c2:	d001      	beq.n	80045c8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e074      	b.n	80046b2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2284      	movs	r2, #132	@ 0x84
 80045cc:	2100      	movs	r1, #0
 80045ce:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2221      	movs	r2, #33	@ 0x21
 80045d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045d6:	f7fd fc97 	bl	8001f08 <HAL_GetTick>
 80045da:	0003      	movs	r3, r0
 80045dc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1dba      	adds	r2, r7, #6
 80045e2:	2150      	movs	r1, #80	@ 0x50
 80045e4:	8812      	ldrh	r2, [r2, #0]
 80045e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	1dba      	adds	r2, r7, #6
 80045ec:	2152      	movs	r1, #82	@ 0x52
 80045ee:	8812      	ldrh	r2, [r2, #0]
 80045f0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	2380      	movs	r3, #128	@ 0x80
 80045f8:	015b      	lsls	r3, r3, #5
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d108      	bne.n	8004610 <HAL_UART_Transmit+0x94>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d104      	bne.n	8004610 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004606:	2300      	movs	r3, #0
 8004608:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	e003      	b.n	8004618 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004614:	2300      	movs	r3, #0
 8004616:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004618:	e02f      	b.n	800467a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	0013      	movs	r3, r2
 8004624:	2200      	movs	r2, #0
 8004626:	2180      	movs	r1, #128	@ 0x80
 8004628:	f000 fde0 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 800462c:	1e03      	subs	r3, r0, #0
 800462e:	d004      	beq.n	800463a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e03b      	b.n	80046b2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10b      	bne.n	8004658 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	881a      	ldrh	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	05d2      	lsls	r2, r2, #23
 800464a:	0dd2      	lsrs	r2, r2, #23
 800464c:	b292      	uxth	r2, r2
 800464e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	3302      	adds	r3, #2
 8004654:	61bb      	str	r3, [r7, #24]
 8004656:	e007      	b.n	8004668 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	781a      	ldrb	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3301      	adds	r3, #1
 8004666:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2252      	movs	r2, #82	@ 0x52
 800466c:	5a9b      	ldrh	r3, [r3, r2]
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b299      	uxth	r1, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2252      	movs	r2, #82	@ 0x52
 8004678:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2252      	movs	r2, #82	@ 0x52
 800467e:	5a9b      	ldrh	r3, [r3, r2]
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1c9      	bne.n	800461a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	0013      	movs	r3, r2
 8004690:	2200      	movs	r2, #0
 8004692:	2140      	movs	r1, #64	@ 0x40
 8004694:	f000 fdaa 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 8004698:	1e03      	subs	r3, r0, #0
 800469a:	d004      	beq.n	80046a6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e005      	b.n	80046b2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	e000      	b.n	80046b2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80046b0:	2302      	movs	r3, #2
  }
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b008      	add	sp, #32
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046bc:	b590      	push	{r4, r7, lr}
 80046be:	b0ab      	sub	sp, #172	@ 0xac
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	22a4      	movs	r2, #164	@ 0xa4
 80046cc:	18b9      	adds	r1, r7, r2
 80046ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	20a0      	movs	r0, #160	@ 0xa0
 80046d8:	1839      	adds	r1, r7, r0
 80046da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	219c      	movs	r1, #156	@ 0x9c
 80046e4:	1879      	adds	r1, r7, r1
 80046e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046e8:	0011      	movs	r1, r2
 80046ea:	18bb      	adds	r3, r7, r2
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a99      	ldr	r2, [pc, #612]	@ (8004954 <HAL_UART_IRQHandler+0x298>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	2298      	movs	r2, #152	@ 0x98
 80046f4:	18bc      	adds	r4, r7, r2
 80046f6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80046f8:	18bb      	adds	r3, r7, r2
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d114      	bne.n	800472a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004700:	187b      	adds	r3, r7, r1
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2220      	movs	r2, #32
 8004706:	4013      	ands	r3, r2
 8004708:	d00f      	beq.n	800472a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800470a:	183b      	adds	r3, r7, r0
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2220      	movs	r2, #32
 8004710:	4013      	ands	r3, r2
 8004712:	d00a      	beq.n	800472a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004718:	2b00      	cmp	r3, #0
 800471a:	d100      	bne.n	800471e <HAL_UART_IRQHandler+0x62>
 800471c:	e29e      	b.n	8004c5c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	0010      	movs	r0, r2
 8004726:	4798      	blx	r3
      }
      return;
 8004728:	e298      	b.n	8004c5c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800472a:	2398      	movs	r3, #152	@ 0x98
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d100      	bne.n	8004736 <HAL_UART_IRQHandler+0x7a>
 8004734:	e114      	b.n	8004960 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004736:	239c      	movs	r3, #156	@ 0x9c
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2201      	movs	r2, #1
 800473e:	4013      	ands	r3, r2
 8004740:	d106      	bne.n	8004750 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004742:	23a0      	movs	r3, #160	@ 0xa0
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a83      	ldr	r2, [pc, #524]	@ (8004958 <HAL_UART_IRQHandler+0x29c>)
 800474a:	4013      	ands	r3, r2
 800474c:	d100      	bne.n	8004750 <HAL_UART_IRQHandler+0x94>
 800474e:	e107      	b.n	8004960 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004750:	23a4      	movs	r3, #164	@ 0xa4
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2201      	movs	r2, #1
 8004758:	4013      	ands	r3, r2
 800475a:	d012      	beq.n	8004782 <HAL_UART_IRQHandler+0xc6>
 800475c:	23a0      	movs	r3, #160	@ 0xa0
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	2380      	movs	r3, #128	@ 0x80
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4013      	ands	r3, r2
 8004768:	d00b      	beq.n	8004782 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2201      	movs	r2, #1
 8004770:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2284      	movs	r2, #132	@ 0x84
 8004776:	589b      	ldr	r3, [r3, r2]
 8004778:	2201      	movs	r2, #1
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2184      	movs	r1, #132	@ 0x84
 8004780:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004782:	23a4      	movs	r3, #164	@ 0xa4
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2202      	movs	r2, #2
 800478a:	4013      	ands	r3, r2
 800478c:	d011      	beq.n	80047b2 <HAL_UART_IRQHandler+0xf6>
 800478e:	239c      	movs	r3, #156	@ 0x9c
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2201      	movs	r2, #1
 8004796:	4013      	ands	r3, r2
 8004798:	d00b      	beq.n	80047b2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2202      	movs	r2, #2
 80047a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2284      	movs	r2, #132	@ 0x84
 80047a6:	589b      	ldr	r3, [r3, r2]
 80047a8:	2204      	movs	r2, #4
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2184      	movs	r1, #132	@ 0x84
 80047b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047b2:	23a4      	movs	r3, #164	@ 0xa4
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2204      	movs	r2, #4
 80047ba:	4013      	ands	r3, r2
 80047bc:	d011      	beq.n	80047e2 <HAL_UART_IRQHandler+0x126>
 80047be:	239c      	movs	r3, #156	@ 0x9c
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2201      	movs	r2, #1
 80047c6:	4013      	ands	r3, r2
 80047c8:	d00b      	beq.n	80047e2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2204      	movs	r2, #4
 80047d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2284      	movs	r2, #132	@ 0x84
 80047d6:	589b      	ldr	r3, [r3, r2]
 80047d8:	2202      	movs	r2, #2
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2184      	movs	r1, #132	@ 0x84
 80047e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047e2:	23a4      	movs	r3, #164	@ 0xa4
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2208      	movs	r2, #8
 80047ea:	4013      	ands	r3, r2
 80047ec:	d017      	beq.n	800481e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047ee:	23a0      	movs	r3, #160	@ 0xa0
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2220      	movs	r2, #32
 80047f6:	4013      	ands	r3, r2
 80047f8:	d105      	bne.n	8004806 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047fa:	239c      	movs	r3, #156	@ 0x9c
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2201      	movs	r2, #1
 8004802:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004804:	d00b      	beq.n	800481e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2208      	movs	r2, #8
 800480c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2284      	movs	r2, #132	@ 0x84
 8004812:	589b      	ldr	r3, [r3, r2]
 8004814:	2208      	movs	r2, #8
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2184      	movs	r1, #132	@ 0x84
 800481c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800481e:	23a4      	movs	r3, #164	@ 0xa4
 8004820:	18fb      	adds	r3, r7, r3
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	2380      	movs	r3, #128	@ 0x80
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	4013      	ands	r3, r2
 800482a:	d013      	beq.n	8004854 <HAL_UART_IRQHandler+0x198>
 800482c:	23a0      	movs	r3, #160	@ 0xa0
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	2380      	movs	r3, #128	@ 0x80
 8004834:	04db      	lsls	r3, r3, #19
 8004836:	4013      	ands	r3, r2
 8004838:	d00c      	beq.n	8004854 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2280      	movs	r2, #128	@ 0x80
 8004840:	0112      	lsls	r2, r2, #4
 8004842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2284      	movs	r2, #132	@ 0x84
 8004848:	589b      	ldr	r3, [r3, r2]
 800484a:	2220      	movs	r2, #32
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2184      	movs	r1, #132	@ 0x84
 8004852:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2284      	movs	r2, #132	@ 0x84
 8004858:	589b      	ldr	r3, [r3, r2]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d100      	bne.n	8004860 <HAL_UART_IRQHandler+0x1a4>
 800485e:	e1ff      	b.n	8004c60 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004860:	23a4      	movs	r3, #164	@ 0xa4
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2220      	movs	r2, #32
 8004868:	4013      	ands	r3, r2
 800486a:	d00e      	beq.n	800488a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800486c:	23a0      	movs	r3, #160	@ 0xa0
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2220      	movs	r2, #32
 8004874:	4013      	ands	r3, r2
 8004876:	d008      	beq.n	800488a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800487c:	2b00      	cmp	r3, #0
 800487e:	d004      	beq.n	800488a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	0010      	movs	r0, r2
 8004888:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2284      	movs	r2, #132	@ 0x84
 800488e:	589b      	ldr	r3, [r3, r2]
 8004890:	2194      	movs	r1, #148	@ 0x94
 8004892:	187a      	adds	r2, r7, r1
 8004894:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2240      	movs	r2, #64	@ 0x40
 800489e:	4013      	ands	r3, r2
 80048a0:	2b40      	cmp	r3, #64	@ 0x40
 80048a2:	d004      	beq.n	80048ae <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048a4:	187b      	adds	r3, r7, r1
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2228      	movs	r2, #40	@ 0x28
 80048aa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048ac:	d047      	beq.n	800493e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f000 fd0b 	bl	80052cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2240      	movs	r2, #64	@ 0x40
 80048be:	4013      	ands	r3, r2
 80048c0:	2b40      	cmp	r3, #64	@ 0x40
 80048c2:	d137      	bne.n	8004934 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c4:	f3ef 8310 	mrs	r3, PRIMASK
 80048c8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80048ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048cc:	2090      	movs	r0, #144	@ 0x90
 80048ce:	183a      	adds	r2, r7, r0
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	2301      	movs	r3, #1
 80048d4:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048d8:	f383 8810 	msr	PRIMASK, r3
}
 80048dc:	46c0      	nop			@ (mov r8, r8)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2140      	movs	r1, #64	@ 0x40
 80048ea:	438a      	bics	r2, r1
 80048ec:	609a      	str	r2, [r3, #8]
 80048ee:	183b      	adds	r3, r7, r0
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048f6:	f383 8810 	msr	PRIMASK, r3
}
 80048fa:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004900:	2b00      	cmp	r3, #0
 8004902:	d012      	beq.n	800492a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004908:	4a14      	ldr	r2, [pc, #80]	@ (800495c <HAL_UART_IRQHandler+0x2a0>)
 800490a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004910:	0018      	movs	r0, r3
 8004912:	f7fd fcc7 	bl	80022a4 <HAL_DMA_Abort_IT>
 8004916:	1e03      	subs	r3, r0, #0
 8004918:	d01a      	beq.n	8004950 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800491e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004924:	0018      	movs	r0, r3
 8004926:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004928:	e012      	b.n	8004950 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	0018      	movs	r0, r3
 800492e:	f000 f9ad 	bl	8004c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004932:	e00d      	b.n	8004950 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	0018      	movs	r0, r3
 8004938:	f000 f9a8 	bl	8004c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493c:	e008      	b.n	8004950 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f000 f9a3 	bl	8004c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2284      	movs	r2, #132	@ 0x84
 800494a:	2100      	movs	r1, #0
 800494c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800494e:	e187      	b.n	8004c60 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004950:	46c0      	nop			@ (mov r8, r8)
    return;
 8004952:	e185      	b.n	8004c60 <HAL_UART_IRQHandler+0x5a4>
 8004954:	0000080f 	.word	0x0000080f
 8004958:	04000120 	.word	0x04000120
 800495c:	08005395 	.word	0x08005395

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004964:	2b01      	cmp	r3, #1
 8004966:	d000      	beq.n	800496a <HAL_UART_IRQHandler+0x2ae>
 8004968:	e139      	b.n	8004bde <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800496a:	23a4      	movs	r3, #164	@ 0xa4
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2210      	movs	r2, #16
 8004972:	4013      	ands	r3, r2
 8004974:	d100      	bne.n	8004978 <HAL_UART_IRQHandler+0x2bc>
 8004976:	e132      	b.n	8004bde <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004978:	23a0      	movs	r3, #160	@ 0xa0
 800497a:	18fb      	adds	r3, r7, r3
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2210      	movs	r2, #16
 8004980:	4013      	ands	r3, r2
 8004982:	d100      	bne.n	8004986 <HAL_UART_IRQHandler+0x2ca>
 8004984:	e12b      	b.n	8004bde <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2210      	movs	r2, #16
 800498c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2240      	movs	r2, #64	@ 0x40
 8004996:	4013      	ands	r3, r2
 8004998:	2b40      	cmp	r3, #64	@ 0x40
 800499a:	d000      	beq.n	800499e <HAL_UART_IRQHandler+0x2e2>
 800499c:	e09f      	b.n	8004ade <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	217e      	movs	r1, #126	@ 0x7e
 80049a8:	187b      	adds	r3, r7, r1
 80049aa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80049ac:	187b      	adds	r3, r7, r1
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d100      	bne.n	80049b6 <HAL_UART_IRQHandler+0x2fa>
 80049b4:	e156      	b.n	8004c64 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2258      	movs	r2, #88	@ 0x58
 80049ba:	5a9b      	ldrh	r3, [r3, r2]
 80049bc:	187a      	adds	r2, r7, r1
 80049be:	8812      	ldrh	r2, [r2, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d300      	bcc.n	80049c6 <HAL_UART_IRQHandler+0x30a>
 80049c4:	e14e      	b.n	8004c64 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	187a      	adds	r2, r7, r1
 80049ca:	215a      	movs	r1, #90	@ 0x5a
 80049cc:	8812      	ldrh	r2, [r2, #0]
 80049ce:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d06f      	beq.n	8004aba <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049da:	f3ef 8310 	mrs	r3, PRIMASK
 80049de:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80049e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049e4:	2301      	movs	r3, #1
 80049e6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ea:	f383 8810 	msr	PRIMASK, r3
}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	499e      	ldr	r1, [pc, #632]	@ (8004c74 <HAL_UART_IRQHandler+0x5b8>)
 80049fc:	400a      	ands	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a02:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a06:	f383 8810 	msr	PRIMASK, r3
}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a14:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a16:	2301      	movs	r3, #1
 8004a18:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a1c:	f383 8810 	msr	PRIMASK, r3
}
 8004a20:	46c0      	nop			@ (mov r8, r8)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	438a      	bics	r2, r1
 8004a30:	609a      	str	r2, [r3, #8]
 8004a32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a34:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a38:	f383 8810 	msr	PRIMASK, r3
}
 8004a3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a42:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004a44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a46:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a48:	2301      	movs	r3, #1
 8004a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a4e:	f383 8810 	msr	PRIMASK, r3
}
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2140      	movs	r1, #64	@ 0x40
 8004a60:	438a      	bics	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a66:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a6a:	f383 8810 	msr	PRIMASK, r3
}
 8004a6e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2280      	movs	r2, #128	@ 0x80
 8004a74:	2120      	movs	r1, #32
 8004a76:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a82:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a88:	2301      	movs	r3, #1
 8004a8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a8e:	f383 8810 	msr	PRIMASK, r3
}
 8004a92:	46c0      	nop			@ (mov r8, r8)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2110      	movs	r1, #16
 8004aa0:	438a      	bics	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aaa:	f383 8810 	msr	PRIMASK, r3
}
 8004aae:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7fd fbbd 	bl	8002234 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2202      	movs	r2, #2
 8004abe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2258      	movs	r2, #88	@ 0x58
 8004ac4:	5a9a      	ldrh	r2, [r3, r2]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	215a      	movs	r1, #90	@ 0x5a
 8004aca:	5a5b      	ldrh	r3, [r3, r1]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	0011      	movs	r1, r2
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f000 f8e0 	bl	8004c9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004adc:	e0c2      	b.n	8004c64 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2258      	movs	r2, #88	@ 0x58
 8004ae2:	5a99      	ldrh	r1, [r3, r2]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	225a      	movs	r2, #90	@ 0x5a
 8004ae8:	5a9b      	ldrh	r3, [r3, r2]
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	208e      	movs	r0, #142	@ 0x8e
 8004aee:	183b      	adds	r3, r7, r0
 8004af0:	1a8a      	subs	r2, r1, r2
 8004af2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	225a      	movs	r2, #90	@ 0x5a
 8004af8:	5a9b      	ldrh	r3, [r3, r2]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d100      	bne.n	8004b02 <HAL_UART_IRQHandler+0x446>
 8004b00:	e0b2      	b.n	8004c68 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004b02:	183b      	adds	r3, r7, r0
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d100      	bne.n	8004b0c <HAL_UART_IRQHandler+0x450>
 8004b0a:	e0ad      	b.n	8004c68 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b10:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b12:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b14:	2488      	movs	r4, #136	@ 0x88
 8004b16:	193a      	adds	r2, r7, r4
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f383 8810 	msr	PRIMASK, r3
}
 8004b24:	46c0      	nop			@ (mov r8, r8)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4951      	ldr	r1, [pc, #324]	@ (8004c78 <HAL_UART_IRQHandler+0x5bc>)
 8004b32:	400a      	ands	r2, r1
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	193b      	adds	r3, r7, r4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f383 8810 	msr	PRIMASK, r3
}
 8004b42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b44:	f3ef 8310 	mrs	r3, PRIMASK
 8004b48:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b4a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4c:	2484      	movs	r4, #132	@ 0x84
 8004b4e:	193a      	adds	r2, r7, r4
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	2301      	movs	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f383 8810 	msr	PRIMASK, r3
}
 8004b5c:	46c0      	nop			@ (mov r8, r8)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2101      	movs	r1, #1
 8004b6a:	438a      	bics	r2, r1
 8004b6c:	609a      	str	r2, [r3, #8]
 8004b6e:	193b      	adds	r3, r7, r4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	f383 8810 	msr	PRIMASK, r3
}
 8004b7a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2280      	movs	r2, #128	@ 0x80
 8004b80:	2120      	movs	r1, #32
 8004b82:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b90:	f3ef 8310 	mrs	r3, PRIMASK
 8004b94:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b98:	2480      	movs	r4, #128	@ 0x80
 8004b9a:	193a      	adds	r2, r7, r4
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba4:	f383 8810 	msr	PRIMASK, r3
}
 8004ba8:	46c0      	nop			@ (mov r8, r8)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2110      	movs	r1, #16
 8004bb6:	438a      	bics	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	193b      	adds	r3, r7, r4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc2:	f383 8810 	msr	PRIMASK, r3
}
 8004bc6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bce:	183b      	adds	r3, r7, r0
 8004bd0:	881a      	ldrh	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0011      	movs	r1, r2
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 f860 	bl	8004c9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bdc:	e044      	b.n	8004c68 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bde:	23a4      	movs	r3, #164	@ 0xa4
 8004be0:	18fb      	adds	r3, r7, r3
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2380      	movs	r3, #128	@ 0x80
 8004be6:	035b      	lsls	r3, r3, #13
 8004be8:	4013      	ands	r3, r2
 8004bea:	d010      	beq.n	8004c0e <HAL_UART_IRQHandler+0x552>
 8004bec:	239c      	movs	r3, #156	@ 0x9c
 8004bee:	18fb      	adds	r3, r7, r3
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	2380      	movs	r3, #128	@ 0x80
 8004bf4:	03db      	lsls	r3, r3, #15
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2280      	movs	r2, #128	@ 0x80
 8004c00:	0352      	lsls	r2, r2, #13
 8004c02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	0018      	movs	r0, r3
 8004c08:	f000 fc06 	bl	8005418 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c0c:	e02f      	b.n	8004c6e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c0e:	23a4      	movs	r3, #164	@ 0xa4
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2280      	movs	r2, #128	@ 0x80
 8004c16:	4013      	ands	r3, r2
 8004c18:	d00f      	beq.n	8004c3a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c1a:	23a0      	movs	r3, #160	@ 0xa0
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2280      	movs	r2, #128	@ 0x80
 8004c22:	4013      	ands	r3, r2
 8004c24:	d009      	beq.n	8004c3a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01e      	beq.n	8004c6c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	0010      	movs	r0, r2
 8004c36:	4798      	blx	r3
    }
    return;
 8004c38:	e018      	b.n	8004c6c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c3a:	23a4      	movs	r3, #164	@ 0xa4
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2240      	movs	r2, #64	@ 0x40
 8004c42:	4013      	ands	r3, r2
 8004c44:	d013      	beq.n	8004c6e <HAL_UART_IRQHandler+0x5b2>
 8004c46:	23a0      	movs	r3, #160	@ 0xa0
 8004c48:	18fb      	adds	r3, r7, r3
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2240      	movs	r2, #64	@ 0x40
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d00d      	beq.n	8004c6e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f000 fbb4 	bl	80053c2 <UART_EndTransmit_IT>
    return;
 8004c5a:	e008      	b.n	8004c6e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004c5c:	46c0      	nop			@ (mov r8, r8)
 8004c5e:	e006      	b.n	8004c6e <HAL_UART_IRQHandler+0x5b2>
    return;
 8004c60:	46c0      	nop			@ (mov r8, r8)
 8004c62:	e004      	b.n	8004c6e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004c64:	46c0      	nop			@ (mov r8, r8)
 8004c66:	e002      	b.n	8004c6e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004c68:	46c0      	nop			@ (mov r8, r8)
 8004c6a:	e000      	b.n	8004c6e <HAL_UART_IRQHandler+0x5b2>
    return;
 8004c6c:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b02b      	add	sp, #172	@ 0xac
 8004c72:	bd90      	pop	{r4, r7, pc}
 8004c74:	fffffeff 	.word	0xfffffeff
 8004c78:	fffffedf 	.word	0xfffffedf

08004c7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c84:	46c0      	nop			@ (mov r8, r8)
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c94:	46c0      	nop			@ (mov r8, r8)
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b002      	add	sp, #8
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	000a      	movs	r2, r1
 8004ca6:	1cbb      	adds	r3, r7, #2
 8004ca8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004caa:	46c0      	nop			@ (mov r8, r8)
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b002      	add	sp, #8
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cbc:	231e      	movs	r3, #30
 8004cbe:	18fb      	adds	r3, r7, r3
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a8d      	ldr	r2, [pc, #564]	@ (8004f18 <UART_SetConfig+0x264>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	0019      	movs	r1, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4a88      	ldr	r2, [pc, #544]	@ (8004f1c <UART_SetConfig+0x268>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	0019      	movs	r1, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	4a7f      	ldr	r2, [pc, #508]	@ (8004f20 <UART_SetConfig+0x26c>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	0019      	movs	r1, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a7b      	ldr	r2, [pc, #492]	@ (8004f24 <UART_SetConfig+0x270>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d127      	bne.n	8004d8a <UART_SetConfig+0xd6>
 8004d3a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f28 <UART_SetConfig+0x274>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3e:	2203      	movs	r2, #3
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d00d      	beq.n	8004d62 <UART_SetConfig+0xae>
 8004d46:	d81b      	bhi.n	8004d80 <UART_SetConfig+0xcc>
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d014      	beq.n	8004d76 <UART_SetConfig+0xc2>
 8004d4c:	d818      	bhi.n	8004d80 <UART_SetConfig+0xcc>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <UART_SetConfig+0xa4>
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d00a      	beq.n	8004d6c <UART_SetConfig+0xb8>
 8004d56:	e013      	b.n	8004d80 <UART_SetConfig+0xcc>
 8004d58:	231f      	movs	r3, #31
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e021      	b.n	8004da6 <UART_SetConfig+0xf2>
 8004d62:	231f      	movs	r3, #31
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	2202      	movs	r2, #2
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e01c      	b.n	8004da6 <UART_SetConfig+0xf2>
 8004d6c:	231f      	movs	r3, #31
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	2204      	movs	r2, #4
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e017      	b.n	8004da6 <UART_SetConfig+0xf2>
 8004d76:	231f      	movs	r3, #31
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	2208      	movs	r2, #8
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e012      	b.n	8004da6 <UART_SetConfig+0xf2>
 8004d80:	231f      	movs	r3, #31
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	2210      	movs	r2, #16
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	e00d      	b.n	8004da6 <UART_SetConfig+0xf2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a67      	ldr	r2, [pc, #412]	@ (8004f2c <UART_SetConfig+0x278>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d104      	bne.n	8004d9e <UART_SetConfig+0xea>
 8004d94:	231f      	movs	r3, #31
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	e003      	b.n	8004da6 <UART_SetConfig+0xf2>
 8004d9e:	231f      	movs	r3, #31
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	2210      	movs	r2, #16
 8004da4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	2380      	movs	r3, #128	@ 0x80
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d15c      	bne.n	8004e6c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004db2:	231f      	movs	r3, #31
 8004db4:	18fb      	adds	r3, r7, r3
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d015      	beq.n	8004de8 <UART_SetConfig+0x134>
 8004dbc:	dc18      	bgt.n	8004df0 <UART_SetConfig+0x13c>
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d00d      	beq.n	8004dde <UART_SetConfig+0x12a>
 8004dc2:	dc15      	bgt.n	8004df0 <UART_SetConfig+0x13c>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <UART_SetConfig+0x11a>
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d005      	beq.n	8004dd8 <UART_SetConfig+0x124>
 8004dcc:	e010      	b.n	8004df0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dce:	f7fe f96f 	bl	80030b0 <HAL_RCC_GetPCLK1Freq>
 8004dd2:	0003      	movs	r3, r0
 8004dd4:	61bb      	str	r3, [r7, #24]
        break;
 8004dd6:	e012      	b.n	8004dfe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd8:	4b55      	ldr	r3, [pc, #340]	@ (8004f30 <UART_SetConfig+0x27c>)
 8004dda:	61bb      	str	r3, [r7, #24]
        break;
 8004ddc:	e00f      	b.n	8004dfe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dde:	f7fe f907 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8004de2:	0003      	movs	r3, r0
 8004de4:	61bb      	str	r3, [r7, #24]
        break;
 8004de6:	e00a      	b.n	8004dfe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de8:	2380      	movs	r3, #128	@ 0x80
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	61bb      	str	r3, [r7, #24]
        break;
 8004dee:	e006      	b.n	8004dfe <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004df4:	231e      	movs	r3, #30
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	2201      	movs	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
        break;
 8004dfc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d100      	bne.n	8004e06 <UART_SetConfig+0x152>
 8004e04:	e07a      	b.n	8004efc <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	005a      	lsls	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	085b      	lsrs	r3, r3, #1
 8004e10:	18d2      	adds	r2, r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	0019      	movs	r1, r3
 8004e18:	0010      	movs	r0, r2
 8004e1a:	f7fb f991 	bl	8000140 <__udivsi3>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2b0f      	cmp	r3, #15
 8004e26:	d91c      	bls.n	8004e62 <UART_SetConfig+0x1ae>
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	2380      	movs	r3, #128	@ 0x80
 8004e2c:	025b      	lsls	r3, r3, #9
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d217      	bcs.n	8004e62 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	200e      	movs	r0, #14
 8004e38:	183b      	adds	r3, r7, r0
 8004e3a:	210f      	movs	r1, #15
 8004e3c:	438a      	bics	r2, r1
 8004e3e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	085b      	lsrs	r3, r3, #1
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2207      	movs	r2, #7
 8004e48:	4013      	ands	r3, r2
 8004e4a:	b299      	uxth	r1, r3
 8004e4c:	183b      	adds	r3, r7, r0
 8004e4e:	183a      	adds	r2, r7, r0
 8004e50:	8812      	ldrh	r2, [r2, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	183a      	adds	r2, r7, r0
 8004e5c:	8812      	ldrh	r2, [r2, #0]
 8004e5e:	60da      	str	r2, [r3, #12]
 8004e60:	e04c      	b.n	8004efc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004e62:	231e      	movs	r3, #30
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	2201      	movs	r2, #1
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e047      	b.n	8004efc <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e6c:	231f      	movs	r3, #31
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d015      	beq.n	8004ea2 <UART_SetConfig+0x1ee>
 8004e76:	dc18      	bgt.n	8004eaa <UART_SetConfig+0x1f6>
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d00d      	beq.n	8004e98 <UART_SetConfig+0x1e4>
 8004e7c:	dc15      	bgt.n	8004eaa <UART_SetConfig+0x1f6>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <UART_SetConfig+0x1d4>
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d005      	beq.n	8004e92 <UART_SetConfig+0x1de>
 8004e86:	e010      	b.n	8004eaa <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e88:	f7fe f912 	bl	80030b0 <HAL_RCC_GetPCLK1Freq>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	61bb      	str	r3, [r7, #24]
        break;
 8004e90:	e012      	b.n	8004eb8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e92:	4b27      	ldr	r3, [pc, #156]	@ (8004f30 <UART_SetConfig+0x27c>)
 8004e94:	61bb      	str	r3, [r7, #24]
        break;
 8004e96:	e00f      	b.n	8004eb8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e98:	f7fe f8aa 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ea0:	e00a      	b.n	8004eb8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea2:	2380      	movs	r3, #128	@ 0x80
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	61bb      	str	r3, [r7, #24]
        break;
 8004ea8:	e006      	b.n	8004eb8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eae:	231e      	movs	r3, #30
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
        break;
 8004eb6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01e      	beq.n	8004efc <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	085a      	lsrs	r2, r3, #1
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	18d2      	adds	r2, r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	0019      	movs	r1, r3
 8004ece:	0010      	movs	r0, r2
 8004ed0:	f7fb f936 	bl	8000140 <__udivsi3>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b0f      	cmp	r3, #15
 8004edc:	d90a      	bls.n	8004ef4 <UART_SetConfig+0x240>
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	2380      	movs	r3, #128	@ 0x80
 8004ee2:	025b      	lsls	r3, r3, #9
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d205      	bcs.n	8004ef4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	e003      	b.n	8004efc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004ef4:	231e      	movs	r3, #30
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	2201      	movs	r2, #1
 8004efa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f08:	231e      	movs	r3, #30
 8004f0a:	18fb      	adds	r3, r7, r3
 8004f0c:	781b      	ldrb	r3, [r3, #0]
}
 8004f0e:	0018      	movs	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b008      	add	sp, #32
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	46c0      	nop			@ (mov r8, r8)
 8004f18:	ffff69f3 	.word	0xffff69f3
 8004f1c:	ffffcfff 	.word	0xffffcfff
 8004f20:	fffff4ff 	.word	0xfffff4ff
 8004f24:	40013800 	.word	0x40013800
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40004400 	.word	0x40004400
 8004f30:	007a1200 	.word	0x007a1200

08004f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	2208      	movs	r2, #8
 8004f42:	4013      	ands	r3, r2
 8004f44:	d00b      	beq.n	8004f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	4a4a      	ldr	r2, [pc, #296]	@ (8005078 <UART_AdvFeatureConfig+0x144>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	0019      	movs	r1, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f62:	2201      	movs	r2, #1
 8004f64:	4013      	ands	r3, r2
 8004f66:	d00b      	beq.n	8004f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	4a43      	ldr	r2, [pc, #268]	@ (800507c <UART_AdvFeatureConfig+0x148>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	0019      	movs	r1, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	2202      	movs	r2, #2
 8004f86:	4013      	ands	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a3b      	ldr	r2, [pc, #236]	@ (8005080 <UART_AdvFeatureConfig+0x14c>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	0019      	movs	r1, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	2204      	movs	r2, #4
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d00b      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4a34      	ldr	r2, [pc, #208]	@ (8005084 <UART_AdvFeatureConfig+0x150>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	2210      	movs	r2, #16
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d00b      	beq.n	8004fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4a2c      	ldr	r2, [pc, #176]	@ (8005088 <UART_AdvFeatureConfig+0x154>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	0019      	movs	r1, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	2220      	movs	r2, #32
 8004fec:	4013      	ands	r3, r2
 8004fee:	d00b      	beq.n	8005008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	4a25      	ldr	r2, [pc, #148]	@ (800508c <UART_AdvFeatureConfig+0x158>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	0019      	movs	r1, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500c:	2240      	movs	r2, #64	@ 0x40
 800500e:	4013      	ands	r3, r2
 8005010:	d01d      	beq.n	800504e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	4a1d      	ldr	r2, [pc, #116]	@ (8005090 <UART_AdvFeatureConfig+0x15c>)
 800501a:	4013      	ands	r3, r2
 800501c:	0019      	movs	r1, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800502e:	2380      	movs	r3, #128	@ 0x80
 8005030:	035b      	lsls	r3, r3, #13
 8005032:	429a      	cmp	r2, r3
 8005034:	d10b      	bne.n	800504e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4a15      	ldr	r2, [pc, #84]	@ (8005094 <UART_AdvFeatureConfig+0x160>)
 800503e:	4013      	ands	r3, r2
 8005040:	0019      	movs	r1, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	2280      	movs	r2, #128	@ 0x80
 8005054:	4013      	ands	r3, r2
 8005056:	d00b      	beq.n	8005070 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	4a0e      	ldr	r2, [pc, #56]	@ (8005098 <UART_AdvFeatureConfig+0x164>)
 8005060:	4013      	ands	r3, r2
 8005062:	0019      	movs	r1, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	605a      	str	r2, [r3, #4]
  }
}
 8005070:	46c0      	nop			@ (mov r8, r8)
 8005072:	46bd      	mov	sp, r7
 8005074:	b002      	add	sp, #8
 8005076:	bd80      	pop	{r7, pc}
 8005078:	ffff7fff 	.word	0xffff7fff
 800507c:	fffdffff 	.word	0xfffdffff
 8005080:	fffeffff 	.word	0xfffeffff
 8005084:	fffbffff 	.word	0xfffbffff
 8005088:	ffffefff 	.word	0xffffefff
 800508c:	ffffdfff 	.word	0xffffdfff
 8005090:	ffefffff 	.word	0xffefffff
 8005094:	ff9fffff 	.word	0xff9fffff
 8005098:	fff7ffff 	.word	0xfff7ffff

0800509c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b092      	sub	sp, #72	@ 0x48
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2284      	movs	r2, #132	@ 0x84
 80050a8:	2100      	movs	r1, #0
 80050aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050ac:	f7fc ff2c 	bl	8001f08 <HAL_GetTick>
 80050b0:	0003      	movs	r3, r0
 80050b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2208      	movs	r2, #8
 80050bc:	4013      	ands	r3, r2
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d12c      	bne.n	800511c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c4:	2280      	movs	r2, #128	@ 0x80
 80050c6:	0391      	lsls	r1, r2, #14
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	4a46      	ldr	r2, [pc, #280]	@ (80051e4 <UART_CheckIdleState+0x148>)
 80050cc:	9200      	str	r2, [sp, #0]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f000 f88c 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 80050d4:	1e03      	subs	r3, r0, #0
 80050d6:	d021      	beq.n	800511c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d8:	f3ef 8310 	mrs	r3, PRIMASK
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050e2:	2301      	movs	r3, #1
 80050e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e8:	f383 8810 	msr	PRIMASK, r3
}
 80050ec:	46c0      	nop			@ (mov r8, r8)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2180      	movs	r1, #128	@ 0x80
 80050fa:	438a      	bics	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005104:	f383 8810 	msr	PRIMASK, r3
}
 8005108:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2278      	movs	r2, #120	@ 0x78
 8005114:	2100      	movs	r1, #0
 8005116:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e05f      	b.n	80051dc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2204      	movs	r2, #4
 8005124:	4013      	ands	r3, r2
 8005126:	2b04      	cmp	r3, #4
 8005128:	d146      	bne.n	80051b8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512c:	2280      	movs	r2, #128	@ 0x80
 800512e:	03d1      	lsls	r1, r2, #15
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	4a2c      	ldr	r2, [pc, #176]	@ (80051e4 <UART_CheckIdleState+0x148>)
 8005134:	9200      	str	r2, [sp, #0]
 8005136:	2200      	movs	r2, #0
 8005138:	f000 f858 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 800513c:	1e03      	subs	r3, r0, #0
 800513e:	d03b      	beq.n	80051b8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005140:	f3ef 8310 	mrs	r3, PRIMASK
 8005144:	60fb      	str	r3, [r7, #12]
  return(result);
 8005146:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005148:	637b      	str	r3, [r7, #52]	@ 0x34
 800514a:	2301      	movs	r3, #1
 800514c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f383 8810 	msr	PRIMASK, r3
}
 8005154:	46c0      	nop			@ (mov r8, r8)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4921      	ldr	r1, [pc, #132]	@ (80051e8 <UART_CheckIdleState+0x14c>)
 8005162:	400a      	ands	r2, r1
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005168:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f383 8810 	msr	PRIMASK, r3
}
 8005170:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005172:	f3ef 8310 	mrs	r3, PRIMASK
 8005176:	61bb      	str	r3, [r7, #24]
  return(result);
 8005178:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	633b      	str	r3, [r7, #48]	@ 0x30
 800517c:	2301      	movs	r3, #1
 800517e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f383 8810 	msr	PRIMASK, r3
}
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2101      	movs	r1, #1
 8005194:	438a      	bics	r2, r1
 8005196:	609a      	str	r2, [r3, #8]
 8005198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	f383 8810 	msr	PRIMASK, r3
}
 80051a2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2280      	movs	r2, #128	@ 0x80
 80051a8:	2120      	movs	r1, #32
 80051aa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2278      	movs	r2, #120	@ 0x78
 80051b0:	2100      	movs	r1, #0
 80051b2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e011      	b.n	80051dc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2280      	movs	r2, #128	@ 0x80
 80051c2:	2120      	movs	r1, #32
 80051c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2278      	movs	r2, #120	@ 0x78
 80051d6:	2100      	movs	r1, #0
 80051d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	0018      	movs	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	b010      	add	sp, #64	@ 0x40
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	01ffffff 	.word	0x01ffffff
 80051e8:	fffffedf 	.word	0xfffffedf

080051ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	1dfb      	adds	r3, r7, #7
 80051fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fc:	e051      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	3301      	adds	r3, #1
 8005202:	d04e      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005204:	f7fc fe80 	bl	8001f08 <HAL_GetTick>
 8005208:	0002      	movs	r2, r0
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	429a      	cmp	r2, r3
 8005212:	d302      	bcc.n	800521a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e051      	b.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2204      	movs	r2, #4
 8005226:	4013      	ands	r3, r2
 8005228:	d03b      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b80      	cmp	r3, #128	@ 0x80
 800522e:	d038      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b40      	cmp	r3, #64	@ 0x40
 8005234:	d035      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	2208      	movs	r2, #8
 800523e:	4013      	ands	r3, r2
 8005240:	2b08      	cmp	r3, #8
 8005242:	d111      	bne.n	8005268 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2208      	movs	r2, #8
 800524a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	0018      	movs	r0, r3
 8005250:	f000 f83c 	bl	80052cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2284      	movs	r2, #132	@ 0x84
 8005258:	2108      	movs	r1, #8
 800525a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2278      	movs	r2, #120	@ 0x78
 8005260:	2100      	movs	r1, #0
 8005262:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e02c      	b.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69da      	ldr	r2, [r3, #28]
 800526e:	2380      	movs	r3, #128	@ 0x80
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	401a      	ands	r2, r3
 8005274:	2380      	movs	r3, #128	@ 0x80
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	429a      	cmp	r2, r3
 800527a:	d112      	bne.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2280      	movs	r2, #128	@ 0x80
 8005282:	0112      	lsls	r2, r2, #4
 8005284:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	0018      	movs	r0, r3
 800528a:	f000 f81f 	bl	80052cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2284      	movs	r2, #132	@ 0x84
 8005292:	2120      	movs	r1, #32
 8005294:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2278      	movs	r2, #120	@ 0x78
 800529a:	2100      	movs	r1, #0
 800529c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e00f      	b.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	4013      	ands	r3, r2
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	425a      	negs	r2, r3
 80052b2:	4153      	adcs	r3, r2
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	001a      	movs	r2, r3
 80052b8:	1dfb      	adds	r3, r7, #7
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d09e      	beq.n	80051fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	0018      	movs	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	b004      	add	sp, #16
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08e      	sub	sp, #56	@ 0x38
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d4:	f3ef 8310 	mrs	r3, PRIMASK
 80052d8:	617b      	str	r3, [r7, #20]
  return(result);
 80052da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80052de:	2301      	movs	r3, #1
 80052e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	f383 8810 	msr	PRIMASK, r3
}
 80052e8:	46c0      	nop			@ (mov r8, r8)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4926      	ldr	r1, [pc, #152]	@ (8005390 <UART_EndRxTransfer+0xc4>)
 80052f6:	400a      	ands	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	f383 8810 	msr	PRIMASK, r3
}
 8005304:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005306:	f3ef 8310 	mrs	r3, PRIMASK
 800530a:	623b      	str	r3, [r7, #32]
  return(result);
 800530c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005310:	2301      	movs	r3, #1
 8005312:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	f383 8810 	msr	PRIMASK, r3
}
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2101      	movs	r1, #1
 8005328:	438a      	bics	r2, r1
 800532a:	609a      	str	r2, [r3, #8]
 800532c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005332:	f383 8810 	msr	PRIMASK, r3
}
 8005336:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800533c:	2b01      	cmp	r3, #1
 800533e:	d118      	bne.n	8005372 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005340:	f3ef 8310 	mrs	r3, PRIMASK
 8005344:	60bb      	str	r3, [r7, #8]
  return(result);
 8005346:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800534a:	2301      	movs	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f383 8810 	msr	PRIMASK, r3
}
 8005354:	46c0      	nop			@ (mov r8, r8)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2110      	movs	r1, #16
 8005362:	438a      	bics	r2, r1
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005368:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f383 8810 	msr	PRIMASK, r3
}
 8005370:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2280      	movs	r2, #128	@ 0x80
 8005376:	2120      	movs	r1, #32
 8005378:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005386:	46c0      	nop			@ (mov r8, r8)
 8005388:	46bd      	mov	sp, r7
 800538a:	b00e      	add	sp, #56	@ 0x38
 800538c:	bd80      	pop	{r7, pc}
 800538e:	46c0      	nop			@ (mov r8, r8)
 8005390:	fffffedf 	.word	0xfffffedf

08005394 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	225a      	movs	r2, #90	@ 0x5a
 80053a6:	2100      	movs	r1, #0
 80053a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2252      	movs	r2, #82	@ 0x52
 80053ae:	2100      	movs	r1, #0
 80053b0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	0018      	movs	r0, r3
 80053b6:	f7ff fc69 	bl	8004c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	46bd      	mov	sp, r7
 80053be:	b004      	add	sp, #16
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b086      	sub	sp, #24
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ca:	f3ef 8310 	mrs	r3, PRIMASK
 80053ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80053d0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	2301      	movs	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f383 8810 	msr	PRIMASK, r3
}
 80053de:	46c0      	nop			@ (mov r8, r8)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2140      	movs	r1, #64	@ 0x40
 80053ec:	438a      	bics	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f383 8810 	msr	PRIMASK, r3
}
 80053fa:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	0018      	movs	r0, r3
 800540c:	f7ff fc36 	bl	8004c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005410:	46c0      	nop			@ (mov r8, r8)
 8005412:	46bd      	mov	sp, r7
 8005414:	b006      	add	sp, #24
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005420:	46c0      	nop			@ (mov r8, r8)
 8005422:	46bd      	mov	sp, r7
 8005424:	b002      	add	sp, #8
 8005426:	bd80      	pop	{r7, pc}

08005428 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800542c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800542e:	0018      	movs	r0, r3
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005434:	b5b0      	push	{r4, r5, r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	0002      	movs	r2, r0
 800543c:	1dfb      	adds	r3, r7, #7
 800543e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005440:	1dfb      	adds	r3, r7, #7
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	4a0b      	ldr	r2, [pc, #44]	@ (8005474 <disk_status+0x40>)
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	18d3      	adds	r3, r2, r3
 800544a:	3304      	adds	r3, #4
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	1dfa      	adds	r2, r7, #7
 8005452:	7812      	ldrb	r2, [r2, #0]
 8005454:	4907      	ldr	r1, [pc, #28]	@ (8005474 <disk_status+0x40>)
 8005456:	188a      	adds	r2, r1, r2
 8005458:	7a12      	ldrb	r2, [r2, #8]
 800545a:	250f      	movs	r5, #15
 800545c:	197c      	adds	r4, r7, r5
 800545e:	0010      	movs	r0, r2
 8005460:	4798      	blx	r3
 8005462:	0003      	movs	r3, r0
 8005464:	7023      	strb	r3, [r4, #0]
  return stat;
 8005466:	197b      	adds	r3, r7, r5
 8005468:	781b      	ldrb	r3, [r3, #0]
}
 800546a:	0018      	movs	r0, r3
 800546c:	46bd      	mov	sp, r7
 800546e:	b004      	add	sp, #16
 8005470:	bdb0      	pop	{r4, r5, r7, pc}
 8005472:	46c0      	nop			@ (mov r8, r8)
 8005474:	200006e0 	.word	0x200006e0

08005478 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	0002      	movs	r2, r0
 8005480:	1dfb      	adds	r3, r7, #7
 8005482:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8005484:	200f      	movs	r0, #15
 8005486:	183b      	adds	r3, r7, r0
 8005488:	2200      	movs	r2, #0
 800548a:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 800548c:	1dfb      	adds	r3, r7, #7
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	4a10      	ldr	r2, [pc, #64]	@ (80054d4 <disk_initialize+0x5c>)
 8005492:	5cd3      	ldrb	r3, [r2, r3]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d116      	bne.n	80054c6 <disk_initialize+0x4e>
  { 
    disk.is_initialized[pdrv] = 1;
 8005498:	1dfb      	adds	r3, r7, #7
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	4a0d      	ldr	r2, [pc, #52]	@ (80054d4 <disk_initialize+0x5c>)
 800549e:	2101      	movs	r1, #1
 80054a0:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80054a2:	1dfb      	adds	r3, r7, #7
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	4a0b      	ldr	r2, [pc, #44]	@ (80054d4 <disk_initialize+0x5c>)
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	18d3      	adds	r3, r2, r3
 80054ac:	3304      	adds	r3, #4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	1dfa      	adds	r2, r7, #7
 80054b4:	7812      	ldrb	r2, [r2, #0]
 80054b6:	4907      	ldr	r1, [pc, #28]	@ (80054d4 <disk_initialize+0x5c>)
 80054b8:	188a      	adds	r2, r1, r2
 80054ba:	7a12      	ldrb	r2, [r2, #8]
 80054bc:	183c      	adds	r4, r7, r0
 80054be:	0010      	movs	r0, r2
 80054c0:	4798      	blx	r3
 80054c2:	0003      	movs	r3, r0
 80054c4:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 80054c6:	230f      	movs	r3, #15
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	781b      	ldrb	r3, [r3, #0]
}
 80054cc:	0018      	movs	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b005      	add	sp, #20
 80054d2:	bd90      	pop	{r4, r7, pc}
 80054d4:	200006e0 	.word	0x200006e0

080054d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80054d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	210f      	movs	r1, #15
 80054e6:	187b      	adds	r3, r7, r1
 80054e8:	1c02      	adds	r2, r0, #0
 80054ea:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80054ec:	187b      	adds	r3, r7, r1
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005524 <disk_read+0x4c>)
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	18d3      	adds	r3, r2, r3
 80054f6:	3304      	adds	r3, #4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689d      	ldr	r5, [r3, #8]
 80054fc:	187b      	adds	r3, r7, r1
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	4a08      	ldr	r2, [pc, #32]	@ (8005524 <disk_read+0x4c>)
 8005502:	18d3      	adds	r3, r2, r3
 8005504:	7a18      	ldrb	r0, [r3, #8]
 8005506:	2617      	movs	r6, #23
 8005508:	19bc      	adds	r4, r7, r6
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	47a8      	blx	r5
 8005512:	0003      	movs	r3, r0
 8005514:	7023      	strb	r3, [r4, #0]
  return res;
 8005516:	19bb      	adds	r3, r7, r6
 8005518:	781b      	ldrb	r3, [r3, #0]
}
 800551a:	0018      	movs	r0, r3
 800551c:	46bd      	mov	sp, r7
 800551e:	b007      	add	sp, #28
 8005520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005522:	46c0      	nop			@ (mov r8, r8)
 8005524:	200006e0 	.word	0x200006e0

08005528 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	607a      	str	r2, [r7, #4]
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	210f      	movs	r1, #15
 8005536:	187b      	adds	r3, r7, r1
 8005538:	1c02      	adds	r2, r0, #0
 800553a:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800553c:	187b      	adds	r3, r7, r1
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	4a0c      	ldr	r2, [pc, #48]	@ (8005574 <disk_write+0x4c>)
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	18d3      	adds	r3, r2, r3
 8005546:	3304      	adds	r3, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68dd      	ldr	r5, [r3, #12]
 800554c:	187b      	adds	r3, r7, r1
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	4a08      	ldr	r2, [pc, #32]	@ (8005574 <disk_write+0x4c>)
 8005552:	18d3      	adds	r3, r2, r3
 8005554:	7a18      	ldrb	r0, [r3, #8]
 8005556:	2617      	movs	r6, #23
 8005558:	19bc      	adds	r4, r7, r6
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	47a8      	blx	r5
 8005562:	0003      	movs	r3, r0
 8005564:	7023      	strb	r3, [r4, #0]
  return res;
 8005566:	19bb      	adds	r3, r7, r6
 8005568:	781b      	ldrb	r3, [r3, #0]
}
 800556a:	0018      	movs	r0, r3
 800556c:	46bd      	mov	sp, r7
 800556e:	b007      	add	sp, #28
 8005570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005572:	46c0      	nop			@ (mov r8, r8)
 8005574:	200006e0 	.word	0x200006e0

08005578 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	603a      	str	r2, [r7, #0]
 8005580:	1dfb      	adds	r3, r7, #7
 8005582:	1c02      	adds	r2, r0, #0
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	1dbb      	adds	r3, r7, #6
 8005588:	1c0a      	adds	r2, r1, #0
 800558a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800558c:	1dfb      	adds	r3, r7, #7
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	4a0c      	ldr	r2, [pc, #48]	@ (80055c4 <disk_ioctl+0x4c>)
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	18d3      	adds	r3, r2, r3
 8005596:	3304      	adds	r3, #4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	1dfa      	adds	r2, r7, #7
 800559e:	7812      	ldrb	r2, [r2, #0]
 80055a0:	4908      	ldr	r1, [pc, #32]	@ (80055c4 <disk_ioctl+0x4c>)
 80055a2:	188a      	adds	r2, r1, r2
 80055a4:	7a10      	ldrb	r0, [r2, #8]
 80055a6:	260f      	movs	r6, #15
 80055a8:	19bc      	adds	r4, r7, r6
 80055aa:	683d      	ldr	r5, [r7, #0]
 80055ac:	1dba      	adds	r2, r7, #6
 80055ae:	7811      	ldrb	r1, [r2, #0]
 80055b0:	002a      	movs	r2, r5
 80055b2:	4798      	blx	r3
 80055b4:	0003      	movs	r3, r0
 80055b6:	7023      	strb	r3, [r4, #0]
  return res;
 80055b8:	19bb      	adds	r3, r7, r6
 80055ba:	781b      	ldrb	r3, [r3, #0]
}
 80055bc:	0018      	movs	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	b005      	add	sp, #20
 80055c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c4:	200006e0 	.word	0x200006e0

080055c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80055dc:	e007      	b.n	80055ee <mem_cpy+0x26>
		*d++ = *s++;
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	1c53      	adds	r3, r2, #1
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	1c59      	adds	r1, r3, #1
 80055e8:	6179      	str	r1, [r7, #20]
 80055ea:	7812      	ldrb	r2, [r2, #0]
 80055ec:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	1e5a      	subs	r2, r3, #1
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f2      	bne.n	80055de <mem_cpy+0x16>
}
 80055f8:	46c0      	nop			@ (mov r8, r8)
 80055fa:	46c0      	nop			@ (mov r8, r8)
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b006      	add	sp, #24
 8005600:	bd80      	pop	{r7, pc}

08005602 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005602:	b580      	push	{r7, lr}
 8005604:	b086      	sub	sp, #24
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005612:	e005      	b.n	8005620 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	617a      	str	r2, [r7, #20]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	1e5a      	subs	r2, r3, #1
 8005624:	607a      	str	r2, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f4      	bne.n	8005614 <mem_set+0x12>
}
 800562a:	46c0      	nop			@ (mov r8, r8)
 800562c:	46c0      	nop			@ (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	b006      	add	sp, #24
 8005632:	bd80      	pop	{r7, pc}

08005634 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	61fb      	str	r3, [r7, #28]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800564c:	46c0      	nop			@ (mov r8, r8)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	1e5a      	subs	r2, r3, #1
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00d      	beq.n	8005674 <mem_cmp+0x40>
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	61fa      	str	r2, [r7, #28]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	0019      	movs	r1, r3
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	61ba      	str	r2, [r7, #24]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	1acb      	subs	r3, r1, r3
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0ec      	beq.n	800564e <mem_cmp+0x1a>
	return r;
 8005674:	697b      	ldr	r3, [r7, #20]
}
 8005676:	0018      	movs	r0, r3
 8005678:	46bd      	mov	sp, r7
 800567a:	b008      	add	sp, #32
 800567c:	bd80      	pop	{r7, pc}

0800567e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005688:	e002      	b.n	8005690 <chk_chr+0x12>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3301      	adds	r3, #1
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <chk_chr+0x26>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	001a      	movs	r2, r3
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d1f2      	bne.n	800568a <chk_chr+0xc>
	return *str;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	781b      	ldrb	r3, [r3, #0]
}
 80056a8:	0018      	movs	r0, r3
 80056aa:	46bd      	mov	sp, r7
 80056ac:	b002      	add	sp, #8
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80056ba:	2300      	movs	r3, #0
 80056bc:	60bb      	str	r3, [r7, #8]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	e038      	b.n	8005736 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80056c4:	492f      	ldr	r1, [pc, #188]	@ (8005784 <chk_lock+0xd4>)
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	0013      	movs	r3, r2
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	189b      	adds	r3, r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	585b      	ldr	r3, [r3, r1]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d02a      	beq.n	800572c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80056d6:	492b      	ldr	r1, [pc, #172]	@ (8005784 <chk_lock+0xd4>)
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	0013      	movs	r3, r2
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	189b      	adds	r3, r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	585a      	ldr	r2, [r3, r1]
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	2380      	movs	r3, #128	@ 0x80
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	58cb      	ldr	r3, [r1, r3]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d11f      	bne.n	8005730 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80056f0:	4924      	ldr	r1, [pc, #144]	@ (8005784 <chk_lock+0xd4>)
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	0013      	movs	r3, r2
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	189b      	adds	r3, r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	18cb      	adds	r3, r1, r3
 80056fe:	3304      	adds	r3, #4
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	2382      	movs	r3, #130	@ 0x82
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	58cb      	ldr	r3, [r1, r3]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800570a:	429a      	cmp	r2, r3
 800570c:	d110      	bne.n	8005730 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800570e:	491d      	ldr	r1, [pc, #116]	@ (8005784 <chk_lock+0xd4>)
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	0013      	movs	r3, r2
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	189b      	adds	r3, r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	18cb      	adds	r3, r1, r3
 800571c:	3308      	adds	r3, #8
 800571e:	881a      	ldrh	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4919      	ldr	r1, [pc, #100]	@ (8005788 <chk_lock+0xd8>)
 8005724:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 8005726:	429a      	cmp	r2, r3
 8005728:	d102      	bne.n	8005730 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800572a:	e007      	b.n	800573c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800572c:	2301      	movs	r3, #1
 800572e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3301      	adds	r3, #1
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d9c3      	bls.n	80056c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d109      	bne.n	8005756 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <chk_lock+0x9e>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d101      	bne.n	8005752 <chk_lock+0xa2>
 800574e:	2300      	movs	r3, #0
 8005750:	e014      	b.n	800577c <chk_lock+0xcc>
 8005752:	2312      	movs	r3, #18
 8005754:	e012      	b.n	800577c <chk_lock+0xcc>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10c      	bne.n	8005776 <chk_lock+0xc6>
 800575c:	4909      	ldr	r1, [pc, #36]	@ (8005784 <chk_lock+0xd4>)
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	0013      	movs	r3, r2
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	189b      	adds	r3, r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	18cb      	adds	r3, r1, r3
 800576a:	330a      	adds	r3, #10
 800576c:	881a      	ldrh	r2, [r3, #0]
 800576e:	2380      	movs	r3, #128	@ 0x80
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	429a      	cmp	r2, r3
 8005774:	d101      	bne.n	800577a <chk_lock+0xca>
 8005776:	2310      	movs	r3, #16
 8005778:	e000      	b.n	800577c <chk_lock+0xcc>
 800577a:	2300      	movs	r3, #0
}
 800577c:	0018      	movs	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	b004      	add	sp, #16
 8005782:	bd80      	pop	{r7, pc}
 8005784:	200006c8 	.word	0x200006c8
 8005788:	00000206 	.word	0x00000206

0800578c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005792:	2300      	movs	r3, #0
 8005794:	607b      	str	r3, [r7, #4]
 8005796:	e002      	b.n	800579e <enq_lock+0x12>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3301      	adds	r3, #1
 800579c:	607b      	str	r3, [r7, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d808      	bhi.n	80057b6 <enq_lock+0x2a>
 80057a4:	4908      	ldr	r1, [pc, #32]	@ (80057c8 <enq_lock+0x3c>)
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	0013      	movs	r3, r2
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	189b      	adds	r3, r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	585b      	ldr	r3, [r3, r1]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3b02      	subs	r3, #2
 80057ba:	1e5a      	subs	r2, r3, #1
 80057bc:	4193      	sbcs	r3, r2
 80057be:	b2db      	uxtb	r3, r3
}
 80057c0:	0018      	movs	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b002      	add	sp, #8
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	200006c8 	.word	0x200006c8

080057cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	e02c      	b.n	8005836 <inc_lock+0x6a>
		if (Files[i].fs == dp->fs &&
 80057dc:	4955      	ldr	r1, [pc, #340]	@ (8005934 <inc_lock+0x168>)
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	0013      	movs	r3, r2
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	189b      	adds	r3, r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	585a      	ldr	r2, [r3, r1]
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	2380      	movs	r3, #128	@ 0x80
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	58cb      	ldr	r3, [r1, r3]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d11c      	bne.n	8005830 <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 80057f6:	494f      	ldr	r1, [pc, #316]	@ (8005934 <inc_lock+0x168>)
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	0013      	movs	r3, r2
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	189b      	adds	r3, r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	18cb      	adds	r3, r1, r3
 8005804:	3304      	adds	r3, #4
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	6879      	ldr	r1, [r7, #4]
 800580a:	2382      	movs	r3, #130	@ 0x82
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	58cb      	ldr	r3, [r1, r3]
		if (Files[i].fs == dp->fs &&
 8005810:	429a      	cmp	r2, r3
 8005812:	d10d      	bne.n	8005830 <inc_lock+0x64>
			Files[i].idx == dp->index) break;
 8005814:	4947      	ldr	r1, [pc, #284]	@ (8005934 <inc_lock+0x168>)
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	0013      	movs	r3, r2
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	189b      	adds	r3, r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	18cb      	adds	r3, r1, r3
 8005822:	3308      	adds	r3, #8
 8005824:	881a      	ldrh	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4943      	ldr	r1, [pc, #268]	@ (8005938 <inc_lock+0x16c>)
 800582a:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 800582c:	429a      	cmp	r2, r3
 800582e:	d006      	beq.n	800583e <inc_lock+0x72>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3301      	adds	r3, #1
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d9cf      	bls.n	80057dc <inc_lock+0x10>
 800583c:	e000      	b.n	8005840 <inc_lock+0x74>
			Files[i].idx == dp->index) break;
 800583e:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d145      	bne.n	80058d2 <inc_lock+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	e002      	b.n	8005852 <inc_lock+0x86>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3301      	adds	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d808      	bhi.n	800586a <inc_lock+0x9e>
 8005858:	4936      	ldr	r1, [pc, #216]	@ (8005934 <inc_lock+0x168>)
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	0013      	movs	r3, r2
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	189b      	adds	r3, r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	585b      	ldr	r3, [r3, r1]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b02      	cmp	r3, #2
 800586e:	d101      	bne.n	8005874 <inc_lock+0xa8>
 8005870:	2300      	movs	r3, #0
 8005872:	e05a      	b.n	800592a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	2380      	movs	r3, #128	@ 0x80
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	58d0      	ldr	r0, [r2, r3]
 800587c:	492d      	ldr	r1, [pc, #180]	@ (8005934 <inc_lock+0x168>)
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	0013      	movs	r3, r2
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	189b      	adds	r3, r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	2382      	movs	r3, #130	@ 0x82
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	58d1      	ldr	r1, [r2, r3]
 8005892:	4828      	ldr	r0, [pc, #160]	@ (8005934 <inc_lock+0x168>)
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	0013      	movs	r3, r2
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	189b      	adds	r3, r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	18c3      	adds	r3, r0, r3
 80058a0:	3304      	adds	r3, #4
 80058a2:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a24      	ldr	r2, [pc, #144]	@ (8005938 <inc_lock+0x16c>)
 80058a8:	5a98      	ldrh	r0, [r3, r2]
 80058aa:	4922      	ldr	r1, [pc, #136]	@ (8005934 <inc_lock+0x168>)
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	0013      	movs	r3, r2
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	189b      	adds	r3, r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	18cb      	adds	r3, r1, r3
 80058b8:	3308      	adds	r3, #8
 80058ba:	1c02      	adds	r2, r0, #0
 80058bc:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80058be:	491d      	ldr	r1, [pc, #116]	@ (8005934 <inc_lock+0x168>)
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	0013      	movs	r3, r2
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	189b      	adds	r3, r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	18cb      	adds	r3, r1, r3
 80058cc:	330a      	adds	r3, #10
 80058ce:	2200      	movs	r2, #0
 80058d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00c      	beq.n	80058f2 <inc_lock+0x126>
 80058d8:	4916      	ldr	r1, [pc, #88]	@ (8005934 <inc_lock+0x168>)
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	0013      	movs	r3, r2
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	189b      	adds	r3, r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	18cb      	adds	r3, r1, r3
 80058e6:	330a      	adds	r3, #10
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <inc_lock+0x126>
 80058ee:	2300      	movs	r3, #0
 80058f0:	e01b      	b.n	800592a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <inc_lock+0x144>
 80058f8:	490e      	ldr	r1, [pc, #56]	@ (8005934 <inc_lock+0x168>)
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	0013      	movs	r3, r2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	189b      	adds	r3, r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	18cb      	adds	r3, r1, r3
 8005906:	330a      	adds	r3, #10
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	3301      	adds	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	e001      	b.n	8005914 <inc_lock+0x148>
 8005910:	2380      	movs	r3, #128	@ 0x80
 8005912:	005a      	lsls	r2, r3, #1
 8005914:	4807      	ldr	r0, [pc, #28]	@ (8005934 <inc_lock+0x168>)
 8005916:	68f9      	ldr	r1, [r7, #12]
 8005918:	000b      	movs	r3, r1
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	185b      	adds	r3, r3, r1
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	18c3      	adds	r3, r0, r3
 8005922:	330a      	adds	r3, #10
 8005924:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3301      	adds	r3, #1
}
 800592a:	0018      	movs	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	b004      	add	sp, #16
 8005930:	bd80      	pop	{r7, pc}
 8005932:	46c0      	nop			@ (mov r8, r8)
 8005934:	200006c8 	.word	0x200006c8
 8005938:	00000206 	.word	0x00000206

0800593c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800593c:	b590      	push	{r4, r7, lr}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3b01      	subs	r3, #1
 8005948:	607b      	str	r3, [r7, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d83b      	bhi.n	80059c8 <dec_lock+0x8c>
		n = Files[i].ctr;
 8005950:	240e      	movs	r4, #14
 8005952:	1939      	adds	r1, r7, r4
 8005954:	4822      	ldr	r0, [pc, #136]	@ (80059e0 <dec_lock+0xa4>)
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	0013      	movs	r3, r2
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	189b      	adds	r3, r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	18c3      	adds	r3, r0, r3
 8005962:	330a      	adds	r3, #10
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	800b      	strh	r3, [r1, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005968:	193b      	adds	r3, r7, r4
 800596a:	881a      	ldrh	r2, [r3, #0]
 800596c:	2380      	movs	r3, #128	@ 0x80
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	429a      	cmp	r2, r3
 8005972:	d102      	bne.n	800597a <dec_lock+0x3e>
 8005974:	193b      	adds	r3, r7, r4
 8005976:	2200      	movs	r2, #0
 8005978:	801a      	strh	r2, [r3, #0]
		if (n) n--;					/* Decrement read mode open count */
 800597a:	210e      	movs	r1, #14
 800597c:	187b      	adds	r3, r7, r1
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <dec_lock+0x52>
 8005984:	187b      	adds	r3, r7, r1
 8005986:	881a      	ldrh	r2, [r3, #0]
 8005988:	187b      	adds	r3, r7, r1
 800598a:	3a01      	subs	r2, #1
 800598c:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 800598e:	4914      	ldr	r1, [pc, #80]	@ (80059e0 <dec_lock+0xa4>)
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	0013      	movs	r3, r2
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	189b      	adds	r3, r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	18cb      	adds	r3, r1, r3
 800599c:	330a      	adds	r3, #10
 800599e:	210e      	movs	r1, #14
 80059a0:	187a      	adds	r2, r7, r1
 80059a2:	8812      	ldrh	r2, [r2, #0]
 80059a4:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80059a6:	187b      	adds	r3, r7, r1
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d107      	bne.n	80059be <dec_lock+0x82>
 80059ae:	490c      	ldr	r1, [pc, #48]	@ (80059e0 <dec_lock+0xa4>)
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	0013      	movs	r3, r2
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	189b      	adds	r3, r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	2200      	movs	r2, #0
 80059bc:	505a      	str	r2, [r3, r1]
		res = FR_OK;
 80059be:	230d      	movs	r3, #13
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	2200      	movs	r2, #0
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e003      	b.n	80059d0 <dec_lock+0x94>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80059c8:	230d      	movs	r3, #13
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	2202      	movs	r2, #2
 80059ce:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80059d0:	230d      	movs	r3, #13
 80059d2:	18fb      	adds	r3, r7, r3
 80059d4:	781b      	ldrb	r3, [r3, #0]
}
 80059d6:	0018      	movs	r0, r3
 80059d8:	46bd      	mov	sp, r7
 80059da:	b005      	add	sp, #20
 80059dc:	bd90      	pop	{r4, r7, pc}
 80059de:	46c0      	nop			@ (mov r8, r8)
 80059e0:	200006c8 	.word	0x200006c8

080059e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	e014      	b.n	8005a1c <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80059f2:	490e      	ldr	r1, [pc, #56]	@ (8005a2c <clear_lock+0x48>)
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	0013      	movs	r3, r2
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	189b      	adds	r3, r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	585b      	ldr	r3, [r3, r1]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d107      	bne.n	8005a16 <clear_lock+0x32>
 8005a06:	4909      	ldr	r1, [pc, #36]	@ (8005a2c <clear_lock+0x48>)
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	0013      	movs	r3, r2
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	189b      	adds	r3, r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	2200      	movs	r2, #0
 8005a14:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d9e7      	bls.n	80059f2 <clear_lock+0xe>
	}
}
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	46c0      	nop			@ (mov r8, r8)
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b004      	add	sp, #16
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	200006c8 	.word	0x200006c8

08005a30 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005a30:	b590      	push	{r4, r7, lr}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005a38:	240f      	movs	r4, #15
 8005a3a:	193b      	adds	r3, r7, r4
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	2381      	movs	r3, #129	@ 0x81
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	5cd3      	ldrb	r3, [r2, r3]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d03d      	beq.n	8005ac8 <sync_window+0x98>
		wsect = fs->winsect;	/* Current sector number */
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	238b      	movs	r3, #139	@ 0x8b
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	58d3      	ldr	r3, [r2, r3]
 8005a54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad8 <sync_window+0xa8>)
 8005a5a:	5c98      	ldrb	r0, [r3, r2]
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	2301      	movs	r3, #1
 8005a62:	f7ff fd61 	bl	8005528 <disk_write>
 8005a66:	1e03      	subs	r3, r0, #0
 8005a68:	d003      	beq.n	8005a72 <sync_window+0x42>
			res = FR_DISK_ERR;
 8005a6a:	193b      	adds	r3, r7, r4
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	e02a      	b.n	8005ac8 <sync_window+0x98>
		} else {
			fs->wflag = 0;
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	2381      	movs	r3, #129	@ 0x81
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	2100      	movs	r1, #0
 8005a7a:	54d1      	strb	r1, [r2, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	2388      	movs	r3, #136	@ 0x88
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	58d3      	ldr	r3, [r2, r3]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	1ad2      	subs	r2, r2, r3
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	2386      	movs	r3, #134	@ 0x86
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	58cb      	ldr	r3, [r1, r3]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d219      	bcs.n	8005ac8 <sync_window+0x98>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a11      	ldr	r2, [pc, #68]	@ (8005adc <sync_window+0xac>)
 8005a98:	5c9b      	ldrb	r3, [r3, r2]
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	e011      	b.n	8005ac2 <sync_window+0x92>
					wsect += fs->fsize;
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	2386      	movs	r3, #134	@ 0x86
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	58d3      	ldr	r3, [r2, r3]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	18d3      	adds	r3, r2, r3
 8005aaa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a0a      	ldr	r2, [pc, #40]	@ (8005ad8 <sync_window+0xa8>)
 8005ab0:	5c98      	ldrb	r0, [r3, r2]
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f7ff fd36 	bl	8005528 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d8ea      	bhi.n	8005a9e <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8005ac8:	230f      	movs	r3, #15
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	781b      	ldrb	r3, [r3, #0]
}
 8005ace:	0018      	movs	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b007      	add	sp, #28
 8005ad4:	bd90      	pop	{r4, r7, pc}
 8005ad6:	46c0      	nop			@ (mov r8, r8)
 8005ad8:	00000201 	.word	0x00000201
 8005adc:	00000203 	.word	0x00000203

08005ae0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005ae0:	b5b0      	push	{r4, r5, r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005aea:	240f      	movs	r4, #15
 8005aec:	193b      	adds	r3, r7, r4
 8005aee:	2200      	movs	r2, #0
 8005af0:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	238b      	movs	r3, #139	@ 0x8b
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	58d3      	ldr	r3, [r2, r3]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d021      	beq.n	8005b44 <move_window+0x64>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b00:	0025      	movs	r5, r4
 8005b02:	193c      	adds	r4, r7, r4
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	0018      	movs	r0, r3
 8005b08:	f7ff ff92 	bl	8005a30 <sync_window>
 8005b0c:	0003      	movs	r3, r0
 8005b0e:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b10:	002c      	movs	r4, r5
 8005b12:	193b      	adds	r3, r7, r4
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d114      	bne.n	8005b44 <move_window+0x64>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8005b54 <move_window+0x74>)
 8005b1e:	5c98      	ldrb	r0, [r3, r2]
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	2301      	movs	r3, #1
 8005b26:	f7ff fcd7 	bl	80054d8 <disk_read>
 8005b2a:	1e03      	subs	r3, r0, #0
 8005b2c:	d005      	beq.n	8005b3a <move_window+0x5a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005b2e:	2301      	movs	r3, #1
 8005b30:	425b      	negs	r3, r3
 8005b32:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005b34:	193b      	adds	r3, r7, r4
 8005b36:	2201      	movs	r2, #1
 8005b38:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	238b      	movs	r3, #139	@ 0x8b
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	50d1      	str	r1, [r2, r3]
		}
	}
	return res;
 8005b44:	230f      	movs	r3, #15
 8005b46:	18fb      	adds	r3, r7, r3
 8005b48:	781b      	ldrb	r3, [r3, #0]
}
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b004      	add	sp, #16
 8005b50:	bdb0      	pop	{r4, r5, r7, pc}
 8005b52:	46c0      	nop			@ (mov r8, r8)
 8005b54:	00000201 	.word	0x00000201

08005b58 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005b58:	b5b0      	push	{r4, r5, r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005b60:	250f      	movs	r5, #15
 8005b62:	197c      	adds	r4, r7, r5
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	0018      	movs	r0, r3
 8005b68:	f7ff ff62 	bl	8005a30 <sync_window>
 8005b6c:	0003      	movs	r3, r0
 8005b6e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005b70:	197b      	adds	r3, r7, r5
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d000      	beq.n	8005b7a <sync_fs+0x22>
 8005b78:	e0b4      	b.n	8005ce4 <sync_fs+0x18c>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	2380      	movs	r3, #128	@ 0x80
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	5cd3      	ldrb	r3, [r2, r3]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d000      	beq.n	8005b88 <sync_fs+0x30>
 8005b86:	e09f      	b.n	8005cc8 <sync_fs+0x170>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a5a      	ldr	r2, [pc, #360]	@ (8005cf4 <sync_fs+0x19c>)
 8005b8c:	5c9b      	ldrb	r3, [r3, r2]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d000      	beq.n	8005b94 <sync_fs+0x3c>
 8005b92:	e099      	b.n	8005cc8 <sync_fs+0x170>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2280      	movs	r2, #128	@ 0x80
 8005b98:	0092      	lsls	r2, r2, #2
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	f7ff fd30 	bl	8005602 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	23ff      	movs	r3, #255	@ 0xff
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	2155      	movs	r1, #85	@ 0x55
 8005baa:	54d1      	strb	r1, [r2, r3]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a52      	ldr	r2, [pc, #328]	@ (8005cf8 <sync_fs+0x1a0>)
 8005bb0:	21aa      	movs	r1, #170	@ 0xaa
 8005bb2:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2252      	movs	r2, #82	@ 0x52
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2252      	movs	r2, #82	@ 0x52
 8005bbe:	705a      	strb	r2, [r3, #1]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2261      	movs	r2, #97	@ 0x61
 8005bc4:	709a      	strb	r2, [r3, #2]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2241      	movs	r2, #65	@ 0x41
 8005bca:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	23f2      	movs	r3, #242	@ 0xf2
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	2172      	movs	r1, #114	@ 0x72
 8005bd4:	54d1      	strb	r1, [r2, r3]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	23e6      	movs	r3, #230	@ 0xe6
 8005bda:	33ff      	adds	r3, #255	@ 0xff
 8005bdc:	2172      	movs	r1, #114	@ 0x72
 8005bde:	54d1      	strb	r1, [r2, r3]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	23f3      	movs	r3, #243	@ 0xf3
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	2141      	movs	r1, #65	@ 0x41
 8005be8:	54d1      	strb	r1, [r2, r3]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	23e8      	movs	r3, #232	@ 0xe8
 8005bee:	33ff      	adds	r3, #255	@ 0xff
 8005bf0:	2161      	movs	r1, #97	@ 0x61
 8005bf2:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	2384      	movs	r3, #132	@ 0x84
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	58d3      	ldr	r3, [r2, r3]
 8005bfc:	b2d9      	uxtb	r1, r3
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	23f4      	movs	r3, #244	@ 0xf4
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	54d1      	strb	r1, [r2, r3]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	2384      	movs	r3, #132	@ 0x84
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	58d3      	ldr	r3, [r2, r3]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	0a1b      	lsrs	r3, r3, #8
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	b2d9      	uxtb	r1, r3
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	23ea      	movs	r3, #234	@ 0xea
 8005c1a:	33ff      	adds	r3, #255	@ 0xff
 8005c1c:	54d1      	strb	r1, [r2, r3]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	2384      	movs	r3, #132	@ 0x84
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	58d3      	ldr	r3, [r2, r3]
 8005c26:	0c1b      	lsrs	r3, r3, #16
 8005c28:	b2d9      	uxtb	r1, r3
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	23f5      	movs	r3, #245	@ 0xf5
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	54d1      	strb	r1, [r2, r3]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	2384      	movs	r3, #132	@ 0x84
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	58d3      	ldr	r3, [r2, r3]
 8005c3a:	0e1b      	lsrs	r3, r3, #24
 8005c3c:	b2d9      	uxtb	r1, r3
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	23ec      	movs	r3, #236	@ 0xec
 8005c42:	33ff      	adds	r3, #255	@ 0xff
 8005c44:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	2383      	movs	r3, #131	@ 0x83
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	58d3      	ldr	r3, [r2, r3]
 8005c4e:	b2d9      	uxtb	r1, r3
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	23f6      	movs	r3, #246	@ 0xf6
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	54d1      	strb	r1, [r2, r3]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	2383      	movs	r3, #131	@ 0x83
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	58d3      	ldr	r3, [r2, r3]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	0a1b      	lsrs	r3, r3, #8
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	b2d9      	uxtb	r1, r3
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	23ee      	movs	r3, #238	@ 0xee
 8005c6c:	33ff      	adds	r3, #255	@ 0xff
 8005c6e:	54d1      	strb	r1, [r2, r3]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	2383      	movs	r3, #131	@ 0x83
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	58d3      	ldr	r3, [r2, r3]
 8005c78:	0c1b      	lsrs	r3, r3, #16
 8005c7a:	b2d9      	uxtb	r1, r3
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	23f7      	movs	r3, #247	@ 0xf7
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	54d1      	strb	r1, [r2, r3]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	2383      	movs	r3, #131	@ 0x83
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	58d3      	ldr	r3, [r2, r3]
 8005c8c:	0e1b      	lsrs	r3, r3, #24
 8005c8e:	b2d9      	uxtb	r1, r3
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	23f0      	movs	r3, #240	@ 0xf0
 8005c94:	33ff      	adds	r3, #255	@ 0xff
 8005c96:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	2387      	movs	r3, #135	@ 0x87
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	58d3      	ldr	r3, [r2, r3]
 8005ca0:	1c59      	adds	r1, r3, #1
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	238b      	movs	r3, #139	@ 0x8b
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	50d1      	str	r1, [r2, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a13      	ldr	r2, [pc, #76]	@ (8005cfc <sync_fs+0x1a4>)
 8005cae:	5c98      	ldrb	r0, [r3, r2]
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	238b      	movs	r3, #139	@ 0x8b
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	58d2      	ldr	r2, [r2, r3]
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f7ff fc34 	bl	8005528 <disk_write>
			fs->fsi_flag = 0;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8005cf4 <sync_fs+0x19c>)
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a0c      	ldr	r2, [pc, #48]	@ (8005cfc <sync_fs+0x1a4>)
 8005ccc:	5c9b      	ldrb	r3, [r3, r2]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f7ff fc50 	bl	8005578 <disk_ioctl>
 8005cd8:	1e03      	subs	r3, r0, #0
 8005cda:	d003      	beq.n	8005ce4 <sync_fs+0x18c>
			res = FR_DISK_ERR;
 8005cdc:	230f      	movs	r3, #15
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8005ce4:	230f      	movs	r3, #15
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	781b      	ldrb	r3, [r3, #0]
}
 8005cea:	0018      	movs	r0, r3
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b004      	add	sp, #16
 8005cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8005cf2:	46c0      	nop			@ (mov r8, r8)
 8005cf4:	00000205 	.word	0x00000205
 8005cf8:	000001ff 	.word	0x000001ff
 8005cfc:	00000201 	.word	0x00000201

08005d00 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	3b02      	subs	r3, #2
 8005d0e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	2385      	movs	r3, #133	@ 0x85
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	58d3      	ldr	r3, [r2, r3]
 8005d18:	3b02      	subs	r3, #2
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d301      	bcc.n	8005d24 <clust2sect+0x24>
 8005d20:	2300      	movs	r3, #0
 8005d22:	e00a      	b.n	8005d3a <clust2sect+0x3a>
	return clst * fs->csize + fs->database;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a07      	ldr	r2, [pc, #28]	@ (8005d44 <clust2sect+0x44>)
 8005d28:	5c9b      	ldrb	r3, [r3, r2]
 8005d2a:	001a      	movs	r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	435a      	muls	r2, r3
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	238a      	movs	r3, #138	@ 0x8a
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	58cb      	ldr	r3, [r1, r3]
 8005d38:	18d3      	adds	r3, r2, r3
}
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	b002      	add	sp, #8
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	46c0      	nop			@ (mov r8, r8)
 8005d44:	00000202 	.word	0x00000202

08005d48 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d906      	bls.n	8005d66 <get_fat+0x1e>
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	2385      	movs	r3, #133	@ 0x85
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	58d3      	ldr	r3, [r2, r3]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d302      	bcc.n	8005d6c <get_fat+0x24>
		val = 1;	/* Internal error */
 8005d66:	2301      	movs	r3, #1
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	e0aa      	b.n	8005ec2 <get_fat+0x17a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	425b      	negs	r3, r3
 8005d70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	2380      	movs	r3, #128	@ 0x80
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	5cd3      	ldrb	r3, [r2, r3]
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d100      	bne.n	8005d80 <get_fat+0x38>
 8005d7e:	e06b      	b.n	8005e58 <get_fat+0x110>
 8005d80:	dd00      	ble.n	8005d84 <get_fat+0x3c>
 8005d82:	e094      	b.n	8005eae <get_fat+0x166>
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d002      	beq.n	8005d8e <get_fat+0x46>
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d041      	beq.n	8005e10 <get_fat+0xc8>
 8005d8c:	e08f      	b.n	8005eae <get_fat+0x166>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	18d3      	adds	r3, r2, r3
 8005d9a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	2388      	movs	r3, #136	@ 0x88
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	58d2      	ldr	r2, [r2, r3]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	0a5b      	lsrs	r3, r3, #9
 8005da8:	18d2      	adds	r2, r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	0011      	movs	r1, r2
 8005dae:	0018      	movs	r0, r3
 8005db0:	f7ff fe96 	bl	8005ae0 <move_window>
 8005db4:	1e03      	subs	r3, r0, #0
 8005db6:	d000      	beq.n	8005dba <get_fat+0x72>
 8005db8:	e07c      	b.n	8005eb4 <get_fat+0x16c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	60fa      	str	r2, [r7, #12]
 8005dc0:	05db      	lsls	r3, r3, #23
 8005dc2:	0ddb      	lsrs	r3, r3, #23
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	5cd3      	ldrb	r3, [r2, r3]
 8005dc8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	2388      	movs	r3, #136	@ 0x88
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	58d2      	ldr	r2, [r2, r3]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	0a5b      	lsrs	r3, r3, #9
 8005dd6:	18d2      	adds	r2, r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	0011      	movs	r1, r2
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f7ff fe7f 	bl	8005ae0 <move_window>
 8005de2:	1e03      	subs	r3, r0, #0
 8005de4:	d168      	bne.n	8005eb8 <get_fat+0x170>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	05db      	lsls	r3, r3, #23
 8005dea:	0ddb      	lsrs	r3, r3, #23
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	5cd3      	ldrb	r3, [r2, r3]
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d002      	beq.n	8005e06 <get_fat+0xbe>
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	091b      	lsrs	r3, r3, #4
 8005e04:	e002      	b.n	8005e0c <get_fat+0xc4>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	051b      	lsls	r3, r3, #20
 8005e0a:	0d1b      	lsrs	r3, r3, #20
 8005e0c:	617b      	str	r3, [r7, #20]
			break;
 8005e0e:	e058      	b.n	8005ec2 <get_fat+0x17a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	2388      	movs	r3, #136	@ 0x88
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	58d2      	ldr	r2, [r2, r3]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	0a1b      	lsrs	r3, r3, #8
 8005e1c:	18d2      	adds	r2, r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	0011      	movs	r1, r2
 8005e22:	0018      	movs	r0, r3
 8005e24:	f7ff fe5c 	bl	8005ae0 <move_window>
 8005e28:	1e03      	subs	r3, r0, #0
 8005e2a:	d147      	bne.n	8005ebc <get_fat+0x174>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	005a      	lsls	r2, r3, #1
 8005e30:	23ff      	movs	r3, #255	@ 0xff
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	4013      	ands	r3, r2
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	18d3      	adds	r3, r2, r3
 8005e3a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	b21b      	sxth	r3, r3
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	b21a      	sxth	r2, r3
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	b21b      	sxth	r3, r3
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	b21b      	sxth	r3, r3
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	617b      	str	r3, [r7, #20]
			break;
 8005e56:	e034      	b.n	8005ec2 <get_fat+0x17a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	2388      	movs	r3, #136	@ 0x88
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	58d2      	ldr	r2, [r2, r3]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	09db      	lsrs	r3, r3, #7
 8005e64:	18d2      	adds	r2, r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	0011      	movs	r1, r2
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f7ff fe38 	bl	8005ae0 <move_window>
 8005e70:	1e03      	subs	r3, r0, #0
 8005e72:	d125      	bne.n	8005ec0 <get_fat+0x178>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	009a      	lsls	r2, r3, #2
 8005e78:	23fe      	movs	r3, #254	@ 0xfe
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	18d3      	adds	r3, r2, r3
 8005e82:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	3303      	adds	r3, #3
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	061a      	lsls	r2, r3, #24
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	3302      	adds	r3, #2
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	041b      	lsls	r3, r3, #16
 8005e94:	431a      	orrs	r2, r3
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	7812      	ldrb	r2, [r2, #0]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	617b      	str	r3, [r7, #20]
			break;
 8005eac:	e009      	b.n	8005ec2 <get_fat+0x17a>

		default:
			val = 1;	/* Internal error */
 8005eae:	2301      	movs	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	e006      	b.n	8005ec2 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005eb4:	46c0      	nop			@ (mov r8, r8)
 8005eb6:	e004      	b.n	8005ec2 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005eb8:	46c0      	nop			@ (mov r8, r8)
 8005eba:	e002      	b.n	8005ec2 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005ebc:	46c0      	nop			@ (mov r8, r8)
 8005ebe:	e000      	b.n	8005ec2 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ec0:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 8005ec2:	697b      	ldr	r3, [r7, #20]
}
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b006      	add	sp, #24
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005ecc:	b5b0      	push	{r4, r5, r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d906      	bls.n	8005eec <put_fat+0x20>
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	2385      	movs	r3, #133	@ 0x85
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	58d3      	ldr	r3, [r2, r3]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d304      	bcc.n	8005ef6 <put_fat+0x2a>
		res = FR_INT_ERR;
 8005eec:	231f      	movs	r3, #31
 8005eee:	18fb      	adds	r3, r7, r3
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	e111      	b.n	800611a <put_fat+0x24e>

	} else {
		switch (fs->fs_type) {
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	2380      	movs	r3, #128	@ 0x80
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	5cd3      	ldrb	r3, [r2, r3]
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d100      	bne.n	8005f04 <put_fat+0x38>
 8005f02:	e0ae      	b.n	8006062 <put_fat+0x196>
 8005f04:	dd00      	ble.n	8005f08 <put_fat+0x3c>
 8005f06:	e0fc      	b.n	8006102 <put_fat+0x236>
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d003      	beq.n	8005f14 <put_fat+0x48>
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d100      	bne.n	8005f12 <put_fat+0x46>
 8005f10:	e079      	b.n	8006006 <put_fat+0x13a>
 8005f12:	e0f6      	b.n	8006102 <put_fat+0x236>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	085b      	lsrs	r3, r3, #1
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	18d3      	adds	r3, r2, r3
 8005f20:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	2388      	movs	r3, #136	@ 0x88
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	58d2      	ldr	r2, [r2, r3]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	0a5b      	lsrs	r3, r3, #9
 8005f2e:	18d2      	adds	r2, r2, r3
 8005f30:	251f      	movs	r5, #31
 8005f32:	197c      	adds	r4, r7, r5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	0011      	movs	r1, r2
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f7ff fdd1 	bl	8005ae0 <move_window>
 8005f3e:	0003      	movs	r3, r0
 8005f40:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005f42:	197b      	adds	r3, r7, r5
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d000      	beq.n	8005f4c <put_fat+0x80>
 8005f4a:	e0df      	b.n	800610c <put_fat+0x240>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	617a      	str	r2, [r7, #20]
 8005f52:	05db      	lsls	r3, r3, #23
 8005f54:	0ddb      	lsrs	r3, r3, #23
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	18d3      	adds	r3, r2, r3
 8005f5a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	4013      	ands	r3, r2
 8005f62:	d00d      	beq.n	8005f80 <put_fat+0xb4>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	b25b      	sxtb	r3, r3
 8005f6a:	220f      	movs	r2, #15
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	b25a      	sxtb	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	b25b      	sxtb	r3, r3
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	b25b      	sxtb	r3, r3
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	b25b      	sxtb	r3, r3
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	e001      	b.n	8005f84 <put_fat+0xb8>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	2381      	movs	r3, #129	@ 0x81
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	2101      	movs	r1, #1
 8005f90:	54d1      	strb	r1, [r2, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	2388      	movs	r3, #136	@ 0x88
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	58d2      	ldr	r2, [r2, r3]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	0a5b      	lsrs	r3, r3, #9
 8005f9e:	18d2      	adds	r2, r2, r3
 8005fa0:	251f      	movs	r5, #31
 8005fa2:	197c      	adds	r4, r7, r5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	0011      	movs	r1, r2
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f7ff fd99 	bl	8005ae0 <move_window>
 8005fae:	0003      	movs	r3, r0
 8005fb0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005fb2:	197b      	adds	r3, r7, r5
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d000      	beq.n	8005fbc <put_fat+0xf0>
 8005fba:	e0a9      	b.n	8006110 <put_fat+0x244>
			p = &fs->win.d8[bc % SS(fs)];
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	05db      	lsls	r3, r3, #23
 8005fc0:	0ddb      	lsrs	r3, r3, #23
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	18d3      	adds	r3, r2, r3
 8005fc6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d003      	beq.n	8005fd8 <put_fat+0x10c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	091b      	lsrs	r3, r3, #4
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	e00e      	b.n	8005ff6 <put_fat+0x12a>
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	b25b      	sxtb	r3, r3
 8005fde:	220f      	movs	r2, #15
 8005fe0:	4393      	bics	r3, r2
 8005fe2:	b25a      	sxtb	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	0a1b      	lsrs	r3, r3, #8
 8005fe8:	b25b      	sxtb	r3, r3
 8005fea:	210f      	movs	r1, #15
 8005fec:	400b      	ands	r3, r1
 8005fee:	b25b      	sxtb	r3, r3
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	b25b      	sxtb	r3, r3
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	2381      	movs	r3, #129	@ 0x81
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	2101      	movs	r1, #1
 8006002:	54d1      	strb	r1, [r2, r3]
			break;
 8006004:	e089      	b.n	800611a <put_fat+0x24e>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	2388      	movs	r3, #136	@ 0x88
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	58d2      	ldr	r2, [r2, r3]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	0a1b      	lsrs	r3, r3, #8
 8006012:	18d2      	adds	r2, r2, r3
 8006014:	251f      	movs	r5, #31
 8006016:	197c      	adds	r4, r7, r5
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	0011      	movs	r1, r2
 800601c:	0018      	movs	r0, r3
 800601e:	f7ff fd5f 	bl	8005ae0 <move_window>
 8006022:	0003      	movs	r3, r0
 8006024:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006026:	197b      	adds	r3, r7, r5
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d172      	bne.n	8006114 <put_fat+0x248>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	005a      	lsls	r2, r3, #1
 8006032:	23ff      	movs	r3, #255	@ 0xff
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	4013      	ands	r3, r2
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	18d3      	adds	r3, r2, r3
 800603c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	b2da      	uxtb	r2, r3
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	b29b      	uxth	r3, r3
 800604a:	0a1b      	lsrs	r3, r3, #8
 800604c:	b29a      	uxth	r2, r3
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	3301      	adds	r3, #1
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	2381      	movs	r3, #129	@ 0x81
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	2101      	movs	r1, #1
 800605e:	54d1      	strb	r1, [r2, r3]
			break;
 8006060:	e05b      	b.n	800611a <put_fat+0x24e>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	2388      	movs	r3, #136	@ 0x88
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	58d2      	ldr	r2, [r2, r3]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	09db      	lsrs	r3, r3, #7
 800606e:	18d2      	adds	r2, r2, r3
 8006070:	251f      	movs	r5, #31
 8006072:	197c      	adds	r4, r7, r5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	0011      	movs	r1, r2
 8006078:	0018      	movs	r0, r3
 800607a:	f7ff fd31 	bl	8005ae0 <move_window>
 800607e:	0003      	movs	r3, r0
 8006080:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006082:	197b      	adds	r3, r7, r5
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d146      	bne.n	8006118 <put_fat+0x24c>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	009a      	lsls	r2, r3, #2
 800608e:	23fe      	movs	r3, #254	@ 0xfe
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	4013      	ands	r3, r2
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	18d3      	adds	r3, r2, r3
 8006098:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	3303      	adds	r3, #3
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	061a      	lsls	r2, r3, #24
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	3302      	adds	r3, #2
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	041b      	lsls	r3, r3, #16
 80060aa:	431a      	orrs	r2, r3
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	3301      	adds	r3, #1
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	4313      	orrs	r3, r2
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	7812      	ldrb	r2, [r2, #0]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	0f1b      	lsrs	r3, r3, #28
 80060be:	071b      	lsls	r3, r3, #28
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	0a1b      	lsrs	r3, r3, #8
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	3301      	adds	r3, #1
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	0c1a      	lsrs	r2, r3, #16
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	3302      	adds	r3, #2
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	0e1a      	lsrs	r2, r3, #24
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	3303      	adds	r3, #3
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	2381      	movs	r3, #129	@ 0x81
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	2101      	movs	r1, #1
 80060fe:	54d1      	strb	r1, [r2, r3]
			break;
 8006100:	e00b      	b.n	800611a <put_fat+0x24e>

		default :
			res = FR_INT_ERR;
 8006102:	231f      	movs	r3, #31
 8006104:	18fb      	adds	r3, r7, r3
 8006106:	2202      	movs	r2, #2
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	e006      	b.n	800611a <put_fat+0x24e>
			if (res != FR_OK) break;
 800610c:	46c0      	nop			@ (mov r8, r8)
 800610e:	e004      	b.n	800611a <put_fat+0x24e>
			if (res != FR_OK) break;
 8006110:	46c0      	nop			@ (mov r8, r8)
 8006112:	e002      	b.n	800611a <put_fat+0x24e>
			if (res != FR_OK) break;
 8006114:	46c0      	nop			@ (mov r8, r8)
 8006116:	e000      	b.n	800611a <put_fat+0x24e>
			if (res != FR_OK) break;
 8006118:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return res;
 800611a:	231f      	movs	r3, #31
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	781b      	ldrb	r3, [r3, #0]
}
 8006120:	0018      	movs	r0, r3
 8006122:	46bd      	mov	sp, r7
 8006124:	b008      	add	sp, #32
 8006126:	bdb0      	pop	{r4, r5, r7, pc}

08006128 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006128:	b5b0      	push	{r4, r5, r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d906      	bls.n	8006146 <remove_chain+0x1e>
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	2385      	movs	r3, #133	@ 0x85
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	58d3      	ldr	r3, [r2, r3]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d304      	bcc.n	8006150 <remove_chain+0x28>
		res = FR_INT_ERR;
 8006146:	230f      	movs	r3, #15
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	2202      	movs	r2, #2
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	e052      	b.n	80061f6 <remove_chain+0xce>

	} else {
		res = FR_OK;
 8006150:	230f      	movs	r3, #15
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	2200      	movs	r2, #0
 8006156:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006158:	e042      	b.n	80061e0 <remove_chain+0xb8>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	0011      	movs	r1, r2
 8006160:	0018      	movs	r0, r3
 8006162:	f7ff fdf1 	bl	8005d48 <get_fat>
 8006166:	0003      	movs	r3, r0
 8006168:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d03f      	beq.n	80061f0 <remove_chain+0xc8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d104      	bne.n	8006180 <remove_chain+0x58>
 8006176:	230f      	movs	r3, #15
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	2202      	movs	r2, #2
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	e03a      	b.n	80061f6 <remove_chain+0xce>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	3301      	adds	r3, #1
 8006184:	d104      	bne.n	8006190 <remove_chain+0x68>
 8006186:	230f      	movs	r3, #15
 8006188:	18fb      	adds	r3, r7, r3
 800618a:	2201      	movs	r2, #1
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	e032      	b.n	80061f6 <remove_chain+0xce>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006190:	250f      	movs	r5, #15
 8006192:	197c      	adds	r4, r7, r5
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	0018      	movs	r0, r3
 800619c:	f7ff fe96 	bl	8005ecc <put_fat>
 80061a0:	0003      	movs	r3, r0
 80061a2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80061a4:	197b      	adds	r3, r7, r5
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d123      	bne.n	80061f4 <remove_chain+0xcc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	2384      	movs	r3, #132	@ 0x84
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	58d3      	ldr	r3, [r2, r3]
 80061b4:	3301      	adds	r3, #1
 80061b6:	d011      	beq.n	80061dc <remove_chain+0xb4>
				fs->free_clust++;
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	2384      	movs	r3, #132	@ 0x84
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	58d3      	ldr	r3, [r2, r3]
 80061c0:	1c59      	adds	r1, r3, #1
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	2384      	movs	r3, #132	@ 0x84
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	50d1      	str	r1, [r2, r3]
				fs->fsi_flag |= 1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a0d      	ldr	r2, [pc, #52]	@ (8006204 <remove_chain+0xdc>)
 80061ce:	5c9b      	ldrb	r3, [r3, r2]
 80061d0:	2201      	movs	r2, #1
 80061d2:	4313      	orrs	r3, r2
 80061d4:	b2d9      	uxtb	r1, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a0a      	ldr	r2, [pc, #40]	@ (8006204 <remove_chain+0xdc>)
 80061da:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	2385      	movs	r3, #133	@ 0x85
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	58d3      	ldr	r3, [r2, r3]
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d3b5      	bcc.n	800615a <remove_chain+0x32>
 80061ee:	e002      	b.n	80061f6 <remove_chain+0xce>
			if (nxt == 0) break;				/* Empty cluster? */
 80061f0:	46c0      	nop			@ (mov r8, r8)
 80061f2:	e000      	b.n	80061f6 <remove_chain+0xce>
			if (res != FR_OK) break;
 80061f4:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return res;
 80061f6:	230f      	movs	r3, #15
 80061f8:	18fb      	adds	r3, r7, r3
 80061fa:	781b      	ldrb	r3, [r3, #0]
}
 80061fc:	0018      	movs	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	b004      	add	sp, #16
 8006202:	bdb0      	pop	{r4, r5, r7, pc}
 8006204:	00000205 	.word	0x00000205

08006208 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006208:	b5b0      	push	{r4, r5, r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d111      	bne.n	800623c <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	2383      	movs	r3, #131	@ 0x83
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	58d3      	ldr	r3, [r2, r3]
 8006220:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d006      	beq.n	8006236 <create_chain+0x2e>
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	2385      	movs	r3, #133	@ 0x85
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	58d3      	ldr	r3, [r2, r3]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	429a      	cmp	r2, r3
 8006234:	d31f      	bcc.n	8006276 <create_chain+0x6e>
 8006236:	2301      	movs	r3, #1
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	e01c      	b.n	8006276 <create_chain+0x6e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	0011      	movs	r1, r2
 8006242:	0018      	movs	r0, r3
 8006244:	f7ff fd80 	bl	8005d48 <get_fat>
 8006248:	0003      	movs	r3, r0
 800624a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d801      	bhi.n	8006256 <create_chain+0x4e>
 8006252:	2301      	movs	r3, #1
 8006254:	e085      	b.n	8006362 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	3301      	adds	r3, #1
 800625a:	d101      	bne.n	8006260 <create_chain+0x58>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	e080      	b.n	8006362 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	2385      	movs	r3, #133	@ 0x85
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	58d3      	ldr	r3, [r2, r3]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	429a      	cmp	r2, r3
 800626c:	d201      	bcs.n	8006272 <create_chain+0x6a>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	e077      	b.n	8006362 <create_chain+0x15a>
		scl = clst;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	3301      	adds	r3, #1
 800627e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	2385      	movs	r3, #133	@ 0x85
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	58d3      	ldr	r3, [r2, r3]
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	429a      	cmp	r2, r3
 800628c:	d307      	bcc.n	800629e <create_chain+0x96>
			ncl = 2;
 800628e:	2302      	movs	r3, #2
 8006290:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	429a      	cmp	r2, r3
 8006298:	d901      	bls.n	800629e <create_chain+0x96>
 800629a:	2300      	movs	r3, #0
 800629c:	e061      	b.n	8006362 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	0011      	movs	r1, r2
 80062a4:	0018      	movs	r0, r3
 80062a6:	f7ff fd4f 	bl	8005d48 <get_fat>
 80062aa:	0003      	movs	r3, r0
 80062ac:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00d      	beq.n	80062d0 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	3301      	adds	r3, #1
 80062b8:	d002      	beq.n	80062c0 <create_chain+0xb8>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <create_chain+0xbc>
			return cs;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	e04e      	b.n	8006362 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d1d6      	bne.n	800627a <create_chain+0x72>
 80062cc:	2300      	movs	r3, #0
 80062ce:	e048      	b.n	8006362 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 80062d0:	46c0      	nop			@ (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80062d2:	250f      	movs	r5, #15
 80062d4:	197c      	adds	r4, r7, r5
 80062d6:	4a25      	ldr	r2, [pc, #148]	@ (800636c <create_chain+0x164>)
 80062d8:	6979      	ldr	r1, [r7, #20]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	0018      	movs	r0, r3
 80062de:	f7ff fdf5 	bl	8005ecc <put_fat>
 80062e2:	0003      	movs	r3, r0
 80062e4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 80062e6:	197b      	adds	r3, r7, r5
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10b      	bne.n	8006306 <create_chain+0xfe>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d008      	beq.n	8006306 <create_chain+0xfe>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80062f4:	197c      	adds	r4, r7, r5
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	0018      	movs	r0, r3
 80062fe:	f7ff fde5 	bl	8005ecc <put_fat>
 8006302:	0003      	movs	r3, r0
 8006304:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 8006306:	230f      	movs	r3, #15
 8006308:	18fb      	adds	r3, r7, r3
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d11d      	bne.n	800634c <create_chain+0x144>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	2383      	movs	r3, #131	@ 0x83
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	6979      	ldr	r1, [r7, #20]
 8006318:	50d1      	str	r1, [r2, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	2384      	movs	r3, #132	@ 0x84
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	58d3      	ldr	r3, [r2, r3]
 8006322:	3301      	adds	r3, #1
 8006324:	d01c      	beq.n	8006360 <create_chain+0x158>
			fs->free_clust--;
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	2384      	movs	r3, #132	@ 0x84
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	58d3      	ldr	r3, [r2, r3]
 800632e:	1e59      	subs	r1, r3, #1
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	2384      	movs	r3, #132	@ 0x84
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a0d      	ldr	r2, [pc, #52]	@ (8006370 <create_chain+0x168>)
 800633c:	5c9b      	ldrb	r3, [r3, r2]
 800633e:	2201      	movs	r2, #1
 8006340:	4313      	orrs	r3, r2
 8006342:	b2d9      	uxtb	r1, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a0a      	ldr	r2, [pc, #40]	@ (8006370 <create_chain+0x168>)
 8006348:	5499      	strb	r1, [r3, r2]
 800634a:	e009      	b.n	8006360 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800634c:	230f      	movs	r3, #15
 800634e:	18fb      	adds	r3, r7, r3
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d102      	bne.n	800635c <create_chain+0x154>
 8006356:	2301      	movs	r3, #1
 8006358:	425b      	negs	r3, r3
 800635a:	e000      	b.n	800635e <create_chain+0x156>
 800635c:	2301      	movs	r3, #1
 800635e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006360:	697b      	ldr	r3, [r7, #20]
}
 8006362:	0018      	movs	r0, r3
 8006364:	46bd      	mov	sp, r7
 8006366:	b006      	add	sp, #24
 8006368:	bdb0      	pop	{r4, r5, r7, pc}
 800636a:	46c0      	nop			@ (mov r8, r8)
 800636c:	0fffffff 	.word	0x0fffffff
 8006370:	00000205 	.word	0x00000205

08006374 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	2389      	movs	r3, #137	@ 0x89
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	58d3      	ldr	r3, [r2, r3]
 8006386:	3304      	adds	r3, #4
 8006388:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	0a58      	lsrs	r0, r3, #9
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	2380      	movs	r3, #128	@ 0x80
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	58d3      	ldr	r3, [r2, r3]
 8006396:	4a13      	ldr	r2, [pc, #76]	@ (80063e4 <clmt_clust+0x70>)
 8006398:	5c9b      	ldrb	r3, [r3, r2]
 800639a:	0019      	movs	r1, r3
 800639c:	f7f9 fed0 	bl	8000140 <__udivsi3>
 80063a0:	0003      	movs	r3, r0
 80063a2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	1d1a      	adds	r2, r3, #4
 80063a8:	613a      	str	r2, [r7, #16]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <clmt_clust+0x44>
 80063b4:	2300      	movs	r3, #0
 80063b6:	e010      	b.n	80063da <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d307      	bcc.n	80063d0 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	3304      	adds	r3, #4
 80063cc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80063ce:	e7e9      	b.n	80063a4 <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 80063d0:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	18d3      	adds	r3, r2, r3
}
 80063da:	0018      	movs	r0, r3
 80063dc:	46bd      	mov	sp, r7
 80063de:	b006      	add	sp, #24
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	46c0      	nop			@ (mov r8, r8)
 80063e4:	00000202 	.word	0x00000202

080063e8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	b299      	uxth	r1, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a51      	ldr	r2, [pc, #324]	@ (8006540 <dir_sdi+0x158>)
 80063fa:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	2382      	movs	r3, #130	@ 0x82
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	58d3      	ldr	r3, [r2, r3]
 8006404:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d009      	beq.n	8006420 <dir_sdi+0x38>
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	2380      	movs	r3, #128	@ 0x80
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	58d2      	ldr	r2, [r2, r3]
 8006414:	2385      	movs	r3, #133	@ 0x85
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	58d3      	ldr	r3, [r2, r3]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	429a      	cmp	r2, r3
 800641e:	d301      	bcc.n	8006424 <dir_sdi+0x3c>
		return FR_INT_ERR;
 8006420:	2302      	movs	r3, #2
 8006422:	e088      	b.n	8006536 <dir_sdi+0x14e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d110      	bne.n	800644c <dir_sdi+0x64>
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	2380      	movs	r3, #128	@ 0x80
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	58d2      	ldr	r2, [r2, r3]
 8006432:	2380      	movs	r3, #128	@ 0x80
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	5cd3      	ldrb	r3, [r2, r3]
 8006438:	2b03      	cmp	r3, #3
 800643a:	d107      	bne.n	800644c <dir_sdi+0x64>
		clst = dp->fs->dirbase;
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	2380      	movs	r3, #128	@ 0x80
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	58d2      	ldr	r2, [r2, r3]
 8006444:	2389      	movs	r3, #137	@ 0x89
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	58d3      	ldr	r3, [r2, r3]
 800644a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d115      	bne.n	800647e <dir_sdi+0x96>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	2380      	movs	r3, #128	@ 0x80
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	58d2      	ldr	r2, [r2, r3]
 800645a:	2382      	movs	r3, #130	@ 0x82
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	5ad3      	ldrh	r3, [r2, r3]
 8006460:	001a      	movs	r2, r3
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	4293      	cmp	r3, r2
 8006466:	d301      	bcc.n	800646c <dir_sdi+0x84>
			return FR_INT_ERR;
 8006468:	2302      	movs	r3, #2
 800646a:	e064      	b.n	8006536 <dir_sdi+0x14e>
		sect = dp->fs->dirbase;
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	2380      	movs	r3, #128	@ 0x80
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	58d2      	ldr	r2, [r2, r3]
 8006474:	2389      	movs	r3, #137	@ 0x89
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	58d3      	ldr	r3, [r2, r3]
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	e03a      	b.n	80064f4 <dir_sdi+0x10c>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	2380      	movs	r3, #128	@ 0x80
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	58d3      	ldr	r3, [r2, r3]
 8006486:	4a2f      	ldr	r2, [pc, #188]	@ (8006544 <dir_sdi+0x15c>)
 8006488:	5c9b      	ldrb	r3, [r3, r2]
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800648e:	e022      	b.n	80064d6 <dir_sdi+0xee>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	2380      	movs	r3, #128	@ 0x80
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	58d3      	ldr	r3, [r2, r3]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	0011      	movs	r1, r2
 800649c:	0018      	movs	r0, r3
 800649e:	f7ff fc53 	bl	8005d48 <get_fat>
 80064a2:	0003      	movs	r3, r0
 80064a4:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	3301      	adds	r3, #1
 80064aa:	d101      	bne.n	80064b0 <dir_sdi+0xc8>
 80064ac:	2301      	movs	r3, #1
 80064ae:	e042      	b.n	8006536 <dir_sdi+0x14e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d909      	bls.n	80064ca <dir_sdi+0xe2>
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	2380      	movs	r3, #128	@ 0x80
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	58d2      	ldr	r2, [r2, r3]
 80064be:	2385      	movs	r3, #133	@ 0x85
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	58d3      	ldr	r3, [r2, r3]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d301      	bcc.n	80064ce <dir_sdi+0xe6>
				return FR_INT_ERR;
 80064ca:	2302      	movs	r3, #2
 80064cc:	e033      	b.n	8006536 <dir_sdi+0x14e>
			idx -= ic;
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d2d8      	bcs.n	8006490 <dir_sdi+0xa8>
		}
		sect = clust2sect(dp->fs, clst);
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	2380      	movs	r3, #128	@ 0x80
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	58d3      	ldr	r3, [r2, r3]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	0011      	movs	r1, r2
 80064ea:	0018      	movs	r0, r3
 80064ec:	f7ff fc08 	bl	8005d00 <clust2sect>
 80064f0:	0003      	movs	r3, r0
 80064f2:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	2383      	movs	r3, #131	@ 0x83
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	6979      	ldr	r1, [r7, #20]
 80064fc:	50d1      	str	r1, [r2, r3]
	if (!sect) return FR_INT_ERR;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <dir_sdi+0x120>
 8006504:	2302      	movs	r3, #2
 8006506:	e016      	b.n	8006536 <dir_sdi+0x14e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	091a      	lsrs	r2, r3, #4
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	18d1      	adds	r1, r2, r3
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	2384      	movs	r3, #132	@ 0x84
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	50d1      	str	r1, [r2, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	2380      	movs	r3, #128	@ 0x80
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	58d3      	ldr	r3, [r2, r3]
 8006520:	0019      	movs	r1, r3
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	220f      	movs	r2, #15
 8006526:	4013      	ands	r3, r2
 8006528:	015b      	lsls	r3, r3, #5
 800652a:	18c9      	adds	r1, r1, r3
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	2385      	movs	r3, #133	@ 0x85
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	0018      	movs	r0, r3
 8006538:	46bd      	mov	sp, r7
 800653a:	b006      	add	sp, #24
 800653c:	bd80      	pop	{r7, pc}
 800653e:	46c0      	nop			@ (mov r8, r8)
 8006540:	00000206 	.word	0x00000206
 8006544:	00000202 	.word	0x00000202

08006548 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006548:	b590      	push	{r4, r7, lr}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a87      	ldr	r2, [pc, #540]	@ (8006774 <dir_next+0x22c>)
 8006556:	5a9b      	ldrh	r3, [r3, r2]
 8006558:	3301      	adds	r3, #1
 800655a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	041b      	lsls	r3, r3, #16
 8006560:	0c1b      	lsrs	r3, r3, #16
 8006562:	d005      	beq.n	8006570 <dir_next+0x28>
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	2384      	movs	r3, #132	@ 0x84
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	58d3      	ldr	r3, [r2, r3]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <dir_next+0x2c>
		return FR_NO_FILE;
 8006570:	2304      	movs	r3, #4
 8006572:	e0fb      	b.n	800676c <dir_next+0x224>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	220f      	movs	r2, #15
 8006578:	4013      	ands	r3, r2
 800657a:	d000      	beq.n	800657e <dir_next+0x36>
 800657c:	e0e2      	b.n	8006744 <dir_next+0x1fc>
		dp->sect++;					/* Next sector */
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	2384      	movs	r3, #132	@ 0x84
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	58d3      	ldr	r3, [r2, r3]
 8006586:	1c59      	adds	r1, r3, #1
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	2384      	movs	r3, #132	@ 0x84
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	50d1      	str	r1, [r2, r3]

		if (!dp->clust) {		/* Static table */
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	2383      	movs	r3, #131	@ 0x83
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	58d3      	ldr	r3, [r2, r3]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10d      	bne.n	80065b8 <dir_next+0x70>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	2380      	movs	r3, #128	@ 0x80
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	58d2      	ldr	r2, [r2, r3]
 80065a4:	2382      	movs	r3, #130	@ 0x82
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	5ad3      	ldrh	r3, [r2, r3]
 80065aa:	001a      	movs	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d200      	bcs.n	80065b4 <dir_next+0x6c>
 80065b2:	e0c7      	b.n	8006744 <dir_next+0x1fc>
				return FR_NO_FILE;
 80065b4:	2304      	movs	r3, #4
 80065b6:	e0d9      	b.n	800676c <dir_next+0x224>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	091b      	lsrs	r3, r3, #4
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	2280      	movs	r2, #128	@ 0x80
 80065c0:	0092      	lsls	r2, r2, #2
 80065c2:	588a      	ldr	r2, [r1, r2]
 80065c4:	496c      	ldr	r1, [pc, #432]	@ (8006778 <dir_next+0x230>)
 80065c6:	5c52      	ldrb	r2, [r2, r1]
 80065c8:	3a01      	subs	r2, #1
 80065ca:	4013      	ands	r3, r2
 80065cc:	d000      	beq.n	80065d0 <dir_next+0x88>
 80065ce:	e0b9      	b.n	8006744 <dir_next+0x1fc>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	2380      	movs	r3, #128	@ 0x80
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	58d0      	ldr	r0, [r2, r3]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	2383      	movs	r3, #131	@ 0x83
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	58d3      	ldr	r3, [r2, r3]
 80065e0:	0019      	movs	r1, r3
 80065e2:	f7ff fbb1 	bl	8005d48 <get_fat>
 80065e6:	0003      	movs	r3, r0
 80065e8:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d801      	bhi.n	80065f4 <dir_next+0xac>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e0bb      	b.n	800676c <dir_next+0x224>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	3301      	adds	r3, #1
 80065f8:	d101      	bne.n	80065fe <dir_next+0xb6>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e0b6      	b.n	800676c <dir_next+0x224>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	2380      	movs	r3, #128	@ 0x80
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	58d2      	ldr	r2, [r2, r3]
 8006606:	2385      	movs	r3, #133	@ 0x85
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	58d3      	ldr	r3, [r2, r3]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	429a      	cmp	r2, r3
 8006610:	d200      	bcs.n	8006614 <dir_next+0xcc>
 8006612:	e084      	b.n	800671e <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <dir_next+0xd6>
 800661a:	2304      	movs	r3, #4
 800661c:	e0a6      	b.n	800676c <dir_next+0x224>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	2380      	movs	r3, #128	@ 0x80
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	58d0      	ldr	r0, [r2, r3]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	2383      	movs	r3, #131	@ 0x83
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	58d3      	ldr	r3, [r2, r3]
 800662e:	0019      	movs	r1, r3
 8006630:	f7ff fdea 	bl	8006208 <create_chain>
 8006634:	0003      	movs	r3, r0
 8006636:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <dir_next+0xfa>
 800663e:	2307      	movs	r3, #7
 8006640:	e094      	b.n	800676c <dir_next+0x224>
					if (clst == 1) return FR_INT_ERR;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <dir_next+0x104>
 8006648:	2302      	movs	r3, #2
 800664a:	e08f      	b.n	800676c <dir_next+0x224>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	3301      	adds	r3, #1
 8006650:	d101      	bne.n	8006656 <dir_next+0x10e>
 8006652:	2301      	movs	r3, #1
 8006654:	e08a      	b.n	800676c <dir_next+0x224>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	2380      	movs	r3, #128	@ 0x80
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	58d3      	ldr	r3, [r2, r3]
 800665e:	0018      	movs	r0, r3
 8006660:	f7ff f9e6 	bl	8005a30 <sync_window>
 8006664:	1e03      	subs	r3, r0, #0
 8006666:	d001      	beq.n	800666c <dir_next+0x124>
 8006668:	2301      	movs	r3, #1
 800666a:	e07f      	b.n	800676c <dir_next+0x224>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	2380      	movs	r3, #128	@ 0x80
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	58d3      	ldr	r3, [r2, r3]
 8006674:	0018      	movs	r0, r3
 8006676:	2380      	movs	r3, #128	@ 0x80
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	001a      	movs	r2, r3
 800667c:	2100      	movs	r1, #0
 800667e:	f7fe ffc0 	bl	8005602 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	2380      	movs	r3, #128	@ 0x80
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	58d0      	ldr	r0, [r2, r3]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	2380      	movs	r3, #128	@ 0x80
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	58d4      	ldr	r4, [r2, r3]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	0019      	movs	r1, r3
 8006696:	f7ff fb33 	bl	8005d00 <clust2sect>
 800669a:	0002      	movs	r2, r0
 800669c:	238b      	movs	r3, #139	@ 0x8b
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	50e2      	str	r2, [r4, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80066a2:	2300      	movs	r3, #0
 80066a4:	613b      	str	r3, [r7, #16]
 80066a6:	e020      	b.n	80066ea <dir_next+0x1a2>
						dp->fs->wflag = 1;
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	2380      	movs	r3, #128	@ 0x80
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	58d2      	ldr	r2, [r2, r3]
 80066b0:	2381      	movs	r3, #129	@ 0x81
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	2101      	movs	r1, #1
 80066b6:	54d1      	strb	r1, [r2, r3]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	2380      	movs	r3, #128	@ 0x80
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	58d3      	ldr	r3, [r2, r3]
 80066c0:	0018      	movs	r0, r3
 80066c2:	f7ff f9b5 	bl	8005a30 <sync_window>
 80066c6:	1e03      	subs	r3, r0, #0
 80066c8:	d001      	beq.n	80066ce <dir_next+0x186>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e04e      	b.n	800676c <dir_next+0x224>
						dp->fs->winsect++;
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	2380      	movs	r3, #128	@ 0x80
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	58d3      	ldr	r3, [r2, r3]
 80066d6:	228b      	movs	r2, #139	@ 0x8b
 80066d8:	0092      	lsls	r2, r2, #2
 80066da:	589a      	ldr	r2, [r3, r2]
 80066dc:	1c51      	adds	r1, r2, #1
 80066de:	228b      	movs	r2, #139	@ 0x8b
 80066e0:	0092      	lsls	r2, r2, #2
 80066e2:	5099      	str	r1, [r3, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	3301      	adds	r3, #1
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	2380      	movs	r3, #128	@ 0x80
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	58d3      	ldr	r3, [r2, r3]
 80066f2:	4a21      	ldr	r2, [pc, #132]	@ (8006778 <dir_next+0x230>)
 80066f4:	5c9b      	ldrb	r3, [r3, r2]
 80066f6:	001a      	movs	r2, r3
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d3d4      	bcc.n	80066a8 <dir_next+0x160>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	2380      	movs	r3, #128	@ 0x80
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	58d2      	ldr	r2, [r2, r3]
 8006706:	238b      	movs	r3, #139	@ 0x8b
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	58d1      	ldr	r1, [r2, r3]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	2380      	movs	r3, #128	@ 0x80
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	58d2      	ldr	r2, [r2, r3]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ac9      	subs	r1, r1, r3
 8006718:	238b      	movs	r3, #139	@ 0x8b
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	50d1      	str	r1, [r2, r3]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	2383      	movs	r3, #131	@ 0x83
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	6979      	ldr	r1, [r7, #20]
 8006726:	50d1      	str	r1, [r2, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	2380      	movs	r3, #128	@ 0x80
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	58d3      	ldr	r3, [r2, r3]
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	0011      	movs	r1, r2
 8006734:	0018      	movs	r0, r3
 8006736:	f7ff fae3 	bl	8005d00 <clust2sect>
 800673a:	0001      	movs	r1, r0
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	2384      	movs	r3, #132	@ 0x84
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	50d1      	str	r1, [r2, r3]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	b299      	uxth	r1, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a0a      	ldr	r2, [pc, #40]	@ (8006774 <dir_next+0x22c>)
 800674c:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	2380      	movs	r3, #128	@ 0x80
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	58d3      	ldr	r3, [r2, r3]
 8006756:	0019      	movs	r1, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	220f      	movs	r2, #15
 800675c:	4013      	ands	r3, r2
 800675e:	015b      	lsls	r3, r3, #5
 8006760:	18c9      	adds	r1, r1, r3
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	2385      	movs	r3, #133	@ 0x85
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	0018      	movs	r0, r3
 800676e:	46bd      	mov	sp, r7
 8006770:	b007      	add	sp, #28
 8006772:	bd90      	pop	{r4, r7, pc}
 8006774:	00000206 	.word	0x00000206
 8006778:	00000202 	.word	0x00000202

0800677c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800677c:	b5b0      	push	{r4, r5, r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006786:	250f      	movs	r5, #15
 8006788:	197c      	adds	r4, r7, r5
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2100      	movs	r1, #0
 800678e:	0018      	movs	r0, r3
 8006790:	f7ff fe2a 	bl	80063e8 <dir_sdi>
 8006794:	0003      	movs	r3, r0
 8006796:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8006798:	197b      	adds	r3, r7, r5
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d13b      	bne.n	8006818 <dir_alloc+0x9c>
		n = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	2380      	movs	r3, #128	@ 0x80
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	58d0      	ldr	r0, [r2, r3]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	2384      	movs	r3, #132	@ 0x84
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	58d3      	ldr	r3, [r2, r3]
 80067b4:	250f      	movs	r5, #15
 80067b6:	197c      	adds	r4, r7, r5
 80067b8:	0019      	movs	r1, r3
 80067ba:	f7ff f991 	bl	8005ae0 <move_window>
 80067be:	0003      	movs	r3, r0
 80067c0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80067c2:	197b      	adds	r3, r7, r5
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d125      	bne.n	8006816 <dir_alloc+0x9a>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	2385      	movs	r3, #133	@ 0x85
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	58d3      	ldr	r3, [r2, r3]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2be5      	cmp	r3, #229	@ 0xe5
 80067d6:	d006      	beq.n	80067e6 <dir_alloc+0x6a>
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	2385      	movs	r3, #133	@ 0x85
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	58d3      	ldr	r3, [r2, r3]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d107      	bne.n	80067f6 <dir_alloc+0x7a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60bb      	str	r3, [r7, #8]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d102      	bne.n	80067fa <dir_alloc+0x7e>
 80067f4:	e010      	b.n	8006818 <dir_alloc+0x9c>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80067f6:	2300      	movs	r3, #0
 80067f8:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80067fa:	250f      	movs	r5, #15
 80067fc:	197c      	adds	r4, r7, r5
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2101      	movs	r1, #1
 8006802:	0018      	movs	r0, r3
 8006804:	f7ff fea0 	bl	8006548 <dir_next>
 8006808:	0003      	movs	r3, r0
 800680a:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 800680c:	197b      	adds	r3, r7, r5
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0c7      	beq.n	80067a4 <dir_alloc+0x28>
 8006814:	e000      	b.n	8006818 <dir_alloc+0x9c>
			if (res != FR_OK) break;
 8006816:	46c0      	nop			@ (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006818:	220f      	movs	r2, #15
 800681a:	18bb      	adds	r3, r7, r2
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b04      	cmp	r3, #4
 8006820:	d102      	bne.n	8006828 <dir_alloc+0xac>
 8006822:	18bb      	adds	r3, r7, r2
 8006824:	2207      	movs	r2, #7
 8006826:	701a      	strb	r2, [r3, #0]
	return res;
 8006828:	230f      	movs	r3, #15
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	781b      	ldrb	r3, [r3, #0]
}
 800682e:	0018      	movs	r0, r3
 8006830:	46bd      	mov	sp, r7
 8006832:	b004      	add	sp, #16
 8006834:	bdb0      	pop	{r4, r5, r7, pc}

08006836 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	331b      	adds	r3, #27
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	b21b      	sxth	r3, r3
 8006848:	021b      	lsls	r3, r3, #8
 800684a:	b21a      	sxth	r2, r3
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	331a      	adds	r3, #26
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	b21b      	sxth	r3, r3
 8006854:	4313      	orrs	r3, r2
 8006856:	b21b      	sxth	r3, r3
 8006858:	b29b      	uxth	r3, r3
 800685a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	2380      	movs	r3, #128	@ 0x80
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	5cd3      	ldrb	r3, [r2, r3]
 8006864:	2b03      	cmp	r3, #3
 8006866:	d110      	bne.n	800688a <ld_clust+0x54>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	3315      	adds	r3, #21
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	b21b      	sxth	r3, r3
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	b21a      	sxth	r2, r3
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	3314      	adds	r3, #20
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	b21b      	sxth	r3, r3
 800687c:	4313      	orrs	r3, r2
 800687e:	b21b      	sxth	r3, r3
 8006880:	b29b      	uxth	r3, r3
 8006882:	041b      	lsls	r3, r3, #16
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

	return cl;
 800688a:	68fb      	ldr	r3, [r7, #12]
}
 800688c:	0018      	movs	r0, r3
 800688e:	46bd      	mov	sp, r7
 8006890:	b004      	add	sp, #16
 8006892:	bd80      	pop	{r7, pc}

08006894 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	331a      	adds	r3, #26
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	0a1b      	lsrs	r3, r3, #8
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	331b      	adds	r3, #27
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	0c1a      	lsrs	r2, r3, #16
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3314      	adds	r3, #20
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	0c1b      	lsrs	r3, r3, #16
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	0a1b      	lsrs	r3, r3, #8
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3315      	adds	r3, #21
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	701a      	strb	r2, [r3, #0]
}
 80068d6:	46c0      	nop			@ (mov r8, r8)
 80068d8:	46bd      	mov	sp, r7
 80068da:	b002      	add	sp, #8
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80068e0:	b5b0      	push	{r4, r5, r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	001a      	movs	r2, r3
 80068f0:	2340      	movs	r3, #64	@ 0x40
 80068f2:	439a      	bics	r2, r3
 80068f4:	0013      	movs	r3, r2
 80068f6:	1e5a      	subs	r2, r3, #1
 80068f8:	0013      	movs	r3, r2
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	189b      	adds	r3, r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	189b      	adds	r3, r3, r2
 8006902:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8006904:	2300      	movs	r3, #0
 8006906:	613b      	str	r3, [r7, #16]
 8006908:	230e      	movs	r3, #14
 800690a:	18fb      	adds	r3, r7, r3
 800690c:	2201      	movs	r2, #1
 800690e:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8006910:	4a30      	ldr	r2, [pc, #192]	@ (80069d4 <cmp_lfn+0xf4>)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	18d3      	adds	r3, r2, r3
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	18d3      	adds	r3, r2, r3
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	b21b      	sxth	r3, r3
 8006922:	021b      	lsls	r3, r3, #8
 8006924:	b21a      	sxth	r2, r3
 8006926:	492b      	ldr	r1, [pc, #172]	@ (80069d4 <cmp_lfn+0xf4>)
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	18cb      	adds	r3, r1, r3
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	0019      	movs	r1, r3
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	185b      	adds	r3, r3, r1
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	b21b      	sxth	r3, r3
 8006938:	4313      	orrs	r3, r2
 800693a:	b21a      	sxth	r2, r3
 800693c:	210c      	movs	r1, #12
 800693e:	187b      	adds	r3, r7, r1
 8006940:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last character has not been processed */
 8006942:	250e      	movs	r5, #14
 8006944:	197b      	adds	r3, r7, r5
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01c      	beq.n	8006986 <cmp_lfn+0xa6>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800694c:	197c      	adds	r4, r7, r5
 800694e:	187b      	adds	r3, r7, r1
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	0018      	movs	r0, r3
 8006954:	f003 ff52 	bl	800a7fc <ff_wtoupper>
 8006958:	0003      	movs	r3, r0
 800695a:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2bfe      	cmp	r3, #254	@ 0xfe
 8006960:	d80f      	bhi.n	8006982 <cmp_lfn+0xa2>
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	617a      	str	r2, [r7, #20]
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	18d3      	adds	r3, r2, r3
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	0018      	movs	r0, r3
 8006972:	f003 ff43 	bl	800a7fc <ff_wtoupper>
 8006976:	0003      	movs	r3, r0
 8006978:	001a      	movs	r2, r3
 800697a:	197b      	adds	r3, r7, r5
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	4293      	cmp	r3, r2
 8006980:	d009      	beq.n	8006996 <cmp_lfn+0xb6>
				return 0;				/* Not matched */
 8006982:	2300      	movs	r3, #0
 8006984:	e022      	b.n	80069cc <cmp_lfn+0xec>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006986:	230c      	movs	r3, #12
 8006988:	18fb      	adds	r3, r7, r3
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	4a12      	ldr	r2, [pc, #72]	@ (80069d8 <cmp_lfn+0xf8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d001      	beq.n	8006996 <cmp_lfn+0xb6>
 8006992:	2300      	movs	r3, #0
 8006994:	e01a      	b.n	80069cc <cmp_lfn+0xec>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	3301      	adds	r3, #1
 800699a:	613b      	str	r3, [r7, #16]
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	2b0c      	cmp	r3, #12
 80069a0:	d9b6      	bls.n	8006910 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	001a      	movs	r2, r3
 80069a8:	2340      	movs	r3, #64	@ 0x40
 80069aa:	4013      	ands	r3, r2
 80069ac:	d00d      	beq.n	80069ca <cmp_lfn+0xea>
 80069ae:	230e      	movs	r3, #14
 80069b0:	18fb      	adds	r3, r7, r3
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <cmp_lfn+0xea>
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	005b      	lsls	r3, r3, #1
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	18d3      	adds	r3, r2, r3
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <cmp_lfn+0xea>
		return 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e000      	b.n	80069cc <cmp_lfn+0xec>

	return 1;						/* The part of LFN matched */
 80069ca:	2301      	movs	r3, #1
}
 80069cc:	0018      	movs	r0, r3
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b006      	add	sp, #24
 80069d2:	bdb0      	pop	{r4, r5, r7, pc}
 80069d4:	0800c270 	.word	0x0800c270
 80069d8:	0000ffff 	.word	0x0000ffff

080069dc <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	001a      	movs	r2, r3
 80069ec:	233f      	movs	r3, #63	@ 0x3f
 80069ee:	4013      	ands	r3, r2
 80069f0:	1e5a      	subs	r2, r3, #1
 80069f2:	0013      	movs	r3, r2
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	189b      	adds	r3, r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	189b      	adds	r3, r3, r2
 80069fc:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 80069fe:	2300      	movs	r3, #0
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	230e      	movs	r3, #14
 8006a04:	18fb      	adds	r3, r7, r3
 8006a06:	2201      	movs	r2, #1
 8006a08:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 8006a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8006ab8 <pick_lfn+0xdc>)
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	18d3      	adds	r3, r2, r3
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	3301      	adds	r3, #1
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	18d3      	adds	r3, r2, r3
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	b21b      	sxth	r3, r3
 8006a1c:	021b      	lsls	r3, r3, #8
 8006a1e:	b21a      	sxth	r2, r3
 8006a20:	4925      	ldr	r1, [pc, #148]	@ (8006ab8 <pick_lfn+0xdc>)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	18cb      	adds	r3, r1, r3
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	0019      	movs	r1, r3
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	185b      	adds	r3, r3, r1
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b21b      	sxth	r3, r3
 8006a32:	4313      	orrs	r3, r2
 8006a34:	b21a      	sxth	r2, r3
 8006a36:	230c      	movs	r3, #12
 8006a38:	18fb      	adds	r3, r7, r3
 8006a3a:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last character has not been processed */
 8006a3c:	230e      	movs	r3, #14
 8006a3e:	18fb      	adds	r3, r7, r3
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d014      	beq.n	8006a70 <pick_lfn+0x94>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2bfe      	cmp	r3, #254	@ 0xfe
 8006a4a:	d901      	bls.n	8006a50 <pick_lfn+0x74>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	e02f      	b.n	8006ab0 <pick_lfn+0xd4>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006a50:	210e      	movs	r1, #14
 8006a52:	187b      	adds	r3, r7, r1
 8006a54:	220c      	movs	r2, #12
 8006a56:	18ba      	adds	r2, r7, r2
 8006a58:	8812      	ldrh	r2, [r2, #0]
 8006a5a:	801a      	strh	r2, [r3, #0]
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	617a      	str	r2, [r7, #20]
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	18d3      	adds	r3, r2, r3
 8006a68:	187a      	adds	r2, r7, r1
 8006a6a:	8812      	ldrh	r2, [r2, #0]
 8006a6c:	801a      	strh	r2, [r3, #0]
 8006a6e:	e007      	b.n	8006a80 <pick_lfn+0xa4>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006a70:	230c      	movs	r3, #12
 8006a72:	18fb      	adds	r3, r7, r3
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	4a11      	ldr	r2, [pc, #68]	@ (8006abc <pick_lfn+0xe0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d001      	beq.n	8006a80 <pick_lfn+0xa4>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e017      	b.n	8006ab0 <pick_lfn+0xd4>
		}
	} while (++s < 13);						/* Read all character in the entry */
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	3301      	adds	r3, #1
 8006a84:	613b      	str	r3, [r7, #16]
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2b0c      	cmp	r3, #12
 8006a8a:	d9be      	bls.n	8006a0a <pick_lfn+0x2e>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	001a      	movs	r2, r3
 8006a92:	2340      	movs	r3, #64	@ 0x40
 8006a94:	4013      	ands	r3, r2
 8006a96:	d00a      	beq.n	8006aae <pick_lfn+0xd2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	2bfe      	cmp	r3, #254	@ 0xfe
 8006a9c:	d901      	bls.n	8006aa2 <pick_lfn+0xc6>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	e006      	b.n	8006ab0 <pick_lfn+0xd4>
		lfnbuf[i] = 0;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	18d3      	adds	r3, r2, r3
 8006aaa:	2200      	movs	r2, #0
 8006aac:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 8006aae:	2301      	movs	r3, #1
}
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	b006      	add	sp, #24
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	0800c270 	.word	0x0800c270
 8006abc:	0000ffff 	.word	0x0000ffff

08006ac0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	0019      	movs	r1, r3
 8006acc:	1dfb      	adds	r3, r7, #7
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	1dbb      	adds	r3, r7, #6
 8006ad2:	1c0a      	adds	r2, r1, #0
 8006ad4:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	330d      	adds	r3, #13
 8006ada:	1dba      	adds	r2, r7, #6
 8006adc:	7812      	ldrb	r2, [r2, #0]
 8006ade:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	330b      	adds	r3, #11
 8006ae4:	220f      	movs	r2, #15
 8006ae6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	330c      	adds	r3, #12
 8006aec:	2200      	movs	r2, #0
 8006aee:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	331a      	adds	r3, #26
 8006af4:	2200      	movs	r2, #0
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	331b      	adds	r3, #27
 8006afc:	2200      	movs	r2, #0
 8006afe:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8006b00:	1dfb      	adds	r3, r7, #7
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	1e5a      	subs	r2, r3, #1
 8006b06:	0013      	movs	r3, r2
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	189b      	adds	r3, r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	189b      	adds	r3, r3, r2
 8006b10:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006b12:	2316      	movs	r3, #22
 8006b14:	18fb      	adds	r3, r7, r3
 8006b16:	2200      	movs	r2, #0
 8006b18:	801a      	strh	r2, [r3, #0]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8006b1e:	2116      	movs	r1, #22
 8006b20:	187b      	adds	r3, r7, r1
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	4a26      	ldr	r2, [pc, #152]	@ (8006bc0 <fit_lfn+0x100>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d008      	beq.n	8006b3c <fit_lfn+0x7c>
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	61fa      	str	r2, [r7, #28]
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	18d2      	adds	r2, r2, r3
 8006b36:	187b      	adds	r3, r7, r1
 8006b38:	8812      	ldrh	r2, [r2, #0]
 8006b3a:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8006b3c:	4a21      	ldr	r2, [pc, #132]	@ (8006bc4 <fit_lfn+0x104>)
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	18d3      	adds	r3, r2, r3
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	001a      	movs	r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	189b      	adds	r3, r3, r2
 8006b4a:	2016      	movs	r0, #22
 8006b4c:	183a      	adds	r2, r7, r0
 8006b4e:	8812      	ldrh	r2, [r2, #0]
 8006b50:	b2d2      	uxtb	r2, r2
 8006b52:	701a      	strb	r2, [r3, #0]
 8006b54:	183b      	adds	r3, r7, r0
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	0a1b      	lsrs	r3, r3, #8
 8006b5a:	b299      	uxth	r1, r3
 8006b5c:	4a19      	ldr	r2, [pc, #100]	@ (8006bc4 <fit_lfn+0x104>)
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	18d3      	adds	r3, r2, r3
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	3301      	adds	r3, #1
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	18d3      	adds	r3, r2, r3
 8006b6a:	b2ca      	uxtb	r2, r1
 8006b6c:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006b6e:	183b      	adds	r3, r7, r0
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d103      	bne.n	8006b7e <fit_lfn+0xbe>
 8006b76:	183b      	adds	r3, r7, r0
 8006b78:	2201      	movs	r2, #1
 8006b7a:	4252      	negs	r2, r2
 8006b7c:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	3301      	adds	r3, #1
 8006b82:	61bb      	str	r3, [r7, #24]
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	2b0c      	cmp	r3, #12
 8006b88:	d9c9      	bls.n	8006b1e <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006b8a:	2316      	movs	r3, #22
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	4a0b      	ldr	r2, [pc, #44]	@ (8006bc0 <fit_lfn+0x100>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d006      	beq.n	8006ba4 <fit_lfn+0xe4>
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	18d3      	adds	r3, r2, r3
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <fit_lfn+0xf0>
 8006ba4:	1dfb      	adds	r3, r7, #7
 8006ba6:	1dfa      	adds	r2, r7, #7
 8006ba8:	7812      	ldrb	r2, [r2, #0]
 8006baa:	2140      	movs	r1, #64	@ 0x40
 8006bac:	430a      	orrs	r2, r1
 8006bae:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	1dfa      	adds	r2, r7, #7
 8006bb4:	7812      	ldrb	r2, [r2, #0]
 8006bb6:	701a      	strb	r2, [r3, #0]
}
 8006bb8:	46c0      	nop			@ (mov r8, r8)
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b008      	add	sp, #32
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	0000ffff 	.word	0x0000ffff
 8006bc4:	0800c270 	.word	0x0800c270

08006bc8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08c      	sub	sp, #48	@ 0x30
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	220b      	movs	r2, #11
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f7fe fcf3 	bl	80055c8 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	d92f      	bls.n	8006c48 <gen_numname+0x80>
		sr = seq;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006bec:	e026      	b.n	8006c3c <gen_numname+0x74>
			wc = *lfn++;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	1c9a      	adds	r2, r3, #2
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	2222      	movs	r2, #34	@ 0x22
 8006bf6:	18ba      	adds	r2, r7, r2
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c00:	e019      	b.n	8006c36 <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	005a      	lsls	r2, r3, #1
 8006c06:	2022      	movs	r0, #34	@ 0x22
 8006c08:	183b      	adds	r3, r7, r0
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	400b      	ands	r3, r1
 8006c10:	18d3      	adds	r3, r2, r3
 8006c12:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006c14:	183b      	adds	r3, r7, r0
 8006c16:	183a      	adds	r2, r7, r0
 8006c18:	8812      	ldrh	r2, [r2, #0]
 8006c1a:	0852      	lsrs	r2, r2, #1
 8006c1c:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	2380      	movs	r3, #128	@ 0x80
 8006c22:	025b      	lsls	r3, r3, #9
 8006c24:	4013      	ands	r3, r2
 8006c26:	d003      	beq.n	8006c30 <gen_numname+0x68>
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	4a30      	ldr	r2, [pc, #192]	@ (8006cec <gen_numname+0x124>)
 8006c2c:	4053      	eors	r3, r2
 8006c2e:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c32:	3301      	adds	r3, #1
 8006c34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c38:	2b0f      	cmp	r3, #15
 8006c3a:	d9e2      	bls.n	8006c02 <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1d4      	bne.n	8006bee <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006c48:	2307      	movs	r3, #7
 8006c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	220f      	movs	r2, #15
 8006c52:	4013      	ands	r3, r2
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	212f      	movs	r1, #47	@ 0x2f
 8006c58:	187b      	adds	r3, r7, r1
 8006c5a:	3230      	adds	r2, #48	@ 0x30
 8006c5c:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 8006c5e:	187b      	adds	r3, r7, r1
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b39      	cmp	r3, #57	@ 0x39
 8006c64:	d904      	bls.n	8006c70 <gen_numname+0xa8>
 8006c66:	187b      	adds	r3, r7, r1
 8006c68:	187a      	adds	r2, r7, r1
 8006c6a:	7812      	ldrb	r2, [r2, #0]
 8006c6c:	3207      	adds	r2, #7
 8006c6e:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8006c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c72:	1e5a      	subs	r2, r3, #1
 8006c74:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006c76:	2014      	movs	r0, #20
 8006c78:	183a      	adds	r2, r7, r0
 8006c7a:	212f      	movs	r1, #47	@ 0x2f
 8006c7c:	1879      	adds	r1, r7, r1
 8006c7e:	7809      	ldrb	r1, [r1, #0]
 8006c80:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	091b      	lsrs	r3, r3, #4
 8006c86:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1de      	bne.n	8006c4c <gen_numname+0x84>
	ns[i] = '~';
 8006c8e:	183a      	adds	r2, r7, r0
 8006c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c92:	18d3      	adds	r3, r2, r3
 8006c94:	227e      	movs	r2, #126	@ 0x7e
 8006c96:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006c98:	2300      	movs	r3, #0
 8006c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c9c:	e002      	b.n	8006ca4 <gen_numname+0xdc>
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d205      	bcs.n	8006cb8 <gen_numname+0xf0>
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb0:	18d3      	adds	r3, r2, r3
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d1f2      	bne.n	8006c9e <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cba:	2b07      	cmp	r3, #7
 8006cbc:	d806      	bhi.n	8006ccc <gen_numname+0x104>
 8006cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006cc4:	2214      	movs	r2, #20
 8006cc6:	18ba      	adds	r2, r7, r2
 8006cc8:	5cd1      	ldrb	r1, [r2, r3]
 8006cca:	e000      	b.n	8006cce <gen_numname+0x106>
 8006ccc:	2120      	movs	r1, #32
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	18d3      	adds	r3, r2, r3
 8006cd8:	1c0a      	adds	r2, r1, #0
 8006cda:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	2b07      	cmp	r3, #7
 8006ce0:	d9ea      	bls.n	8006cb8 <gen_numname+0xf0>
}
 8006ce2:	46c0      	nop			@ (mov r8, r8)
 8006ce4:	46c0      	nop			@ (mov r8, r8)
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	b00c      	add	sp, #48	@ 0x30
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	00011021 	.word	0x00011021

08006cf0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006cf8:	230f      	movs	r3, #15
 8006cfa:	18fb      	adds	r3, r7, r3
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 8006d00:	230b      	movs	r3, #11
 8006d02:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006d04:	200f      	movs	r0, #15
 8006d06:	183b      	adds	r3, r7, r0
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	0852      	lsrs	r2, r2, #1
 8006d0e:	01db      	lsls	r3, r3, #7
 8006d10:	4313      	orrs	r3, r2
 8006d12:	b2d9      	uxtb	r1, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	607a      	str	r2, [r7, #4]
 8006d1a:	781a      	ldrb	r2, [r3, #0]
 8006d1c:	183b      	adds	r3, r7, r0
 8006d1e:	188a      	adds	r2, r1, r2
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	60bb      	str	r3, [r7, #8]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1ea      	bne.n	8006d04 <sum_sfn+0x14>
	return sum;
 8006d2e:	183b      	adds	r3, r7, r0
 8006d30:	781b      	ldrb	r3, [r3, #0]
}
 8006d32:	0018      	movs	r0, r3
 8006d34:	46bd      	mov	sp, r7
 8006d36:	b004      	add	sp, #16
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006d3c:	b5b0      	push	{r4, r5, r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006d44:	2517      	movs	r5, #23
 8006d46:	197c      	adds	r4, r7, r5
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	f7ff fb4b 	bl	80063e8 <dir_sdi>
 8006d52:	0003      	movs	r3, r0
 8006d54:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8006d56:	197b      	adds	r3, r7, r5
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <dir_find+0x28>
 8006d5e:	197b      	adds	r3, r7, r5
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	e0ea      	b.n	8006f3a <dir_find+0x1fe>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006d64:	2114      	movs	r1, #20
 8006d66:	187b      	adds	r3, r7, r1
 8006d68:	22ff      	movs	r2, #255	@ 0xff
 8006d6a:	701a      	strb	r2, [r3, #0]
 8006d6c:	2315      	movs	r3, #21
 8006d6e:	18fb      	adds	r3, r7, r3
 8006d70:	187a      	adds	r2, r7, r1
 8006d72:	7812      	ldrb	r2, [r2, #0]
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	2389      	movs	r3, #137	@ 0x89
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	4249      	negs	r1, r1
 8006d80:	52d1      	strh	r1, [r2, r3]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	2380      	movs	r3, #128	@ 0x80
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	58d0      	ldr	r0, [r2, r3]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	2384      	movs	r3, #132	@ 0x84
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	58d3      	ldr	r3, [r2, r3]
 8006d92:	2517      	movs	r5, #23
 8006d94:	197c      	adds	r4, r7, r5
 8006d96:	0019      	movs	r1, r3
 8006d98:	f7fe fea2 	bl	8005ae0 <move_window>
 8006d9c:	0003      	movs	r3, r0
 8006d9e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8006da0:	0029      	movs	r1, r5
 8006da2:	187b      	adds	r3, r7, r1
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d000      	beq.n	8006dac <dir_find+0x70>
 8006daa:	e0be      	b.n	8006f2a <dir_find+0x1ee>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	2385      	movs	r3, #133	@ 0x85
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	58d3      	ldr	r3, [r2, r3]
 8006db4:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006db6:	2016      	movs	r0, #22
 8006db8:	183b      	adds	r3, r7, r0
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	7812      	ldrb	r2, [r2, #0]
 8006dbe:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006dc0:	183b      	adds	r3, r7, r0
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d103      	bne.n	8006dd0 <dir_find+0x94>
 8006dc8:	187b      	adds	r3, r7, r1
 8006dca:	2204      	movs	r2, #4
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	e0b1      	b.n	8006f34 <dir_find+0x1f8>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	330b      	adds	r3, #11
 8006dd4:	781a      	ldrb	r2, [r3, #0]
 8006dd6:	200f      	movs	r0, #15
 8006dd8:	183b      	adds	r3, r7, r0
 8006dda:	213f      	movs	r1, #63	@ 0x3f
 8006ddc:	400a      	ands	r2, r1
 8006dde:	701a      	strb	r2, [r3, #0]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006de0:	2316      	movs	r3, #22
 8006de2:	18fb      	adds	r3, r7, r3
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2be5      	cmp	r3, #229	@ 0xe5
 8006de8:	d008      	beq.n	8006dfc <dir_find+0xc0>
 8006dea:	183b      	adds	r3, r7, r0
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2208      	movs	r2, #8
 8006df0:	4013      	ands	r3, r2
 8006df2:	d00e      	beq.n	8006e12 <dir_find+0xd6>
 8006df4:	183b      	adds	r3, r7, r0
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b0f      	cmp	r3, #15
 8006dfa:	d00a      	beq.n	8006e12 <dir_find+0xd6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006dfc:	2315      	movs	r3, #21
 8006dfe:	18fb      	adds	r3, r7, r3
 8006e00:	22ff      	movs	r2, #255	@ 0xff
 8006e02:	701a      	strb	r2, [r3, #0]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	2389      	movs	r3, #137	@ 0x89
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	4249      	negs	r1, r1
 8006e0e:	52d1      	strh	r1, [r2, r3]
 8006e10:	e07c      	b.n	8006f0c <dir_find+0x1d0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006e12:	230f      	movs	r3, #15
 8006e14:	18fb      	adds	r3, r7, r3
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b0f      	cmp	r3, #15
 8006e1a:	d148      	bne.n	8006eae <dir_find+0x172>
				if (dp->lfn) {
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	2388      	movs	r3, #136	@ 0x88
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	58d3      	ldr	r3, [r2, r3]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d100      	bne.n	8006e2a <dir_find+0xee>
 8006e28:	e070      	b.n	8006f0c <dir_find+0x1d0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006e2a:	2016      	movs	r0, #22
 8006e2c:	183b      	adds	r3, r7, r0
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2240      	movs	r2, #64	@ 0x40
 8006e32:	4013      	ands	r3, r2
 8006e34:	d016      	beq.n	8006e64 <dir_find+0x128>
						sum = dir[LDIR_Chksum];
 8006e36:	2314      	movs	r3, #20
 8006e38:	18fb      	adds	r3, r7, r3
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	7b52      	ldrb	r2, [r2, #13]
 8006e3e:	701a      	strb	r2, [r3, #0]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006e40:	183b      	adds	r3, r7, r0
 8006e42:	183a      	adds	r2, r7, r0
 8006e44:	7812      	ldrb	r2, [r2, #0]
 8006e46:	2140      	movs	r1, #64	@ 0x40
 8006e48:	438a      	bics	r2, r1
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	2315      	movs	r3, #21
 8006e4e:	18fb      	adds	r3, r7, r3
 8006e50:	183a      	adds	r2, r7, r0
 8006e52:	7812      	ldrb	r2, [r2, #0]
 8006e54:	701a      	strb	r2, [r3, #0]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a3a      	ldr	r2, [pc, #232]	@ (8006f44 <dir_find+0x208>)
 8006e5a:	5a99      	ldrh	r1, [r3, r2]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	2389      	movs	r3, #137	@ 0x89
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	52d1      	strh	r1, [r2, r3]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006e64:	2316      	movs	r3, #22
 8006e66:	18fa      	adds	r2, r7, r3
 8006e68:	2415      	movs	r4, #21
 8006e6a:	193b      	adds	r3, r7, r4
 8006e6c:	7812      	ldrb	r2, [r2, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d117      	bne.n	8006ea4 <dir_find+0x168>
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	330d      	adds	r3, #13
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2214      	movs	r2, #20
 8006e7c:	18ba      	adds	r2, r7, r2
 8006e7e:	7812      	ldrb	r2, [r2, #0]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d10f      	bne.n	8006ea4 <dir_find+0x168>
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	2388      	movs	r3, #136	@ 0x88
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	58d3      	ldr	r3, [r2, r3]
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	0011      	movs	r1, r2
 8006e90:	0018      	movs	r0, r3
 8006e92:	f7ff fd25 	bl	80068e0 <cmp_lfn>
 8006e96:	1e03      	subs	r3, r0, #0
 8006e98:	d004      	beq.n	8006ea4 <dir_find+0x168>
 8006e9a:	193b      	adds	r3, r7, r4
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	e000      	b.n	8006ea6 <dir_find+0x16a>
 8006ea4:	22ff      	movs	r2, #255	@ 0xff
 8006ea6:	2315      	movs	r3, #21
 8006ea8:	18fb      	adds	r3, r7, r3
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	e02e      	b.n	8006f0c <dir_find+0x1d0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006eae:	2315      	movs	r3, #21
 8006eb0:	18fb      	adds	r3, r7, r3
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <dir_find+0x192>
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f7ff ff18 	bl	8006cf0 <sum_sfn>
 8006ec0:	0003      	movs	r3, r0
 8006ec2:	001a      	movs	r2, r3
 8006ec4:	2314      	movs	r3, #20
 8006ec6:	18fb      	adds	r3, r7, r3
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d02f      	beq.n	8006f2e <dir_find+0x1f2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	2386      	movs	r3, #134	@ 0x86
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	58d3      	ldr	r3, [r2, r3]
 8006ed6:	330b      	adds	r3, #11
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	001a      	movs	r2, r3
 8006edc:	2301      	movs	r3, #1
 8006ede:	4013      	ands	r3, r2
 8006ee0:	d10a      	bne.n	8006ef8 <dir_find+0x1bc>
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	2386      	movs	r3, #134	@ 0x86
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	58d1      	ldr	r1, [r2, r3]
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	220b      	movs	r2, #11
 8006eee:	0018      	movs	r0, r3
 8006ef0:	f7fe fba0 	bl	8005634 <mem_cmp>
 8006ef4:	1e03      	subs	r3, r0, #0
 8006ef6:	d01c      	beq.n	8006f32 <dir_find+0x1f6>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006ef8:	2315      	movs	r3, #21
 8006efa:	18fb      	adds	r3, r7, r3
 8006efc:	22ff      	movs	r2, #255	@ 0xff
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	2389      	movs	r3, #137	@ 0x89
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	2101      	movs	r1, #1
 8006f08:	4249      	negs	r1, r1
 8006f0a:	52d1      	strh	r1, [r2, r3]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006f0c:	2517      	movs	r5, #23
 8006f0e:	197c      	adds	r4, r7, r5
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2100      	movs	r1, #0
 8006f14:	0018      	movs	r0, r3
 8006f16:	f7ff fb17 	bl	8006548 <dir_next>
 8006f1a:	0003      	movs	r3, r0
 8006f1c:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8006f1e:	197b      	adds	r3, r7, r5
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d100      	bne.n	8006f28 <dir_find+0x1ec>
 8006f26:	e72c      	b.n	8006d82 <dir_find+0x46>
 8006f28:	e004      	b.n	8006f34 <dir_find+0x1f8>
		if (res != FR_OK) break;
 8006f2a:	46c0      	nop			@ (mov r8, r8)
 8006f2c:	e002      	b.n	8006f34 <dir_find+0x1f8>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006f2e:	46c0      	nop			@ (mov r8, r8)
 8006f30:	e000      	b.n	8006f34 <dir_find+0x1f8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006f32:	46c0      	nop			@ (mov r8, r8)

	return res;
 8006f34:	2317      	movs	r3, #23
 8006f36:	18fb      	adds	r3, r7, r3
 8006f38:	781b      	ldrb	r3, [r3, #0]
}
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	b006      	add	sp, #24
 8006f40:	bdb0      	pop	{r4, r5, r7, pc}
 8006f42:	46c0      	nop			@ (mov r8, r8)
 8006f44:	00000206 	.word	0x00000206

08006f48 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006f48:	b5b0      	push	{r4, r5, r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 8006f52:	2315      	movs	r3, #21
 8006f54:	18fb      	adds	r3, r7, r3
 8006f56:	22ff      	movs	r2, #255	@ 0xff
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	2314      	movs	r3, #20
 8006f5c:	18fb      	adds	r3, r7, r3
 8006f5e:	22ff      	movs	r2, #255	@ 0xff
 8006f60:	701a      	strb	r2, [r3, #0]
#endif

	res = FR_NO_FILE;
 8006f62:	2317      	movs	r3, #23
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	2204      	movs	r2, #4
 8006f68:	701a      	strb	r2, [r3, #0]
	while (dp->sect) {
 8006f6a:	e0b3      	b.n	80070d4 <dir_read+0x18c>
		res = move_window(dp->fs, dp->sect);
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	2380      	movs	r3, #128	@ 0x80
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	58d0      	ldr	r0, [r2, r3]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	2384      	movs	r3, #132	@ 0x84
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	58d3      	ldr	r3, [r2, r3]
 8006f7c:	2517      	movs	r5, #23
 8006f7e:	197c      	adds	r4, r7, r5
 8006f80:	0019      	movs	r1, r3
 8006f82:	f7fe fdad 	bl	8005ae0 <move_window>
 8006f86:	0003      	movs	r3, r0
 8006f88:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8006f8a:	0029      	movs	r1, r5
 8006f8c:	187b      	adds	r3, r7, r1
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d000      	beq.n	8006f96 <dir_read+0x4e>
 8006f94:	e0a6      	b.n	80070e4 <dir_read+0x19c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	2385      	movs	r3, #133	@ 0x85
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	58d3      	ldr	r3, [r2, r3]
 8006f9e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006fa0:	2016      	movs	r0, #22
 8006fa2:	183b      	adds	r3, r7, r0
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	7812      	ldrb	r2, [r2, #0]
 8006fa8:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006faa:	183b      	adds	r3, r7, r0
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d103      	bne.n	8006fba <dir_read+0x72>
 8006fb2:	187b      	adds	r3, r7, r1
 8006fb4:	2204      	movs	r2, #4
 8006fb6:	701a      	strb	r2, [r3, #0]
 8006fb8:	e099      	b.n	80070ee <dir_read+0x1a6>
		a = dir[DIR_Attr] & AM_MASK;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	330b      	adds	r3, #11
 8006fbe:	781a      	ldrb	r2, [r3, #0]
 8006fc0:	200f      	movs	r0, #15
 8006fc2:	183b      	adds	r3, r7, r0
 8006fc4:	213f      	movs	r1, #63	@ 0x3f
 8006fc6:	400a      	ands	r2, r1
 8006fc8:	701a      	strb	r2, [r3, #0]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006fca:	2216      	movs	r2, #22
 8006fcc:	18bb      	adds	r3, r7, r2
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2be5      	cmp	r3, #229	@ 0xe5
 8006fd2:	d00f      	beq.n	8006ff4 <dir_read+0xac>
 8006fd4:	18bb      	adds	r3, r7, r2
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fda:	d00b      	beq.n	8006ff4 <dir_read+0xac>
 8006fdc:	183b      	adds	r3, r7, r0
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	4393      	bics	r3, r2
 8006fe4:	3b08      	subs	r3, #8
 8006fe6:	425a      	negs	r2, r3
 8006fe8:	4153      	adcs	r3, r2
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	001a      	movs	r2, r3
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d004      	beq.n	8006ffe <dir_read+0xb6>
			ord = 0xFF;
 8006ff4:	2315      	movs	r3, #21
 8006ff6:	18fb      	adds	r3, r7, r3
 8006ff8:	22ff      	movs	r2, #255	@ 0xff
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e05d      	b.n	80070ba <dir_read+0x172>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006ffe:	230f      	movs	r3, #15
 8007000:	18fb      	adds	r3, r7, r3
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b0f      	cmp	r3, #15
 8007006:	d141      	bne.n	800708c <dir_read+0x144>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 8007008:	2016      	movs	r0, #22
 800700a:	183b      	adds	r3, r7, r0
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2240      	movs	r2, #64	@ 0x40
 8007010:	4013      	ands	r3, r2
 8007012:	d016      	beq.n	8007042 <dir_read+0xfa>
					sum = dir[LDIR_Chksum];
 8007014:	2314      	movs	r3, #20
 8007016:	18fb      	adds	r3, r7, r3
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	7b52      	ldrb	r2, [r2, #13]
 800701c:	701a      	strb	r2, [r3, #0]
					c &= ~LLEF; ord = c;
 800701e:	183b      	adds	r3, r7, r0
 8007020:	183a      	adds	r2, r7, r0
 8007022:	7812      	ldrb	r2, [r2, #0]
 8007024:	2140      	movs	r1, #64	@ 0x40
 8007026:	438a      	bics	r2, r1
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	2315      	movs	r3, #21
 800702c:	18fb      	adds	r3, r7, r3
 800702e:	183a      	adds	r2, r7, r0
 8007030:	7812      	ldrb	r2, [r2, #0]
 8007032:	701a      	strb	r2, [r3, #0]
					dp->lfn_idx = dp->index;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a36      	ldr	r2, [pc, #216]	@ (8007110 <dir_read+0x1c8>)
 8007038:	5a99      	ldrh	r1, [r3, r2]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	2389      	movs	r3, #137	@ 0x89
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	52d1      	strh	r1, [r2, r3]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8007042:	2316      	movs	r3, #22
 8007044:	18fa      	adds	r2, r7, r3
 8007046:	2415      	movs	r4, #21
 8007048:	193b      	adds	r3, r7, r4
 800704a:	7812      	ldrb	r2, [r2, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d117      	bne.n	8007082 <dir_read+0x13a>
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	330d      	adds	r3, #13
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2214      	movs	r2, #20
 800705a:	18ba      	adds	r2, r7, r2
 800705c:	7812      	ldrb	r2, [r2, #0]
 800705e:	429a      	cmp	r2, r3
 8007060:	d10f      	bne.n	8007082 <dir_read+0x13a>
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	2388      	movs	r3, #136	@ 0x88
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	58d3      	ldr	r3, [r2, r3]
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	0011      	movs	r1, r2
 800706e:	0018      	movs	r0, r3
 8007070:	f7ff fcb4 	bl	80069dc <pick_lfn>
 8007074:	1e03      	subs	r3, r0, #0
 8007076:	d004      	beq.n	8007082 <dir_read+0x13a>
 8007078:	193b      	adds	r3, r7, r4
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	3b01      	subs	r3, #1
 800707e:	b2da      	uxtb	r2, r3
 8007080:	e000      	b.n	8007084 <dir_read+0x13c>
 8007082:	22ff      	movs	r2, #255	@ 0xff
 8007084:	2315      	movs	r3, #21
 8007086:	18fb      	adds	r3, r7, r3
 8007088:	701a      	strb	r2, [r3, #0]
 800708a:	e016      	b.n	80070ba <dir_read+0x172>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 800708c:	2315      	movs	r3, #21
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10a      	bne.n	80070ac <dir_read+0x164>
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	0018      	movs	r0, r3
 800709a:	f7ff fe29 	bl	8006cf0 <sum_sfn>
 800709e:	0003      	movs	r3, r0
 80070a0:	001a      	movs	r2, r3
 80070a2:	2314      	movs	r3, #20
 80070a4:	18fb      	adds	r3, r7, r3
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d01d      	beq.n	80070e8 <dir_read+0x1a0>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	2389      	movs	r3, #137	@ 0x89
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	2101      	movs	r1, #1
 80070b4:	4249      	negs	r1, r1
 80070b6:	52d1      	strh	r1, [r2, r3]
				break;
 80070b8:	e016      	b.n	80070e8 <dir_read+0x1a0>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 80070ba:	2517      	movs	r5, #23
 80070bc:	197c      	adds	r4, r7, r5
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2100      	movs	r1, #0
 80070c2:	0018      	movs	r0, r3
 80070c4:	f7ff fa40 	bl	8006548 <dir_next>
 80070c8:	0003      	movs	r3, r0
 80070ca:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 80070cc:	197b      	adds	r3, r7, r5
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <dir_read+0x1a4>
	while (dp->sect) {
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	2384      	movs	r3, #132	@ 0x84
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	58d3      	ldr	r3, [r2, r3]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d000      	beq.n	80070e2 <dir_read+0x19a>
 80070e0:	e744      	b.n	8006f6c <dir_read+0x24>
 80070e2:	e004      	b.n	80070ee <dir_read+0x1a6>
		if (res != FR_OK) break;
 80070e4:	46c0      	nop			@ (mov r8, r8)
 80070e6:	e002      	b.n	80070ee <dir_read+0x1a6>
				break;
 80070e8:	46c0      	nop			@ (mov r8, r8)
 80070ea:	e000      	b.n	80070ee <dir_read+0x1a6>
		if (res != FR_OK) break;
 80070ec:	46c0      	nop			@ (mov r8, r8)
	}

	if (res != FR_OK) dp->sect = 0;
 80070ee:	2317      	movs	r3, #23
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <dir_read+0x1ba>
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	2384      	movs	r3, #132	@ 0x84
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	2100      	movs	r1, #0
 8007100:	50d1      	str	r1, [r2, r3]

	return res;
 8007102:	2317      	movs	r3, #23
 8007104:	18fb      	adds	r3, r7, r3
 8007106:	781b      	ldrb	r3, [r3, #0]
}
 8007108:	0018      	movs	r0, r3
 800710a:	46bd      	mov	sp, r7
 800710c:	b006      	add	sp, #24
 800710e:	bdb0      	pop	{r4, r5, r7, pc}
 8007110:	00000206 	.word	0x00000206

08007114 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007114:	b5b0      	push	{r4, r5, r7, lr}
 8007116:	b08c      	sub	sp, #48	@ 0x30
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	2386      	movs	r3, #134	@ 0x86
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	58d3      	ldr	r3, [r2, r3]
 8007124:	623b      	str	r3, [r7, #32]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	2388      	movs	r3, #136	@ 0x88
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	58d3      	ldr	r3, [r2, r3]
 800712e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8007130:	6a39      	ldr	r1, [r7, #32]
 8007132:	240c      	movs	r4, #12
 8007134:	193b      	adds	r3, r7, r4
 8007136:	220c      	movs	r2, #12
 8007138:	0018      	movs	r0, r3
 800713a:	f7fe fa45 	bl	80055c8 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800713e:	193b      	adds	r3, r7, r4
 8007140:	7adb      	ldrb	r3, [r3, #11]
 8007142:	001a      	movs	r2, r3
 8007144:	2301      	movs	r3, #1
 8007146:	4013      	ands	r3, r2
 8007148:	d03e      	beq.n	80071c8 <dir_register+0xb4>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	330b      	adds	r3, #11
 800714e:	2200      	movs	r2, #0
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	2388      	movs	r3, #136	@ 0x88
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	2100      	movs	r1, #0
 800715a:	50d1      	str	r1, [r2, r3]
		for (n = 1; n < 100; n++) {
 800715c:	2301      	movs	r3, #1
 800715e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007160:	e015      	b.n	800718e <dir_register+0x7a>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8007162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007164:	69fa      	ldr	r2, [r7, #28]
 8007166:	210c      	movs	r1, #12
 8007168:	1879      	adds	r1, r7, r1
 800716a:	6a38      	ldr	r0, [r7, #32]
 800716c:	f7ff fd2c 	bl	8006bc8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007170:	252f      	movs	r5, #47	@ 0x2f
 8007172:	197c      	adds	r4, r7, r5
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	0018      	movs	r0, r3
 8007178:	f7ff fde0 	bl	8006d3c <dir_find>
 800717c:	0003      	movs	r3, r0
 800717e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007180:	197b      	adds	r3, r7, r5
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d106      	bne.n	8007196 <dir_register+0x82>
		for (n = 1; n < 100; n++) {
 8007188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718a:	3301      	adds	r3, #1
 800718c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800718e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007190:	2b63      	cmp	r3, #99	@ 0x63
 8007192:	d9e6      	bls.n	8007162 <dir_register+0x4e>
 8007194:	e000      	b.n	8007198 <dir_register+0x84>
			if (res != FR_OK) break;
 8007196:	46c0      	nop			@ (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719a:	2b64      	cmp	r3, #100	@ 0x64
 800719c:	d101      	bne.n	80071a2 <dir_register+0x8e>
 800719e:	2307      	movs	r3, #7
 80071a0:	e0eb      	b.n	800737a <dir_register+0x266>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80071a2:	222f      	movs	r2, #47	@ 0x2f
 80071a4:	18bb      	adds	r3, r7, r2
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d002      	beq.n	80071b2 <dir_register+0x9e>
 80071ac:	18bb      	adds	r3, r7, r2
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	e0e3      	b.n	800737a <dir_register+0x266>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	330b      	adds	r3, #11
 80071b6:	220c      	movs	r2, #12
 80071b8:	18ba      	adds	r2, r7, r2
 80071ba:	7ad2      	ldrb	r2, [r2, #11]
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	2388      	movs	r3, #136	@ 0x88
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	69f9      	ldr	r1, [r7, #28]
 80071c6:	50d1      	str	r1, [r2, r3]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80071c8:	230c      	movs	r3, #12
 80071ca:	18fb      	adds	r3, r7, r3
 80071cc:	7adb      	ldrb	r3, [r3, #11]
 80071ce:	001a      	movs	r2, r3
 80071d0:	2302      	movs	r3, #2
 80071d2:	4013      	ands	r3, r2
 80071d4:	d015      	beq.n	8007202 <dir_register+0xee>
		for (n = 0; lfn[n]; n++) ;
 80071d6:	2300      	movs	r3, #0
 80071d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071da:	e002      	b.n	80071e2 <dir_register+0xce>
 80071dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071de:	3301      	adds	r3, #1
 80071e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	18d3      	adds	r3, r2, r3
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1f5      	bne.n	80071dc <dir_register+0xc8>
		nent = (n + 25) / 13;
 80071f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f2:	3319      	adds	r3, #25
 80071f4:	210d      	movs	r1, #13
 80071f6:	0018      	movs	r0, r3
 80071f8:	f7f8 ffa2 	bl	8000140 <__udivsi3>
 80071fc:	0003      	movs	r3, r0
 80071fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007200:	e001      	b.n	8007206 <dir_register+0xf2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8007202:	2301      	movs	r3, #1
 8007204:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007206:	252f      	movs	r5, #47	@ 0x2f
 8007208:	197c      	adds	r4, r7, r5
 800720a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	0011      	movs	r1, r2
 8007210:	0018      	movs	r0, r3
 8007212:	f7ff fab3 	bl	800677c <dir_alloc>
 8007216:	0003      	movs	r3, r0
 8007218:	7023      	strb	r3, [r4, #0]

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800721a:	0029      	movs	r1, r5
 800721c:	187b      	adds	r3, r7, r1
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d163      	bne.n	80072ec <dir_register+0x1d8>
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	3b01      	subs	r3, #1
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	2b00      	cmp	r3, #0
 800722e:	d05d      	beq.n	80072ec <dir_register+0x1d8>
		res = dir_sdi(dp, dp->index - nent);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a54      	ldr	r2, [pc, #336]	@ (8007384 <dir_register+0x270>)
 8007234:	5a9b      	ldrh	r3, [r3, r2]
 8007236:	001a      	movs	r2, r3
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	1ad2      	subs	r2, r2, r3
 800723c:	000d      	movs	r5, r1
 800723e:	187c      	adds	r4, r7, r1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	0011      	movs	r1, r2
 8007244:	0018      	movs	r0, r3
 8007246:	f7ff f8cf 	bl	80063e8 <dir_sdi>
 800724a:	0003      	movs	r3, r0
 800724c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800724e:	197b      	adds	r3, r7, r5
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d14a      	bne.n	80072ec <dir_register+0x1d8>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	2386      	movs	r3, #134	@ 0x86
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	58d3      	ldr	r3, [r2, r3]
 800725e:	221b      	movs	r2, #27
 8007260:	18bc      	adds	r4, r7, r2
 8007262:	0018      	movs	r0, r3
 8007264:	f7ff fd44 	bl	8006cf0 <sum_sfn>
 8007268:	0003      	movs	r3, r0
 800726a:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	2380      	movs	r3, #128	@ 0x80
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	58d0      	ldr	r0, [r2, r3]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	2384      	movs	r3, #132	@ 0x84
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	58d3      	ldr	r3, [r2, r3]
 800727c:	252f      	movs	r5, #47	@ 0x2f
 800727e:	197c      	adds	r4, r7, r5
 8007280:	0019      	movs	r1, r3
 8007282:	f7fe fc2d 	bl	8005ae0 <move_window>
 8007286:	0003      	movs	r3, r0
 8007288:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 800728a:	002c      	movs	r4, r5
 800728c:	193b      	adds	r3, r7, r4
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d12a      	bne.n	80072ea <dir_register+0x1d6>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	2388      	movs	r3, #136	@ 0x88
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	58d0      	ldr	r0, [r2, r3]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	2385      	movs	r3, #133	@ 0x85
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	58d1      	ldr	r1, [r2, r3]
 80072a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	231b      	movs	r3, #27
 80072aa:	18fb      	adds	r3, r7, r3
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	f7ff fc07 	bl	8006ac0 <fit_lfn>
				dp->fs->wflag = 1;
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	2380      	movs	r3, #128	@ 0x80
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	58d2      	ldr	r2, [r2, r3]
 80072ba:	2381      	movs	r3, #129	@ 0x81
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	2101      	movs	r1, #1
 80072c0:	54d1      	strb	r1, [r2, r3]
				res = dir_next(dp, 0);	/* Next entry */
 80072c2:	0025      	movs	r5, r4
 80072c4:	193c      	adds	r4, r7, r4
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2100      	movs	r1, #0
 80072ca:	0018      	movs	r0, r3
 80072cc:	f7ff f93c 	bl	8006548 <dir_next>
 80072d0:	0003      	movs	r3, r0
 80072d2:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 80072d4:	197b      	adds	r3, r7, r5
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d107      	bne.n	80072ec <dir_register+0x1d8>
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	3b01      	subs	r3, #1
 80072e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1c1      	bne.n	800726c <dir_register+0x158>
 80072e8:	e000      	b.n	80072ec <dir_register+0x1d8>
				if (res != FR_OK) break;
 80072ea:	46c0      	nop			@ (mov r8, r8)
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80072ec:	212f      	movs	r1, #47	@ 0x2f
 80072ee:	187b      	adds	r3, r7, r1
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d13e      	bne.n	8007374 <dir_register+0x260>
		res = move_window(dp->fs, dp->sect);
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	2380      	movs	r3, #128	@ 0x80
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	58d0      	ldr	r0, [r2, r3]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	2384      	movs	r3, #132	@ 0x84
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	58d3      	ldr	r3, [r2, r3]
 8007306:	000d      	movs	r5, r1
 8007308:	187c      	adds	r4, r7, r1
 800730a:	0019      	movs	r1, r3
 800730c:	f7fe fbe8 	bl	8005ae0 <move_window>
 8007310:	0003      	movs	r3, r0
 8007312:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8007314:	197b      	adds	r3, r7, r5
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d12b      	bne.n	8007374 <dir_register+0x260>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	2385      	movs	r3, #133	@ 0x85
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	58d3      	ldr	r3, [r2, r3]
 8007324:	2220      	movs	r2, #32
 8007326:	2100      	movs	r1, #0
 8007328:	0018      	movs	r0, r3
 800732a:	f7fe f96a 	bl	8005602 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	2385      	movs	r3, #133	@ 0x85
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	58d0      	ldr	r0, [r2, r3]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	2386      	movs	r3, #134	@ 0x86
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	58d3      	ldr	r3, [r2, r3]
 800733e:	220b      	movs	r2, #11
 8007340:	0019      	movs	r1, r3
 8007342:	f7fe f941 	bl	80055c8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	2386      	movs	r3, #134	@ 0x86
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	58d3      	ldr	r3, [r2, r3]
 800734e:	330b      	adds	r3, #11
 8007350:	781a      	ldrb	r2, [r3, #0]
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	2385      	movs	r3, #133	@ 0x85
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	58cb      	ldr	r3, [r1, r3]
 800735a:	330c      	adds	r3, #12
 800735c:	2118      	movs	r1, #24
 800735e:	400a      	ands	r2, r1
 8007360:	b2d2      	uxtb	r2, r2
 8007362:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	2380      	movs	r3, #128	@ 0x80
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	58d2      	ldr	r2, [r2, r3]
 800736c:	2381      	movs	r3, #129	@ 0x81
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	2101      	movs	r1, #1
 8007372:	54d1      	strb	r1, [r2, r3]
		}
	}

	return res;
 8007374:	232f      	movs	r3, #47	@ 0x2f
 8007376:	18fb      	adds	r3, r7, r3
 8007378:	781b      	ldrb	r3, [r3, #0]
}
 800737a:	0018      	movs	r0, r3
 800737c:	46bd      	mov	sp, r7
 800737e:	b00c      	add	sp, #48	@ 0x30
 8007380:	bdb0      	pop	{r4, r5, r7, pc}
 8007382:	46c0      	nop			@ (mov r8, r8)
 8007384:	00000206 	.word	0x00000206

08007388 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007388:	b5b0      	push	{r4, r5, r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	3309      	adds	r3, #9
 8007396:	61bb      	str	r3, [r7, #24]
	if (dp->sect) {		/* Get SFN */
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	2384      	movs	r3, #132	@ 0x84
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	58d3      	ldr	r3, [r2, r3]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d100      	bne.n	80073a6 <get_fileinfo+0x1e>
 80073a4:	e081      	b.n	80074aa <get_fileinfo+0x122>
		dir = dp->dir;
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	2385      	movs	r3, #133	@ 0x85
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	58d3      	ldr	r3, [r2, r3]
 80073ae:	60fb      	str	r3, [r7, #12]
		i = 0;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61fb      	str	r3, [r7, #28]
		while (i < 11) {		/* Copy name body and extension */
 80073b4:	e040      	b.n	8007438 <get_fileinfo+0xb0>
			c = (TCHAR)dir[i++];
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	61fa      	str	r2, [r7, #28]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	18d2      	adds	r2, r2, r3
 80073c0:	2117      	movs	r1, #23
 80073c2:	187b      	adds	r3, r7, r1
 80073c4:	7812      	ldrb	r2, [r2, #0]
 80073c6:	701a      	strb	r2, [r3, #0]
			if (c == ' ') continue;				/* Skip padding spaces */
 80073c8:	000a      	movs	r2, r1
 80073ca:	18bb      	adds	r3, r7, r2
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	d031      	beq.n	8007436 <get_fileinfo+0xae>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80073d2:	18bb      	adds	r3, r7, r2
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b05      	cmp	r3, #5
 80073d8:	d102      	bne.n	80073e0 <get_fileinfo+0x58>
 80073da:	18bb      	adds	r3, r7, r2
 80073dc:	22e5      	movs	r2, #229	@ 0xe5
 80073de:	701a      	strb	r2, [r3, #0]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	2b09      	cmp	r3, #9
 80073e4:	d104      	bne.n	80073f0 <get_fileinfo+0x68>
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	61ba      	str	r2, [r7, #24]
 80073ec:	222e      	movs	r2, #46	@ 0x2e
 80073ee:	701a      	strb	r2, [r3, #0]
#if _USE_LFN
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 80073f0:	2217      	movs	r2, #23
 80073f2:	18bb      	adds	r3, r7, r2
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b40      	cmp	r3, #64	@ 0x40
 80073f8:	d915      	bls.n	8007426 <get_fileinfo+0x9e>
 80073fa:	18bb      	adds	r3, r7, r2
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b5a      	cmp	r3, #90	@ 0x5a
 8007400:	d811      	bhi.n	8007426 <get_fileinfo+0x9e>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	330c      	adds	r3, #12
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	001a      	movs	r2, r3
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	2b08      	cmp	r3, #8
 800740e:	d901      	bls.n	8007414 <get_fileinfo+0x8c>
 8007410:	2310      	movs	r3, #16
 8007412:	e000      	b.n	8007416 <get_fileinfo+0x8e>
 8007414:	2308      	movs	r3, #8
 8007416:	4013      	ands	r3, r2
 8007418:	d005      	beq.n	8007426 <get_fileinfo+0x9e>
				c += 0x20;			/* To lower */
 800741a:	2217      	movs	r2, #23
 800741c:	18bb      	adds	r3, r7, r2
 800741e:	18ba      	adds	r2, r7, r2
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	3220      	adds	r2, #32
 8007424:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	61ba      	str	r2, [r7, #24]
 800742c:	2217      	movs	r2, #23
 800742e:	18ba      	adds	r2, r7, r2
 8007430:	7812      	ldrb	r2, [r2, #0]
 8007432:	701a      	strb	r2, [r3, #0]
 8007434:	e000      	b.n	8007438 <get_fileinfo+0xb0>
			if (c == ' ') continue;				/* Skip padding spaces */
 8007436:	46c0      	nop			@ (mov r8, r8)
		while (i < 11) {		/* Copy name body and extension */
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	2b0a      	cmp	r3, #10
 800743c:	d9bb      	bls.n	80073b6 <get_fileinfo+0x2e>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	7ada      	ldrb	r2, [r3, #11]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	331f      	adds	r3, #31
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	061a      	lsls	r2, r3, #24
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	331e      	adds	r3, #30
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	041b      	lsls	r3, r3, #16
 8007456:	431a      	orrs	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	331d      	adds	r3, #29
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	4313      	orrs	r3, r2
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	321c      	adds	r2, #28
 8007466:	7812      	ldrb	r2, [r2, #0]
 8007468:	431a      	orrs	r2, r3
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3319      	adds	r3, #25
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	b21b      	sxth	r3, r3
 8007476:	021b      	lsls	r3, r3, #8
 8007478:	b21a      	sxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3318      	adds	r3, #24
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	b21b      	sxth	r3, r3
 8007482:	4313      	orrs	r3, r2
 8007484:	b21b      	sxth	r3, r3
 8007486:	b29a      	uxth	r2, r3
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3317      	adds	r3, #23
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	b21b      	sxth	r3, r3
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	b21a      	sxth	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3316      	adds	r3, #22
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	b21b      	sxth	r3, r3
 80074a0:	4313      	orrs	r3, r2
 80074a2:	b21b      	sxth	r3, r3
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	2200      	movs	r2, #0
 80074ae:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname) {
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d04f      	beq.n	8007558 <get_fileinfo+0x1d0>
		i = 0; p = fno->lfname;
 80074b8:	2300      	movs	r3, #0
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	61bb      	str	r3, [r7, #24]
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	2384      	movs	r3, #132	@ 0x84
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	58d3      	ldr	r3, [r2, r3]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d03f      	beq.n	800754e <get_fileinfo+0x1c6>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d03b      	beq.n	800754e <get_fileinfo+0x1c6>
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	2389      	movs	r3, #137	@ 0x89
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	5ad3      	ldrh	r3, [r2, r3]
 80074de:	4a20      	ldr	r2, [pc, #128]	@ (8007560 <get_fileinfo+0x1d8>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d034      	beq.n	800754e <get_fileinfo+0x1c6>
			lfn = dp->lfn;
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	2388      	movs	r3, #136	@ 0x88
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	58d3      	ldr	r3, [r2, r3]
 80074ec:	613b      	str	r3, [r7, #16]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 80074ee:	e023      	b.n	8007538 <get_fileinfo+0x1b0>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80074f0:	250a      	movs	r5, #10
 80074f2:	197c      	adds	r4, r7, r5
 80074f4:	197b      	adds	r3, r7, r5
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	2100      	movs	r1, #0
 80074fa:	0018      	movs	r0, r3
 80074fc:	f003 f92c 	bl	800a758 <ff_convert>
 8007500:	0003      	movs	r3, r0
 8007502:	8023      	strh	r3, [r4, #0]
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 8007504:	197b      	adds	r3, r7, r5
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d102      	bne.n	8007512 <get_fileinfo+0x18a>
 800750c:	2300      	movs	r3, #0
 800750e:	61fb      	str	r3, [r7, #28]
 8007510:	e01d      	b.n	800754e <get_fileinfo+0x1c6>
				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					p[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	3b01      	subs	r3, #1
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	429a      	cmp	r2, r3
 800751c:	d302      	bcc.n	8007524 <get_fileinfo+0x19c>
 800751e:	2300      	movs	r3, #0
 8007520:	61fb      	str	r3, [r7, #28]
 8007522:	e014      	b.n	800754e <get_fileinfo+0x1c6>
				p[i++] = (TCHAR)w;
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	61fa      	str	r2, [r7, #28]
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	18d3      	adds	r3, r2, r3
 800752e:	220a      	movs	r2, #10
 8007530:	18ba      	adds	r2, r7, r2
 8007532:	8812      	ldrh	r2, [r2, #0]
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	1c9a      	adds	r2, r3, #2
 800753c:	613a      	str	r2, [r7, #16]
 800753e:	210a      	movs	r1, #10
 8007540:	187a      	adds	r2, r7, r1
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	8013      	strh	r3, [r2, #0]
 8007546:	187b      	adds	r3, r7, r1
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1d0      	bne.n	80074f0 <get_fileinfo+0x168>
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	18d3      	adds	r3, r2, r3
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 8007558:	46c0      	nop			@ (mov r8, r8)
 800755a:	46bd      	mov	sp, r7
 800755c:	b008      	add	sp, #32
 800755e:	bdb0      	pop	{r4, r5, r7, pc}
 8007560:	0000ffff 	.word	0x0000ffff

08007564 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007564:	b5b0      	push	{r4, r5, r7, lr}
 8007566:	b08a      	sub	sp, #40	@ 0x28
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	613b      	str	r3, [r7, #16]
 8007574:	e002      	b.n	800757c <create_name+0x18>
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	3301      	adds	r3, #1
 800757a:	613b      	str	r3, [r7, #16]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b2f      	cmp	r3, #47	@ 0x2f
 8007582:	d0f8      	beq.n	8007576 <create_name+0x12>
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	2b5c      	cmp	r3, #92	@ 0x5c
 800758a:	d0f4      	beq.n	8007576 <create_name+0x12>
	lfn = dp->lfn;
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	2388      	movs	r3, #136	@ 0x88
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	58d3      	ldr	r3, [r2, r3]
 8007594:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	61ba      	str	r2, [r7, #24]
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	18d3      	adds	r3, r2, r3
 80075a8:	781a      	ldrb	r2, [r3, #0]
 80075aa:	2124      	movs	r1, #36	@ 0x24
 80075ac:	187b      	adds	r3, r7, r1
 80075ae:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80075b0:	000a      	movs	r2, r1
 80075b2:	18bb      	adds	r3, r7, r2
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	2b1f      	cmp	r3, #31
 80075b8:	d93d      	bls.n	8007636 <create_name+0xd2>
 80075ba:	18bb      	adds	r3, r7, r2
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	2b2f      	cmp	r3, #47	@ 0x2f
 80075c0:	d039      	beq.n	8007636 <create_name+0xd2>
 80075c2:	18bb      	adds	r3, r7, r2
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	2b5c      	cmp	r3, #92	@ 0x5c
 80075c8:	d035      	beq.n	8007636 <create_name+0xd2>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2bfe      	cmp	r3, #254	@ 0xfe
 80075ce:	d901      	bls.n	80075d4 <create_name+0x70>
			return FR_INVALID_NAME;
 80075d0:	2306      	movs	r3, #6
 80075d2:	e1cb      	b.n	800796c <create_name+0x408>
#if !_LFN_UNICODE
		w &= 0xFF;
 80075d4:	2524      	movs	r5, #36	@ 0x24
 80075d6:	197b      	adds	r3, r7, r5
 80075d8:	197a      	adds	r2, r7, r5
 80075da:	8812      	ldrh	r2, [r2, #0]
 80075dc:	21ff      	movs	r1, #255	@ 0xff
 80075de:	400a      	ands	r2, r1
 80075e0:	801a      	strh	r2, [r3, #0]
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80075e2:	197c      	adds	r4, r7, r5
 80075e4:	197b      	adds	r3, r7, r5
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	2101      	movs	r1, #1
 80075ea:	0018      	movs	r0, r3
 80075ec:	f003 f8b4 	bl	800a758 <ff_convert>
 80075f0:	0003      	movs	r3, r0
 80075f2:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80075f4:	197b      	adds	r3, r7, r5
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <create_name+0x9c>
 80075fc:	2306      	movs	r3, #6
 80075fe:	e1b5      	b.n	800796c <create_name+0x408>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8007600:	2224      	movs	r2, #36	@ 0x24
 8007602:	18bb      	adds	r3, r7, r2
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	2b7f      	cmp	r3, #127	@ 0x7f
 8007608:	d80a      	bhi.n	8007620 <create_name+0xbc>
 800760a:	18bb      	adds	r3, r7, r2
 800760c:	881a      	ldrh	r2, [r3, #0]
 800760e:	4ba8      	ldr	r3, [pc, #672]	@ (80078b0 <create_name+0x34c>)
 8007610:	0011      	movs	r1, r2
 8007612:	0018      	movs	r0, r3
 8007614:	f7fe f833 	bl	800567e <chk_chr>
 8007618:	1e03      	subs	r3, r0, #0
 800761a:	d001      	beq.n	8007620 <create_name+0xbc>
			return FR_INVALID_NAME;
 800761c:	2306      	movs	r3, #6
 800761e:	e1a5      	b.n	800796c <create_name+0x408>
		lfn[di++] = w;					/* Store the Unicode character */
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	617a      	str	r2, [r7, #20]
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	18d3      	adds	r3, r2, r3
 800762c:	2224      	movs	r2, #36	@ 0x24
 800762e:	18ba      	adds	r2, r7, r2
 8007630:	8812      	ldrh	r2, [r2, #0]
 8007632:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007634:	e7b3      	b.n	800759e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	18d2      	adds	r2, r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007640:	2324      	movs	r3, #36	@ 0x24
 8007642:	18fb      	adds	r3, r7, r3
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	2b1f      	cmp	r3, #31
 8007648:	d801      	bhi.n	800764e <create_name+0xea>
 800764a:	2204      	movs	r2, #4
 800764c:	e000      	b.n	8007650 <create_name+0xec>
 800764e:	2200      	movs	r2, #0
 8007650:	2327      	movs	r3, #39	@ 0x27
 8007652:	18fb      	adds	r3, r7, r3
 8007654:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8007656:	e016      	b.n	8007686 <create_name+0x122>
		w = lfn[di - 1];
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	4a96      	ldr	r2, [pc, #600]	@ (80078b4 <create_name+0x350>)
 800765c:	4694      	mov	ip, r2
 800765e:	4463      	add	r3, ip
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	18d2      	adds	r2, r2, r3
 8007666:	2124      	movs	r1, #36	@ 0x24
 8007668:	187b      	adds	r3, r7, r1
 800766a:	8812      	ldrh	r2, [r2, #0]
 800766c:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 800766e:	000a      	movs	r2, r1
 8007670:	18bb      	adds	r3, r7, r2
 8007672:	881b      	ldrh	r3, [r3, #0]
 8007674:	2b20      	cmp	r3, #32
 8007676:	d003      	beq.n	8007680 <create_name+0x11c>
 8007678:	18bb      	adds	r3, r7, r2
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	2b2e      	cmp	r3, #46	@ 0x2e
 800767e:	d106      	bne.n	800768e <create_name+0x12a>
		di--;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	3b01      	subs	r3, #1
 8007684:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1e5      	bne.n	8007658 <create_name+0xf4>
 800768c:	e000      	b.n	8007690 <create_name+0x12c>
		if (w != ' ' && w != '.') break;
 800768e:	46c0      	nop			@ (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <create_name+0x136>
 8007696:	2306      	movs	r3, #6
 8007698:	e168      	b.n	800796c <create_name+0x408>

	lfn[di] = 0;						/* LFN is created */
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	18d3      	adds	r3, r2, r3
 80076a2:	2200      	movs	r2, #0
 80076a4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	2386      	movs	r3, #134	@ 0x86
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	58d3      	ldr	r3, [r2, r3]
 80076ae:	220b      	movs	r2, #11
 80076b0:	2120      	movs	r1, #32
 80076b2:	0018      	movs	r0, r3
 80076b4:	f7fd ffa5 	bl	8005602 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80076b8:	2300      	movs	r3, #0
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	e002      	b.n	80076c4 <create_name+0x160>
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	3301      	adds	r3, #1
 80076c2:	61bb      	str	r3, [r7, #24]
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	18d3      	adds	r3, r2, r3
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	d0f5      	beq.n	80076be <create_name+0x15a>
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	18d3      	adds	r3, r2, r3
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80076de:	d0ee      	beq.n	80076be <create_name+0x15a>
	if (si) cf |= NS_LOSS | NS_LFN;
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <create_name+0x198>
 80076e6:	2227      	movs	r2, #39	@ 0x27
 80076e8:	18bb      	adds	r3, r7, r2
 80076ea:	18ba      	adds	r2, r7, r2
 80076ec:	7812      	ldrb	r2, [r2, #0]
 80076ee:	2103      	movs	r1, #3
 80076f0:	430a      	orrs	r2, r1
 80076f2:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80076f4:	e002      	b.n	80076fc <create_name+0x198>
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d009      	beq.n	8007716 <create_name+0x1b2>
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	4a6b      	ldr	r2, [pc, #428]	@ (80078b4 <create_name+0x350>)
 8007706:	4694      	mov	ip, r2
 8007708:	4463      	add	r3, ip
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	18d3      	adds	r3, r2, r3
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	2b2e      	cmp	r3, #46	@ 0x2e
 8007714:	d1ef      	bne.n	80076f6 <create_name+0x192>

	b = i = 0; ni = 8;
 8007716:	2300      	movs	r3, #0
 8007718:	623b      	str	r3, [r7, #32]
 800771a:	2326      	movs	r3, #38	@ 0x26
 800771c:	18fb      	adds	r3, r7, r3
 800771e:	2200      	movs	r2, #0
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	2308      	movs	r3, #8
 8007724:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	61ba      	str	r2, [r7, #24]
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	18d2      	adds	r2, r2, r3
 8007732:	2124      	movs	r1, #36	@ 0x24
 8007734:	187b      	adds	r3, r7, r1
 8007736:	8812      	ldrh	r2, [r2, #0]
 8007738:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 800773a:	000a      	movs	r2, r1
 800773c:	18bb      	adds	r3, r7, r2
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d100      	bne.n	8007746 <create_name+0x1e2>
 8007744:	e0b1      	b.n	80078aa <create_name+0x346>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007746:	18bb      	adds	r3, r7, r2
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	2b20      	cmp	r3, #32
 800774c:	d007      	beq.n	800775e <create_name+0x1fa>
 800774e:	18bb      	adds	r3, r7, r2
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	2b2e      	cmp	r3, #46	@ 0x2e
 8007754:	d10b      	bne.n	800776e <create_name+0x20a>
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	429a      	cmp	r2, r3
 800775c:	d007      	beq.n	800776e <create_name+0x20a>
			cf |= NS_LOSS | NS_LFN; continue;
 800775e:	2227      	movs	r2, #39	@ 0x27
 8007760:	18bb      	adds	r3, r7, r2
 8007762:	18ba      	adds	r2, r7, r2
 8007764:	7812      	ldrb	r2, [r2, #0]
 8007766:	2103      	movs	r1, #3
 8007768:	430a      	orrs	r2, r1
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	e09c      	b.n	80078a8 <create_name+0x344>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800776e:	6a3a      	ldr	r2, [r7, #32]
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	429a      	cmp	r2, r3
 8007774:	d203      	bcs.n	800777e <create_name+0x21a>
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	429a      	cmp	r2, r3
 800777c:	d127      	bne.n	80077ce <create_name+0x26a>
			if (ni == 11) {				/* Long extension */
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	2b0b      	cmp	r3, #11
 8007782:	d107      	bne.n	8007794 <create_name+0x230>
				cf |= NS_LOSS | NS_LFN; break;
 8007784:	2227      	movs	r2, #39	@ 0x27
 8007786:	18bb      	adds	r3, r7, r2
 8007788:	18ba      	adds	r2, r7, r2
 800778a:	7812      	ldrb	r2, [r2, #0]
 800778c:	2103      	movs	r1, #3
 800778e:	430a      	orrs	r2, r1
 8007790:	701a      	strb	r2, [r3, #0]
 8007792:	e096      	b.n	80078c2 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	429a      	cmp	r2, r3
 800779a:	d006      	beq.n	80077aa <create_name+0x246>
 800779c:	2227      	movs	r2, #39	@ 0x27
 800779e:	18bb      	adds	r3, r7, r2
 80077a0:	18ba      	adds	r2, r7, r2
 80077a2:	7812      	ldrb	r2, [r2, #0]
 80077a4:	2103      	movs	r1, #3
 80077a6:	430a      	orrs	r2, r1
 80077a8:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d900      	bls.n	80077b4 <create_name+0x250>
 80077b2:	e085      	b.n	80078c0 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	61bb      	str	r3, [r7, #24]
 80077b8:	2308      	movs	r3, #8
 80077ba:	623b      	str	r3, [r7, #32]
 80077bc:	230b      	movs	r3, #11
 80077be:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80077c0:	2226      	movs	r2, #38	@ 0x26
 80077c2:	18bb      	adds	r3, r7, r2
 80077c4:	18ba      	adds	r2, r7, r2
 80077c6:	7812      	ldrb	r2, [r2, #0]
 80077c8:	0092      	lsls	r2, r2, #2
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	e06c      	b.n	80078a8 <create_name+0x344>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80077ce:	2524      	movs	r5, #36	@ 0x24
 80077d0:	197b      	adds	r3, r7, r5
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80077d6:	d91a      	bls.n	800780e <create_name+0x2aa>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80077d8:	197c      	adds	r4, r7, r5
 80077da:	197b      	adds	r3, r7, r5
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	2100      	movs	r1, #0
 80077e0:	0018      	movs	r0, r3
 80077e2:	f002 ffb9 	bl	800a758 <ff_convert>
 80077e6:	0003      	movs	r3, r0
 80077e8:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80077ea:	197b      	adds	r3, r7, r5
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d006      	beq.n	8007800 <create_name+0x29c>
 80077f2:	197b      	adds	r3, r7, r5
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	3b80      	subs	r3, #128	@ 0x80
 80077f8:	4a2f      	ldr	r2, [pc, #188]	@ (80078b8 <create_name+0x354>)
 80077fa:	5cd2      	ldrb	r2, [r2, r3]
 80077fc:	197b      	adds	r3, r7, r5
 80077fe:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007800:	2227      	movs	r2, #39	@ 0x27
 8007802:	18bb      	adds	r3, r7, r2
 8007804:	18ba      	adds	r2, r7, r2
 8007806:	7812      	ldrb	r2, [r2, #0]
 8007808:	2102      	movs	r1, #2
 800780a:	430a      	orrs	r2, r1
 800780c:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800780e:	2224      	movs	r2, #36	@ 0x24
 8007810:	18bb      	adds	r3, r7, r2
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d008      	beq.n	800782a <create_name+0x2c6>
 8007818:	18bb      	adds	r3, r7, r2
 800781a:	881a      	ldrh	r2, [r3, #0]
 800781c:	4b27      	ldr	r3, [pc, #156]	@ (80078bc <create_name+0x358>)
 800781e:	0011      	movs	r1, r2
 8007820:	0018      	movs	r0, r3
 8007822:	f7fd ff2c 	bl	800567e <chk_chr>
 8007826:	1e03      	subs	r3, r0, #0
 8007828:	d00b      	beq.n	8007842 <create_name+0x2de>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800782a:	2324      	movs	r3, #36	@ 0x24
 800782c:	18fb      	adds	r3, r7, r3
 800782e:	225f      	movs	r2, #95	@ 0x5f
 8007830:	801a      	strh	r2, [r3, #0]
 8007832:	2227      	movs	r2, #39	@ 0x27
 8007834:	18bb      	adds	r3, r7, r2
 8007836:	18ba      	adds	r2, r7, r2
 8007838:	7812      	ldrb	r2, [r2, #0]
 800783a:	2103      	movs	r1, #3
 800783c:	430a      	orrs	r2, r1
 800783e:	701a      	strb	r2, [r3, #0]
 8007840:	e025      	b.n	800788e <create_name+0x32a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007842:	2224      	movs	r2, #36	@ 0x24
 8007844:	18bb      	adds	r3, r7, r2
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	2b40      	cmp	r3, #64	@ 0x40
 800784a:	d90b      	bls.n	8007864 <create_name+0x300>
 800784c:	18bb      	adds	r3, r7, r2
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	2b5a      	cmp	r3, #90	@ 0x5a
 8007852:	d807      	bhi.n	8007864 <create_name+0x300>
					b |= 2;
 8007854:	2226      	movs	r2, #38	@ 0x26
 8007856:	18bb      	adds	r3, r7, r2
 8007858:	18ba      	adds	r2, r7, r2
 800785a:	7812      	ldrb	r2, [r2, #0]
 800785c:	2102      	movs	r1, #2
 800785e:	430a      	orrs	r2, r1
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	e014      	b.n	800788e <create_name+0x32a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007864:	2024      	movs	r0, #36	@ 0x24
 8007866:	183b      	adds	r3, r7, r0
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	2b60      	cmp	r3, #96	@ 0x60
 800786c:	d90f      	bls.n	800788e <create_name+0x32a>
 800786e:	183b      	adds	r3, r7, r0
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	2b7a      	cmp	r3, #122	@ 0x7a
 8007874:	d80b      	bhi.n	800788e <create_name+0x32a>
						b |= 1; w -= 0x20;
 8007876:	2226      	movs	r2, #38	@ 0x26
 8007878:	18bb      	adds	r3, r7, r2
 800787a:	18ba      	adds	r2, r7, r2
 800787c:	7812      	ldrb	r2, [r2, #0]
 800787e:	2101      	movs	r1, #1
 8007880:	430a      	orrs	r2, r1
 8007882:	701a      	strb	r2, [r3, #0]
 8007884:	183b      	adds	r3, r7, r0
 8007886:	183a      	adds	r2, r7, r0
 8007888:	8812      	ldrh	r2, [r2, #0]
 800788a:	3a20      	subs	r2, #32
 800788c:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	2386      	movs	r3, #134	@ 0x86
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	58d2      	ldr	r2, [r2, r3]
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	1c59      	adds	r1, r3, #1
 800789a:	6239      	str	r1, [r7, #32]
 800789c:	18d3      	adds	r3, r2, r3
 800789e:	2224      	movs	r2, #36	@ 0x24
 80078a0:	18ba      	adds	r2, r7, r2
 80078a2:	8812      	ldrh	r2, [r2, #0]
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80078a8:	e73d      	b.n	8007726 <create_name+0x1c2>
		if (!w) break;					/* Break on end of the LFN */
 80078aa:	46c0      	nop			@ (mov r8, r8)
 80078ac:	e009      	b.n	80078c2 <create_name+0x35e>
 80078ae:	46c0      	nop			@ (mov r8, r8)
 80078b0:	0800c14c 	.word	0x0800c14c
 80078b4:	7fffffff 	.word	0x7fffffff
 80078b8:	0800c1f0 	.word	0x0800c1f0
 80078bc:	0800c158 	.word	0x0800c158
			if (si > di) break;			/* No extension */
 80078c0:	46c0      	nop			@ (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	2386      	movs	r3, #134	@ 0x86
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	58d3      	ldr	r3, [r2, r3]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2be5      	cmp	r3, #229	@ 0xe5
 80078ce:	d105      	bne.n	80078dc <create_name+0x378>
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	2386      	movs	r3, #134	@ 0x86
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	58d3      	ldr	r3, [r2, r3]
 80078d8:	2205      	movs	r2, #5
 80078da:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	2b08      	cmp	r3, #8
 80078e0:	d105      	bne.n	80078ee <create_name+0x38a>
 80078e2:	2226      	movs	r2, #38	@ 0x26
 80078e4:	18bb      	adds	r3, r7, r2
 80078e6:	18ba      	adds	r2, r7, r2
 80078e8:	7812      	ldrb	r2, [r2, #0]
 80078ea:	0092      	lsls	r2, r2, #2
 80078ec:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80078ee:	2126      	movs	r1, #38	@ 0x26
 80078f0:	187b      	adds	r3, r7, r1
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	220c      	movs	r2, #12
 80078f6:	4013      	ands	r3, r2
 80078f8:	2b0c      	cmp	r3, #12
 80078fa:	d005      	beq.n	8007908 <create_name+0x3a4>
 80078fc:	187b      	adds	r3, r7, r1
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2203      	movs	r2, #3
 8007902:	4013      	ands	r3, r2
 8007904:	2b03      	cmp	r3, #3
 8007906:	d106      	bne.n	8007916 <create_name+0x3b2>
		cf |= NS_LFN;
 8007908:	2227      	movs	r2, #39	@ 0x27
 800790a:	18bb      	adds	r3, r7, r2
 800790c:	18ba      	adds	r2, r7, r2
 800790e:	7812      	ldrb	r2, [r2, #0]
 8007910:	2102      	movs	r1, #2
 8007912:	430a      	orrs	r2, r1
 8007914:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007916:	2127      	movs	r1, #39	@ 0x27
 8007918:	187b      	adds	r3, r7, r1
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	2202      	movs	r2, #2
 800791e:	4013      	ands	r3, r2
 8007920:	d11a      	bne.n	8007958 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007922:	2326      	movs	r3, #38	@ 0x26
 8007924:	18fb      	adds	r3, r7, r3
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2203      	movs	r2, #3
 800792a:	4013      	ands	r3, r2
 800792c:	2b01      	cmp	r3, #1
 800792e:	d105      	bne.n	800793c <create_name+0x3d8>
 8007930:	187b      	adds	r3, r7, r1
 8007932:	187a      	adds	r2, r7, r1
 8007934:	7812      	ldrb	r2, [r2, #0]
 8007936:	2110      	movs	r1, #16
 8007938:	430a      	orrs	r2, r1
 800793a:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800793c:	2326      	movs	r3, #38	@ 0x26
 800793e:	18fb      	adds	r3, r7, r3
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	220c      	movs	r2, #12
 8007944:	4013      	ands	r3, r2
 8007946:	2b04      	cmp	r3, #4
 8007948:	d106      	bne.n	8007958 <create_name+0x3f4>
 800794a:	2227      	movs	r2, #39	@ 0x27
 800794c:	18bb      	adds	r3, r7, r2
 800794e:	18ba      	adds	r2, r7, r2
 8007950:	7812      	ldrb	r2, [r2, #0]
 8007952:	2108      	movs	r1, #8
 8007954:	430a      	orrs	r2, r1
 8007956:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	2386      	movs	r3, #134	@ 0x86
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	58d3      	ldr	r3, [r2, r3]
 8007960:	330b      	adds	r3, #11
 8007962:	2227      	movs	r2, #39	@ 0x27
 8007964:	18ba      	adds	r2, r7, r2
 8007966:	7812      	ldrb	r2, [r2, #0]
 8007968:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800796a:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800796c:	0018      	movs	r0, r3
 800796e:	46bd      	mov	sp, r7
 8007970:	b00a      	add	sp, #40	@ 0x28
 8007972:	bdb0      	pop	{r4, r5, r7, pc}

08007974 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007974:	b5b0      	push	{r4, r5, r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	2b2f      	cmp	r3, #47	@ 0x2f
 8007984:	d003      	beq.n	800798e <follow_path+0x1a>
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b5c      	cmp	r3, #92	@ 0x5c
 800798c:	d102      	bne.n	8007994 <follow_path+0x20>
		path++;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	3301      	adds	r3, #1
 8007992:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	2382      	movs	r3, #130	@ 0x82
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	2100      	movs	r1, #0
 800799c:	50d1      	str	r1, [r2, r3]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b1f      	cmp	r3, #31
 80079a4:	d80e      	bhi.n	80079c4 <follow_path+0x50>
		res = dir_sdi(dp, 0);
 80079a6:	230f      	movs	r3, #15
 80079a8:	18fc      	adds	r4, r7, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2100      	movs	r1, #0
 80079ae:	0018      	movs	r0, r3
 80079b0:	f7fe fd1a 	bl	80063e8 <dir_sdi>
 80079b4:	0003      	movs	r3, r0
 80079b6:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	2385      	movs	r3, #133	@ 0x85
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	2100      	movs	r1, #0
 80079c0:	50d1      	str	r1, [r2, r3]
 80079c2:	e058      	b.n	8007a76 <follow_path+0x102>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80079c4:	250f      	movs	r5, #15
 80079c6:	197c      	adds	r4, r7, r5
 80079c8:	003a      	movs	r2, r7
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	0011      	movs	r1, r2
 80079ce:	0018      	movs	r0, r3
 80079d0:	f7ff fdc8 	bl	8007564 <create_name>
 80079d4:	0003      	movs	r3, r0
 80079d6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80079d8:	197b      	adds	r3, r7, r5
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d145      	bne.n	8007a6c <follow_path+0xf8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80079e0:	197c      	adds	r4, r7, r5
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	0018      	movs	r0, r3
 80079e6:	f7ff f9a9 	bl	8006d3c <dir_find>
 80079ea:	0003      	movs	r3, r0
 80079ec:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	2386      	movs	r3, #134	@ 0x86
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	58d2      	ldr	r2, [r2, r3]
 80079f6:	210e      	movs	r1, #14
 80079f8:	187b      	adds	r3, r7, r1
 80079fa:	7ad2      	ldrb	r2, [r2, #11]
 80079fc:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80079fe:	197b      	adds	r3, r7, r5
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00c      	beq.n	8007a20 <follow_path+0xac>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007a06:	197b      	adds	r3, r7, r5
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d130      	bne.n	8007a70 <follow_path+0xfc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007a0e:	187b      	adds	r3, r7, r1
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2204      	movs	r2, #4
 8007a14:	4013      	ands	r3, r2
 8007a16:	d12b      	bne.n	8007a70 <follow_path+0xfc>
 8007a18:	197b      	adds	r3, r7, r5
 8007a1a:	2205      	movs	r2, #5
 8007a1c:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8007a1e:	e027      	b.n	8007a70 <follow_path+0xfc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a20:	230e      	movs	r3, #14
 8007a22:	18fb      	adds	r3, r7, r3
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2204      	movs	r2, #4
 8007a28:	4013      	ands	r3, r2
 8007a2a:	d123      	bne.n	8007a74 <follow_path+0x100>
			dir = dp->dir;						/* Follow the sub-directory */
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	2385      	movs	r3, #133	@ 0x85
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	58d3      	ldr	r3, [r2, r3]
 8007a34:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	330b      	adds	r3, #11
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	001a      	movs	r2, r3
 8007a3e:	2310      	movs	r3, #16
 8007a40:	4013      	ands	r3, r2
 8007a42:	d104      	bne.n	8007a4e <follow_path+0xda>
				res = FR_NO_PATH; break;
 8007a44:	230f      	movs	r3, #15
 8007a46:	18fb      	adds	r3, r7, r3
 8007a48:	2205      	movs	r2, #5
 8007a4a:	701a      	strb	r2, [r3, #0]
 8007a4c:	e013      	b.n	8007a76 <follow_path+0x102>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	2380      	movs	r3, #128	@ 0x80
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	58d3      	ldr	r3, [r2, r3]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	0011      	movs	r1, r2
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f7fe feeb 	bl	8006836 <ld_clust>
 8007a60:	0001      	movs	r1, r0
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	2382      	movs	r3, #130	@ 0x82
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	50d1      	str	r1, [r2, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a6a:	e7ab      	b.n	80079c4 <follow_path+0x50>
			if (res != FR_OK) break;
 8007a6c:	46c0      	nop			@ (mov r8, r8)
 8007a6e:	e002      	b.n	8007a76 <follow_path+0x102>
				break;
 8007a70:	46c0      	nop			@ (mov r8, r8)
 8007a72:	e000      	b.n	8007a76 <follow_path+0x102>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a74:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return res;
 8007a76:	230f      	movs	r3, #15
 8007a78:	18fb      	adds	r3, r7, r3
 8007a7a:	781b      	ldrb	r3, [r3, #0]
}
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	b004      	add	sp, #16
 8007a82:	bdb0      	pop	{r4, r5, r7, pc}

08007a84 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	425b      	negs	r3, r3
 8007a90:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d031      	beq.n	8007afe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	e002      	b.n	8007aa8 <get_ldnumber+0x24>
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b1f      	cmp	r3, #31
 8007aae:	d903      	bls.n	8007ab8 <get_ldnumber+0x34>
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b3a      	cmp	r3, #58	@ 0x3a
 8007ab6:	d1f4      	bne.n	8007aa2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b3a      	cmp	r3, #58	@ 0x3a
 8007abe:	d11c      	bne.n	8007afa <get_ldnumber+0x76>
			tp = *path;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	60fa      	str	r2, [r7, #12]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	3b30      	subs	r3, #48	@ 0x30
 8007ad0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2b09      	cmp	r3, #9
 8007ad6:	d80e      	bhi.n	8007af6 <get_ldnumber+0x72>
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d10a      	bne.n	8007af6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d107      	bne.n	8007af6 <get_ldnumber+0x72>
					vol = (int)i;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	3301      	adds	r3, #1
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	e002      	b.n	8007b00 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007afa:	2300      	movs	r3, #0
 8007afc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007afe:	693b      	ldr	r3, [r7, #16]
}
 8007b00:	0018      	movs	r0, r3
 8007b02:	46bd      	mov	sp, r7
 8007b04:	b006      	add	sp, #24
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	2381      	movs	r3, #129	@ 0x81
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	2100      	movs	r1, #0
 8007b1a:	54d1      	strb	r1, [r2, r3]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	238b      	movs	r3, #139	@ 0x8b
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	2101      	movs	r1, #1
 8007b24:	4249      	negs	r1, r1
 8007b26:	50d1      	str	r1, [r2, r3]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	0011      	movs	r1, r2
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f7fd ffd6 	bl	8005ae0 <move_window>
 8007b34:	1e03      	subs	r3, r0, #0
 8007b36:	d001      	beq.n	8007b3c <check_fs+0x34>
		return 3;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e04c      	b.n	8007bd6 <check_fs+0xce>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	33ff      	adds	r3, #255	@ 0xff
 8007b40:	33ff      	adds	r3, #255	@ 0xff
 8007b42:	3301      	adds	r3, #1
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	b21b      	sxth	r3, r3
 8007b48:	021b      	lsls	r3, r3, #8
 8007b4a:	b21a      	sxth	r2, r3
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	23ff      	movs	r3, #255	@ 0xff
 8007b50:	005b      	lsls	r3, r3, #1
 8007b52:	5ccb      	ldrb	r3, [r1, r3]
 8007b54:	b21b      	sxth	r3, r3
 8007b56:	4313      	orrs	r3, r2
 8007b58:	b21b      	sxth	r3, r3
 8007b5a:	4a21      	ldr	r2, [pc, #132]	@ (8007be0 <check_fs+0xd8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d001      	beq.n	8007b64 <check_fs+0x5c>
		return 2;
 8007b60:	2302      	movs	r3, #2
 8007b62:	e038      	b.n	8007bd6 <check_fs+0xce>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	3336      	adds	r3, #54	@ 0x36
 8007b68:	3303      	adds	r3, #3
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	061a      	lsls	r2, r3, #24
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3336      	adds	r3, #54	@ 0x36
 8007b72:	3302      	adds	r3, #2
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	041b      	lsls	r3, r3, #16
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3336      	adds	r3, #54	@ 0x36
 8007b7e:	3301      	adds	r3, #1
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	021b      	lsls	r3, r3, #8
 8007b84:	4313      	orrs	r3, r2
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	2136      	movs	r1, #54	@ 0x36
 8007b8a:	5c52      	ldrb	r2, [r2, r1]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	021b      	lsls	r3, r3, #8
 8007b90:	0a1b      	lsrs	r3, r3, #8
 8007b92:	4a14      	ldr	r2, [pc, #80]	@ (8007be4 <check_fs+0xdc>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d101      	bne.n	8007b9c <check_fs+0x94>
		return 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	e01c      	b.n	8007bd6 <check_fs+0xce>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3352      	adds	r3, #82	@ 0x52
 8007ba0:	3303      	adds	r3, #3
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	061a      	lsls	r2, r3, #24
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	3352      	adds	r3, #82	@ 0x52
 8007baa:	3302      	adds	r3, #2
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	041b      	lsls	r3, r3, #16
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	3352      	adds	r3, #82	@ 0x52
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	2152      	movs	r1, #82	@ 0x52
 8007bc2:	5c52      	ldrb	r2, [r2, r1]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	0a1b      	lsrs	r3, r3, #8
 8007bca:	4a06      	ldr	r2, [pc, #24]	@ (8007be4 <check_fs+0xdc>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d101      	bne.n	8007bd4 <check_fs+0xcc>
		return 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	e000      	b.n	8007bd6 <check_fs+0xce>

	return 1;
 8007bd4:	2301      	movs	r3, #1
}
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	b002      	add	sp, #8
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	46c0      	nop			@ (mov r8, r8)
 8007be0:	ffffaa55 	.word	0xffffaa55
 8007be4:	00544146 	.word	0x00544146

08007be8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007be8:	b5b0      	push	{r4, r5, r7, lr}
 8007bea:	b096      	sub	sp, #88	@ 0x58
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	1dfb      	adds	r3, r7, #7
 8007bf4:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f7ff ff40 	bl	8007a84 <get_ldnumber>
 8007c04:	0003      	movs	r3, r0
 8007c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	da01      	bge.n	8007c12 <find_volume+0x2a>
 8007c0e:	230b      	movs	r3, #11
 8007c10:	e2f8      	b.n	8008204 <find_volume+0x61c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c12:	4bd1      	ldr	r3, [pc, #836]	@ (8007f58 <find_volume+0x370>)
 8007c14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007c16:	0092      	lsls	r2, r2, #2
 8007c18:	58d3      	ldr	r3, [r2, r3]
 8007c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <find_volume+0x3e>
 8007c22:	230c      	movs	r3, #12
 8007c24:	e2ee      	b.n	8008204 <find_volume+0x61c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c2a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c2e:	2380      	movs	r3, #128	@ 0x80
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	5cd3      	ldrb	r3, [r2, r3]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01c      	beq.n	8007c72 <find_volume+0x8a>
		stat = disk_status(fs->drv);
 8007c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3a:	4ac8      	ldr	r2, [pc, #800]	@ (8007f5c <find_volume+0x374>)
 8007c3c:	5c9b      	ldrb	r3, [r3, r2]
 8007c3e:	2537      	movs	r5, #55	@ 0x37
 8007c40:	197c      	adds	r4, r7, r5
 8007c42:	0018      	movs	r0, r3
 8007c44:	f7fd fbf6 	bl	8005434 <disk_status>
 8007c48:	0003      	movs	r3, r0
 8007c4a:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c4c:	0029      	movs	r1, r5
 8007c4e:	187b      	adds	r3, r7, r1
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2201      	movs	r2, #1
 8007c54:	4013      	ands	r3, r2
 8007c56:	d10c      	bne.n	8007c72 <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007c58:	1dfb      	adds	r3, r7, #7
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d006      	beq.n	8007c6e <find_volume+0x86>
 8007c60:	187b      	adds	r3, r7, r1
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2204      	movs	r2, #4
 8007c66:	4013      	ands	r3, r2
 8007c68:	d001      	beq.n	8007c6e <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 8007c6a:	230a      	movs	r3, #10
 8007c6c:	e2ca      	b.n	8008204 <find_volume+0x61c>
			return FR_OK;				/* The file system object is valid */
 8007c6e:	2300      	movs	r3, #0
 8007c70:	e2c8      	b.n	8008204 <find_volume+0x61c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c74:	2380      	movs	r3, #128	@ 0x80
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	2100      	movs	r1, #0
 8007c7a:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c7e:	b2d9      	uxtb	r1, r3
 8007c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c82:	4ab6      	ldr	r2, [pc, #728]	@ (8007f5c <find_volume+0x374>)
 8007c84:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c88:	4ab4      	ldr	r2, [pc, #720]	@ (8007f5c <find_volume+0x374>)
 8007c8a:	5c9b      	ldrb	r3, [r3, r2]
 8007c8c:	2537      	movs	r5, #55	@ 0x37
 8007c8e:	197c      	adds	r4, r7, r5
 8007c90:	0018      	movs	r0, r3
 8007c92:	f7fd fbf1 	bl	8005478 <disk_initialize>
 8007c96:	0003      	movs	r3, r0
 8007c98:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007c9a:	197b      	adds	r3, r7, r5
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	d001      	beq.n	8007ca8 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e2ad      	b.n	8008204 <find_volume+0x61c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007ca8:	1dfb      	adds	r3, r7, #7
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d007      	beq.n	8007cc0 <find_volume+0xd8>
 8007cb0:	2337      	movs	r3, #55	@ 0x37
 8007cb2:	18fb      	adds	r3, r7, r3
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2204      	movs	r2, #4
 8007cb8:	4013      	ands	r3, r2
 8007cba:	d001      	beq.n	8007cc0 <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 8007cbc:	230a      	movs	r3, #10
 8007cbe:	e2a1      	b.n	8008204 <find_volume+0x61c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007cc4:	2557      	movs	r5, #87	@ 0x57
 8007cc6:	197c      	adds	r4, r7, r5
 8007cc8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ccc:	0011      	movs	r1, r2
 8007cce:	0018      	movs	r0, r3
 8007cd0:	f7ff ff1a 	bl	8007b08 <check_fs>
 8007cd4:	0003      	movs	r3, r0
 8007cd6:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007cd8:	197b      	adds	r3, r7, r5
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d155      	bne.n	8007d8c <find_volume+0x1a4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ce4:	e027      	b.n	8007d36 <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007ce6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cea:	011b      	lsls	r3, r3, #4
 8007cec:	33bf      	adds	r3, #191	@ 0xbf
 8007cee:	33ff      	adds	r3, #255	@ 0xff
 8007cf0:	18d3      	adds	r3, r2, r3
 8007cf2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d012      	beq.n	8007d24 <find_volume+0x13c>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d00:	330b      	adds	r3, #11
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	061a      	lsls	r2, r3, #24
 8007d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d08:	330a      	adds	r3, #10
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	041b      	lsls	r3, r3, #16
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d12:	3309      	adds	r3, #9
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	021b      	lsls	r3, r3, #8
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d1c:	3208      	adds	r2, #8
 8007d1e:	7812      	ldrb	r2, [r2, #0]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	e000      	b.n	8007d26 <find_volume+0x13e>
 8007d24:	2300      	movs	r3, #0
 8007d26:	2214      	movs	r2, #20
 8007d28:	18ba      	adds	r2, r7, r2
 8007d2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d2c:	0089      	lsls	r1, r1, #2
 8007d2e:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d32:	3301      	adds	r3, #1
 8007d34:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d9d4      	bls.n	8007ce6 <find_volume+0xfe>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007d40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <find_volume+0x164>
 8007d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007d4c:	2314      	movs	r3, #20
 8007d4e:	18fb      	adds	r3, r7, r3
 8007d50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d52:	0092      	lsls	r2, r2, #2
 8007d54:	58d3      	ldr	r3, [r2, r3]
 8007d56:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007d58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d008      	beq.n	8007d70 <find_volume+0x188>
 8007d5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d62:	0011      	movs	r1, r2
 8007d64:	0018      	movs	r0, r3
 8007d66:	f7ff fecf 	bl	8007b08 <check_fs>
 8007d6a:	0003      	movs	r3, r0
 8007d6c:	001a      	movs	r2, r3
 8007d6e:	e000      	b.n	8007d72 <find_volume+0x18a>
 8007d70:	2202      	movs	r2, #2
 8007d72:	2157      	movs	r1, #87	@ 0x57
 8007d74:	187b      	adds	r3, r7, r1
 8007d76:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007d78:	187b      	adds	r3, r7, r1
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d005      	beq.n	8007d8c <find_volume+0x1a4>
 8007d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d82:	3301      	adds	r3, #1
 8007d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d9df      	bls.n	8007d4c <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007d8c:	2357      	movs	r3, #87	@ 0x57
 8007d8e:	18fb      	adds	r3, r7, r3
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d101      	bne.n	8007d9a <find_volume+0x1b2>
 8007d96:	2301      	movs	r3, #1
 8007d98:	e234      	b.n	8008204 <find_volume+0x61c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007d9a:	2357      	movs	r3, #87	@ 0x57
 8007d9c:	18fb      	adds	r3, r7, r3
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <find_volume+0x1c0>
 8007da4:	230d      	movs	r3, #13
 8007da6:	e22d      	b.n	8008204 <find_volume+0x61c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007daa:	7b1b      	ldrb	r3, [r3, #12]
 8007dac:	b21b      	sxth	r3, r3
 8007dae:	021b      	lsls	r3, r3, #8
 8007db0:	b21a      	sxth	r2, r3
 8007db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db4:	7adb      	ldrb	r3, [r3, #11]
 8007db6:	b21b      	sxth	r3, r3
 8007db8:	4313      	orrs	r3, r2
 8007dba:	b21a      	sxth	r2, r3
 8007dbc:	2380      	movs	r3, #128	@ 0x80
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d001      	beq.n	8007dc8 <find_volume+0x1e0>
		return FR_NO_FILESYSTEM;
 8007dc4:	230d      	movs	r3, #13
 8007dc6:	e21d      	b.n	8008204 <find_volume+0x61c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dca:	7ddb      	ldrb	r3, [r3, #23]
 8007dcc:	b21b      	sxth	r3, r3
 8007dce:	021b      	lsls	r3, r3, #8
 8007dd0:	b21a      	sxth	r2, r3
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd4:	7d9b      	ldrb	r3, [r3, #22]
 8007dd6:	b21b      	sxth	r3, r3
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	b21b      	sxth	r3, r3
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d112      	bne.n	8007e0c <find_volume+0x224>
 8007de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de8:	2227      	movs	r2, #39	@ 0x27
 8007dea:	5c9b      	ldrb	r3, [r3, r2]
 8007dec:	061a      	lsls	r2, r3, #24
 8007dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df0:	2126      	movs	r1, #38	@ 0x26
 8007df2:	5c5b      	ldrb	r3, [r3, r1]
 8007df4:	041b      	lsls	r3, r3, #16
 8007df6:	431a      	orrs	r2, r3
 8007df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfa:	2125      	movs	r1, #37	@ 0x25
 8007dfc:	5c5b      	ldrb	r3, [r3, r1]
 8007dfe:	021b      	lsls	r3, r3, #8
 8007e00:	4313      	orrs	r3, r2
 8007e02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e04:	2124      	movs	r1, #36	@ 0x24
 8007e06:	5c52      	ldrb	r2, [r2, r1]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8007e0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e0e:	2386      	movs	r3, #134	@ 0x86
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007e14:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e18:	7c19      	ldrb	r1, [r3, #16]
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1c:	4a50      	ldr	r2, [pc, #320]	@ (8007f60 <find_volume+0x378>)
 8007e1e:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e22:	4a4f      	ldr	r2, [pc, #316]	@ (8007f60 <find_volume+0x378>)
 8007e24:	5c9b      	ldrb	r3, [r3, r2]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d006      	beq.n	8007e38 <find_volume+0x250>
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2c:	4a4c      	ldr	r2, [pc, #304]	@ (8007f60 <find_volume+0x378>)
 8007e2e:	5c9b      	ldrb	r3, [r3, r2]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d001      	beq.n	8007e38 <find_volume+0x250>
		return FR_NO_FILESYSTEM;
 8007e34:	230d      	movs	r3, #13
 8007e36:	e1e5      	b.n	8008204 <find_volume+0x61c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3a:	4a49      	ldr	r2, [pc, #292]	@ (8007f60 <find_volume+0x378>)
 8007e3c:	5c9b      	ldrb	r3, [r3, r2]
 8007e3e:	001a      	movs	r2, r3
 8007e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e42:	4353      	muls	r3, r2
 8007e44:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e48:	7b59      	ldrb	r1, [r3, #13]
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4c:	4a45      	ldr	r2, [pc, #276]	@ (8007f64 <find_volume+0x37c>)
 8007e4e:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e52:	4a44      	ldr	r2, [pc, #272]	@ (8007f64 <find_volume+0x37c>)
 8007e54:	5c9b      	ldrb	r3, [r3, r2]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d009      	beq.n	8007e6e <find_volume+0x286>
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5c:	4a41      	ldr	r2, [pc, #260]	@ (8007f64 <find_volume+0x37c>)
 8007e5e:	5c9b      	ldrb	r3, [r3, r2]
 8007e60:	0019      	movs	r1, r3
 8007e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e64:	4a3f      	ldr	r2, [pc, #252]	@ (8007f64 <find_volume+0x37c>)
 8007e66:	5c9b      	ldrb	r3, [r3, r2]
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	400b      	ands	r3, r1
 8007e6c:	d001      	beq.n	8007e72 <find_volume+0x28a>
		return FR_NO_FILESYSTEM;
 8007e6e:	230d      	movs	r3, #13
 8007e70:	e1c8      	b.n	8008204 <find_volume+0x61c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e74:	7c9b      	ldrb	r3, [r3, #18]
 8007e76:	b21b      	sxth	r3, r3
 8007e78:	021b      	lsls	r3, r3, #8
 8007e7a:	b21a      	sxth	r2, r3
 8007e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e7e:	7c5b      	ldrb	r3, [r3, #17]
 8007e80:	b21b      	sxth	r3, r3
 8007e82:	4313      	orrs	r3, r2
 8007e84:	b21b      	sxth	r3, r3
 8007e86:	b299      	uxth	r1, r3
 8007e88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e8a:	2382      	movs	r3, #130	@ 0x82
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007e90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e92:	2382      	movs	r3, #130	@ 0x82
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	5ad3      	ldrh	r3, [r2, r3]
 8007e98:	220f      	movs	r2, #15
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <find_volume+0x2be>
		return FR_NO_FILESYSTEM;
 8007ea2:	230d      	movs	r3, #13
 8007ea4:	e1ae      	b.n	8008204 <find_volume+0x61c>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea8:	7d1b      	ldrb	r3, [r3, #20]
 8007eaa:	b21b      	sxth	r3, r3
 8007eac:	021b      	lsls	r3, r3, #8
 8007eae:	b21a      	sxth	r2, r3
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb2:	7cdb      	ldrb	r3, [r3, #19]
 8007eb4:	b21b      	sxth	r3, r3
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	b21b      	sxth	r3, r3
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d112      	bne.n	8007eea <find_volume+0x302>
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec6:	2223      	movs	r2, #35	@ 0x23
 8007ec8:	5c9b      	ldrb	r3, [r3, r2]
 8007eca:	061a      	lsls	r2, r3, #24
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ece:	2122      	movs	r1, #34	@ 0x22
 8007ed0:	5c5b      	ldrb	r3, [r3, r1]
 8007ed2:	041b      	lsls	r3, r3, #16
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed8:	2121      	movs	r1, #33	@ 0x21
 8007eda:	5c5b      	ldrb	r3, [r3, r1]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ee2:	2120      	movs	r1, #32
 8007ee4:	5c52      	ldrb	r2, [r2, r1]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eec:	7bdb      	ldrb	r3, [r3, #15]
 8007eee:	b21b      	sxth	r3, r3
 8007ef0:	021b      	lsls	r3, r3, #8
 8007ef2:	b21a      	sxth	r2, r3
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef6:	7b9b      	ldrb	r3, [r3, #14]
 8007ef8:	b21b      	sxth	r3, r3
 8007efa:	4313      	orrs	r3, r2
 8007efc:	b21a      	sxth	r2, r3
 8007efe:	212e      	movs	r1, #46	@ 0x2e
 8007f00:	187b      	adds	r3, r7, r1
 8007f02:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007f04:	187b      	adds	r3, r7, r1
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <find_volume+0x328>
 8007f0c:	230d      	movs	r3, #13
 8007f0e:	e179      	b.n	8008204 <find_volume+0x61c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007f10:	232e      	movs	r3, #46	@ 0x2e
 8007f12:	18fb      	adds	r3, r7, r3
 8007f14:	881a      	ldrh	r2, [r3, #0]
 8007f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f18:	18d3      	adds	r3, r2, r3
 8007f1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f1c:	2282      	movs	r2, #130	@ 0x82
 8007f1e:	0092      	lsls	r2, r2, #2
 8007f20:	5a8a      	ldrh	r2, [r1, r2]
 8007f22:	0912      	lsrs	r2, r2, #4
 8007f24:	b292      	uxth	r2, r2
 8007f26:	189b      	adds	r3, r3, r2
 8007f28:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007f2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d201      	bcs.n	8007f36 <find_volume+0x34e>
 8007f32:	230d      	movs	r3, #13
 8007f34:	e166      	b.n	8008204 <find_volume+0x61c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007f36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3a:	1ad2      	subs	r2, r2, r3
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3e:	4909      	ldr	r1, [pc, #36]	@ (8007f64 <find_volume+0x37c>)
 8007f40:	5c5b      	ldrb	r3, [r3, r1]
 8007f42:	0019      	movs	r1, r3
 8007f44:	0010      	movs	r0, r2
 8007f46:	f7f8 f8fb 	bl	8000140 <__udivsi3>
 8007f4a:	0003      	movs	r3, r0
 8007f4c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d109      	bne.n	8007f68 <find_volume+0x380>
 8007f54:	230d      	movs	r3, #13
 8007f56:	e155      	b.n	8008204 <find_volume+0x61c>
 8007f58:	200006c0 	.word	0x200006c0
 8007f5c:	00000201 	.word	0x00000201
 8007f60:	00000203 	.word	0x00000203
 8007f64:	00000202 	.word	0x00000202
	fmt = FS_FAT12;
 8007f68:	2157      	movs	r1, #87	@ 0x57
 8007f6a:	187b      	adds	r3, r7, r1
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f72:	4aa6      	ldr	r2, [pc, #664]	@ (800820c <find_volume+0x624>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d902      	bls.n	8007f7e <find_volume+0x396>
 8007f78:	187b      	adds	r3, r7, r1
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	4aa3      	ldr	r2, [pc, #652]	@ (8008210 <find_volume+0x628>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d903      	bls.n	8007f8e <find_volume+0x3a6>
 8007f86:	2357      	movs	r3, #87	@ 0x57
 8007f88:	18fb      	adds	r3, r7, r3
 8007f8a:	2203      	movs	r2, #3
 8007f8c:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f90:	1c99      	adds	r1, r3, #2
 8007f92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f94:	2385      	movs	r3, #133	@ 0x85
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	50d1      	str	r1, [r2, r3]
	fs->volbase = bsect;								/* Volume start sector */
 8007f9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f9c:	2387      	movs	r3, #135	@ 0x87
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007fa2:	50d1      	str	r1, [r2, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007fa4:	232e      	movs	r3, #46	@ 0x2e
 8007fa6:	18fb      	adds	r3, r7, r3
 8007fa8:	881a      	ldrh	r2, [r3, #0]
 8007faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fac:	18d1      	adds	r1, r2, r3
 8007fae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fb0:	2388      	movs	r3, #136	@ 0x88
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 8007fb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fba:	18d1      	adds	r1, r2, r3
 8007fbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fbe:	238a      	movs	r3, #138	@ 0x8a
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 8007fc4:	2357      	movs	r3, #87	@ 0x57
 8007fc6:	18fb      	adds	r3, r7, r3
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d125      	bne.n	800801a <find_volume+0x432>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007fce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fd0:	2382      	movs	r3, #130	@ 0x82
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	5ad3      	ldrh	r3, [r2, r3]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <find_volume+0x3f6>
 8007fda:	230d      	movs	r3, #13
 8007fdc:	e112      	b.n	8008204 <find_volume+0x61c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe0:	222f      	movs	r2, #47	@ 0x2f
 8007fe2:	5c9b      	ldrb	r3, [r3, r2]
 8007fe4:	061a      	lsls	r2, r3, #24
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe8:	212e      	movs	r1, #46	@ 0x2e
 8007fea:	5c5b      	ldrb	r3, [r3, r1]
 8007fec:	041b      	lsls	r3, r3, #16
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff2:	212d      	movs	r1, #45	@ 0x2d
 8007ff4:	5c5b      	ldrb	r3, [r3, r1]
 8007ff6:	021b      	lsls	r3, r3, #8
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ffc:	212c      	movs	r1, #44	@ 0x2c
 8007ffe:	5c52      	ldrb	r2, [r2, r1]
 8008000:	4313      	orrs	r3, r2
 8008002:	0019      	movs	r1, r3
 8008004:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008006:	2389      	movs	r3, #137	@ 0x89
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	50d1      	str	r1, [r2, r3]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800800c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800800e:	2385      	movs	r3, #133	@ 0x85
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	58d3      	ldr	r3, [r2, r3]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	647b      	str	r3, [r7, #68]	@ 0x44
 8008018:	e02c      	b.n	8008074 <find_volume+0x48c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800801a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800801c:	2382      	movs	r3, #130	@ 0x82
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	5ad3      	ldrh	r3, [r2, r3]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <find_volume+0x442>
 8008026:	230d      	movs	r3, #13
 8008028:	e0ec      	b.n	8008204 <find_volume+0x61c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800802a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800802c:	2388      	movs	r3, #136	@ 0x88
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	58d2      	ldr	r2, [r2, r3]
 8008032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008034:	18d1      	adds	r1, r2, r3
 8008036:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008038:	2389      	movs	r3, #137	@ 0x89
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	50d1      	str	r1, [r2, r3]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800803e:	2357      	movs	r3, #87	@ 0x57
 8008040:	18fb      	adds	r3, r7, r3
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d105      	bne.n	8008054 <find_volume+0x46c>
 8008048:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800804a:	2385      	movs	r3, #133	@ 0x85
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	58d3      	ldr	r3, [r2, r3]
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	e00e      	b.n	8008072 <find_volume+0x48a>
 8008054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008056:	2385      	movs	r3, #133	@ 0x85
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	58d2      	ldr	r2, [r2, r3]
 800805c:	0013      	movs	r3, r2
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	189b      	adds	r3, r3, r2
 8008062:	085a      	lsrs	r2, r3, #1
 8008064:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008066:	2385      	movs	r3, #133	@ 0x85
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	58cb      	ldr	r3, [r1, r3]
 800806c:	2101      	movs	r1, #1
 800806e:	400b      	ands	r3, r1
 8008070:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8008072:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008074:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008076:	2386      	movs	r3, #134	@ 0x86
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	58d2      	ldr	r2, [r2, r3]
 800807c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800807e:	4965      	ldr	r1, [pc, #404]	@ (8008214 <find_volume+0x62c>)
 8008080:	468c      	mov	ip, r1
 8008082:	4463      	add	r3, ip
 8008084:	0a5b      	lsrs	r3, r3, #9
 8008086:	429a      	cmp	r2, r3
 8008088:	d201      	bcs.n	800808e <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 800808a:	230d      	movs	r3, #13
 800808c:	e0ba      	b.n	8008204 <find_volume+0x61c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800808e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008090:	2384      	movs	r3, #132	@ 0x84
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	2101      	movs	r1, #1
 8008096:	4249      	negs	r1, r1
 8008098:	50d1      	str	r1, [r2, r3]
 800809a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800809c:	2384      	movs	r3, #132	@ 0x84
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	58d1      	ldr	r1, [r2, r3]
 80080a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080a4:	2383      	movs	r3, #131	@ 0x83
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	50d1      	str	r1, [r2, r3]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80080aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ac:	4a5a      	ldr	r2, [pc, #360]	@ (8008218 <find_volume+0x630>)
 80080ae:	2180      	movs	r1, #128	@ 0x80
 80080b0:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80080b2:	2357      	movs	r3, #87	@ 0x57
 80080b4:	18fb      	adds	r3, r7, r3
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d000      	beq.n	80080be <find_volume+0x4d6>
 80080bc:	e08b      	b.n	80081d6 <find_volume+0x5ee>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80080be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c0:	2231      	movs	r2, #49	@ 0x31
 80080c2:	5c9b      	ldrb	r3, [r3, r2]
 80080c4:	b21b      	sxth	r3, r3
 80080c6:	021b      	lsls	r3, r3, #8
 80080c8:	b21a      	sxth	r2, r3
 80080ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080cc:	2130      	movs	r1, #48	@ 0x30
 80080ce:	5c5b      	ldrb	r3, [r3, r1]
 80080d0:	b21b      	sxth	r3, r3
 80080d2:	4313      	orrs	r3, r2
 80080d4:	b21b      	sxth	r3, r3
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d000      	beq.n	80080dc <find_volume+0x4f4>
 80080da:	e07c      	b.n	80081d6 <find_volume+0x5ee>
		&& move_window(fs, bsect + 1) == FR_OK)
 80080dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e2:	0011      	movs	r1, r2
 80080e4:	0018      	movs	r0, r3
 80080e6:	f7fd fcfb 	bl	8005ae0 <move_window>
 80080ea:	1e03      	subs	r3, r0, #0
 80080ec:	d173      	bne.n	80081d6 <find_volume+0x5ee>
	{
		fs->fsi_flag = 0;
 80080ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f0:	4a49      	ldr	r2, [pc, #292]	@ (8008218 <find_volume+0x630>)
 80080f2:	2100      	movs	r1, #0
 80080f4:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80080f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f8:	4a46      	ldr	r2, [pc, #280]	@ (8008214 <find_volume+0x62c>)
 80080fa:	5c9b      	ldrb	r3, [r3, r2]
 80080fc:	b21b      	sxth	r3, r3
 80080fe:	021b      	lsls	r3, r3, #8
 8008100:	b21a      	sxth	r2, r3
 8008102:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008104:	23ff      	movs	r3, #255	@ 0xff
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	5ccb      	ldrb	r3, [r1, r3]
 800810a:	b21b      	sxth	r3, r3
 800810c:	4313      	orrs	r3, r2
 800810e:	b21b      	sxth	r3, r3
 8008110:	4a42      	ldr	r2, [pc, #264]	@ (800821c <find_volume+0x634>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d15f      	bne.n	80081d6 <find_volume+0x5ee>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008118:	78db      	ldrb	r3, [r3, #3]
 800811a:	061a      	lsls	r2, r3, #24
 800811c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811e:	789b      	ldrb	r3, [r3, #2]
 8008120:	041b      	lsls	r3, r3, #16
 8008122:	431a      	orrs	r2, r3
 8008124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008126:	785b      	ldrb	r3, [r3, #1]
 8008128:	021b      	lsls	r3, r3, #8
 800812a:	4313      	orrs	r3, r2
 800812c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800812e:	7812      	ldrb	r2, [r2, #0]
 8008130:	4313      	orrs	r3, r2
 8008132:	4a3b      	ldr	r2, [pc, #236]	@ (8008220 <find_volume+0x638>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d14e      	bne.n	80081d6 <find_volume+0x5ee>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008138:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800813a:	23e8      	movs	r3, #232	@ 0xe8
 800813c:	33ff      	adds	r3, #255	@ 0xff
 800813e:	5cd3      	ldrb	r3, [r2, r3]
 8008140:	061a      	lsls	r2, r3, #24
 8008142:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008144:	23f3      	movs	r3, #243	@ 0xf3
 8008146:	005b      	lsls	r3, r3, #1
 8008148:	5ccb      	ldrb	r3, [r1, r3]
 800814a:	041b      	lsls	r3, r3, #16
 800814c:	431a      	orrs	r2, r3
 800814e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008150:	23e6      	movs	r3, #230	@ 0xe6
 8008152:	33ff      	adds	r3, #255	@ 0xff
 8008154:	5ccb      	ldrb	r3, [r1, r3]
 8008156:	021b      	lsls	r3, r3, #8
 8008158:	4313      	orrs	r3, r2
 800815a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800815c:	22f2      	movs	r2, #242	@ 0xf2
 800815e:	0052      	lsls	r2, r2, #1
 8008160:	5c8a      	ldrb	r2, [r1, r2]
 8008162:	4313      	orrs	r3, r2
 8008164:	4a2f      	ldr	r2, [pc, #188]	@ (8008224 <find_volume+0x63c>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d135      	bne.n	80081d6 <find_volume+0x5ee>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800816a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800816c:	23ec      	movs	r3, #236	@ 0xec
 800816e:	33ff      	adds	r3, #255	@ 0xff
 8008170:	5cd3      	ldrb	r3, [r2, r3]
 8008172:	061a      	lsls	r2, r3, #24
 8008174:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008176:	23f5      	movs	r3, #245	@ 0xf5
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	5ccb      	ldrb	r3, [r1, r3]
 800817c:	041b      	lsls	r3, r3, #16
 800817e:	431a      	orrs	r2, r3
 8008180:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008182:	23ea      	movs	r3, #234	@ 0xea
 8008184:	33ff      	adds	r3, #255	@ 0xff
 8008186:	5ccb      	ldrb	r3, [r1, r3]
 8008188:	021b      	lsls	r3, r3, #8
 800818a:	4313      	orrs	r3, r2
 800818c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800818e:	22f4      	movs	r2, #244	@ 0xf4
 8008190:	0052      	lsls	r2, r2, #1
 8008192:	5c8a      	ldrb	r2, [r1, r2]
 8008194:	4313      	orrs	r3, r2
 8008196:	0019      	movs	r1, r3
 8008198:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800819a:	2384      	movs	r3, #132	@ 0x84
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80081a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081a2:	23f0      	movs	r3, #240	@ 0xf0
 80081a4:	33ff      	adds	r3, #255	@ 0xff
 80081a6:	5cd3      	ldrb	r3, [r2, r3]
 80081a8:	061a      	lsls	r2, r3, #24
 80081aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80081ac:	23f7      	movs	r3, #247	@ 0xf7
 80081ae:	005b      	lsls	r3, r3, #1
 80081b0:	5ccb      	ldrb	r3, [r1, r3]
 80081b2:	041b      	lsls	r3, r3, #16
 80081b4:	431a      	orrs	r2, r3
 80081b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80081b8:	23ee      	movs	r3, #238	@ 0xee
 80081ba:	33ff      	adds	r3, #255	@ 0xff
 80081bc:	5ccb      	ldrb	r3, [r1, r3]
 80081be:	021b      	lsls	r3, r3, #8
 80081c0:	4313      	orrs	r3, r2
 80081c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80081c4:	22f6      	movs	r2, #246	@ 0xf6
 80081c6:	0052      	lsls	r2, r2, #1
 80081c8:	5c8a      	ldrb	r2, [r1, r2]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	0019      	movs	r1, r3
 80081ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081d0:	2383      	movs	r3, #131	@ 0x83
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	50d1      	str	r1, [r2, r3]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80081d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081d8:	2357      	movs	r3, #87	@ 0x57
 80081da:	18f9      	adds	r1, r7, r3
 80081dc:	2380      	movs	r3, #128	@ 0x80
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	7809      	ldrb	r1, [r1, #0]
 80081e2:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 80081e4:	4b10      	ldr	r3, [pc, #64]	@ (8008228 <find_volume+0x640>)
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	3301      	adds	r3, #1
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008228 <find_volume+0x640>)
 80081ee:	801a      	strh	r2, [r3, #0]
 80081f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008228 <find_volume+0x640>)
 80081f2:	8819      	ldrh	r1, [r3, #0]
 80081f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f6:	4a0d      	ldr	r2, [pc, #52]	@ (800822c <find_volume+0x644>)
 80081f8:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80081fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fc:	0018      	movs	r0, r3
 80081fe:	f7fd fbf1 	bl	80059e4 <clear_lock>
#endif

	return FR_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	0018      	movs	r0, r3
 8008206:	46bd      	mov	sp, r7
 8008208:	b016      	add	sp, #88	@ 0x58
 800820a:	bdb0      	pop	{r4, r5, r7, pc}
 800820c:	00000ff5 	.word	0x00000ff5
 8008210:	0000fff5 	.word	0x0000fff5
 8008214:	000001ff 	.word	0x000001ff
 8008218:	00000205 	.word	0x00000205
 800821c:	ffffaa55 	.word	0xffffaa55
 8008220:	41615252 	.word	0x41615252
 8008224:	61417272 	.word	0x61417272
 8008228:	200006c4 	.word	0x200006c4
 800822c:	00000206 	.word	0x00000206

08008230 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d028      	beq.n	8008294 <validate+0x64>
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	2380      	movs	r3, #128	@ 0x80
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	58d3      	ldr	r3, [r2, r3]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d022      	beq.n	8008294 <validate+0x64>
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	2380      	movs	r3, #128	@ 0x80
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	58d2      	ldr	r2, [r2, r3]
 8008256:	2380      	movs	r3, #128	@ 0x80
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	5cd3      	ldrb	r3, [r2, r3]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d019      	beq.n	8008294 <validate+0x64>
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	2380      	movs	r3, #128	@ 0x80
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	58d3      	ldr	r3, [r2, r3]
 8008268:	4a0e      	ldr	r2, [pc, #56]	@ (80082a4 <validate+0x74>)
 800826a:	5a9a      	ldrh	r2, [r3, r2]
 800826c:	68f9      	ldr	r1, [r7, #12]
 800826e:	2381      	movs	r3, #129	@ 0x81
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	5acb      	ldrh	r3, [r1, r3]
 8008274:	429a      	cmp	r2, r3
 8008276:	d10d      	bne.n	8008294 <validate+0x64>
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	2380      	movs	r3, #128	@ 0x80
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	58d3      	ldr	r3, [r2, r3]
 8008280:	4a09      	ldr	r2, [pc, #36]	@ (80082a8 <validate+0x78>)
 8008282:	5c9b      	ldrb	r3, [r3, r2]
 8008284:	0018      	movs	r0, r3
 8008286:	f7fd f8d5 	bl	8005434 <disk_status>
 800828a:	0003      	movs	r3, r0
 800828c:	001a      	movs	r2, r3
 800828e:	2301      	movs	r3, #1
 8008290:	4013      	ands	r3, r2
 8008292:	d001      	beq.n	8008298 <validate+0x68>
		return FR_INVALID_OBJECT;
 8008294:	2309      	movs	r3, #9
 8008296:	e000      	b.n	800829a <validate+0x6a>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	0018      	movs	r0, r3
 800829c:	46bd      	mov	sp, r7
 800829e:	b004      	add	sp, #16
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	46c0      	nop			@ (mov r8, r8)
 80082a4:	00000206 	.word	0x00000206
 80082a8:	00000201 	.word	0x00000201

080082ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80082ac:	b5b0      	push	{r4, r5, r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	1dfb      	adds	r3, r7, #7
 80082b8:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80082be:	2310      	movs	r3, #16
 80082c0:	18fb      	adds	r3, r7, r3
 80082c2:	0018      	movs	r0, r3
 80082c4:	f7ff fbde 	bl	8007a84 <get_ldnumber>
 80082c8:	0003      	movs	r3, r0
 80082ca:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	da01      	bge.n	80082d6 <f_mount+0x2a>
 80082d2:	230b      	movs	r3, #11
 80082d4:	e034      	b.n	8008340 <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80082d6:	4b1c      	ldr	r3, [pc, #112]	@ (8008348 <f_mount+0x9c>)
 80082d8:	69fa      	ldr	r2, [r7, #28]
 80082da:	0092      	lsls	r2, r2, #2
 80082dc:	58d3      	ldr	r3, [r2, r3]
 80082de:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d008      	beq.n	80082f8 <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	0018      	movs	r0, r3
 80082ea:	f7fd fb7b 	bl	80059e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	2380      	movs	r3, #128	@ 0x80
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	2100      	movs	r1, #0
 80082f6:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	2380      	movs	r3, #128	@ 0x80
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	2100      	movs	r1, #0
 8008306:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008308:	68f9      	ldr	r1, [r7, #12]
 800830a:	4b0f      	ldr	r3, [pc, #60]	@ (8008348 <f_mount+0x9c>)
 800830c:	69fa      	ldr	r2, [r7, #28]
 800830e:	0092      	lsls	r2, r2, #2
 8008310:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <f_mount+0x74>
 8008318:	1dfb      	adds	r3, r7, #7
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d001      	beq.n	8008324 <f_mount+0x78>
 8008320:	2300      	movs	r3, #0
 8008322:	e00d      	b.n	8008340 <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008324:	2517      	movs	r5, #23
 8008326:	197c      	adds	r4, r7, r5
 8008328:	2308      	movs	r3, #8
 800832a:	18f9      	adds	r1, r7, r3
 800832c:	230c      	movs	r3, #12
 800832e:	18fb      	adds	r3, r7, r3
 8008330:	2200      	movs	r2, #0
 8008332:	0018      	movs	r0, r3
 8008334:	f7ff fc58 	bl	8007be8 <find_volume>
 8008338:	0003      	movs	r3, r0
 800833a:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 800833c:	197b      	adds	r3, r7, r5
 800833e:	781b      	ldrb	r3, [r3, #0]
}
 8008340:	0018      	movs	r0, r3
 8008342:	46bd      	mov	sp, r7
 8008344:	b008      	add	sp, #32
 8008346:	bdb0      	pop	{r4, r5, r7, pc}
 8008348:	200006c0 	.word	0x200006c0

0800834c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800834c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800834e:	4cdd      	ldr	r4, [pc, #884]	@ (80086c4 <f_open+0x378>)
 8008350:	44a5      	add	sp, r4
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	4bdb      	ldr	r3, [pc, #876]	@ (80086c8 <f_open+0x37c>)
 800835a:	2196      	movs	r1, #150	@ 0x96
 800835c:	0089      	lsls	r1, r1, #2
 800835e:	185b      	adds	r3, r3, r1
 8008360:	19db      	adds	r3, r3, r7
 8008362:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <f_open+0x22>
 800836a:	2309      	movs	r3, #9
 800836c:	e285      	b.n	800887a <f_open+0x52e>
	fp->fs = 0;			/* Clear file object */
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	2380      	movs	r3, #128	@ 0x80
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	2100      	movs	r1, #0
 8008376:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008378:	4bd3      	ldr	r3, [pc, #844]	@ (80086c8 <f_open+0x37c>)
 800837a:	2096      	movs	r0, #150	@ 0x96
 800837c:	0080      	lsls	r0, r0, #2
 800837e:	181b      	adds	r3, r3, r0
 8008380:	19db      	adds	r3, r3, r7
 8008382:	4ad1      	ldr	r2, [pc, #836]	@ (80086c8 <f_open+0x37c>)
 8008384:	1812      	adds	r2, r2, r0
 8008386:	19d2      	adds	r2, r2, r7
 8008388:	7812      	ldrb	r2, [r2, #0]
 800838a:	211f      	movs	r1, #31
 800838c:	400a      	ands	r2, r1
 800838e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008390:	4bcd      	ldr	r3, [pc, #820]	@ (80086c8 <f_open+0x37c>)
 8008392:	181b      	adds	r3, r3, r0
 8008394:	19db      	adds	r3, r3, r7
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2201      	movs	r2, #1
 800839a:	4393      	bics	r3, r2
 800839c:	b2da      	uxtb	r2, r3
 800839e:	4dcb      	ldr	r5, [pc, #812]	@ (80086cc <f_open+0x380>)
 80083a0:	197c      	adds	r4, r7, r5
 80083a2:	2308      	movs	r3, #8
 80083a4:	18f9      	adds	r1, r7, r3
 80083a6:	231c      	movs	r3, #28
 80083a8:	18fb      	adds	r3, r7, r3
 80083aa:	2080      	movs	r0, #128	@ 0x80
 80083ac:	0080      	lsls	r0, r0, #2
 80083ae:	4684      	mov	ip, r0
 80083b0:	4463      	add	r3, ip
 80083b2:	0018      	movs	r0, r3
 80083b4:	f7ff fc18 	bl	8007be8 <find_volume>
 80083b8:	0003      	movs	r3, r0
 80083ba:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80083bc:	197b      	adds	r3, r7, r5
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d000      	beq.n	80083c6 <f_open+0x7a>
 80083c4:	e256      	b.n	8008874 <f_open+0x528>
		INIT_BUF(dj);
 80083c6:	2380      	movs	r3, #128	@ 0x80
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	0018      	movs	r0, r3
 80083cc:	f002 fa46 	bl	800a85c <ff_memalloc>
 80083d0:	0003      	movs	r3, r0
 80083d2:	2293      	movs	r2, #147	@ 0x93
 80083d4:	0092      	lsls	r2, r2, #2
 80083d6:	18b9      	adds	r1, r7, r2
 80083d8:	600b      	str	r3, [r1, #0]
 80083da:	18bb      	adds	r3, r7, r2
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <f_open+0x9a>
 80083e2:	2311      	movs	r3, #17
 80083e4:	e249      	b.n	800887a <f_open+0x52e>
 80083e6:	4bba      	ldr	r3, [pc, #744]	@ (80086d0 <f_open+0x384>)
 80083e8:	2596      	movs	r5, #150	@ 0x96
 80083ea:	00ad      	lsls	r5, r5, #2
 80083ec:	195b      	adds	r3, r3, r5
 80083ee:	19da      	adds	r2, r3, r7
 80083f0:	2388      	movs	r3, #136	@ 0x88
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	2193      	movs	r1, #147	@ 0x93
 80083f6:	0089      	lsls	r1, r1, #2
 80083f8:	1879      	adds	r1, r7, r1
 80083fa:	6809      	ldr	r1, [r1, #0]
 80083fc:	50d1      	str	r1, [r2, r3]
 80083fe:	4bb4      	ldr	r3, [pc, #720]	@ (80086d0 <f_open+0x384>)
 8008400:	195b      	adds	r3, r3, r5
 8008402:	19da      	adds	r2, r3, r7
 8008404:	2386      	movs	r3, #134	@ 0x86
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	2110      	movs	r1, #16
 800840a:	1879      	adds	r1, r7, r1
 800840c:	50d1      	str	r1, [r2, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	4eae      	ldr	r6, [pc, #696]	@ (80086cc <f_open+0x380>)
 8008412:	19bc      	adds	r4, r7, r6
 8008414:	231c      	movs	r3, #28
 8008416:	18fb      	adds	r3, r7, r3
 8008418:	0011      	movs	r1, r2
 800841a:	0018      	movs	r0, r3
 800841c:	f7ff faaa 	bl	8007974 <follow_path>
 8008420:	0003      	movs	r3, r0
 8008422:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 8008424:	4baa      	ldr	r3, [pc, #680]	@ (80086d0 <f_open+0x384>)
 8008426:	195b      	adds	r3, r3, r5
 8008428:	19da      	adds	r2, r3, r7
 800842a:	2385      	movs	r3, #133	@ 0x85
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	58d3      	ldr	r3, [r2, r3]
 8008430:	2294      	movs	r2, #148	@ 0x94
 8008432:	0092      	lsls	r2, r2, #2
 8008434:	18b9      	adds	r1, r7, r2
 8008436:	600b      	str	r3, [r1, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008438:	19bb      	adds	r3, r7, r6
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d11d      	bne.n	800847c <f_open+0x130>
			if (!dir)	/* Default directory itself */
 8008440:	18bb      	adds	r3, r7, r2
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d103      	bne.n	8008450 <f_open+0x104>
				res = FR_INVALID_NAME;
 8008448:	19bb      	adds	r3, r7, r6
 800844a:	2206      	movs	r2, #6
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	e015      	b.n	800847c <f_open+0x130>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008450:	4b9d      	ldr	r3, [pc, #628]	@ (80086c8 <f_open+0x37c>)
 8008452:	2296      	movs	r2, #150	@ 0x96
 8008454:	0092      	lsls	r2, r2, #2
 8008456:	189b      	adds	r3, r3, r2
 8008458:	19db      	adds	r3, r3, r7
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	2201      	movs	r2, #1
 800845e:	429a      	cmp	r2, r3
 8008460:	419b      	sbcs	r3, r3
 8008462:	425b      	negs	r3, r3
 8008464:	b2db      	uxtb	r3, r3
 8008466:	001a      	movs	r2, r3
 8008468:	4b98      	ldr	r3, [pc, #608]	@ (80086cc <f_open+0x380>)
 800846a:	18fc      	adds	r4, r7, r3
 800846c:	231c      	movs	r3, #28
 800846e:	18fb      	adds	r3, r7, r3
 8008470:	0011      	movs	r1, r2
 8008472:	0018      	movs	r0, r3
 8008474:	f7fd f91c 	bl	80056b0 <chk_lock>
 8008478:	0003      	movs	r3, r0
 800847a:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800847c:	4b92      	ldr	r3, [pc, #584]	@ (80086c8 <f_open+0x37c>)
 800847e:	2296      	movs	r2, #150	@ 0x96
 8008480:	0092      	lsls	r2, r2, #2
 8008482:	189b      	adds	r3, r3, r2
 8008484:	19db      	adds	r3, r3, r7
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	221c      	movs	r2, #28
 800848a:	4013      	ands	r3, r2
 800848c:	d100      	bne.n	8008490 <f_open+0x144>
 800848e:	e106      	b.n	800869e <f_open+0x352>
			if (res != FR_OK) {					/* No file, create new */
 8008490:	4a8e      	ldr	r2, [pc, #568]	@ (80086cc <f_open+0x380>)
 8008492:	18bb      	adds	r3, r7, r2
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d02a      	beq.n	80084f0 <f_open+0x1a4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800849a:	18bb      	adds	r3, r7, r2
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d10f      	bne.n	80084c2 <f_open+0x176>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80084a2:	f7fd f973 	bl	800578c <enq_lock>
 80084a6:	1e03      	subs	r3, r0, #0
 80084a8:	d007      	beq.n	80084ba <f_open+0x16e>
 80084aa:	231c      	movs	r3, #28
 80084ac:	18fb      	adds	r3, r7, r3
 80084ae:	0018      	movs	r0, r3
 80084b0:	f7fe fe30 	bl	8007114 <dir_register>
 80084b4:	0003      	movs	r3, r0
 80084b6:	001a      	movs	r2, r3
 80084b8:	e000      	b.n	80084bc <f_open+0x170>
 80084ba:	2212      	movs	r2, #18
 80084bc:	4b83      	ldr	r3, [pc, #524]	@ (80086cc <f_open+0x380>)
 80084be:	18fb      	adds	r3, r7, r3
 80084c0:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80084c2:	4b81      	ldr	r3, [pc, #516]	@ (80086c8 <f_open+0x37c>)
 80084c4:	2096      	movs	r0, #150	@ 0x96
 80084c6:	0080      	lsls	r0, r0, #2
 80084c8:	181b      	adds	r3, r3, r0
 80084ca:	19db      	adds	r3, r3, r7
 80084cc:	4a7e      	ldr	r2, [pc, #504]	@ (80086c8 <f_open+0x37c>)
 80084ce:	1812      	adds	r2, r2, r0
 80084d0:	19d2      	adds	r2, r2, r7
 80084d2:	7812      	ldrb	r2, [r2, #0]
 80084d4:	2108      	movs	r1, #8
 80084d6:	430a      	orrs	r2, r1
 80084d8:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80084da:	4b7d      	ldr	r3, [pc, #500]	@ (80086d0 <f_open+0x384>)
 80084dc:	181b      	adds	r3, r3, r0
 80084de:	19da      	adds	r2, r3, r7
 80084e0:	2385      	movs	r3, #133	@ 0x85
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	58d3      	ldr	r3, [r2, r3]
 80084e6:	2294      	movs	r2, #148	@ 0x94
 80084e8:	0092      	lsls	r2, r2, #2
 80084ea:	18ba      	adds	r2, r7, r2
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	e01b      	b.n	8008528 <f_open+0x1dc>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80084f0:	2394      	movs	r3, #148	@ 0x94
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	18fb      	adds	r3, r7, r3
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	330b      	adds	r3, #11
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	001a      	movs	r2, r3
 80084fe:	2311      	movs	r3, #17
 8008500:	4013      	ands	r3, r2
 8008502:	d004      	beq.n	800850e <f_open+0x1c2>
					res = FR_DENIED;
 8008504:	4b71      	ldr	r3, [pc, #452]	@ (80086cc <f_open+0x380>)
 8008506:	18fb      	adds	r3, r7, r3
 8008508:	2207      	movs	r2, #7
 800850a:	701a      	strb	r2, [r3, #0]
 800850c:	e00c      	b.n	8008528 <f_open+0x1dc>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800850e:	4b6e      	ldr	r3, [pc, #440]	@ (80086c8 <f_open+0x37c>)
 8008510:	2296      	movs	r2, #150	@ 0x96
 8008512:	0092      	lsls	r2, r2, #2
 8008514:	189b      	adds	r3, r3, r2
 8008516:	19db      	adds	r3, r3, r7
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	2204      	movs	r2, #4
 800851c:	4013      	ands	r3, r2
 800851e:	d003      	beq.n	8008528 <f_open+0x1dc>
						res = FR_EXIST;
 8008520:	4b6a      	ldr	r3, [pc, #424]	@ (80086cc <f_open+0x380>)
 8008522:	18fb      	adds	r3, r7, r3
 8008524:	2208      	movs	r2, #8
 8008526:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008528:	4868      	ldr	r0, [pc, #416]	@ (80086cc <f_open+0x380>)
 800852a:	183b      	adds	r3, r7, r0
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d000      	beq.n	8008534 <f_open+0x1e8>
 8008532:	e0e6      	b.n	8008702 <f_open+0x3b6>
 8008534:	4b64      	ldr	r3, [pc, #400]	@ (80086c8 <f_open+0x37c>)
 8008536:	2496      	movs	r4, #150	@ 0x96
 8008538:	00a4      	lsls	r4, r4, #2
 800853a:	191b      	adds	r3, r3, r4
 800853c:	19db      	adds	r3, r3, r7
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2208      	movs	r2, #8
 8008542:	4013      	ands	r3, r2
 8008544:	d100      	bne.n	8008548 <f_open+0x1fc>
 8008546:	e0dc      	b.n	8008702 <f_open+0x3b6>
				dw = GET_FATTIME();				/* Created time */
 8008548:	f7fc ff6e 	bl	8005428 <get_fattime>
 800854c:	0003      	movs	r3, r0
 800854e:	2692      	movs	r6, #146	@ 0x92
 8008550:	00b6      	lsls	r6, r6, #2
 8008552:	19ba      	adds	r2, r7, r6
 8008554:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008556:	2194      	movs	r1, #148	@ 0x94
 8008558:	0089      	lsls	r1, r1, #2
 800855a:	187b      	adds	r3, r7, r1
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	330e      	adds	r3, #14
 8008560:	19ba      	adds	r2, r7, r6
 8008562:	6812      	ldr	r2, [r2, #0]
 8008564:	b2d2      	uxtb	r2, r2
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	19bb      	adds	r3, r7, r6
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	b29b      	uxth	r3, r3
 800856e:	0a1b      	lsrs	r3, r3, #8
 8008570:	b29a      	uxth	r2, r3
 8008572:	187b      	adds	r3, r7, r1
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	330f      	adds	r3, #15
 8008578:	b2d2      	uxtb	r2, r2
 800857a:	701a      	strb	r2, [r3, #0]
 800857c:	19bb      	adds	r3, r7, r6
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	0c1a      	lsrs	r2, r3, #16
 8008582:	187b      	adds	r3, r7, r1
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3310      	adds	r3, #16
 8008588:	b2d2      	uxtb	r2, r2
 800858a:	701a      	strb	r2, [r3, #0]
 800858c:	19bb      	adds	r3, r7, r6
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	0e1a      	lsrs	r2, r3, #24
 8008592:	187b      	adds	r3, r7, r1
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3311      	adds	r3, #17
 8008598:	b2d2      	uxtb	r2, r2
 800859a:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800859c:	187b      	adds	r3, r7, r1
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	330b      	adds	r3, #11
 80085a2:	2200      	movs	r2, #0
 80085a4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80085a6:	187b      	adds	r3, r7, r1
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	331c      	adds	r3, #28
 80085ac:	2200      	movs	r2, #0
 80085ae:	701a      	strb	r2, [r3, #0]
 80085b0:	187b      	adds	r3, r7, r1
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	331d      	adds	r3, #29
 80085b6:	2200      	movs	r2, #0
 80085b8:	701a      	strb	r2, [r3, #0]
 80085ba:	187b      	adds	r3, r7, r1
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	331e      	adds	r3, #30
 80085c0:	2200      	movs	r2, #0
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	187b      	adds	r3, r7, r1
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	331f      	adds	r3, #31
 80085ca:	2200      	movs	r2, #0
 80085cc:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80085ce:	4b40      	ldr	r3, [pc, #256]	@ (80086d0 <f_open+0x384>)
 80085d0:	0025      	movs	r5, r4
 80085d2:	191b      	adds	r3, r3, r4
 80085d4:	19da      	adds	r2, r3, r7
 80085d6:	2380      	movs	r3, #128	@ 0x80
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	58d3      	ldr	r3, [r2, r3]
 80085dc:	000c      	movs	r4, r1
 80085de:	187a      	adds	r2, r7, r1
 80085e0:	6812      	ldr	r2, [r2, #0]
 80085e2:	0011      	movs	r1, r2
 80085e4:	0018      	movs	r0, r3
 80085e6:	f7fe f926 	bl	8006836 <ld_clust>
 80085ea:	0003      	movs	r3, r0
 80085ec:	2191      	movs	r1, #145	@ 0x91
 80085ee:	0089      	lsls	r1, r1, #2
 80085f0:	187a      	adds	r2, r7, r1
 80085f2:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80085f4:	193b      	adds	r3, r7, r4
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2100      	movs	r1, #0
 80085fa:	0018      	movs	r0, r3
 80085fc:	f7fe f94a 	bl	8006894 <st_clust>
				dj.fs->wflag = 1;
 8008600:	4b33      	ldr	r3, [pc, #204]	@ (80086d0 <f_open+0x384>)
 8008602:	195b      	adds	r3, r3, r5
 8008604:	19da      	adds	r2, r3, r7
 8008606:	2380      	movs	r3, #128	@ 0x80
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	58d2      	ldr	r2, [r2, r3]
 800860c:	2381      	movs	r3, #129	@ 0x81
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	2101      	movs	r1, #1
 8008612:	54d1      	strb	r1, [r2, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 8008614:	2191      	movs	r1, #145	@ 0x91
 8008616:	0089      	lsls	r1, r1, #2
 8008618:	187b      	adds	r3, r7, r1
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d100      	bne.n	8008622 <f_open+0x2d6>
 8008620:	e06f      	b.n	8008702 <f_open+0x3b6>
					dw = dj.fs->winsect;
 8008622:	4b2b      	ldr	r3, [pc, #172]	@ (80086d0 <f_open+0x384>)
 8008624:	195b      	adds	r3, r3, r5
 8008626:	19da      	adds	r2, r3, r7
 8008628:	2380      	movs	r3, #128	@ 0x80
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	58d2      	ldr	r2, [r2, r3]
 800862e:	238b      	movs	r3, #139	@ 0x8b
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	58d3      	ldr	r3, [r2, r3]
 8008634:	19ba      	adds	r2, r7, r6
 8008636:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8008638:	4b25      	ldr	r3, [pc, #148]	@ (80086d0 <f_open+0x384>)
 800863a:	195b      	adds	r3, r3, r5
 800863c:	19da      	adds	r2, r3, r7
 800863e:	2380      	movs	r3, #128	@ 0x80
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	58d3      	ldr	r3, [r2, r3]
 8008644:	4821      	ldr	r0, [pc, #132]	@ (80086cc <f_open+0x380>)
 8008646:	183c      	adds	r4, r7, r0
 8008648:	187a      	adds	r2, r7, r1
 800864a:	6812      	ldr	r2, [r2, #0]
 800864c:	0011      	movs	r1, r2
 800864e:	0018      	movs	r0, r3
 8008650:	f7fd fd6a 	bl	8006128 <remove_chain>
 8008654:	0003      	movs	r3, r0
 8008656:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 8008658:	481c      	ldr	r0, [pc, #112]	@ (80086cc <f_open+0x380>)
 800865a:	183b      	adds	r3, r7, r0
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d14f      	bne.n	8008702 <f_open+0x3b6>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008662:	4b1b      	ldr	r3, [pc, #108]	@ (80086d0 <f_open+0x384>)
 8008664:	195b      	adds	r3, r3, r5
 8008666:	19da      	adds	r2, r3, r7
 8008668:	2380      	movs	r3, #128	@ 0x80
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	58d2      	ldr	r2, [r2, r3]
 800866e:	2191      	movs	r1, #145	@ 0x91
 8008670:	0089      	lsls	r1, r1, #2
 8008672:	187b      	adds	r3, r7, r1
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	1e59      	subs	r1, r3, #1
 8008678:	2383      	movs	r3, #131	@ 0x83
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	50d1      	str	r1, [r2, r3]
						res = move_window(dj.fs, dw);
 800867e:	4b14      	ldr	r3, [pc, #80]	@ (80086d0 <f_open+0x384>)
 8008680:	195b      	adds	r3, r3, r5
 8008682:	19da      	adds	r2, r3, r7
 8008684:	2380      	movs	r3, #128	@ 0x80
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	58d3      	ldr	r3, [r2, r3]
 800868a:	183c      	adds	r4, r7, r0
 800868c:	19ba      	adds	r2, r7, r6
 800868e:	6812      	ldr	r2, [r2, #0]
 8008690:	0011      	movs	r1, r2
 8008692:	0018      	movs	r0, r3
 8008694:	f7fd fa24 	bl	8005ae0 <move_window>
 8008698:	0003      	movs	r3, r0
 800869a:	7023      	strb	r3, [r4, #0]
 800869c:	e031      	b.n	8008702 <f_open+0x3b6>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800869e:	490b      	ldr	r1, [pc, #44]	@ (80086cc <f_open+0x380>)
 80086a0:	187b      	adds	r3, r7, r1
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d12c      	bne.n	8008702 <f_open+0x3b6>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80086a8:	2394      	movs	r3, #148	@ 0x94
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	18fb      	adds	r3, r7, r3
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	330b      	adds	r3, #11
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	001a      	movs	r2, r3
 80086b6:	2310      	movs	r3, #16
 80086b8:	4013      	ands	r3, r2
 80086ba:	d00b      	beq.n	80086d4 <f_open+0x388>
					res = FR_NO_FILE;
 80086bc:	187b      	adds	r3, r7, r1
 80086be:	2204      	movs	r2, #4
 80086c0:	701a      	strb	r2, [r3, #0]
 80086c2:	e01e      	b.n	8008702 <f_open+0x3b6>
 80086c4:	fffffda4 	.word	0xfffffda4
 80086c8:	fffffdaf 	.word	0xfffffdaf
 80086cc:	00000257 	.word	0x00000257
 80086d0:	fffffdc4 	.word	0xfffffdc4
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80086d4:	4b6c      	ldr	r3, [pc, #432]	@ (8008888 <f_open+0x53c>)
 80086d6:	2296      	movs	r2, #150	@ 0x96
 80086d8:	0092      	lsls	r2, r2, #2
 80086da:	189b      	adds	r3, r3, r2
 80086dc:	19db      	adds	r3, r3, r7
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2202      	movs	r2, #2
 80086e2:	4013      	ands	r3, r2
 80086e4:	d00d      	beq.n	8008702 <f_open+0x3b6>
 80086e6:	2394      	movs	r3, #148	@ 0x94
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	18fb      	adds	r3, r7, r3
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	330b      	adds	r3, #11
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	001a      	movs	r2, r3
 80086f4:	2301      	movs	r3, #1
 80086f6:	4013      	ands	r3, r2
 80086f8:	d003      	beq.n	8008702 <f_open+0x3b6>
						res = FR_DENIED;
 80086fa:	4b64      	ldr	r3, [pc, #400]	@ (800888c <f_open+0x540>)
 80086fc:	18fb      	adds	r3, r7, r3
 80086fe:	2207      	movs	r2, #7
 8008700:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 8008702:	4b62      	ldr	r3, [pc, #392]	@ (800888c <f_open+0x540>)
 8008704:	18fb      	adds	r3, r7, r3
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d148      	bne.n	800879e <f_open+0x452>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800870c:	4b5e      	ldr	r3, [pc, #376]	@ (8008888 <f_open+0x53c>)
 800870e:	2196      	movs	r1, #150	@ 0x96
 8008710:	0089      	lsls	r1, r1, #2
 8008712:	185b      	adds	r3, r3, r1
 8008714:	19db      	adds	r3, r3, r7
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	2208      	movs	r2, #8
 800871a:	4013      	ands	r3, r2
 800871c:	d009      	beq.n	8008732 <f_open+0x3e6>
				mode |= FA__WRITTEN;
 800871e:	4b5a      	ldr	r3, [pc, #360]	@ (8008888 <f_open+0x53c>)
 8008720:	185b      	adds	r3, r3, r1
 8008722:	19db      	adds	r3, r3, r7
 8008724:	4a58      	ldr	r2, [pc, #352]	@ (8008888 <f_open+0x53c>)
 8008726:	1852      	adds	r2, r2, r1
 8008728:	19d2      	adds	r2, r2, r7
 800872a:	7812      	ldrb	r2, [r2, #0]
 800872c:	2120      	movs	r1, #32
 800872e:	430a      	orrs	r2, r1
 8008730:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008732:	4b57      	ldr	r3, [pc, #348]	@ (8008890 <f_open+0x544>)
 8008734:	2096      	movs	r0, #150	@ 0x96
 8008736:	0080      	lsls	r0, r0, #2
 8008738:	181b      	adds	r3, r3, r0
 800873a:	19da      	adds	r2, r3, r7
 800873c:	2380      	movs	r3, #128	@ 0x80
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	58d2      	ldr	r2, [r2, r3]
 8008742:	238b      	movs	r3, #139	@ 0x8b
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	58d1      	ldr	r1, [r2, r3]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	2387      	movs	r3, #135	@ 0x87
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	50d1      	str	r1, [r2, r3]
			fp->dir_ptr = dir;
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	2388      	movs	r3, #136	@ 0x88
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	2194      	movs	r1, #148	@ 0x94
 8008758:	0089      	lsls	r1, r1, #2
 800875a:	1879      	adds	r1, r7, r1
 800875c:	6809      	ldr	r1, [r1, #0]
 800875e:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008760:	4b49      	ldr	r3, [pc, #292]	@ (8008888 <f_open+0x53c>)
 8008762:	181b      	adds	r3, r3, r0
 8008764:	19db      	adds	r3, r3, r7
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	2201      	movs	r2, #1
 800876a:	429a      	cmp	r2, r3
 800876c:	419b      	sbcs	r3, r3
 800876e:	425b      	negs	r3, r3
 8008770:	b2db      	uxtb	r3, r3
 8008772:	001a      	movs	r2, r3
 8008774:	231c      	movs	r3, #28
 8008776:	18fb      	adds	r3, r7, r3
 8008778:	0011      	movs	r1, r2
 800877a:	0018      	movs	r0, r3
 800877c:	f7fd f826 	bl	80057cc <inc_lock>
 8008780:	0001      	movs	r1, r0
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	238a      	movs	r3, #138	@ 0x8a
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	50d1      	str	r1, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	238a      	movs	r3, #138	@ 0x8a
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	58d3      	ldr	r3, [r2, r3]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d103      	bne.n	800879e <f_open+0x452>
 8008796:	4b3d      	ldr	r3, [pc, #244]	@ (800888c <f_open+0x540>)
 8008798:	18fb      	adds	r3, r7, r3
 800879a:	2202      	movs	r2, #2
 800879c:	701a      	strb	r2, [r3, #0]
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 800879e:	2393      	movs	r3, #147	@ 0x93
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	18fb      	adds	r3, r7, r3
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	0018      	movs	r0, r3
 80087a8:	f002 f865 	bl	800a876 <ff_memfree>

		if (res == FR_OK) {
 80087ac:	4b37      	ldr	r3, [pc, #220]	@ (800888c <f_open+0x540>)
 80087ae:	18fb      	adds	r3, r7, r3
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d15e      	bne.n	8008874 <f_open+0x528>
			fp->flag = mode;					/* File access mode */
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	4a33      	ldr	r2, [pc, #204]	@ (8008888 <f_open+0x53c>)
 80087ba:	2596      	movs	r5, #150	@ 0x96
 80087bc:	00ad      	lsls	r5, r5, #2
 80087be:	1952      	adds	r2, r2, r5
 80087c0:	19d2      	adds	r2, r2, r7
 80087c2:	4934      	ldr	r1, [pc, #208]	@ (8008894 <f_open+0x548>)
 80087c4:	7812      	ldrb	r2, [r2, #0]
 80087c6:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4a33      	ldr	r2, [pc, #204]	@ (8008898 <f_open+0x54c>)
 80087cc:	2100      	movs	r1, #0
 80087ce:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80087d0:	4b2f      	ldr	r3, [pc, #188]	@ (8008890 <f_open+0x544>)
 80087d2:	195b      	adds	r3, r3, r5
 80087d4:	19da      	adds	r2, r3, r7
 80087d6:	2380      	movs	r3, #128	@ 0x80
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	58d3      	ldr	r3, [r2, r3]
 80087dc:	2494      	movs	r4, #148	@ 0x94
 80087de:	00a4      	lsls	r4, r4, #2
 80087e0:	193a      	adds	r2, r7, r4
 80087e2:	6812      	ldr	r2, [r2, #0]
 80087e4:	0011      	movs	r1, r2
 80087e6:	0018      	movs	r0, r3
 80087e8:	f7fe f825 	bl	8006836 <ld_clust>
 80087ec:	0001      	movs	r1, r0
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	2384      	movs	r3, #132	@ 0x84
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	50d1      	str	r1, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80087f6:	0021      	movs	r1, r4
 80087f8:	187b      	adds	r3, r7, r1
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	331f      	adds	r3, #31
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	061a      	lsls	r2, r3, #24
 8008802:	187b      	adds	r3, r7, r1
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	331e      	adds	r3, #30
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	041b      	lsls	r3, r3, #16
 800880c:	431a      	orrs	r2, r3
 800880e:	187b      	adds	r3, r7, r1
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	331d      	adds	r3, #29
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	021b      	lsls	r3, r3, #8
 8008818:	4313      	orrs	r3, r2
 800881a:	187a      	adds	r2, r7, r1
 800881c:	6812      	ldr	r2, [r2, #0]
 800881e:	321c      	adds	r2, #28
 8008820:	7812      	ldrb	r2, [r2, #0]
 8008822:	4313      	orrs	r3, r2
 8008824:	0019      	movs	r1, r3
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	2383      	movs	r3, #131	@ 0x83
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	50d1      	str	r1, [r2, r3]
			fp->fptr = 0;						/* File pointer */
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	2382      	movs	r3, #130	@ 0x82
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	2100      	movs	r1, #0
 8008836:	50d1      	str	r1, [r2, r3]
			fp->dsect = 0;
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	2386      	movs	r3, #134	@ 0x86
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	2100      	movs	r1, #0
 8008840:	50d1      	str	r1, [r2, r3]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	2389      	movs	r3, #137	@ 0x89
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	2100      	movs	r1, #0
 800884a:	50d1      	str	r1, [r2, r3]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800884c:	4b10      	ldr	r3, [pc, #64]	@ (8008890 <f_open+0x544>)
 800884e:	195b      	adds	r3, r3, r5
 8008850:	19da      	adds	r2, r3, r7
 8008852:	2380      	movs	r3, #128	@ 0x80
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	58d1      	ldr	r1, [r2, r3]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	2380      	movs	r3, #128	@ 0x80
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	2380      	movs	r3, #128	@ 0x80
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	58d3      	ldr	r3, [r2, r3]
 8008868:	4a0a      	ldr	r2, [pc, #40]	@ (8008894 <f_open+0x548>)
 800886a:	5a99      	ldrh	r1, [r3, r2]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	2381      	movs	r3, #129	@ 0x81
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	52d1      	strh	r1, [r2, r3]
		}
	}

	LEAVE_FF(dj.fs, res);
 8008874:	4b05      	ldr	r3, [pc, #20]	@ (800888c <f_open+0x540>)
 8008876:	18fb      	adds	r3, r7, r3
 8008878:	781b      	ldrb	r3, [r3, #0]
}
 800887a:	0018      	movs	r0, r3
 800887c:	46bd      	mov	sp, r7
 800887e:	2397      	movs	r3, #151	@ 0x97
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	449d      	add	sp, r3
 8008884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008886:	46c0      	nop			@ (mov r8, r8)
 8008888:	fffffdaf 	.word	0xfffffdaf
 800888c:	00000257 	.word	0x00000257
 8008890:	fffffdc4 	.word	0xfffffdc4
 8008894:	00000206 	.word	0x00000206
 8008898:	00000207 	.word	0x00000207

0800889c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800889c:	b5b0      	push	{r4, r5, r7, lr}
 800889e:	b08a      	sub	sp, #40	@ 0x28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80088b4:	2517      	movs	r5, #23
 80088b6:	197c      	adds	r4, r7, r5
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	0018      	movs	r0, r3
 80088bc:	f7ff fcb8 	bl	8008230 <validate>
 80088c0:	0003      	movs	r3, r0
 80088c2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80088c4:	197b      	adds	r3, r7, r5
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <f_write+0x36>
 80088cc:	197b      	adds	r3, r7, r5
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	e1c5      	b.n	8008c5e <f_write+0x3c2>
	if (fp->err)							/* Check error */
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	4acf      	ldr	r2, [pc, #828]	@ (8008c14 <f_write+0x378>)
 80088d6:	5c9b      	ldrb	r3, [r3, r2]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d003      	beq.n	80088e4 <f_write+0x48>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4acd      	ldr	r2, [pc, #820]	@ (8008c14 <f_write+0x378>)
 80088e0:	5c9b      	ldrb	r3, [r3, r2]
 80088e2:	e1bc      	b.n	8008c5e <f_write+0x3c2>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4acc      	ldr	r2, [pc, #816]	@ (8008c18 <f_write+0x37c>)
 80088e8:	5c9b      	ldrb	r3, [r3, r2]
 80088ea:	001a      	movs	r2, r3
 80088ec:	2302      	movs	r3, #2
 80088ee:	4013      	ands	r3, r2
 80088f0:	d101      	bne.n	80088f6 <f_write+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 80088f2:	2307      	movs	r3, #7
 80088f4:	e1b3      	b.n	8008c5e <f_write+0x3c2>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	2382      	movs	r3, #130	@ 0x82
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	58d2      	ldr	r2, [r2, r3]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	18d2      	adds	r2, r2, r3
 8008902:	68f9      	ldr	r1, [r7, #12]
 8008904:	2382      	movs	r3, #130	@ 0x82
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	58cb      	ldr	r3, [r1, r3]
 800890a:	429a      	cmp	r2, r3
 800890c:	d300      	bcc.n	8008910 <f_write+0x74>
 800890e:	e17c      	b.n	8008c0a <f_write+0x36e>
 8008910:	2300      	movs	r3, #0
 8008912:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8008914:	e179      	b.n	8008c0a <f_write+0x36e>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	2382      	movs	r3, #130	@ 0x82
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	58d3      	ldr	r3, [r2, r3]
 800891e:	05db      	lsls	r3, r3, #23
 8008920:	0ddb      	lsrs	r3, r3, #23
 8008922:	d000      	beq.n	8008926 <f_write+0x8a>
 8008924:	e133      	b.n	8008b8e <f_write+0x2f2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	2382      	movs	r3, #130	@ 0x82
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	58d3      	ldr	r3, [r2, r3]
 800892e:	0a5b      	lsrs	r3, r3, #9
 8008930:	b2da      	uxtb	r2, r3
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	2380      	movs	r3, #128	@ 0x80
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	58cb      	ldr	r3, [r1, r3]
 800893a:	49b8      	ldr	r1, [pc, #736]	@ (8008c1c <f_write+0x380>)
 800893c:	5c5b      	ldrb	r3, [r3, r1]
 800893e:	3b01      	subs	r3, #1
 8008940:	b2d9      	uxtb	r1, r3
 8008942:	2016      	movs	r0, #22
 8008944:	183b      	adds	r3, r7, r0
 8008946:	400a      	ands	r2, r1
 8008948:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
 800894a:	183b      	adds	r3, r7, r0
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d15d      	bne.n	8008a0e <f_write+0x172>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	2382      	movs	r3, #130	@ 0x82
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	58d3      	ldr	r3, [r2, r3]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d112      	bne.n	8008984 <f_write+0xe8>
					clst = fp->sclust;		/* Follow from the origin */
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	2384      	movs	r3, #132	@ 0x84
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	58d3      	ldr	r3, [r2, r3]
 8008966:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8008968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896a:	2b00      	cmp	r3, #0
 800896c:	d129      	bne.n	80089c2 <f_write+0x126>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	2380      	movs	r3, #128	@ 0x80
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	58d3      	ldr	r3, [r2, r3]
 8008976:	2100      	movs	r1, #0
 8008978:	0018      	movs	r0, r3
 800897a:	f7fd fc45 	bl	8006208 <create_chain>
 800897e:	0003      	movs	r3, r0
 8008980:	627b      	str	r3, [r7, #36]	@ 0x24
 8008982:	e01e      	b.n	80089c2 <f_write+0x126>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	2389      	movs	r3, #137	@ 0x89
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	58d3      	ldr	r3, [r2, r3]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <f_write+0x10c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	2382      	movs	r3, #130	@ 0x82
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	58d2      	ldr	r2, [r2, r3]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	0011      	movs	r1, r2
 800899c:	0018      	movs	r0, r3
 800899e:	f7fd fce9 	bl	8006374 <clmt_clust>
 80089a2:	0003      	movs	r3, r0
 80089a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80089a6:	e00c      	b.n	80089c2 <f_write+0x126>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	2380      	movs	r3, #128	@ 0x80
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	58d0      	ldr	r0, [r2, r3]
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	2385      	movs	r3, #133	@ 0x85
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	58d3      	ldr	r3, [r2, r3]
 80089b8:	0019      	movs	r1, r3
 80089ba:	f7fd fc25 	bl	8006208 <create_chain>
 80089be:	0003      	movs	r3, r0
 80089c0:	627b      	str	r3, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d100      	bne.n	80089ca <f_write+0x12e>
 80089c8:	e12c      	b.n	8008c24 <f_write+0x388>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80089ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d105      	bne.n	80089dc <f_write+0x140>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4a90      	ldr	r2, [pc, #576]	@ (8008c14 <f_write+0x378>)
 80089d4:	2102      	movs	r1, #2
 80089d6:	5499      	strb	r1, [r3, r2]
 80089d8:	2302      	movs	r3, #2
 80089da:	e140      	b.n	8008c5e <f_write+0x3c2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80089dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089de:	3301      	adds	r3, #1
 80089e0:	d105      	bne.n	80089ee <f_write+0x152>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	4a8b      	ldr	r2, [pc, #556]	@ (8008c14 <f_write+0x378>)
 80089e6:	2101      	movs	r1, #1
 80089e8:	5499      	strb	r1, [r3, r2]
 80089ea:	2301      	movs	r3, #1
 80089ec:	e137      	b.n	8008c5e <f_write+0x3c2>
				fp->clust = clst;			/* Update current cluster */
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	2385      	movs	r3, #133	@ 0x85
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80089f6:	50d1      	str	r1, [r2, r3]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	2384      	movs	r3, #132	@ 0x84
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	58d3      	ldr	r3, [r2, r3]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d104      	bne.n	8008a0e <f_write+0x172>
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	2384      	movs	r3, #132	@ 0x84
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a0c:	50d1      	str	r1, [r2, r3]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	4a81      	ldr	r2, [pc, #516]	@ (8008c18 <f_write+0x37c>)
 8008a12:	5c9b      	ldrb	r3, [r3, r2]
 8008a14:	001a      	movs	r2, r3
 8008a16:	2340      	movs	r3, #64	@ 0x40
 8008a18:	4013      	ands	r3, r2
 8008a1a:	d01e      	beq.n	8008a5a <f_write+0x1be>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	2380      	movs	r3, #128	@ 0x80
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	58d3      	ldr	r3, [r2, r3]
 8008a24:	4a7e      	ldr	r2, [pc, #504]	@ (8008c20 <f_write+0x384>)
 8008a26:	5c98      	ldrb	r0, [r3, r2]
 8008a28:	68f9      	ldr	r1, [r7, #12]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	2386      	movs	r3, #134	@ 0x86
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	58d2      	ldr	r2, [r2, r3]
 8008a32:	2301      	movs	r3, #1
 8008a34:	f7fc fd78 	bl	8005528 <disk_write>
 8008a38:	1e03      	subs	r3, r0, #0
 8008a3a:	d005      	beq.n	8008a48 <f_write+0x1ac>
					ABORT(fp->fs, FR_DISK_ERR);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4a75      	ldr	r2, [pc, #468]	@ (8008c14 <f_write+0x378>)
 8008a40:	2101      	movs	r1, #1
 8008a42:	5499      	strb	r1, [r3, r2]
 8008a44:	2301      	movs	r3, #1
 8008a46:	e10a      	b.n	8008c5e <f_write+0x3c2>
				fp->flag &= ~FA__DIRTY;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4a73      	ldr	r2, [pc, #460]	@ (8008c18 <f_write+0x37c>)
 8008a4c:	5c9b      	ldrb	r3, [r3, r2]
 8008a4e:	2240      	movs	r2, #64	@ 0x40
 8008a50:	4393      	bics	r3, r2
 8008a52:	b2d9      	uxtb	r1, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4a70      	ldr	r2, [pc, #448]	@ (8008c18 <f_write+0x37c>)
 8008a58:	5499      	strb	r1, [r3, r2]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	2380      	movs	r3, #128	@ 0x80
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	58d0      	ldr	r0, [r2, r3]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	2385      	movs	r3, #133	@ 0x85
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	58d3      	ldr	r3, [r2, r3]
 8008a6a:	0019      	movs	r1, r3
 8008a6c:	f7fd f948 	bl	8005d00 <clust2sect>
 8008a70:	0003      	movs	r3, r0
 8008a72:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d105      	bne.n	8008a86 <f_write+0x1ea>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4a65      	ldr	r2, [pc, #404]	@ (8008c14 <f_write+0x378>)
 8008a7e:	2102      	movs	r1, #2
 8008a80:	5499      	strb	r1, [r3, r2]
 8008a82:	2302      	movs	r3, #2
 8008a84:	e0eb      	b.n	8008c5e <f_write+0x3c2>
			sect += csect;
 8008a86:	2016      	movs	r0, #22
 8008a88:	183b      	adds	r3, r7, r0
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	18d3      	adds	r3, r2, r3
 8008a90:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	0a5b      	lsrs	r3, r3, #9
 8008a96:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d04e      	beq.n	8008b3c <f_write+0x2a0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008a9e:	183b      	adds	r3, r7, r0
 8008aa0:	781a      	ldrb	r2, [r3, #0]
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	18d3      	adds	r3, r2, r3
 8008aa6:	68f9      	ldr	r1, [r7, #12]
 8008aa8:	2280      	movs	r2, #128	@ 0x80
 8008aaa:	0092      	lsls	r2, r2, #2
 8008aac:	588a      	ldr	r2, [r1, r2]
 8008aae:	495b      	ldr	r1, [pc, #364]	@ (8008c1c <f_write+0x380>)
 8008ab0:	5c52      	ldrb	r2, [r2, r1]
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d90a      	bls.n	8008acc <f_write+0x230>
					cc = fp->fs->csize - csect;
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	2380      	movs	r3, #128	@ 0x80
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	58d3      	ldr	r3, [r2, r3]
 8008abe:	4a57      	ldr	r2, [pc, #348]	@ (8008c1c <f_write+0x380>)
 8008ac0:	5c9b      	ldrb	r3, [r3, r2]
 8008ac2:	001a      	movs	r2, r3
 8008ac4:	183b      	adds	r3, r7, r0
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	2380      	movs	r3, #128	@ 0x80
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	58d3      	ldr	r3, [r2, r3]
 8008ad4:	4a52      	ldr	r2, [pc, #328]	@ (8008c20 <f_write+0x384>)
 8008ad6:	5c98      	ldrb	r0, [r3, r2]
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	69b9      	ldr	r1, [r7, #24]
 8008ade:	f7fc fd23 	bl	8005528 <disk_write>
 8008ae2:	1e03      	subs	r3, r0, #0
 8008ae4:	d005      	beq.n	8008af2 <f_write+0x256>
					ABORT(fp->fs, FR_DISK_ERR);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4a4a      	ldr	r2, [pc, #296]	@ (8008c14 <f_write+0x378>)
 8008aea:	2101      	movs	r1, #1
 8008aec:	5499      	strb	r1, [r3, r2]
 8008aee:	2301      	movs	r3, #1
 8008af0:	e0b5      	b.n	8008c5e <f_write+0x3c2>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	2386      	movs	r3, #134	@ 0x86
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	58d2      	ldr	r2, [r2, r3]
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	69fa      	ldr	r2, [r7, #28]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d917      	bls.n	8008b34 <f_write+0x298>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	2386      	movs	r3, #134	@ 0x86
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	58d2      	ldr	r2, [r2, r3]
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	025b      	lsls	r3, r3, #9
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	18d3      	adds	r3, r2, r3
 8008b18:	2280      	movs	r2, #128	@ 0x80
 8008b1a:	0092      	lsls	r2, r2, #2
 8008b1c:	0019      	movs	r1, r3
 8008b1e:	f7fc fd53 	bl	80055c8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	4a3c      	ldr	r2, [pc, #240]	@ (8008c18 <f_write+0x37c>)
 8008b26:	5c9b      	ldrb	r3, [r3, r2]
 8008b28:	2240      	movs	r2, #64	@ 0x40
 8008b2a:	4393      	bics	r3, r2
 8008b2c:	b2d9      	uxtb	r1, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	4a39      	ldr	r2, [pc, #228]	@ (8008c18 <f_write+0x37c>)
 8008b32:	5499      	strb	r1, [r3, r2]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	025b      	lsls	r3, r3, #9
 8008b38:	623b      	str	r3, [r7, #32]
				continue;
 8008b3a:	e04e      	b.n	8008bda <f_write+0x33e>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	2386      	movs	r3, #134	@ 0x86
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	58d3      	ldr	r3, [r2, r3]
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d01c      	beq.n	8008b84 <f_write+0x2e8>
				if (fp->fptr < fp->fsize &&
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	2382      	movs	r3, #130	@ 0x82
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	58d2      	ldr	r2, [r2, r3]
 8008b52:	68f9      	ldr	r1, [r7, #12]
 8008b54:	2383      	movs	r3, #131	@ 0x83
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	58cb      	ldr	r3, [r1, r3]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d212      	bcs.n	8008b84 <f_write+0x2e8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	2380      	movs	r3, #128	@ 0x80
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	58d3      	ldr	r3, [r2, r3]
 8008b66:	4a2e      	ldr	r2, [pc, #184]	@ (8008c20 <f_write+0x384>)
 8008b68:	5c98      	ldrb	r0, [r3, r2]
 8008b6a:	68f9      	ldr	r1, [r7, #12]
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f7fc fcb2 	bl	80054d8 <disk_read>
 8008b74:	1e03      	subs	r3, r0, #0
				if (fp->fptr < fp->fsize &&
 8008b76:	d005      	beq.n	8008b84 <f_write+0x2e8>
						ABORT(fp->fs, FR_DISK_ERR);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4a26      	ldr	r2, [pc, #152]	@ (8008c14 <f_write+0x378>)
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	5499      	strb	r1, [r3, r2]
 8008b80:	2301      	movs	r3, #1
 8008b82:	e06c      	b.n	8008c5e <f_write+0x3c2>
			}
#endif
			fp->dsect = sect;
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	2386      	movs	r3, #134	@ 0x86
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	6939      	ldr	r1, [r7, #16]
 8008b8c:	50d1      	str	r1, [r2, r3]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	2382      	movs	r3, #130	@ 0x82
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	58d3      	ldr	r3, [r2, r3]
 8008b96:	05db      	lsls	r3, r3, #23
 8008b98:	0ddb      	lsrs	r3, r3, #23
 8008b9a:	2280      	movs	r2, #128	@ 0x80
 8008b9c:	0092      	lsls	r2, r2, #2
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8008ba2:	6a3a      	ldr	r2, [r7, #32]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d901      	bls.n	8008bae <f_write+0x312>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	2382      	movs	r3, #130	@ 0x82
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	58d3      	ldr	r3, [r2, r3]
 8008bb6:	05db      	lsls	r3, r3, #23
 8008bb8:	0ddb      	lsrs	r3, r3, #23
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	18d3      	adds	r3, r2, r3
 8008bbe:	6a3a      	ldr	r2, [r7, #32]
 8008bc0:	69b9      	ldr	r1, [r7, #24]
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	f7fc fd00 	bl	80055c8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4a13      	ldr	r2, [pc, #76]	@ (8008c18 <f_write+0x37c>)
 8008bcc:	5c9b      	ldrb	r3, [r3, r2]
 8008bce:	2240      	movs	r2, #64	@ 0x40
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	b2d9      	uxtb	r1, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4a10      	ldr	r2, [pc, #64]	@ (8008c18 <f_write+0x37c>)
 8008bd8:	5499      	strb	r1, [r3, r2]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	18d3      	adds	r3, r2, r3
 8008be0:	61bb      	str	r3, [r7, #24]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	2382      	movs	r3, #130	@ 0x82
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	58d2      	ldr	r2, [r2, r3]
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	18d1      	adds	r1, r2, r3
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	2382      	movs	r3, #130	@ 0x82
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	50d1      	str	r1, [r2, r3]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	18d2      	adds	r2, r2, r3
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d000      	beq.n	8008c12 <f_write+0x376>
 8008c10:	e681      	b.n	8008916 <f_write+0x7a>
 8008c12:	e008      	b.n	8008c26 <f_write+0x38a>
 8008c14:	00000207 	.word	0x00000207
 8008c18:	00000206 	.word	0x00000206
 8008c1c:	00000202 	.word	0x00000202
 8008c20:	00000201 	.word	0x00000201
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c24:	46c0      	nop			@ (mov r8, r8)
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	2382      	movs	r3, #130	@ 0x82
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	58d2      	ldr	r2, [r2, r3]
 8008c2e:	68f9      	ldr	r1, [r7, #12]
 8008c30:	2383      	movs	r3, #131	@ 0x83
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	58cb      	ldr	r3, [r1, r3]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d907      	bls.n	8008c4a <f_write+0x3ae>
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	2382      	movs	r3, #130	@ 0x82
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	58d1      	ldr	r1, [r2, r3]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	2383      	movs	r3, #131	@ 0x83
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	50d1      	str	r1, [r2, r3]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	4a06      	ldr	r2, [pc, #24]	@ (8008c68 <f_write+0x3cc>)
 8008c4e:	5c9b      	ldrb	r3, [r3, r2]
 8008c50:	2220      	movs	r2, #32
 8008c52:	4313      	orrs	r3, r2
 8008c54:	b2d9      	uxtb	r1, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4a03      	ldr	r2, [pc, #12]	@ (8008c68 <f_write+0x3cc>)
 8008c5a:	5499      	strb	r1, [r3, r2]

	LEAVE_FF(fp->fs, FR_OK);
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	0018      	movs	r0, r3
 8008c60:	46bd      	mov	sp, r7
 8008c62:	b00a      	add	sp, #40	@ 0x28
 8008c64:	bdb0      	pop	{r4, r5, r7, pc}
 8008c66:	46c0      	nop			@ (mov r8, r8)
 8008c68:	00000206 	.word	0x00000206

08008c6c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008c6c:	b5b0      	push	{r4, r5, r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008c74:	2517      	movs	r5, #23
 8008c76:	197c      	adds	r4, r7, r5
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	0018      	movs	r0, r3
 8008c7c:	f7ff fad8 	bl	8008230 <validate>
 8008c80:	0003      	movs	r3, r0
 8008c82:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008c84:	197b      	adds	r3, r7, r5
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d000      	beq.n	8008c8e <f_sync+0x22>
 8008c8c:	e0b9      	b.n	8008e02 <f_sync+0x196>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a5f      	ldr	r2, [pc, #380]	@ (8008e10 <f_sync+0x1a4>)
 8008c92:	5c9b      	ldrb	r3, [r3, r2]
 8008c94:	001a      	movs	r2, r3
 8008c96:	2320      	movs	r3, #32
 8008c98:	4013      	ands	r3, r2
 8008c9a:	d100      	bne.n	8008c9e <f_sync+0x32>
 8008c9c:	e0b1      	b.n	8008e02 <f_sync+0x196>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a5b      	ldr	r2, [pc, #364]	@ (8008e10 <f_sync+0x1a4>)
 8008ca2:	5c9b      	ldrb	r3, [r3, r2]
 8008ca4:	001a      	movs	r2, r3
 8008ca6:	2340      	movs	r3, #64	@ 0x40
 8008ca8:	4013      	ands	r3, r2
 8008caa:	d01a      	beq.n	8008ce2 <f_sync+0x76>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	2380      	movs	r3, #128	@ 0x80
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	58d3      	ldr	r3, [r2, r3]
 8008cb4:	4a57      	ldr	r2, [pc, #348]	@ (8008e14 <f_sync+0x1a8>)
 8008cb6:	5c98      	ldrb	r0, [r3, r2]
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	2386      	movs	r3, #134	@ 0x86
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	58d2      	ldr	r2, [r2, r3]
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	f7fc fc30 	bl	8005528 <disk_write>
 8008cc8:	1e03      	subs	r3, r0, #0
 8008cca:	d001      	beq.n	8008cd0 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e09b      	b.n	8008e08 <f_sync+0x19c>
				fp->flag &= ~FA__DIRTY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a4f      	ldr	r2, [pc, #316]	@ (8008e10 <f_sync+0x1a4>)
 8008cd4:	5c9b      	ldrb	r3, [r3, r2]
 8008cd6:	2240      	movs	r2, #64	@ 0x40
 8008cd8:	4393      	bics	r3, r2
 8008cda:	b2d9      	uxtb	r1, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a4c      	ldr	r2, [pc, #304]	@ (8008e10 <f_sync+0x1a4>)
 8008ce0:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	2380      	movs	r3, #128	@ 0x80
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	58d0      	ldr	r0, [r2, r3]
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	2387      	movs	r3, #135	@ 0x87
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	58d3      	ldr	r3, [r2, r3]
 8008cf2:	2517      	movs	r5, #23
 8008cf4:	197c      	adds	r4, r7, r5
 8008cf6:	0019      	movs	r1, r3
 8008cf8:	f7fc fef2 	bl	8005ae0 <move_window>
 8008cfc:	0003      	movs	r3, r0
 8008cfe:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 8008d00:	002c      	movs	r4, r5
 8008d02:	193b      	adds	r3, r7, r4
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d17b      	bne.n	8008e02 <f_sync+0x196>
				dir = fp->dir_ptr;
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	2388      	movs	r3, #136	@ 0x88
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	58d3      	ldr	r3, [r2, r3]
 8008d12:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	330b      	adds	r3, #11
 8008d18:	781a      	ldrb	r2, [r3, #0]
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	330b      	adds	r3, #11
 8008d1e:	2120      	movs	r1, #32
 8008d20:	430a      	orrs	r2, r1
 8008d22:	b2d2      	uxtb	r2, r2
 8008d24:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	2383      	movs	r3, #131	@ 0x83
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	58d2      	ldr	r2, [r2, r3]
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	331c      	adds	r3, #28
 8008d32:	b2d2      	uxtb	r2, r2
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	2383      	movs	r3, #131	@ 0x83
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	58d3      	ldr	r3, [r2, r3]
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	0a1b      	lsrs	r3, r3, #8
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	331d      	adds	r3, #29
 8008d48:	b2d2      	uxtb	r2, r2
 8008d4a:	701a      	strb	r2, [r3, #0]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	2383      	movs	r3, #131	@ 0x83
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	58d3      	ldr	r3, [r2, r3]
 8008d54:	0c1a      	lsrs	r2, r3, #16
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	331e      	adds	r3, #30
 8008d5a:	b2d2      	uxtb	r2, r2
 8008d5c:	701a      	strb	r2, [r3, #0]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	2383      	movs	r3, #131	@ 0x83
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	58d3      	ldr	r3, [r2, r3]
 8008d66:	0e1a      	lsrs	r2, r3, #24
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	331f      	adds	r3, #31
 8008d6c:	b2d2      	uxtb	r2, r2
 8008d6e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	2384      	movs	r3, #132	@ 0x84
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	58d2      	ldr	r2, [r2, r3]
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	0011      	movs	r1, r2
 8008d7c:	0018      	movs	r0, r3
 8008d7e:	f7fd fd89 	bl	8006894 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008d82:	f7fc fb51 	bl	8005428 <get_fattime>
 8008d86:	0003      	movs	r3, r0
 8008d88:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	3316      	adds	r3, #22
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	b2d2      	uxtb	r2, r2
 8008d92:	701a      	strb	r2, [r3, #0]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	0a1b      	lsrs	r3, r3, #8
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	3317      	adds	r3, #23
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	701a      	strb	r2, [r3, #0]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	0c1a      	lsrs	r2, r3, #16
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	3318      	adds	r3, #24
 8008dac:	b2d2      	uxtb	r2, r2
 8008dae:	701a      	strb	r2, [r3, #0]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	0e1a      	lsrs	r2, r3, #24
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	3319      	adds	r3, #25
 8008db8:	b2d2      	uxtb	r2, r2
 8008dba:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	3312      	adds	r3, #18
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	701a      	strb	r2, [r3, #0]
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	3313      	adds	r3, #19
 8008dc8:	2200      	movs	r2, #0
 8008dca:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a10      	ldr	r2, [pc, #64]	@ (8008e10 <f_sync+0x1a4>)
 8008dd0:	5c9b      	ldrb	r3, [r3, r2]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	4393      	bics	r3, r2
 8008dd6:	b2d9      	uxtb	r1, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a0d      	ldr	r2, [pc, #52]	@ (8008e10 <f_sync+0x1a4>)
 8008ddc:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	2380      	movs	r3, #128	@ 0x80
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	58d2      	ldr	r2, [r2, r3]
 8008de6:	2381      	movs	r3, #129	@ 0x81
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	2101      	movs	r1, #1
 8008dec:	54d1      	strb	r1, [r2, r3]
				res = sync_fs(fp->fs);
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	2380      	movs	r3, #128	@ 0x80
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	58d3      	ldr	r3, [r2, r3]
 8008df6:	193c      	adds	r4, r7, r4
 8008df8:	0018      	movs	r0, r3
 8008dfa:	f7fc fead 	bl	8005b58 <sync_fs>
 8008dfe:	0003      	movs	r3, r0
 8008e00:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008e02:	2317      	movs	r3, #23
 8008e04:	18fb      	adds	r3, r7, r3
 8008e06:	781b      	ldrb	r3, [r3, #0]
}
 8008e08:	0018      	movs	r0, r3
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	b006      	add	sp, #24
 8008e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8008e10:	00000206 	.word	0x00000206
 8008e14:	00000201 	.word	0x00000201

08008e18 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008e18:	b5b0      	push	{r4, r5, r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008e20:	250f      	movs	r5, #15
 8008e22:	197c      	adds	r4, r7, r5
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	0018      	movs	r0, r3
 8008e28:	f7ff ff20 	bl	8008c6c <f_sync>
 8008e2c:	0003      	movs	r3, r0
 8008e2e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8008e30:	197b      	adds	r3, r7, r5
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d11f      	bne.n	8008e78 <f_close+0x60>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008e38:	197c      	adds	r4, r7, r5
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f7ff f9f7 	bl	8008230 <validate>
 8008e42:	0003      	movs	r3, r0
 8008e44:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8008e46:	0029      	movs	r1, r5
 8008e48:	187b      	adds	r3, r7, r1
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d113      	bne.n	8008e78 <f_close+0x60>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	238a      	movs	r3, #138	@ 0x8a
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	58d3      	ldr	r3, [r2, r3]
 8008e58:	000d      	movs	r5, r1
 8008e5a:	187c      	adds	r4, r7, r1
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	f7fc fd6d 	bl	800593c <dec_lock>
 8008e62:	0003      	movs	r3, r0
 8008e64:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8008e66:	197b      	adds	r3, r7, r5
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d104      	bne.n	8008e78 <f_close+0x60>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	2380      	movs	r3, #128	@ 0x80
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	2100      	movs	r1, #0
 8008e76:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008e78:	230f      	movs	r3, #15
 8008e7a:	18fb      	adds	r3, r7, r3
 8008e7c:	781b      	ldrb	r3, [r3, #0]
}
 8008e7e:	0018      	movs	r0, r3
 8008e80:	46bd      	mov	sp, r7
 8008e82:	b004      	add	sp, #16
 8008e84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008e88 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008e88:	b5b0      	push	{r4, r5, r7, lr}
 8008e8a:	b090      	sub	sp, #64	@ 0x40
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8008e92:	253f      	movs	r5, #63	@ 0x3f
 8008e94:	197c      	adds	r4, r7, r5
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	0018      	movs	r0, r3
 8008e9a:	f7ff f9c9 	bl	8008230 <validate>
 8008e9e:	0003      	movs	r3, r0
 8008ea0:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008ea2:	197b      	adds	r3, r7, r5
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <f_lseek+0x28>
 8008eaa:	197b      	adds	r3, r7, r5
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	e28c      	b.n	80093ca <f_lseek+0x542>
	if (fp->err)						/* Check error */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4ada      	ldr	r2, [pc, #872]	@ (800921c <f_lseek+0x394>)
 8008eb4:	5c9b      	ldrb	r3, [r3, r2]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4ad7      	ldr	r2, [pc, #860]	@ (800921c <f_lseek+0x394>)
 8008ebe:	5c9b      	ldrb	r3, [r3, r2]
 8008ec0:	e283      	b.n	80093ca <f_lseek+0x542>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	2389      	movs	r3, #137	@ 0x89
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	58d3      	ldr	r3, [r2, r3]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d100      	bne.n	8008ed0 <f_lseek+0x48>
 8008ece:	e103      	b.n	80090d8 <f_lseek+0x250>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	d16c      	bne.n	8008fb0 <f_lseek+0x128>
			tbl = fp->cltbl;
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	2389      	movs	r3, #137	@ 0x89
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	58d3      	ldr	r3, [r2, r3]
 8008ede:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee2:	1d1a      	adds	r2, r3, #4
 8008ee4:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	617b      	str	r3, [r7, #20]
 8008eea:	2302      	movs	r3, #2
 8008eec:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	2384      	movs	r3, #132	@ 0x84
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	58d3      	ldr	r3, [r2, r3]
 8008ef6:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d045      	beq.n	8008f8a <f_lseek+0x102>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	613b      	str	r3, [r7, #16]
 8008f02:	2300      	movs	r3, #0
 8008f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f08:	3302      	adds	r3, #2
 8008f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f12:	3301      	adds	r3, #1
 8008f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	2380      	movs	r3, #128	@ 0x80
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	58d3      	ldr	r3, [r2, r3]
 8008f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f20:	0011      	movs	r1, r2
 8008f22:	0018      	movs	r0, r3
 8008f24:	f7fc ff10 	bl	8005d48 <get_fat>
 8008f28:	0003      	movs	r3, r0
 8008f2a:	633b      	str	r3, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d805      	bhi.n	8008f3e <f_lseek+0xb6>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4ab9      	ldr	r2, [pc, #740]	@ (800921c <f_lseek+0x394>)
 8008f36:	2102      	movs	r1, #2
 8008f38:	5499      	strb	r1, [r3, r2]
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e245      	b.n	80093ca <f_lseek+0x542>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f40:	3301      	adds	r3, #1
 8008f42:	d105      	bne.n	8008f50 <f_lseek+0xc8>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4ab5      	ldr	r2, [pc, #724]	@ (800921c <f_lseek+0x394>)
 8008f48:	2101      	movs	r1, #1
 8008f4a:	5499      	strb	r1, [r3, r2]
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e23c      	b.n	80093ca <f_lseek+0x542>
					} while (cl == pcl + 1);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3301      	adds	r3, #1
 8008f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d0d8      	beq.n	8008f0c <f_lseek+0x84>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008f5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d809      	bhi.n	8008f76 <f_lseek+0xee>
						*tbl++ = ncl; *tbl++ = tcl;
 8008f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f64:	1d1a      	adds	r2, r3, #4
 8008f66:	627a      	str	r2, [r7, #36]	@ 0x24
 8008f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f6e:	1d1a      	adds	r2, r3, #4
 8008f70:	627a      	str	r2, [r7, #36]	@ 0x24
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	2380      	movs	r3, #128	@ 0x80
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	58d2      	ldr	r2, [r2, r3]
 8008f7e:	2385      	movs	r3, #133	@ 0x85
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	58d3      	ldr	r3, [r2, r3]
 8008f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d3b9      	bcc.n	8008efe <f_lseek+0x76>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	2389      	movs	r3, #137	@ 0x89
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	58d3      	ldr	r3, [r2, r3]
 8008f92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f94:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8008f96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d803      	bhi.n	8008fa6 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	e20e      	b.n	80093c4 <f_lseek+0x53c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008fa6:	233f      	movs	r3, #63	@ 0x3f
 8008fa8:	18fb      	adds	r3, r7, r3
 8008faa:	2211      	movs	r2, #17
 8008fac:	701a      	strb	r2, [r3, #0]
 8008fae:	e209      	b.n	80093c4 <f_lseek+0x53c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	2383      	movs	r3, #131	@ 0x83
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	58d3      	ldr	r3, [r2, r3]
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d904      	bls.n	8008fc8 <f_lseek+0x140>
				ofs = fp->fsize;
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	2383      	movs	r3, #131	@ 0x83
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	58d3      	ldr	r3, [r2, r3]
 8008fc6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	2382      	movs	r3, #130	@ 0x82
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	50d1      	str	r1, [r2, r3]
			if (ofs) {
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d100      	bne.n	8008fda <f_lseek+0x152>
 8008fd8:	e1f4      	b.n	80093c4 <f_lseek+0x53c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	1e5a      	subs	r2, r3, #1
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	0011      	movs	r1, r2
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	f7fd f9c6 	bl	8006374 <clmt_clust>
 8008fe8:	0001      	movs	r1, r0
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	2385      	movs	r3, #133	@ 0x85
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	50d1      	str	r1, [r2, r3]
				dsc = clust2sect(fp->fs, fp->clust);
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	2380      	movs	r3, #128	@ 0x80
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	58d0      	ldr	r0, [r2, r3]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	2385      	movs	r3, #133	@ 0x85
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	58d3      	ldr	r3, [r2, r3]
 8009002:	0019      	movs	r1, r3
 8009004:	f7fc fe7c 	bl	8005d00 <clust2sect>
 8009008:	0003      	movs	r3, r0
 800900a:	61bb      	str	r3, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d105      	bne.n	800901e <f_lseek+0x196>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a81      	ldr	r2, [pc, #516]	@ (800921c <f_lseek+0x394>)
 8009016:	2102      	movs	r1, #2
 8009018:	5499      	strb	r1, [r3, r2]
 800901a:	2302      	movs	r3, #2
 800901c:	e1d5      	b.n	80093ca <f_lseek+0x542>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	3b01      	subs	r3, #1
 8009022:	0a5b      	lsrs	r3, r3, #9
 8009024:	6879      	ldr	r1, [r7, #4]
 8009026:	2280      	movs	r2, #128	@ 0x80
 8009028:	0092      	lsls	r2, r2, #2
 800902a:	588a      	ldr	r2, [r1, r2]
 800902c:	497c      	ldr	r1, [pc, #496]	@ (8009220 <f_lseek+0x398>)
 800902e:	5c52      	ldrb	r2, [r2, r1]
 8009030:	3a01      	subs	r2, #1
 8009032:	4013      	ands	r3, r2
 8009034:	69ba      	ldr	r2, [r7, #24]
 8009036:	18d3      	adds	r3, r2, r3
 8009038:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	2382      	movs	r3, #130	@ 0x82
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	58d3      	ldr	r3, [r2, r3]
 8009042:	05db      	lsls	r3, r3, #23
 8009044:	0ddb      	lsrs	r3, r3, #23
 8009046:	d100      	bne.n	800904a <f_lseek+0x1c2>
 8009048:	e1bc      	b.n	80093c4 <f_lseek+0x53c>
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	2386      	movs	r3, #134	@ 0x86
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	58d3      	ldr	r3, [r2, r3]
 8009052:	69ba      	ldr	r2, [r7, #24]
 8009054:	429a      	cmp	r2, r3
 8009056:	d100      	bne.n	800905a <f_lseek+0x1d2>
 8009058:	e1b4      	b.n	80093c4 <f_lseek+0x53c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a71      	ldr	r2, [pc, #452]	@ (8009224 <f_lseek+0x39c>)
 800905e:	5c9b      	ldrb	r3, [r3, r2]
 8009060:	001a      	movs	r2, r3
 8009062:	2340      	movs	r3, #64	@ 0x40
 8009064:	4013      	ands	r3, r2
 8009066:	d01e      	beq.n	80090a6 <f_lseek+0x21e>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	2380      	movs	r3, #128	@ 0x80
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	58d3      	ldr	r3, [r2, r3]
 8009070:	4a6d      	ldr	r2, [pc, #436]	@ (8009228 <f_lseek+0x3a0>)
 8009072:	5c98      	ldrb	r0, [r3, r2]
 8009074:	6879      	ldr	r1, [r7, #4]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	2386      	movs	r3, #134	@ 0x86
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	58d2      	ldr	r2, [r2, r3]
 800907e:	2301      	movs	r3, #1
 8009080:	f7fc fa52 	bl	8005528 <disk_write>
 8009084:	1e03      	subs	r3, r0, #0
 8009086:	d005      	beq.n	8009094 <f_lseek+0x20c>
							ABORT(fp->fs, FR_DISK_ERR);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a64      	ldr	r2, [pc, #400]	@ (800921c <f_lseek+0x394>)
 800908c:	2101      	movs	r1, #1
 800908e:	5499      	strb	r1, [r3, r2]
 8009090:	2301      	movs	r3, #1
 8009092:	e19a      	b.n	80093ca <f_lseek+0x542>
						fp->flag &= ~FA__DIRTY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a63      	ldr	r2, [pc, #396]	@ (8009224 <f_lseek+0x39c>)
 8009098:	5c9b      	ldrb	r3, [r3, r2]
 800909a:	2240      	movs	r2, #64	@ 0x40
 800909c:	4393      	bics	r3, r2
 800909e:	b2d9      	uxtb	r1, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a60      	ldr	r2, [pc, #384]	@ (8009224 <f_lseek+0x39c>)
 80090a4:	5499      	strb	r1, [r3, r2]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	2380      	movs	r3, #128	@ 0x80
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	58d3      	ldr	r3, [r2, r3]
 80090ae:	4a5e      	ldr	r2, [pc, #376]	@ (8009228 <f_lseek+0x3a0>)
 80090b0:	5c98      	ldrb	r0, [r3, r2]
 80090b2:	6879      	ldr	r1, [r7, #4]
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	2301      	movs	r3, #1
 80090b8:	f7fc fa0e 	bl	80054d8 <disk_read>
 80090bc:	1e03      	subs	r3, r0, #0
 80090be:	d005      	beq.n	80090cc <f_lseek+0x244>
						ABORT(fp->fs, FR_DISK_ERR);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a56      	ldr	r2, [pc, #344]	@ (800921c <f_lseek+0x394>)
 80090c4:	2101      	movs	r1, #1
 80090c6:	5499      	strb	r1, [r3, r2]
 80090c8:	2301      	movs	r3, #1
 80090ca:	e17e      	b.n	80093ca <f_lseek+0x542>
#endif
					fp->dsect = dsc;
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	2386      	movs	r3, #134	@ 0x86
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	69b9      	ldr	r1, [r7, #24]
 80090d4:	50d1      	str	r1, [r2, r3]
 80090d6:	e175      	b.n	80093c4 <f_lseek+0x53c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	2383      	movs	r3, #131	@ 0x83
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	58d3      	ldr	r3, [r2, r3]
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d90b      	bls.n	80090fe <f_lseek+0x276>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a4e      	ldr	r2, [pc, #312]	@ (8009224 <f_lseek+0x39c>)
 80090ea:	5c9b      	ldrb	r3, [r3, r2]
 80090ec:	001a      	movs	r2, r3
 80090ee:	2302      	movs	r3, #2
 80090f0:	4013      	ands	r3, r2
 80090f2:	d104      	bne.n	80090fe <f_lseek+0x276>
#endif
			) ofs = fp->fsize;
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	2383      	movs	r3, #131	@ 0x83
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	58d3      	ldr	r3, [r2, r3]
 80090fc:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	2382      	movs	r3, #130	@ 0x82
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	58d3      	ldr	r3, [r2, r3]
 8009106:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	637b      	str	r3, [r7, #52]	@ 0x34
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	2382      	movs	r3, #130	@ 0x82
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009114:	50d1      	str	r1, [r2, r3]
		if (ofs) {
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d100      	bne.n	800911e <f_lseek+0x296>
 800911c:	e0eb      	b.n	80092f6 <f_lseek+0x46e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	2380      	movs	r3, #128	@ 0x80
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	58d3      	ldr	r3, [r2, r3]
 8009126:	4a3e      	ldr	r2, [pc, #248]	@ (8009220 <f_lseek+0x398>)
 8009128:	5c9b      	ldrb	r3, [r3, r2]
 800912a:	025b      	lsls	r3, r3, #9
 800912c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d027      	beq.n	8009184 <f_lseek+0x2fc>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	3b01      	subs	r3, #1
 8009138:	69f9      	ldr	r1, [r7, #28]
 800913a:	0018      	movs	r0, r3
 800913c:	f7f7 f800 	bl	8000140 <__udivsi3>
 8009140:	0003      	movs	r3, r0
 8009142:	001c      	movs	r4, r3
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	3b01      	subs	r3, #1
 8009148:	69f9      	ldr	r1, [r7, #28]
 800914a:	0018      	movs	r0, r3
 800914c:	f7f6 fff8 	bl	8000140 <__udivsi3>
 8009150:	0003      	movs	r3, r0
			if (ifptr > 0 &&
 8009152:	429c      	cmp	r4, r3
 8009154:	d316      	bcc.n	8009184 <f_lseek+0x2fc>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	3b01      	subs	r3, #1
 800915a:	69fa      	ldr	r2, [r7, #28]
 800915c:	4252      	negs	r2, r2
 800915e:	401a      	ands	r2, r3
 8009160:	0011      	movs	r1, r2
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	2382      	movs	r3, #130	@ 0x82
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	50d1      	str	r1, [r2, r3]
				ofs -= fp->fptr;
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	2382      	movs	r3, #130	@ 0x82
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	58d3      	ldr	r3, [r2, r3]
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	2385      	movs	r3, #133	@ 0x85
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	58d3      	ldr	r3, [r2, r3]
 8009180:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009182:	e02d      	b.n	80091e0 <f_lseek+0x358>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	2384      	movs	r3, #132	@ 0x84
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	58d3      	ldr	r3, [r2, r3]
 800918c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800918e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009190:	2b00      	cmp	r3, #0
 8009192:	d120      	bne.n	80091d6 <f_lseek+0x34e>
					clst = create_chain(fp->fs, 0);
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	2380      	movs	r3, #128	@ 0x80
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	58d3      	ldr	r3, [r2, r3]
 800919c:	2100      	movs	r1, #0
 800919e:	0018      	movs	r0, r3
 80091a0:	f7fd f832 	bl	8006208 <create_chain>
 80091a4:	0003      	movs	r3, r0
 80091a6:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80091a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d105      	bne.n	80091ba <f_lseek+0x332>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a1a      	ldr	r2, [pc, #104]	@ (800921c <f_lseek+0x394>)
 80091b2:	2102      	movs	r1, #2
 80091b4:	5499      	strb	r1, [r3, r2]
 80091b6:	2302      	movs	r3, #2
 80091b8:	e107      	b.n	80093ca <f_lseek+0x542>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80091ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091bc:	3301      	adds	r3, #1
 80091be:	d105      	bne.n	80091cc <f_lseek+0x344>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a16      	ldr	r2, [pc, #88]	@ (800921c <f_lseek+0x394>)
 80091c4:	2101      	movs	r1, #1
 80091c6:	5499      	strb	r1, [r3, r2]
 80091c8:	2301      	movs	r3, #1
 80091ca:	e0fe      	b.n	80093ca <f_lseek+0x542>
					fp->sclust = clst;
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	2384      	movs	r3, #132	@ 0x84
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80091d4:	50d1      	str	r1, [r2, r3]
				}
#endif
				fp->clust = clst;
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	2385      	movs	r3, #133	@ 0x85
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80091de:	50d1      	str	r1, [r2, r3]
			}
			if (clst != 0) {
 80091e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d100      	bne.n	80091e8 <f_lseek+0x360>
 80091e6:	e086      	b.n	80092f6 <f_lseek+0x46e>
				while (ofs > bcs) {						/* Cluster following loop */
 80091e8:	e05a      	b.n	80092a0 <f_lseek+0x418>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a0d      	ldr	r2, [pc, #52]	@ (8009224 <f_lseek+0x39c>)
 80091ee:	5c9b      	ldrb	r3, [r3, r2]
 80091f0:	001a      	movs	r2, r3
 80091f2:	2302      	movs	r3, #2
 80091f4:	4013      	ands	r3, r2
 80091f6:	d019      	beq.n	800922c <f_lseek+0x3a4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	2380      	movs	r3, #128	@ 0x80
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	58d3      	ldr	r3, [r2, r3]
 8009200:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009202:	0011      	movs	r1, r2
 8009204:	0018      	movs	r0, r3
 8009206:	f7fc ffff 	bl	8006208 <create_chain>
 800920a:	0003      	movs	r3, r0
 800920c:	63bb      	str	r3, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800920e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009210:	2b00      	cmp	r3, #0
 8009212:	d116      	bne.n	8009242 <f_lseek+0x3ba>
							ofs = bcs; break;
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	603b      	str	r3, [r7, #0]
 8009218:	e046      	b.n	80092a8 <f_lseek+0x420>
 800921a:	46c0      	nop			@ (mov r8, r8)
 800921c:	00000207 	.word	0x00000207
 8009220:	00000202 	.word	0x00000202
 8009224:	00000206 	.word	0x00000206
 8009228:	00000201 	.word	0x00000201
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	2380      	movs	r3, #128	@ 0x80
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	58d3      	ldr	r3, [r2, r3]
 8009234:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009236:	0011      	movs	r1, r2
 8009238:	0018      	movs	r0, r3
 800923a:	f7fc fd85 	bl	8005d48 <get_fat>
 800923e:	0003      	movs	r3, r0
 8009240:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009244:	3301      	adds	r3, #1
 8009246:	d105      	bne.n	8009254 <f_lseek+0x3cc>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a62      	ldr	r2, [pc, #392]	@ (80093d4 <f_lseek+0x54c>)
 800924c:	2101      	movs	r1, #1
 800924e:	5499      	strb	r1, [r3, r2]
 8009250:	2301      	movs	r3, #1
 8009252:	e0ba      	b.n	80093ca <f_lseek+0x542>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8009254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009256:	2b01      	cmp	r3, #1
 8009258:	d909      	bls.n	800926e <f_lseek+0x3e6>
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	2380      	movs	r3, #128	@ 0x80
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	58d2      	ldr	r2, [r2, r3]
 8009262:	2385      	movs	r3, #133	@ 0x85
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	58d3      	ldr	r3, [r2, r3]
 8009268:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800926a:	429a      	cmp	r2, r3
 800926c:	d305      	bcc.n	800927a <f_lseek+0x3f2>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a58      	ldr	r2, [pc, #352]	@ (80093d4 <f_lseek+0x54c>)
 8009272:	2102      	movs	r1, #2
 8009274:	5499      	strb	r1, [r3, r2]
 8009276:	2302      	movs	r3, #2
 8009278:	e0a7      	b.n	80093ca <f_lseek+0x542>
					fp->clust = clst;
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	2385      	movs	r3, #133	@ 0x85
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009282:	50d1      	str	r1, [r2, r3]
					fp->fptr += bcs;
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	2382      	movs	r3, #130	@ 0x82
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	58d2      	ldr	r2, [r2, r3]
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	18d1      	adds	r1, r2, r3
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	2382      	movs	r3, #130	@ 0x82
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	50d1      	str	r1, [r2, r3]
					ofs -= bcs;
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d8a0      	bhi.n	80091ea <f_lseek+0x362>
				}
				fp->fptr += ofs;
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	2382      	movs	r3, #130	@ 0x82
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	58d2      	ldr	r2, [r2, r3]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	18d1      	adds	r1, r2, r3
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	2382      	movs	r3, #130	@ 0x82
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	50d1      	str	r1, [r2, r3]
				if (ofs % SS(fp->fs)) {
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	05db      	lsls	r3, r3, #23
 80092c0:	0ddb      	lsrs	r3, r3, #23
 80092c2:	d018      	beq.n	80092f6 <f_lseek+0x46e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	2380      	movs	r3, #128	@ 0x80
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	58d3      	ldr	r3, [r2, r3]
 80092cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092ce:	0011      	movs	r1, r2
 80092d0:	0018      	movs	r0, r3
 80092d2:	f7fc fd15 	bl	8005d00 <clust2sect>
 80092d6:	0003      	movs	r3, r0
 80092d8:	637b      	str	r3, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80092da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d105      	bne.n	80092ec <f_lseek+0x464>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a3c      	ldr	r2, [pc, #240]	@ (80093d4 <f_lseek+0x54c>)
 80092e4:	2102      	movs	r1, #2
 80092e6:	5499      	strb	r1, [r3, r2]
 80092e8:	2302      	movs	r3, #2
 80092ea:	e06e      	b.n	80093ca <f_lseek+0x542>
					nsect += ofs / SS(fp->fs);
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	0a5b      	lsrs	r3, r3, #9
 80092f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092f2:	18d3      	adds	r3, r2, r3
 80092f4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	2382      	movs	r3, #130	@ 0x82
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	58d3      	ldr	r3, [r2, r3]
 80092fe:	05db      	lsls	r3, r3, #23
 8009300:	0ddb      	lsrs	r3, r3, #23
 8009302:	d044      	beq.n	800938e <f_lseek+0x506>
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	2386      	movs	r3, #134	@ 0x86
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	58d3      	ldr	r3, [r2, r3]
 800930c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800930e:	429a      	cmp	r2, r3
 8009310:	d03d      	beq.n	800938e <f_lseek+0x506>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a30      	ldr	r2, [pc, #192]	@ (80093d8 <f_lseek+0x550>)
 8009316:	5c9b      	ldrb	r3, [r3, r2]
 8009318:	001a      	movs	r2, r3
 800931a:	2340      	movs	r3, #64	@ 0x40
 800931c:	4013      	ands	r3, r2
 800931e:	d01e      	beq.n	800935e <f_lseek+0x4d6>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	2380      	movs	r3, #128	@ 0x80
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	58d3      	ldr	r3, [r2, r3]
 8009328:	4a2c      	ldr	r2, [pc, #176]	@ (80093dc <f_lseek+0x554>)
 800932a:	5c98      	ldrb	r0, [r3, r2]
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	2386      	movs	r3, #134	@ 0x86
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	58d2      	ldr	r2, [r2, r3]
 8009336:	2301      	movs	r3, #1
 8009338:	f7fc f8f6 	bl	8005528 <disk_write>
 800933c:	1e03      	subs	r3, r0, #0
 800933e:	d005      	beq.n	800934c <f_lseek+0x4c4>
					ABORT(fp->fs, FR_DISK_ERR);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a24      	ldr	r2, [pc, #144]	@ (80093d4 <f_lseek+0x54c>)
 8009344:	2101      	movs	r1, #1
 8009346:	5499      	strb	r1, [r3, r2]
 8009348:	2301      	movs	r3, #1
 800934a:	e03e      	b.n	80093ca <f_lseek+0x542>
				fp->flag &= ~FA__DIRTY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a22      	ldr	r2, [pc, #136]	@ (80093d8 <f_lseek+0x550>)
 8009350:	5c9b      	ldrb	r3, [r3, r2]
 8009352:	2240      	movs	r2, #64	@ 0x40
 8009354:	4393      	bics	r3, r2
 8009356:	b2d9      	uxtb	r1, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a1f      	ldr	r2, [pc, #124]	@ (80093d8 <f_lseek+0x550>)
 800935c:	5499      	strb	r1, [r3, r2]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	2380      	movs	r3, #128	@ 0x80
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	58d3      	ldr	r3, [r2, r3]
 8009366:	4a1d      	ldr	r2, [pc, #116]	@ (80093dc <f_lseek+0x554>)
 8009368:	5c98      	ldrb	r0, [r3, r2]
 800936a:	6879      	ldr	r1, [r7, #4]
 800936c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800936e:	2301      	movs	r3, #1
 8009370:	f7fc f8b2 	bl	80054d8 <disk_read>
 8009374:	1e03      	subs	r3, r0, #0
 8009376:	d005      	beq.n	8009384 <f_lseek+0x4fc>
				ABORT(fp->fs, FR_DISK_ERR);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a16      	ldr	r2, [pc, #88]	@ (80093d4 <f_lseek+0x54c>)
 800937c:	2101      	movs	r1, #1
 800937e:	5499      	strb	r1, [r3, r2]
 8009380:	2301      	movs	r3, #1
 8009382:	e022      	b.n	80093ca <f_lseek+0x542>
#endif
			fp->dsect = nsect;
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	2386      	movs	r3, #134	@ 0x86
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800938c:	50d1      	str	r1, [r2, r3]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	2382      	movs	r3, #130	@ 0x82
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	58d2      	ldr	r2, [r2, r3]
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	2383      	movs	r3, #131	@ 0x83
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	58cb      	ldr	r3, [r1, r3]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d910      	bls.n	80093c4 <f_lseek+0x53c>
			fp->fsize = fp->fptr;
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	2382      	movs	r3, #130	@ 0x82
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	58d1      	ldr	r1, [r2, r3]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	2383      	movs	r3, #131	@ 0x83
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	50d1      	str	r1, [r2, r3]
			fp->flag |= FA__WRITTEN;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a08      	ldr	r2, [pc, #32]	@ (80093d8 <f_lseek+0x550>)
 80093b6:	5c9b      	ldrb	r3, [r3, r2]
 80093b8:	2220      	movs	r2, #32
 80093ba:	4313      	orrs	r3, r2
 80093bc:	b2d9      	uxtb	r1, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a05      	ldr	r2, [pc, #20]	@ (80093d8 <f_lseek+0x550>)
 80093c2:	5499      	strb	r1, [r3, r2]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 80093c4:	233f      	movs	r3, #63	@ 0x3f
 80093c6:	18fb      	adds	r3, r7, r3
 80093c8:	781b      	ldrb	r3, [r3, #0]
}
 80093ca:	0018      	movs	r0, r3
 80093cc:	46bd      	mov	sp, r7
 80093ce:	b010      	add	sp, #64	@ 0x40
 80093d0:	bdb0      	pop	{r4, r5, r7, pc}
 80093d2:	46c0      	nop			@ (mov r8, r8)
 80093d4:	00000207 	.word	0x00000207
 80093d8:	00000206 	.word	0x00000206
 80093dc:	00000201 	.word	0x00000201

080093e0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80093e0:	b5b0      	push	{r4, r5, r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <f_opendir+0x14>
 80093f0:	2309      	movs	r3, #9
 80093f2:	e0ad      	b.n	8009550 <f_opendir+0x170>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 80093f4:	251f      	movs	r5, #31
 80093f6:	197c      	adds	r4, r7, r5
 80093f8:	0039      	movs	r1, r7
 80093fa:	2314      	movs	r3, #20
 80093fc:	18fb      	adds	r3, r7, r3
 80093fe:	2200      	movs	r2, #0
 8009400:	0018      	movs	r0, r3
 8009402:	f7fe fbf1 	bl	8007be8 <find_volume>
 8009406:	0003      	movs	r3, r0
 8009408:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800940a:	197b      	adds	r3, r7, r5
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d000      	beq.n	8009414 <f_opendir+0x34>
 8009412:	e090      	b.n	8009536 <f_opendir+0x156>
		dp->fs = fs;
 8009414:	6979      	ldr	r1, [r7, #20]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	2380      	movs	r3, #128	@ 0x80
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	50d1      	str	r1, [r2, r3]
		INIT_BUF(*dp);
 800941e:	2380      	movs	r3, #128	@ 0x80
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	0018      	movs	r0, r3
 8009424:	f001 fa1a 	bl	800a85c <ff_memalloc>
 8009428:	0003      	movs	r3, r0
 800942a:	61bb      	str	r3, [r7, #24]
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <f_opendir+0x56>
 8009432:	2311      	movs	r3, #17
 8009434:	e08c      	b.n	8009550 <f_opendir+0x170>
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	2388      	movs	r3, #136	@ 0x88
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	69b9      	ldr	r1, [r7, #24]
 800943e:	50d1      	str	r1, [r2, r3]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	2386      	movs	r3, #134	@ 0x86
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	2108      	movs	r1, #8
 8009448:	1879      	adds	r1, r7, r1
 800944a:	50d1      	str	r1, [r2, r3]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	251f      	movs	r5, #31
 8009450:	197c      	adds	r4, r7, r5
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	0011      	movs	r1, r2
 8009456:	0018      	movs	r0, r3
 8009458:	f7fe fa8c 	bl	8007974 <follow_path>
 800945c:	0003      	movs	r3, r0
 800945e:	7023      	strb	r3, [r4, #0]
		FREE_BUF();
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	0018      	movs	r0, r3
 8009464:	f001 fa07 	bl	800a876 <ff_memfree>
		if (res == FR_OK) {						/* Follow completed */
 8009468:	197b      	adds	r3, r7, r5
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d15a      	bne.n	8009526 <f_opendir+0x146>
			if (dp->dir) {						/* It is not the origin directory itself */
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	2385      	movs	r3, #133	@ 0x85
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	58d3      	ldr	r3, [r2, r3]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d01b      	beq.n	80094b4 <f_opendir+0xd4>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	2385      	movs	r3, #133	@ 0x85
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	58d3      	ldr	r3, [r2, r3]
 8009484:	330b      	adds	r3, #11
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	001a      	movs	r2, r3
 800948a:	2310      	movs	r3, #16
 800948c:	4013      	ands	r3, r2
 800948e:	d00d      	beq.n	80094ac <f_opendir+0xcc>
					dp->sclust = ld_clust(fs, dp->dir);
 8009490:	6978      	ldr	r0, [r7, #20]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	2385      	movs	r3, #133	@ 0x85
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	58d3      	ldr	r3, [r2, r3]
 800949a:	0019      	movs	r1, r3
 800949c:	f7fd f9cb 	bl	8006836 <ld_clust>
 80094a0:	0001      	movs	r1, r0
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	2382      	movs	r3, #130	@ 0x82
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	50d1      	str	r1, [r2, r3]
 80094aa:	e003      	b.n	80094b4 <f_opendir+0xd4>
				else							/* The object is a file */
					res = FR_NO_PATH;
 80094ac:	231f      	movs	r3, #31
 80094ae:	18fb      	adds	r3, r7, r3
 80094b0:	2205      	movs	r2, #5
 80094b2:	701a      	strb	r2, [r3, #0]
			}
			if (res == FR_OK) {
 80094b4:	241f      	movs	r4, #31
 80094b6:	193b      	adds	r3, r7, r4
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d133      	bne.n	8009526 <f_opendir+0x146>
				dp->id = fs->id;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	4a25      	ldr	r2, [pc, #148]	@ (8009558 <f_opendir+0x178>)
 80094c2:	5a99      	ldrh	r1, [r3, r2]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	2381      	movs	r3, #129	@ 0x81
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	52d1      	strh	r1, [r2, r3]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80094cc:	0025      	movs	r5, r4
 80094ce:	193c      	adds	r4, r7, r4
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2100      	movs	r1, #0
 80094d4:	0018      	movs	r0, r3
 80094d6:	f7fc ff87 	bl	80063e8 <dir_sdi>
 80094da:	0003      	movs	r3, r0
 80094dc:	7023      	strb	r3, [r4, #0]
#if _FS_LOCK
				if (res == FR_OK) {
 80094de:	002c      	movs	r4, r5
 80094e0:	193b      	adds	r3, r7, r4
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d11e      	bne.n	8009526 <f_opendir+0x146>
					if (dp->sclust) {
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	2382      	movs	r3, #130	@ 0x82
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	58d3      	ldr	r3, [r2, r3]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d013      	beq.n	800951c <f_opendir+0x13c>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2100      	movs	r1, #0
 80094f8:	0018      	movs	r0, r3
 80094fa:	f7fc f967 	bl	80057cc <inc_lock>
 80094fe:	0001      	movs	r1, r0
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	2387      	movs	r3, #135	@ 0x87
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	50d1      	str	r1, [r2, r3]
						if (!dp->lockid)
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	2387      	movs	r3, #135	@ 0x87
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	58d3      	ldr	r3, [r2, r3]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d108      	bne.n	8009526 <f_opendir+0x146>
							res = FR_TOO_MANY_OPEN_FILES;
 8009514:	193b      	adds	r3, r7, r4
 8009516:	2212      	movs	r2, #18
 8009518:	701a      	strb	r2, [r3, #0]
 800951a:	e004      	b.n	8009526 <f_opendir+0x146>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	2387      	movs	r3, #135	@ 0x87
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	2100      	movs	r1, #0
 8009524:	50d1      	str	r1, [r2, r3]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009526:	221f      	movs	r2, #31
 8009528:	18bb      	adds	r3, r7, r2
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	2b04      	cmp	r3, #4
 800952e:	d102      	bne.n	8009536 <f_opendir+0x156>
 8009530:	18bb      	adds	r3, r7, r2
 8009532:	2205      	movs	r2, #5
 8009534:	701a      	strb	r2, [r3, #0]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8009536:	231f      	movs	r3, #31
 8009538:	18fb      	adds	r3, r7, r3
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d004      	beq.n	800954a <f_opendir+0x16a>
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	2380      	movs	r3, #128	@ 0x80
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	2100      	movs	r1, #0
 8009548:	50d1      	str	r1, [r2, r3]

	LEAVE_FF(fs, res);
 800954a:	231f      	movs	r3, #31
 800954c:	18fb      	adds	r3, r7, r3
 800954e:	781b      	ldrb	r3, [r3, #0]
}
 8009550:	0018      	movs	r0, r3
 8009552:	46bd      	mov	sp, r7
 8009554:	b008      	add	sp, #32
 8009556:	bdb0      	pop	{r4, r5, r7, pc}
 8009558:	00000206 	.word	0x00000206

0800955c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800955c:	b5b0      	push	{r4, r5, r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8009564:	250f      	movs	r5, #15
 8009566:	197c      	adds	r4, r7, r5
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	0018      	movs	r0, r3
 800956c:	f7fe fe60 	bl	8008230 <validate>
 8009570:	0003      	movs	r3, r0
 8009572:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009574:	0029      	movs	r1, r5
 8009576:	187b      	adds	r3, r7, r1
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d119      	bne.n	80095b2 <f_closedir+0x56>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	2387      	movs	r3, #135	@ 0x87
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	58d3      	ldr	r3, [r2, r3]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d009      	beq.n	800959e <f_closedir+0x42>
			res = dec_lock(dp->lockid);
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	2387      	movs	r3, #135	@ 0x87
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	58d3      	ldr	r3, [r2, r3]
 8009592:	187c      	adds	r4, r7, r1
 8009594:	0018      	movs	r0, r3
 8009596:	f7fc f9d1 	bl	800593c <dec_lock>
 800959a:	0003      	movs	r3, r0
 800959c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK)
 800959e:	230f      	movs	r3, #15
 80095a0:	18fb      	adds	r3, r7, r3
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d104      	bne.n	80095b2 <f_closedir+0x56>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	2380      	movs	r3, #128	@ 0x80
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	2100      	movs	r1, #0
 80095b0:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80095b2:	230f      	movs	r3, #15
 80095b4:	18fb      	adds	r3, r7, r3
 80095b6:	781b      	ldrb	r3, [r3, #0]
}
 80095b8:	0018      	movs	r0, r3
 80095ba:	46bd      	mov	sp, r7
 80095bc:	b004      	add	sp, #16
 80095be:	bdb0      	pop	{r4, r5, r7, pc}

080095c0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80095c0:	b5b0      	push	{r4, r5, r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 80095ca:	251f      	movs	r5, #31
 80095cc:	197c      	adds	r4, r7, r5
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	0018      	movs	r0, r3
 80095d2:	f7fe fe2d 	bl	8008230 <validate>
 80095d6:	0003      	movs	r3, r0
 80095d8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80095da:	002a      	movs	r2, r5
 80095dc:	18bb      	adds	r3, r7, r2
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d15c      	bne.n	800969e <f_readdir+0xde>
		if (!fno) {
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d108      	bne.n	80095fc <f_readdir+0x3c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80095ea:	18bc      	adds	r4, r7, r2
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2100      	movs	r1, #0
 80095f0:	0018      	movs	r0, r3
 80095f2:	f7fc fef9 	bl	80063e8 <dir_sdi>
 80095f6:	0003      	movs	r3, r0
 80095f8:	7023      	strb	r3, [r4, #0]
 80095fa:	e050      	b.n	800969e <f_readdir+0xde>
		} else {
			INIT_BUF(*dp);
 80095fc:	2380      	movs	r3, #128	@ 0x80
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	0018      	movs	r0, r3
 8009602:	f001 f92b 	bl	800a85c <ff_memalloc>
 8009606:	0003      	movs	r3, r0
 8009608:	61bb      	str	r3, [r7, #24]
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <f_readdir+0x54>
 8009610:	2311      	movs	r3, #17
 8009612:	e047      	b.n	80096a4 <f_readdir+0xe4>
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	2388      	movs	r3, #136	@ 0x88
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	69b9      	ldr	r1, [r7, #24]
 800961c:	50d1      	str	r1, [r2, r3]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	2386      	movs	r3, #134	@ 0x86
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	210c      	movs	r1, #12
 8009626:	1879      	adds	r1, r7, r1
 8009628:	50d1      	str	r1, [r2, r3]
			res = dir_read(dp, 0);			/* Read an item */
 800962a:	251f      	movs	r5, #31
 800962c:	197c      	adds	r4, r7, r5
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2100      	movs	r1, #0
 8009632:	0018      	movs	r0, r3
 8009634:	f7fd fc88 	bl	8006f48 <dir_read>
 8009638:	0003      	movs	r3, r0
 800963a:	7023      	strb	r3, [r4, #0]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800963c:	0028      	movs	r0, r5
 800963e:	183b      	adds	r3, r7, r0
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	2b04      	cmp	r3, #4
 8009644:	d107      	bne.n	8009656 <f_readdir+0x96>
				dp->sect = 0;
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	2384      	movs	r3, #132	@ 0x84
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	2100      	movs	r1, #0
 800964e:	50d1      	str	r1, [r2, r3]
				res = FR_OK;
 8009650:	183b      	adds	r3, r7, r0
 8009652:	2200      	movs	r2, #0
 8009654:	701a      	strb	r2, [r3, #0]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8009656:	251f      	movs	r5, #31
 8009658:	197b      	adds	r3, r7, r5
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d11a      	bne.n	8009696 <f_readdir+0xd6>
				get_fileinfo(dp, fno);		/* Get the object information */
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	0011      	movs	r1, r2
 8009666:	0018      	movs	r0, r3
 8009668:	f7fd fe8e 	bl	8007388 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800966c:	197c      	adds	r4, r7, r5
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2100      	movs	r1, #0
 8009672:	0018      	movs	r0, r3
 8009674:	f7fc ff68 	bl	8006548 <dir_next>
 8009678:	0003      	movs	r3, r0
 800967a:	7023      	strb	r3, [r4, #0]
				if (res == FR_NO_FILE) {
 800967c:	0028      	movs	r0, r5
 800967e:	183b      	adds	r3, r7, r0
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	2b04      	cmp	r3, #4
 8009684:	d107      	bne.n	8009696 <f_readdir+0xd6>
					dp->sect = 0;
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	2384      	movs	r3, #132	@ 0x84
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	2100      	movs	r1, #0
 800968e:	50d1      	str	r1, [r2, r3]
					res = FR_OK;
 8009690:	183b      	adds	r3, r7, r0
 8009692:	2200      	movs	r2, #0
 8009694:	701a      	strb	r2, [r3, #0]
				}
			}
			FREE_BUF();
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	0018      	movs	r0, r3
 800969a:	f001 f8ec 	bl	800a876 <ff_memfree>
		}
	}

	LEAVE_FF(dp->fs, res);
 800969e:	231f      	movs	r3, #31
 80096a0:	18fb      	adds	r3, r7, r3
 80096a2:	781b      	ldrb	r3, [r3, #0]
}
 80096a4:	0018      	movs	r0, r3
 80096a6:	46bd      	mov	sp, r7
 80096a8:	b008      	add	sp, #32
 80096aa:	bdb0      	pop	{r4, r5, r7, pc}

080096ac <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80096ac:	b5b0      	push	{r4, r5, r7, lr}
 80096ae:	b08e      	sub	sp, #56	@ 0x38
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80096b8:	2537      	movs	r5, #55	@ 0x37
 80096ba:	197c      	adds	r4, r7, r5
 80096bc:	230c      	movs	r3, #12
 80096be:	18f9      	adds	r1, r7, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	0018      	movs	r0, r3
 80096c6:	f7fe fa8f 	bl	8007be8 <find_volume>
 80096ca:	0003      	movs	r3, r0
 80096cc:	7023      	strb	r3, [r4, #0]
	fs = *fatfs;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80096d4:	197b      	adds	r3, r7, r5
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d000      	beq.n	80096de <f_getfree+0x32>
 80096dc:	e0c1      	b.n	8009862 <f_getfree+0x1b6>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80096de:	69fa      	ldr	r2, [r7, #28]
 80096e0:	2384      	movs	r3, #132	@ 0x84
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	58d2      	ldr	r2, [r2, r3]
 80096e6:	69f9      	ldr	r1, [r7, #28]
 80096e8:	2385      	movs	r3, #133	@ 0x85
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	58cb      	ldr	r3, [r1, r3]
 80096ee:	3b02      	subs	r3, #2
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d806      	bhi.n	8009702 <f_getfree+0x56>
			*nclst = fs->free_clust;
 80096f4:	69fa      	ldr	r2, [r7, #28]
 80096f6:	2384      	movs	r3, #132	@ 0x84
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	58d2      	ldr	r2, [r2, r3]
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	e0af      	b.n	8009862 <f_getfree+0x1b6>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8009702:	201b      	movs	r0, #27
 8009704:	183b      	adds	r3, r7, r0
 8009706:	69f9      	ldr	r1, [r7, #28]
 8009708:	2280      	movs	r2, #128	@ 0x80
 800970a:	0092      	lsls	r2, r2, #2
 800970c:	5c8a      	ldrb	r2, [r1, r2]
 800970e:	701a      	strb	r2, [r3, #0]
			n = 0;
 8009710:	2300      	movs	r3, #0
 8009712:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fat == FS_FAT12) {
 8009714:	183b      	adds	r3, r7, r0
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d12a      	bne.n	8009772 <f_getfree+0xc6>
				clst = 2;
 800971c:	2302      	movs	r3, #2
 800971e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				do {
					stat = get_fat(fs, clst);
 8009720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	0011      	movs	r1, r2
 8009726:	0018      	movs	r0, r3
 8009728:	f7fc fb0e 	bl	8005d48 <get_fat>
 800972c:	0003      	movs	r3, r0
 800972e:	617b      	str	r3, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	3301      	adds	r3, #1
 8009734:	d104      	bne.n	8009740 <f_getfree+0x94>
 8009736:	2337      	movs	r3, #55	@ 0x37
 8009738:	18fb      	adds	r3, r7, r3
 800973a:	2201      	movs	r2, #1
 800973c:	701a      	strb	r2, [r3, #0]
 800973e:	e07f      	b.n	8009840 <f_getfree+0x194>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d104      	bne.n	8009750 <f_getfree+0xa4>
 8009746:	2337      	movs	r3, #55	@ 0x37
 8009748:	18fb      	adds	r3, r7, r3
 800974a:	2202      	movs	r2, #2
 800974c:	701a      	strb	r2, [r3, #0]
 800974e:	e077      	b.n	8009840 <f_getfree+0x194>
					if (stat == 0) n++;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d102      	bne.n	800975c <f_getfree+0xb0>
 8009756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009758:	3301      	adds	r3, #1
 800975a:	633b      	str	r3, [r7, #48]	@ 0x30
				} while (++clst < fs->n_fatent);
 800975c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975e:	3301      	adds	r3, #1
 8009760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009762:	69fa      	ldr	r2, [r7, #28]
 8009764:	2385      	movs	r3, #133	@ 0x85
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	58d3      	ldr	r3, [r2, r3]
 800976a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800976c:	429a      	cmp	r2, r3
 800976e:	d3d7      	bcc.n	8009720 <f_getfree+0x74>
 8009770:	e066      	b.n	8009840 <f_getfree+0x194>
			} else {
				clst = fs->n_fatent;
 8009772:	69fa      	ldr	r2, [r7, #28]
 8009774:	2385      	movs	r3, #133	@ 0x85
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	58d3      	ldr	r3, [r2, r3]
 800977a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				sect = fs->fatbase;
 800977c:	69fa      	ldr	r2, [r7, #28]
 800977e:	2388      	movs	r3, #136	@ 0x88
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	58d3      	ldr	r3, [r2, r3]
 8009784:	62bb      	str	r3, [r7, #40]	@ 0x28
				i = 0; p = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	627b      	str	r3, [r7, #36]	@ 0x24
 800978a:	2300      	movs	r3, #0
 800978c:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800978e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009790:	2b00      	cmp	r3, #0
 8009792:	d114      	bne.n	80097be <f_getfree+0x112>
						res = move_window(fs, sect++);
 8009794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009796:	1c5a      	adds	r2, r3, #1
 8009798:	62ba      	str	r2, [r7, #40]	@ 0x28
 800979a:	2537      	movs	r5, #55	@ 0x37
 800979c:	197c      	adds	r4, r7, r5
 800979e:	69fa      	ldr	r2, [r7, #28]
 80097a0:	0019      	movs	r1, r3
 80097a2:	0010      	movs	r0, r2
 80097a4:	f7fc f99c 	bl	8005ae0 <move_window>
 80097a8:	0003      	movs	r3, r0
 80097aa:	7023      	strb	r3, [r4, #0]
						if (res != FR_OK) break;
 80097ac:	197b      	adds	r3, r7, r5
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d144      	bne.n	800983e <f_getfree+0x192>
						p = fs->win.d8;
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 80097b8:	2380      	movs	r3, #128	@ 0x80
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	627b      	str	r3, [r7, #36]	@ 0x24
					}
					if (fat == FS_FAT16) {
 80097be:	231b      	movs	r3, #27
 80097c0:	18fb      	adds	r3, r7, r3
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d116      	bne.n	80097f6 <f_getfree+0x14a>
						if (LD_WORD(p) == 0) n++;
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	3301      	adds	r3, #1
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	b21b      	sxth	r3, r3
 80097d0:	021b      	lsls	r3, r3, #8
 80097d2:	b21a      	sxth	r2, r3
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	b21b      	sxth	r3, r3
 80097da:	4313      	orrs	r3, r2
 80097dc:	b21b      	sxth	r3, r3
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d102      	bne.n	80097e8 <f_getfree+0x13c>
 80097e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e4:	3301      	adds	r3, #1
 80097e6:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 2; i -= 2;
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	3302      	adds	r3, #2
 80097ec:	623b      	str	r3, [r7, #32]
 80097ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f0:	3b02      	subs	r3, #2
 80097f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80097f4:	e01c      	b.n	8009830 <f_getfree+0x184>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	3303      	adds	r3, #3
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	061a      	lsls	r2, r3, #24
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	3302      	adds	r3, #2
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	041b      	lsls	r3, r3, #16
 8009806:	431a      	orrs	r2, r3
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	3301      	adds	r3, #1
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	021b      	lsls	r3, r3, #8
 8009810:	4313      	orrs	r3, r2
 8009812:	6a3a      	ldr	r2, [r7, #32]
 8009814:	7812      	ldrb	r2, [r2, #0]
 8009816:	4313      	orrs	r3, r2
 8009818:	011b      	lsls	r3, r3, #4
 800981a:	091b      	lsrs	r3, r3, #4
 800981c:	d102      	bne.n	8009824 <f_getfree+0x178>
 800981e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009820:	3301      	adds	r3, #1
 8009822:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 4; i -= 4;
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	3304      	adds	r3, #4
 8009828:	623b      	str	r3, [r7, #32]
 800982a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982c:	3b04      	subs	r3, #4
 800982e:	627b      	str	r3, [r7, #36]	@ 0x24
					}
				} while (--clst);
 8009830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009832:	3b01      	subs	r3, #1
 8009834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1a8      	bne.n	800978e <f_getfree+0xe2>
 800983c:	e000      	b.n	8009840 <f_getfree+0x194>
						if (res != FR_OK) break;
 800983e:	46c0      	nop			@ (mov r8, r8)
			}
			fs->free_clust = n;
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	2384      	movs	r3, #132	@ 0x84
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009848:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	4a08      	ldr	r2, [pc, #32]	@ (8009870 <f_getfree+0x1c4>)
 800984e:	5c9b      	ldrb	r3, [r3, r2]
 8009850:	2201      	movs	r2, #1
 8009852:	4313      	orrs	r3, r2
 8009854:	b2d9      	uxtb	r1, r3
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	4a05      	ldr	r2, [pc, #20]	@ (8009870 <f_getfree+0x1c4>)
 800985a:	5499      	strb	r1, [r3, r2]
			*nclst = n;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009860:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8009862:	2337      	movs	r3, #55	@ 0x37
 8009864:	18fb      	adds	r3, r7, r3
 8009866:	781b      	ldrb	r3, [r3, #0]
}
 8009868:	0018      	movs	r0, r3
 800986a:	46bd      	mov	sp, r7
 800986c:	b00e      	add	sp, #56	@ 0x38
 800986e:	bdb0      	pop	{r4, r5, r7, pc}
 8009870:	00000205 	.word	0x00000205

08009874 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8009874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009876:	4cdf      	ldr	r4, [pc, #892]	@ (8009bf4 <f_mkdir+0x380>)
 8009878:	44a5      	add	sp, r4
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
 800987e:	f7fb fdd3 	bl	8005428 <get_fattime>
 8009882:	0003      	movs	r3, r0
 8009884:	2292      	movs	r2, #146	@ 0x92
 8009886:	0092      	lsls	r2, r2, #2
 8009888:	18ba      	adds	r2, r7, r2
 800988a:	6013      	str	r3, [r2, #0]
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800988c:	4dda      	ldr	r5, [pc, #872]	@ (8009bf8 <f_mkdir+0x384>)
 800988e:	197c      	adds	r4, r7, r5
 8009890:	1d39      	adds	r1, r7, #4
 8009892:	2314      	movs	r3, #20
 8009894:	18fb      	adds	r3, r7, r3
 8009896:	2280      	movs	r2, #128	@ 0x80
 8009898:	0092      	lsls	r2, r2, #2
 800989a:	4694      	mov	ip, r2
 800989c:	4463      	add	r3, ip
 800989e:	2201      	movs	r2, #1
 80098a0:	0018      	movs	r0, r3
 80098a2:	f7fe f9a1 	bl	8007be8 <find_volume>
 80098a6:	0003      	movs	r3, r0
 80098a8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80098aa:	197b      	adds	r3, r7, r5
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d000      	beq.n	80098b4 <f_mkdir+0x40>
 80098b2:	e205      	b.n	8009cc0 <f_mkdir+0x44c>
		INIT_BUF(dj);
 80098b4:	2380      	movs	r3, #128	@ 0x80
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	0018      	movs	r0, r3
 80098ba:	f000 ffcf 	bl	800a85c <ff_memalloc>
 80098be:	0003      	movs	r3, r0
 80098c0:	2291      	movs	r2, #145	@ 0x91
 80098c2:	0092      	lsls	r2, r2, #2
 80098c4:	18b9      	adds	r1, r7, r2
 80098c6:	600b      	str	r3, [r1, #0]
 80098c8:	18bb      	adds	r3, r7, r2
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <f_mkdir+0x60>
 80098d0:	2311      	movs	r3, #17
 80098d2:	e1f8      	b.n	8009cc6 <f_mkdir+0x452>
 80098d4:	4bc9      	ldr	r3, [pc, #804]	@ (8009bfc <f_mkdir+0x388>)
 80098d6:	2096      	movs	r0, #150	@ 0x96
 80098d8:	0080      	lsls	r0, r0, #2
 80098da:	181b      	adds	r3, r3, r0
 80098dc:	19da      	adds	r2, r3, r7
 80098de:	2388      	movs	r3, #136	@ 0x88
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	2191      	movs	r1, #145	@ 0x91
 80098e4:	0089      	lsls	r1, r1, #2
 80098e6:	1879      	adds	r1, r7, r1
 80098e8:	6809      	ldr	r1, [r1, #0]
 80098ea:	50d1      	str	r1, [r2, r3]
 80098ec:	4bc3      	ldr	r3, [pc, #780]	@ (8009bfc <f_mkdir+0x388>)
 80098ee:	181b      	adds	r3, r3, r0
 80098f0:	19da      	adds	r2, r3, r7
 80098f2:	2386      	movs	r3, #134	@ 0x86
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	2108      	movs	r1, #8
 80098f8:	1879      	adds	r1, r7, r1
 80098fa:	50d1      	str	r1, [r2, r3]
		res = follow_path(&dj, path);			/* Follow the file path */
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	4dbe      	ldr	r5, [pc, #760]	@ (8009bf8 <f_mkdir+0x384>)
 8009900:	197c      	adds	r4, r7, r5
 8009902:	2314      	movs	r3, #20
 8009904:	18fb      	adds	r3, r7, r3
 8009906:	0011      	movs	r1, r2
 8009908:	0018      	movs	r0, r3
 800990a:	f7fe f833 	bl	8007974 <follow_path>
 800990e:	0003      	movs	r3, r0
 8009910:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8009912:	197b      	adds	r3, r7, r5
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d102      	bne.n	8009920 <f_mkdir+0xac>
 800991a:	197b      	adds	r3, r7, r5
 800991c:	2208      	movs	r2, #8
 800991e:	701a      	strb	r2, [r3, #0]
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8009920:	4cb5      	ldr	r4, [pc, #724]	@ (8009bf8 <f_mkdir+0x384>)
 8009922:	193b      	adds	r3, r7, r4
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	2b04      	cmp	r3, #4
 8009928:	d000      	beq.n	800992c <f_mkdir+0xb8>
 800992a:	e1c2      	b.n	8009cb2 <f_mkdir+0x43e>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 800992c:	4bb3      	ldr	r3, [pc, #716]	@ (8009bfc <f_mkdir+0x388>)
 800992e:	2296      	movs	r2, #150	@ 0x96
 8009930:	0092      	lsls	r2, r2, #2
 8009932:	189b      	adds	r3, r3, r2
 8009934:	19da      	adds	r2, r3, r7
 8009936:	2380      	movs	r3, #128	@ 0x80
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	58d3      	ldr	r3, [r2, r3]
 800993c:	2100      	movs	r1, #0
 800993e:	0018      	movs	r0, r3
 8009940:	f7fc fc62 	bl	8006208 <create_chain>
 8009944:	0003      	movs	r3, r0
 8009946:	2190      	movs	r1, #144	@ 0x90
 8009948:	0089      	lsls	r1, r1, #2
 800994a:	187a      	adds	r2, r7, r1
 800994c:	6013      	str	r3, [r2, #0]
			res = FR_OK;
 800994e:	193b      	adds	r3, r7, r4
 8009950:	2200      	movs	r2, #0
 8009952:	701a      	strb	r2, [r3, #0]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8009954:	187b      	adds	r3, r7, r1
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d102      	bne.n	8009962 <f_mkdir+0xee>
 800995c:	193b      	adds	r3, r7, r4
 800995e:	2207      	movs	r2, #7
 8009960:	701a      	strb	r2, [r3, #0]
			if (dcl == 1) res = FR_INT_ERR;
 8009962:	2390      	movs	r3, #144	@ 0x90
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	18fb      	adds	r3, r7, r3
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d103      	bne.n	8009976 <f_mkdir+0x102>
 800996e:	4ba2      	ldr	r3, [pc, #648]	@ (8009bf8 <f_mkdir+0x384>)
 8009970:	18fb      	adds	r3, r7, r3
 8009972:	2202      	movs	r2, #2
 8009974:	701a      	strb	r2, [r3, #0]
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009976:	2390      	movs	r3, #144	@ 0x90
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	18fb      	adds	r3, r7, r3
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3301      	adds	r3, #1
 8009980:	d103      	bne.n	800998a <f_mkdir+0x116>
 8009982:	4b9d      	ldr	r3, [pc, #628]	@ (8009bf8 <f_mkdir+0x384>)
 8009984:	18fb      	adds	r3, r7, r3
 8009986:	2201      	movs	r2, #1
 8009988:	701a      	strb	r2, [r3, #0]
			if (res == FR_OK)					/* Flush FAT */
 800998a:	499b      	ldr	r1, [pc, #620]	@ (8009bf8 <f_mkdir+0x384>)
 800998c:	187b      	adds	r3, r7, r1
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10d      	bne.n	80099b0 <f_mkdir+0x13c>
				res = sync_window(dj.fs);
 8009994:	4b99      	ldr	r3, [pc, #612]	@ (8009bfc <f_mkdir+0x388>)
 8009996:	2296      	movs	r2, #150	@ 0x96
 8009998:	0092      	lsls	r2, r2, #2
 800999a:	189b      	adds	r3, r3, r2
 800999c:	19da      	adds	r2, r3, r7
 800999e:	2380      	movs	r3, #128	@ 0x80
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	58d3      	ldr	r3, [r2, r3]
 80099a4:	187c      	adds	r4, r7, r1
 80099a6:	0018      	movs	r0, r3
 80099a8:	f7fc f842 	bl	8005a30 <sync_window>
 80099ac:	0003      	movs	r3, r0
 80099ae:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {					/* Initialize the new directory table */
 80099b0:	4b91      	ldr	r3, [pc, #580]	@ (8009bf8 <f_mkdir+0x384>)
 80099b2:	18fb      	adds	r3, r7, r3
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d000      	beq.n	80099bc <f_mkdir+0x148>
 80099ba:	e0f8      	b.n	8009bae <f_mkdir+0x33a>
				dsc = clust2sect(dj.fs, dcl);
 80099bc:	4b8f      	ldr	r3, [pc, #572]	@ (8009bfc <f_mkdir+0x388>)
 80099be:	2596      	movs	r5, #150	@ 0x96
 80099c0:	00ad      	lsls	r5, r5, #2
 80099c2:	195b      	adds	r3, r3, r5
 80099c4:	19da      	adds	r2, r3, r7
 80099c6:	2380      	movs	r3, #128	@ 0x80
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	58d3      	ldr	r3, [r2, r3]
 80099cc:	2690      	movs	r6, #144	@ 0x90
 80099ce:	00b6      	lsls	r6, r6, #2
 80099d0:	19ba      	adds	r2, r7, r6
 80099d2:	6812      	ldr	r2, [r2, #0]
 80099d4:	0011      	movs	r1, r2
 80099d6:	0018      	movs	r0, r3
 80099d8:	f7fc f992 	bl	8005d00 <clust2sect>
 80099dc:	0003      	movs	r3, r0
 80099de:	2294      	movs	r2, #148	@ 0x94
 80099e0:	0092      	lsls	r2, r2, #2
 80099e2:	18ba      	adds	r2, r7, r2
 80099e4:	6013      	str	r3, [r2, #0]
				dir = dj.fs->win.d8;
 80099e6:	4b85      	ldr	r3, [pc, #532]	@ (8009bfc <f_mkdir+0x388>)
 80099e8:	195b      	adds	r3, r3, r5
 80099ea:	19da      	adds	r2, r3, r7
 80099ec:	2380      	movs	r3, #128	@ 0x80
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	58d3      	ldr	r3, [r2, r3]
 80099f2:	218f      	movs	r1, #143	@ 0x8f
 80099f4:	0089      	lsls	r1, r1, #2
 80099f6:	187a      	adds	r2, r7, r1
 80099f8:	6013      	str	r3, [r2, #0]
				mem_set(dir, 0, SS(dj.fs));
 80099fa:	2380      	movs	r3, #128	@ 0x80
 80099fc:	009a      	lsls	r2, r3, #2
 80099fe:	000c      	movs	r4, r1
 8009a00:	193b      	adds	r3, r7, r4
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2100      	movs	r1, #0
 8009a06:	0018      	movs	r0, r3
 8009a08:	f7fb fdfb 	bl	8005602 <mem_set>
				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8009a0c:	193b      	adds	r3, r7, r4
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	220b      	movs	r2, #11
 8009a12:	2120      	movs	r1, #32
 8009a14:	0018      	movs	r0, r3
 8009a16:	f7fb fdf4 	bl	8005602 <mem_set>
				dir[DIR_Name] = '.';
 8009a1a:	0021      	movs	r1, r4
 8009a1c:	187b      	adds	r3, r7, r1
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	222e      	movs	r2, #46	@ 0x2e
 8009a22:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = AM_DIR;
 8009a24:	187b      	adds	r3, r7, r1
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	330b      	adds	r3, #11
 8009a2a:	2210      	movs	r2, #16
 8009a2c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009a2e:	187b      	adds	r3, r7, r1
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3316      	adds	r3, #22
 8009a34:	2092      	movs	r0, #146	@ 0x92
 8009a36:	0080      	lsls	r0, r0, #2
 8009a38:	183a      	adds	r2, r7, r0
 8009a3a:	6812      	ldr	r2, [r2, #0]
 8009a3c:	b2d2      	uxtb	r2, r2
 8009a3e:	701a      	strb	r2, [r3, #0]
 8009a40:	183b      	adds	r3, r7, r0
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	0a1b      	lsrs	r3, r3, #8
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	187b      	adds	r3, r7, r1
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	3317      	adds	r3, #23
 8009a50:	b2d2      	uxtb	r2, r2
 8009a52:	701a      	strb	r2, [r3, #0]
 8009a54:	183b      	adds	r3, r7, r0
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	0c1a      	lsrs	r2, r3, #16
 8009a5a:	187b      	adds	r3, r7, r1
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3318      	adds	r3, #24
 8009a60:	b2d2      	uxtb	r2, r2
 8009a62:	701a      	strb	r2, [r3, #0]
 8009a64:	183b      	adds	r3, r7, r0
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	0e1a      	lsrs	r2, r3, #24
 8009a6a:	187b      	adds	r3, r7, r1
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3319      	adds	r3, #25
 8009a70:	b2d2      	uxtb	r2, r2
 8009a72:	701a      	strb	r2, [r3, #0]
				st_clust(dir, dcl);
 8009a74:	19bb      	adds	r3, r7, r6
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	000c      	movs	r4, r1
 8009a7a:	187b      	adds	r3, r7, r1
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	0011      	movs	r1, r2
 8009a80:	0018      	movs	r0, r3
 8009a82:	f7fc ff07 	bl	8006894 <st_clust>
				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
 8009a86:	0021      	movs	r1, r4
 8009a88:	187b      	adds	r3, r7, r1
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3320      	adds	r3, #32
 8009a8e:	000c      	movs	r4, r1
 8009a90:	187a      	adds	r2, r7, r1
 8009a92:	6811      	ldr	r1, [r2, #0]
 8009a94:	2220      	movs	r2, #32
 8009a96:	0018      	movs	r0, r3
 8009a98:	f7fb fd96 	bl	80055c8 <mem_cpy>
				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 8009a9c:	193b      	adds	r3, r7, r4
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3321      	adds	r3, #33	@ 0x21
 8009aa2:	222e      	movs	r2, #46	@ 0x2e
 8009aa4:	701a      	strb	r2, [r3, #0]
 8009aa6:	4b55      	ldr	r3, [pc, #340]	@ (8009bfc <f_mkdir+0x388>)
 8009aa8:	195b      	adds	r3, r3, r5
 8009aaa:	19da      	adds	r2, r3, r7
 8009aac:	2382      	movs	r3, #130	@ 0x82
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	58d3      	ldr	r3, [r2, r3]
 8009ab2:	2193      	movs	r1, #147	@ 0x93
 8009ab4:	0089      	lsls	r1, r1, #2
 8009ab6:	187a      	adds	r2, r7, r1
 8009ab8:	6013      	str	r3, [r2, #0]
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 8009aba:	4b50      	ldr	r3, [pc, #320]	@ (8009bfc <f_mkdir+0x388>)
 8009abc:	195b      	adds	r3, r3, r5
 8009abe:	19da      	adds	r2, r3, r7
 8009ac0:	2380      	movs	r3, #128	@ 0x80
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	58d2      	ldr	r2, [r2, r3]
 8009ac6:	2380      	movs	r3, #128	@ 0x80
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	5cd3      	ldrb	r3, [r2, r3]
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d10f      	bne.n	8009af0 <f_mkdir+0x27c>
 8009ad0:	4b4a      	ldr	r3, [pc, #296]	@ (8009bfc <f_mkdir+0x388>)
 8009ad2:	195b      	adds	r3, r3, r5
 8009ad4:	19da      	adds	r2, r3, r7
 8009ad6:	2380      	movs	r3, #128	@ 0x80
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	58d2      	ldr	r2, [r2, r3]
 8009adc:	2389      	movs	r3, #137	@ 0x89
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	58d3      	ldr	r3, [r2, r3]
 8009ae2:	187a      	adds	r2, r7, r1
 8009ae4:	6812      	ldr	r2, [r2, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d102      	bne.n	8009af0 <f_mkdir+0x27c>
					pcl = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	187a      	adds	r2, r7, r1
 8009aee:	6013      	str	r3, [r2, #0]
				st_clust(dir + SZ_DIRE, pcl);
 8009af0:	238f      	movs	r3, #143	@ 0x8f
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	18fb      	adds	r3, r7, r3
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3320      	adds	r3, #32
 8009afa:	2293      	movs	r2, #147	@ 0x93
 8009afc:	0092      	lsls	r2, r2, #2
 8009afe:	18ba      	adds	r2, r7, r2
 8009b00:	6812      	ldr	r2, [r2, #0]
 8009b02:	0011      	movs	r1, r2
 8009b04:	0018      	movs	r0, r3
 8009b06:	f7fc fec5 	bl	8006894 <st_clust>
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009b0a:	4b3c      	ldr	r3, [pc, #240]	@ (8009bfc <f_mkdir+0x388>)
 8009b0c:	2296      	movs	r2, #150	@ 0x96
 8009b0e:	0092      	lsls	r2, r2, #2
 8009b10:	189b      	adds	r3, r3, r2
 8009b12:	19da      	adds	r2, r3, r7
 8009b14:	2380      	movs	r3, #128	@ 0x80
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	58d2      	ldr	r2, [r2, r3]
 8009b1a:	4b39      	ldr	r3, [pc, #228]	@ (8009c00 <f_mkdir+0x38c>)
 8009b1c:	18fb      	adds	r3, r7, r3
 8009b1e:	4939      	ldr	r1, [pc, #228]	@ (8009c04 <f_mkdir+0x390>)
 8009b20:	5c52      	ldrb	r2, [r2, r1]
 8009b22:	701a      	strb	r2, [r3, #0]
 8009b24:	e03c      	b.n	8009ba0 <f_mkdir+0x32c>
					dj.fs->winsect = dsc++;
 8009b26:	2194      	movs	r1, #148	@ 0x94
 8009b28:	0089      	lsls	r1, r1, #2
 8009b2a:	187b      	adds	r3, r7, r1
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	1879      	adds	r1, r7, r1
 8009b32:	600a      	str	r2, [r1, #0]
 8009b34:	4a31      	ldr	r2, [pc, #196]	@ (8009bfc <f_mkdir+0x388>)
 8009b36:	2096      	movs	r0, #150	@ 0x96
 8009b38:	0080      	lsls	r0, r0, #2
 8009b3a:	1812      	adds	r2, r2, r0
 8009b3c:	19d1      	adds	r1, r2, r7
 8009b3e:	2280      	movs	r2, #128	@ 0x80
 8009b40:	0092      	lsls	r2, r2, #2
 8009b42:	5889      	ldr	r1, [r1, r2]
 8009b44:	228b      	movs	r2, #139	@ 0x8b
 8009b46:	0092      	lsls	r2, r2, #2
 8009b48:	508b      	str	r3, [r1, r2]
					dj.fs->wflag = 1;
 8009b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8009bfc <f_mkdir+0x388>)
 8009b4c:	181b      	adds	r3, r3, r0
 8009b4e:	19da      	adds	r2, r3, r7
 8009b50:	2380      	movs	r3, #128	@ 0x80
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	58d2      	ldr	r2, [r2, r3]
 8009b56:	2381      	movs	r3, #129	@ 0x81
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	54d1      	strb	r1, [r2, r3]
					res = sync_window(dj.fs);
 8009b5e:	4b27      	ldr	r3, [pc, #156]	@ (8009bfc <f_mkdir+0x388>)
 8009b60:	181b      	adds	r3, r3, r0
 8009b62:	19da      	adds	r2, r3, r7
 8009b64:	2380      	movs	r3, #128	@ 0x80
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	58d3      	ldr	r3, [r2, r3]
 8009b6a:	4d23      	ldr	r5, [pc, #140]	@ (8009bf8 <f_mkdir+0x384>)
 8009b6c:	197c      	adds	r4, r7, r5
 8009b6e:	0018      	movs	r0, r3
 8009b70:	f7fb ff5e 	bl	8005a30 <sync_window>
 8009b74:	0003      	movs	r3, r0
 8009b76:	7023      	strb	r3, [r4, #0]
					if (res != FR_OK) break;
 8009b78:	197b      	adds	r3, r7, r5
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d115      	bne.n	8009bac <f_mkdir+0x338>
					mem_set(dir, 0, SS(dj.fs));
 8009b80:	2380      	movs	r3, #128	@ 0x80
 8009b82:	009a      	lsls	r2, r3, #2
 8009b84:	238f      	movs	r3, #143	@ 0x8f
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	18fb      	adds	r3, r7, r3
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	0018      	movs	r0, r3
 8009b90:	f7fb fd37 	bl	8005602 <mem_set>
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009b94:	491a      	ldr	r1, [pc, #104]	@ (8009c00 <f_mkdir+0x38c>)
 8009b96:	187b      	adds	r3, r7, r1
 8009b98:	781a      	ldrb	r2, [r3, #0]
 8009b9a:	187b      	adds	r3, r7, r1
 8009b9c:	3a01      	subs	r2, #1
 8009b9e:	701a      	strb	r2, [r3, #0]
 8009ba0:	4b17      	ldr	r3, [pc, #92]	@ (8009c00 <f_mkdir+0x38c>)
 8009ba2:	18fb      	adds	r3, r7, r3
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1bd      	bne.n	8009b26 <f_mkdir+0x2b2>
 8009baa:	e000      	b.n	8009bae <f_mkdir+0x33a>
					if (res != FR_OK) break;
 8009bac:	46c0      	nop			@ (mov r8, r8)
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 8009bae:	4a12      	ldr	r2, [pc, #72]	@ (8009bf8 <f_mkdir+0x384>)
 8009bb0:	18bb      	adds	r3, r7, r2
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d107      	bne.n	8009bc8 <f_mkdir+0x354>
 8009bb8:	18bc      	adds	r4, r7, r2
 8009bba:	2314      	movs	r3, #20
 8009bbc:	18fb      	adds	r3, r7, r3
 8009bbe:	0018      	movs	r0, r3
 8009bc0:	f7fd faa8 	bl	8007114 <dir_register>
 8009bc4:	0003      	movs	r3, r0
 8009bc6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) {
 8009bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8009bf8 <f_mkdir+0x384>)
 8009bca:	18fb      	adds	r3, r7, r3
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d01a      	beq.n	8009c08 <f_mkdir+0x394>
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 8009bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8009bfc <f_mkdir+0x388>)
 8009bd4:	2296      	movs	r2, #150	@ 0x96
 8009bd6:	0092      	lsls	r2, r2, #2
 8009bd8:	189b      	adds	r3, r3, r2
 8009bda:	19da      	adds	r2, r3, r7
 8009bdc:	2380      	movs	r3, #128	@ 0x80
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	58d3      	ldr	r3, [r2, r3]
 8009be2:	2290      	movs	r2, #144	@ 0x90
 8009be4:	0092      	lsls	r2, r2, #2
 8009be6:	18ba      	adds	r2, r7, r2
 8009be8:	6812      	ldr	r2, [r2, #0]
 8009bea:	0011      	movs	r1, r2
 8009bec:	0018      	movs	r0, r3
 8009bee:	f7fc fa9b 	bl	8006128 <remove_chain>
 8009bf2:	e05e      	b.n	8009cb2 <f_mkdir+0x43e>
 8009bf4:	fffffda4 	.word	0xfffffda4
 8009bf8:	00000257 	.word	0x00000257
 8009bfc:	fffffdbc 	.word	0xfffffdbc
 8009c00:	00000256 	.word	0x00000256
 8009c04:	00000202 	.word	0x00000202
			} else {
				dir = dj.dir;
 8009c08:	4b32      	ldr	r3, [pc, #200]	@ (8009cd4 <f_mkdir+0x460>)
 8009c0a:	2496      	movs	r4, #150	@ 0x96
 8009c0c:	00a4      	lsls	r4, r4, #2
 8009c0e:	191b      	adds	r3, r3, r4
 8009c10:	19da      	adds	r2, r3, r7
 8009c12:	2385      	movs	r3, #133	@ 0x85
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	58d3      	ldr	r3, [r2, r3]
 8009c18:	218f      	movs	r1, #143	@ 0x8f
 8009c1a:	0089      	lsls	r1, r1, #2
 8009c1c:	187a      	adds	r2, r7, r1
 8009c1e:	6013      	str	r3, [r2, #0]
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8009c20:	187b      	adds	r3, r7, r1
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	330b      	adds	r3, #11
 8009c26:	2210      	movs	r2, #16
 8009c28:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
 8009c2a:	187b      	adds	r3, r7, r1
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	3316      	adds	r3, #22
 8009c30:	2092      	movs	r0, #146	@ 0x92
 8009c32:	0080      	lsls	r0, r0, #2
 8009c34:	183a      	adds	r2, r7, r0
 8009c36:	6812      	ldr	r2, [r2, #0]
 8009c38:	b2d2      	uxtb	r2, r2
 8009c3a:	701a      	strb	r2, [r3, #0]
 8009c3c:	183b      	adds	r3, r7, r0
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	0a1b      	lsrs	r3, r3, #8
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	187b      	adds	r3, r7, r1
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3317      	adds	r3, #23
 8009c4c:	b2d2      	uxtb	r2, r2
 8009c4e:	701a      	strb	r2, [r3, #0]
 8009c50:	183b      	adds	r3, r7, r0
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	0c1a      	lsrs	r2, r3, #16
 8009c56:	187b      	adds	r3, r7, r1
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	3318      	adds	r3, #24
 8009c5c:	b2d2      	uxtb	r2, r2
 8009c5e:	701a      	strb	r2, [r3, #0]
 8009c60:	183b      	adds	r3, r7, r0
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	0e1a      	lsrs	r2, r3, #24
 8009c66:	187b      	adds	r3, r7, r1
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3319      	adds	r3, #25
 8009c6c:	b2d2      	uxtb	r2, r2
 8009c6e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, dcl);					/* Table start cluster */
 8009c70:	2390      	movs	r3, #144	@ 0x90
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	18fb      	adds	r3, r7, r3
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	187b      	adds	r3, r7, r1
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	0011      	movs	r1, r2
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f7fc fe08 	bl	8006894 <st_clust>
				dj.fs->wflag = 1;
 8009c84:	4b13      	ldr	r3, [pc, #76]	@ (8009cd4 <f_mkdir+0x460>)
 8009c86:	191b      	adds	r3, r3, r4
 8009c88:	19da      	adds	r2, r3, r7
 8009c8a:	2380      	movs	r3, #128	@ 0x80
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	58d2      	ldr	r2, [r2, r3]
 8009c90:	2381      	movs	r3, #129	@ 0x81
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	2101      	movs	r1, #1
 8009c96:	54d1      	strb	r1, [r2, r3]
				res = sync_fs(dj.fs);
 8009c98:	4b0e      	ldr	r3, [pc, #56]	@ (8009cd4 <f_mkdir+0x460>)
 8009c9a:	191b      	adds	r3, r3, r4
 8009c9c:	19da      	adds	r2, r3, r7
 8009c9e:	2380      	movs	r3, #128	@ 0x80
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	58d3      	ldr	r3, [r2, r3]
 8009ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8009cd8 <f_mkdir+0x464>)
 8009ca6:	18bc      	adds	r4, r7, r2
 8009ca8:	0018      	movs	r0, r3
 8009caa:	f7fb ff55 	bl	8005b58 <sync_fs>
 8009cae:	0003      	movs	r3, r0
 8009cb0:	7023      	strb	r3, [r4, #0]
			}
		}
		FREE_BUF();
 8009cb2:	2391      	movs	r3, #145	@ 0x91
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	18fb      	adds	r3, r7, r3
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	0018      	movs	r0, r3
 8009cbc:	f000 fddb 	bl	800a876 <ff_memfree>
	}

	LEAVE_FF(dj.fs, res);
 8009cc0:	4b05      	ldr	r3, [pc, #20]	@ (8009cd8 <f_mkdir+0x464>)
 8009cc2:	18fb      	adds	r3, r7, r3
 8009cc4:	781b      	ldrb	r3, [r3, #0]
}
 8009cc6:	0018      	movs	r0, r3
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	2397      	movs	r3, #151	@ 0x97
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	449d      	add	sp, r3
 8009cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cd2:	46c0      	nop			@ (mov r8, r8)
 8009cd4:	fffffdbc 	.word	0xfffffdbc
 8009cd8:	00000257 	.word	0x00000257

08009cdc <f_mkfs>:
FRESULT f_mkfs (
	const TCHAR* path,	/* Logical drive number */
	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au				/* Size of allocation unit in unit of byte or sector */
)
{
 8009cdc:	b5b0      	push	{r4, r5, r7, lr}
 8009cde:	b098      	sub	sp, #96	@ 0x60
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	607a      	str	r2, [r7, #4]
 8009ce6:	200b      	movs	r0, #11
 8009ce8:	183b      	adds	r3, r7, r0
 8009cea:	1c0a      	adds	r2, r1, #0
 8009cec:	701a      	strb	r2, [r3, #0]
	DWORD eb[2];
#endif


	/* Check mounted drive and clear work area */
	if (sfd > 1) return FR_INVALID_PARAMETER;
 8009cee:	183b      	adds	r3, r7, r0
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d902      	bls.n	8009cfc <f_mkfs+0x20>
 8009cf6:	2313      	movs	r3, #19
 8009cf8:	f000 fcc1 	bl	800a67e <f_mkfs+0x9a2>
	vol = get_ldnumber(&path);
 8009cfc:	230c      	movs	r3, #12
 8009cfe:	18fb      	adds	r3, r7, r3
 8009d00:	0018      	movs	r0, r3
 8009d02:	f7fd febf 	bl	8007a84 <get_ldnumber>
 8009d06:	0003      	movs	r3, r0
 8009d08:	657b      	str	r3, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 8009d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	da02      	bge.n	8009d16 <f_mkfs+0x3a>
 8009d10:	230b      	movs	r3, #11
 8009d12:	f000 fcb4 	bl	800a67e <f_mkfs+0x9a2>
	fs = FatFs[vol];
 8009d16:	4bb3      	ldr	r3, [pc, #716]	@ (8009fe4 <f_mkfs+0x308>)
 8009d18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009d1a:	0092      	lsls	r2, r2, #2
 8009d1c:	58d3      	ldr	r3, [r2, r3]
 8009d1e:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;
 8009d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d102      	bne.n	8009d2c <f_mkfs+0x50>
 8009d26:	230c      	movs	r3, #12
 8009d28:	f000 fca9 	bl	800a67e <f_mkfs+0x9a2>
	fs->fs_type = 0;
 8009d2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d2e:	2380      	movs	r3, #128	@ 0x80
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	2100      	movs	r1, #0
 8009d34:	54d1      	strb	r1, [r2, r3]
	pdrv = LD2PD(vol);	/* Physical drive */
 8009d36:	214f      	movs	r1, #79	@ 0x4f
 8009d38:	187b      	adds	r3, r7, r1
 8009d3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009d3c:	701a      	strb	r2, [r3, #0]
	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
 8009d3e:	234e      	movs	r3, #78	@ 0x4e
 8009d40:	18fb      	adds	r3, r7, r3
 8009d42:	2200      	movs	r2, #0
 8009d44:	701a      	strb	r2, [r3, #0]

	/* Get disk statics */
	stat = disk_initialize(pdrv);
 8009d46:	255f      	movs	r5, #95	@ 0x5f
 8009d48:	197c      	adds	r4, r7, r5
 8009d4a:	187b      	adds	r3, r7, r1
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	0018      	movs	r0, r3
 8009d50:	f7fb fb92 	bl	8005478 <disk_initialize>
 8009d54:	0003      	movs	r3, r0
 8009d56:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8009d58:	197b      	adds	r3, r7, r5
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	4013      	ands	r3, r2
 8009d60:	d002      	beq.n	8009d68 <f_mkfs+0x8c>
 8009d62:	2303      	movs	r3, #3
 8009d64:	f000 fc8b 	bl	800a67e <f_mkfs+0x9a2>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8009d68:	235f      	movs	r3, #95	@ 0x5f
 8009d6a:	18fb      	adds	r3, r7, r3
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	2204      	movs	r2, #4
 8009d70:	4013      	ands	r3, r2
 8009d72:	d002      	beq.n	8009d7a <f_mkfs+0x9e>
 8009d74:	230a      	movs	r3, #10
 8009d76:	f000 fc82 	bl	800a67e <f_mkfs+0x9a2>
		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
 8009d7a:	2314      	movs	r3, #20
 8009d7c:	18fa      	adds	r2, r7, r3
 8009d7e:	234f      	movs	r3, #79	@ 0x4f
 8009d80:	18fb      	adds	r3, r7, r3
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2101      	movs	r1, #1
 8009d86:	0018      	movs	r0, r3
 8009d88:	f7fb fbf6 	bl	8005578 <disk_ioctl>
 8009d8c:	1e03      	subs	r3, r0, #0
 8009d8e:	d102      	bne.n	8009d96 <f_mkfs+0xba>
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d94:	d802      	bhi.n	8009d9c <f_mkfs+0xc0>
			return FR_DISK_ERR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	f000 fc71 	bl	800a67e <f_mkfs+0x9a2>
		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
 8009d9c:	230b      	movs	r3, #11
 8009d9e:	18fb      	adds	r3, r7, r3
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <f_mkfs+0xce>
 8009da6:	2300      	movs	r3, #0
 8009da8:	e000      	b.n	8009dac <f_mkfs+0xd0>
 8009daa:	233f      	movs	r3, #63	@ 0x3f
 8009dac:	65bb      	str	r3, [r7, #88]	@ 0x58
		n_vol -= b_vol;				/* Volume size */
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	617b      	str	r3, [r7, #20]
	}

	if (au & (au - 1)) au = 0;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	d001      	beq.n	8009dc4 <f_mkfs+0xe8>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	607b      	str	r3, [r7, #4]
	if (!au) {						/* AU auto selection */
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d11a      	bne.n	8009e00 <f_mkfs+0x124>
		vs = n_vol / (2000 / (SS(fs) / 512));
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	22fa      	movs	r2, #250	@ 0xfa
 8009dce:	00d1      	lsls	r1, r2, #3
 8009dd0:	0018      	movs	r0, r3
 8009dd2:	f7f6 f9b5 	bl	8000140 <__udivsi3>
 8009dd6:	0003      	movs	r3, r0
 8009dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for (i = 0; vs < vst[i]; i++) ;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dde:	e002      	b.n	8009de6 <f_mkfs+0x10a>
 8009de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009de2:	3301      	adds	r3, #1
 8009de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009de6:	4b80      	ldr	r3, [pc, #512]	@ (8009fe8 <f_mkfs+0x30c>)
 8009de8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dea:	0052      	lsls	r2, r2, #1
 8009dec:	5ad3      	ldrh	r3, [r2, r3]
 8009dee:	001a      	movs	r2, r3
 8009df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d3f4      	bcc.n	8009de0 <f_mkfs+0x104>
		au = cst[i];
 8009df6:	4b7d      	ldr	r3, [pc, #500]	@ (8009fec <f_mkfs+0x310>)
 8009df8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dfa:	0052      	lsls	r2, r2, #1
 8009dfc:	5ad3      	ldrh	r3, [r2, r3]
 8009dfe:	607b      	str	r3, [r7, #4]
	}
	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	2380      	movs	r3, #128	@ 0x80
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d302      	bcc.n	8009e10 <f_mkfs+0x134>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	0a5b      	lsrs	r3, r3, #9
 8009e0e:	607b      	str	r3, [r7, #4]
	if (!au) au = 1;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d101      	bne.n	8009e1a <f_mkfs+0x13e>
 8009e16:	2301      	movs	r3, #1
 8009e18:	607b      	str	r3, [r7, #4]
	if (au > 128) au = 128;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b80      	cmp	r3, #128	@ 0x80
 8009e1e:	d901      	bls.n	8009e24 <f_mkfs+0x148>
 8009e20:	2380      	movs	r3, #128	@ 0x80
 8009e22:	607b      	str	r3, [r7, #4]

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	0018      	movs	r0, r3
 8009e2a:	f7f6 f989 	bl	8000140 <__udivsi3>
 8009e2e:	0003      	movs	r3, r0
 8009e30:	62bb      	str	r3, [r7, #40]	@ 0x28
	fmt = FS_FAT12;
 8009e32:	2133      	movs	r1, #51	@ 0x33
 8009e34:	187b      	adds	r3, r7, r1
 8009e36:	2201      	movs	r2, #1
 8009e38:	701a      	strb	r2, [r3, #0]
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 8009e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3c:	4a6c      	ldr	r2, [pc, #432]	@ (8009ff0 <f_mkfs+0x314>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d902      	bls.n	8009e48 <f_mkfs+0x16c>
 8009e42:	187b      	adds	r3, r7, r1
 8009e44:	2202      	movs	r2, #2
 8009e46:	701a      	strb	r2, [r3, #0]
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 8009e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4a:	4a6a      	ldr	r2, [pc, #424]	@ (8009ff4 <f_mkfs+0x318>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d903      	bls.n	8009e58 <f_mkfs+0x17c>
 8009e50:	2333      	movs	r3, #51	@ 0x33
 8009e52:	18fb      	adds	r3, r7, r3
 8009e54:	2203      	movs	r2, #3
 8009e56:	701a      	strb	r2, [r3, #0]

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
 8009e58:	2333      	movs	r3, #51	@ 0x33
 8009e5a:	18fb      	adds	r3, r7, r3
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	2b03      	cmp	r3, #3
 8009e60:	d10b      	bne.n	8009e7a <f_mkfs+0x19e>
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 8009e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4a64      	ldr	r2, [pc, #400]	@ (8009ff8 <f_mkfs+0x31c>)
 8009e68:	4694      	mov	ip, r2
 8009e6a:	4463      	add	r3, ip
 8009e6c:	0a5b      	lsrs	r3, r3, #9
 8009e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
		n_rsv = 32;
 8009e70:	2320      	movs	r3, #32
 8009e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
		n_dir = 0;
 8009e74:	2300      	movs	r3, #0
 8009e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e78:	e01a      	b.n	8009eb0 <f_mkfs+0x1d4>
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
 8009e7a:	2333      	movs	r3, #51	@ 0x33
 8009e7c:	18fb      	adds	r3, r7, r3
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d107      	bne.n	8009e94 <f_mkfs+0x1b8>
 8009e84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e86:	0013      	movs	r3, r2
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	189b      	adds	r3, r3, r2
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	085b      	lsrs	r3, r3, #1
 8009e90:	3303      	adds	r3, #3
 8009e92:	e002      	b.n	8009e9a <f_mkfs+0x1be>
 8009e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e96:	3302      	adds	r3, #2
 8009e98:	005b      	lsls	r3, r3, #1
 8009e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9e:	4a57      	ldr	r2, [pc, #348]	@ (8009ffc <f_mkfs+0x320>)
 8009ea0:	4694      	mov	ip, r2
 8009ea2:	4463      	add	r3, ip
 8009ea4:	0a5b      	lsrs	r3, r3, #9
 8009ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
		n_rsv = 1;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
 8009eac:	2320      	movs	r3, #32
 8009eae:	637b      	str	r3, [r7, #52]	@ 0x34
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
 8009eb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eb4:	18d3      	adds	r3, r2, r3
 8009eb6:	643b      	str	r3, [r7, #64]	@ 0x40
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
 8009eb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ebc:	18d3      	adds	r3, r2, r3
 8009ebe:	627b      	str	r3, [r7, #36]	@ 0x24
	b_data = b_dir + n_dir;				/* Data area start sector */
 8009ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec4:	18d3      	adds	r3, r2, r3
 8009ec6:	623b      	str	r3, [r7, #32]
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8009ec8:	6a3a      	ldr	r2, [r7, #32]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	18d2      	adds	r2, r2, r3
 8009ece:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ed0:	1ad2      	subs	r2, r2, r3
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d902      	bls.n	8009ede <f_mkfs+0x202>
 8009ed8:	230e      	movs	r3, #14
 8009eda:	f000 fbd0 	bl	800a67e <f_mkfs+0x9a2>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
 8009ede:	2318      	movs	r3, #24
 8009ee0:	18fa      	adds	r2, r7, r3
 8009ee2:	234f      	movs	r3, #79	@ 0x4f
 8009ee4:	18fb      	adds	r3, r7, r3
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	2103      	movs	r1, #3
 8009eea:	0018      	movs	r0, r3
 8009eec:	f7fb fb44 	bl	8005578 <disk_ioctl>
 8009ef0:	1e03      	subs	r3, r0, #0
 8009ef2:	d107      	bne.n	8009f04 <f_mkfs+0x228>
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d004      	beq.n	8009f04 <f_mkfs+0x228>
 8009efa:	69ba      	ldr	r2, [r7, #24]
 8009efc:	2380      	movs	r3, #128	@ 0x80
 8009efe:	021b      	lsls	r3, r3, #8
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d901      	bls.n	8009f08 <f_mkfs+0x22c>
 8009f04:	2301      	movs	r3, #1
 8009f06:	61bb      	str	r3, [r7, #24]
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 8009f08:	69ba      	ldr	r2, [r7, #24]
 8009f0a:	6a3b      	ldr	r3, [r7, #32]
 8009f0c:	18d3      	adds	r3, r2, r3
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	69ba      	ldr	r2, [r7, #24]
 8009f12:	4252      	negs	r2, r2
 8009f14:	4013      	ands	r3, r2
 8009f16:	61bb      	str	r3, [r7, #24]
	n = (n - b_data) / N_FATS;
 8009f18:	69ba      	ldr	r2, [r7, #24]
 8009f1a:	6a3b      	ldr	r3, [r7, #32]
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	61bb      	str	r3, [r7, #24]
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 8009f20:	2333      	movs	r3, #51	@ 0x33
 8009f22:	18fb      	adds	r3, r7, r3
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d108      	bne.n	8009f3c <f_mkfs+0x260>
		n_rsv += n;
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f2e:	18d3      	adds	r3, r2, r3
 8009f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
		b_fat += n;
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f36:	18d3      	adds	r3, r2, r3
 8009f38:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f3a:	e003      	b.n	8009f44 <f_mkfs+0x268>
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f40:	18d3      	adds	r3, r2, r3
 8009f42:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f48:	1ad2      	subs	r2, r2, r3
 8009f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f4c:	1ad2      	subs	r2, r2, r3
 8009f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	6879      	ldr	r1, [r7, #4]
 8009f54:	0018      	movs	r0, r3
 8009f56:	f7f6 f8f3 	bl	8000140 <__udivsi3>
 8009f5a:	0003      	movs	r3, r0
 8009f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 8009f5e:	2333      	movs	r3, #51	@ 0x33
 8009f60:	18fb      	adds	r3, r7, r3
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d103      	bne.n	8009f70 <f_mkfs+0x294>
 8009f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6a:	4a21      	ldr	r2, [pc, #132]	@ (8009ff0 <f_mkfs+0x314>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d908      	bls.n	8009f82 <f_mkfs+0x2a6>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 8009f70:	2333      	movs	r3, #51	@ 0x33
 8009f72:	18fb      	adds	r3, r7, r3
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	d105      	bne.n	8009f86 <f_mkfs+0x2aa>
 8009f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ff4 <f_mkfs+0x318>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d801      	bhi.n	8009f86 <f_mkfs+0x2aa>
		return FR_MKFS_ABORTED;
 8009f82:	230e      	movs	r3, #14
 8009f84:	e37b      	b.n	800a67e <f_mkfs+0x9a2>

	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
 8009f86:	2333      	movs	r3, #51	@ 0x33
 8009f88:	18fb      	adds	r3, r7, r3
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	2b03      	cmp	r3, #3
 8009f8e:	d104      	bne.n	8009f9a <f_mkfs+0x2be>
		sys = 0x0C;		/* FAT32X */
 8009f90:	234c      	movs	r3, #76	@ 0x4c
 8009f92:	18fb      	adds	r3, r7, r3
 8009f94:	220c      	movs	r2, #12
 8009f96:	701a      	strb	r2, [r3, #0]
 8009f98:	e019      	b.n	8009fce <f_mkfs+0x2f2>
	} else {
		if (fmt == FS_FAT12 && n_vol < 0x10000) {
 8009f9a:	2333      	movs	r3, #51	@ 0x33
 8009f9c:	18fb      	adds	r3, r7, r3
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d109      	bne.n	8009fb8 <f_mkfs+0x2dc>
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	2380      	movs	r3, #128	@ 0x80
 8009fa8:	025b      	lsls	r3, r3, #9
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d204      	bcs.n	8009fb8 <f_mkfs+0x2dc>
			sys = 0x01;	/* FAT12(<65536) */
 8009fae:	234c      	movs	r3, #76	@ 0x4c
 8009fb0:	18fb      	adds	r3, r7, r3
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	701a      	strb	r2, [r3, #0]
 8009fb6:	e00a      	b.n	8009fce <f_mkfs+0x2f2>
		} else {
			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	2380      	movs	r3, #128	@ 0x80
 8009fbc:	025b      	lsls	r3, r3, #9
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d201      	bcs.n	8009fc6 <f_mkfs+0x2ea>
 8009fc2:	2204      	movs	r2, #4
 8009fc4:	e000      	b.n	8009fc8 <f_mkfs+0x2ec>
 8009fc6:	2206      	movs	r2, #6
 8009fc8:	234c      	movs	r3, #76	@ 0x4c
 8009fca:	18fb      	adds	r3, r7, r3
 8009fcc:	701a      	strb	r2, [r3, #0]
		tbl[4] = sys;
		if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to teh MBR */
			return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No partition table (SFD) */
 8009fce:	230b      	movs	r3, #11
 8009fd0:	18fb      	adds	r3, r7, r3
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d013      	beq.n	800a000 <f_mkfs+0x324>
			md = 0xF0;
 8009fd8:	234d      	movs	r3, #77	@ 0x4d
 8009fda:	18fb      	adds	r3, r7, r3
 8009fdc:	22f0      	movs	r2, #240	@ 0xf0
 8009fde:	701a      	strb	r2, [r3, #0]
 8009fe0:	e088      	b.n	800a0f4 <f_mkfs+0x418>
 8009fe2:	46c0      	nop			@ (mov r8, r8)
 8009fe4:	200006c0 	.word	0x200006c0
 8009fe8:	0800c280 	.word	0x0800c280
 8009fec:	0800c298 	.word	0x0800c298
 8009ff0:	00000ff5 	.word	0x00000ff5
 8009ff4:	0000fff5 	.word	0x0000fff5
 8009ff8:	00000207 	.word	0x00000207
 8009ffc:	000001ff 	.word	0x000001ff
		} else {	/* Create partition table (FDISK) */
			mem_set(fs->win.d8, 0, SS(fs));
 800a000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a002:	2280      	movs	r2, #128	@ 0x80
 800a004:	0092      	lsls	r2, r2, #2
 800a006:	2100      	movs	r1, #0
 800a008:	0018      	movs	r0, r3
 800a00a:	f7fb fafa 	bl	8005602 <mem_set>
			tbl = fs->win.d8 + MBR_Table;	/* Create partition table for single partition in the drive */
 800a00e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a010:	33bf      	adds	r3, #191	@ 0xbf
 800a012:	33ff      	adds	r3, #255	@ 0xff
 800a014:	61fb      	str	r3, [r7, #28]
			tbl[1] = 1;						/* Partition start head */
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	3301      	adds	r3, #1
 800a01a:	2201      	movs	r2, #1
 800a01c:	701a      	strb	r2, [r3, #0]
			tbl[2] = 1;						/* Partition start sector */
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	3302      	adds	r3, #2
 800a022:	2201      	movs	r2, #1
 800a024:	701a      	strb	r2, [r3, #0]
			tbl[3] = 0;						/* Partition start cylinder */
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	3303      	adds	r3, #3
 800a02a:	2200      	movs	r2, #0
 800a02c:	701a      	strb	r2, [r3, #0]
			tbl[4] = sys;					/* System type */
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	3304      	adds	r3, #4
 800a032:	224c      	movs	r2, #76	@ 0x4c
 800a034:	18ba      	adds	r2, r7, r2
 800a036:	7812      	ldrb	r2, [r2, #0]
 800a038:	701a      	strb	r2, [r3, #0]
			tbl[5] = 254;					/* Partition end head */
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	3305      	adds	r3, #5
 800a03e:	22fe      	movs	r2, #254	@ 0xfe
 800a040:	701a      	strb	r2, [r3, #0]
			n = (b_vol + n_vol) / 63 / 255;
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a046:	18d3      	adds	r3, r2, r3
 800a048:	49ee      	ldr	r1, [pc, #952]	@ (800a404 <f_mkfs+0x728>)
 800a04a:	0018      	movs	r0, r3
 800a04c:	f7f6 f878 	bl	8000140 <__udivsi3>
 800a050:	0003      	movs	r3, r0
 800a052:	61bb      	str	r3, [r7, #24]
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	089b      	lsrs	r3, r3, #2
 800a058:	b2da      	uxtb	r2, r3
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	3306      	adds	r3, #6
 800a05e:	213f      	movs	r1, #63	@ 0x3f
 800a060:	430a      	orrs	r2, r1
 800a062:	b2d2      	uxtb	r2, r2
 800a064:	701a      	strb	r2, [r3, #0]
			tbl[7] = (BYTE)n;				/* End cylinder */
 800a066:	69ba      	ldr	r2, [r7, #24]
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	3307      	adds	r3, #7
 800a06c:	b2d2      	uxtb	r2, r2
 800a06e:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	3308      	adds	r3, #8
 800a074:	223f      	movs	r2, #63	@ 0x3f
 800a076:	701a      	strb	r2, [r3, #0]
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	3309      	adds	r3, #9
 800a07c:	2200      	movs	r2, #0
 800a07e:	701a      	strb	r2, [r3, #0]
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	330a      	adds	r3, #10
 800a084:	2200      	movs	r2, #0
 800a086:	701a      	strb	r2, [r3, #0]
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	330b      	adds	r3, #11
 800a08c:	2200      	movs	r2, #0
 800a08e:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 800a090:	697a      	ldr	r2, [r7, #20]
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	330c      	adds	r3, #12
 800a096:	b2d2      	uxtb	r2, r2
 800a098:	701a      	strb	r2, [r3, #0]
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	0a1b      	lsrs	r3, r3, #8
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	330d      	adds	r3, #13
 800a0a6:	b2d2      	uxtb	r2, r2
 800a0a8:	701a      	strb	r2, [r3, #0]
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	0c1a      	lsrs	r2, r3, #16
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	330e      	adds	r3, #14
 800a0b2:	b2d2      	uxtb	r2, r2
 800a0b4:	701a      	strb	r2, [r3, #0]
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	0e1a      	lsrs	r2, r3, #24
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	330f      	adds	r3, #15
 800a0be:	b2d2      	uxtb	r2, r2
 800a0c0:	701a      	strb	r2, [r3, #0]
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 800a0c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a0c4:	23ff      	movs	r3, #255	@ 0xff
 800a0c6:	005b      	lsls	r3, r3, #1
 800a0c8:	2155      	movs	r1, #85	@ 0x55
 800a0ca:	54d1      	strb	r1, [r2, r3]
 800a0cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0ce:	4ace      	ldr	r2, [pc, #824]	@ (800a408 <f_mkfs+0x72c>)
 800a0d0:	21aa      	movs	r1, #170	@ 0xaa
 800a0d2:	5499      	strb	r1, [r3, r2]
			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 800a0d4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a0d6:	234f      	movs	r3, #79	@ 0x4f
 800a0d8:	18fb      	adds	r3, r7, r3
 800a0da:	7818      	ldrb	r0, [r3, #0]
 800a0dc:	2301      	movs	r3, #1
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f7fb fa22 	bl	8005528 <disk_write>
 800a0e4:	1e03      	subs	r3, r0, #0
 800a0e6:	d001      	beq.n	800a0ec <f_mkfs+0x410>
				return FR_DISK_ERR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e2c8      	b.n	800a67e <f_mkfs+0x9a2>
			md = 0xF8;
 800a0ec:	234d      	movs	r3, #77	@ 0x4d
 800a0ee:	18fb      	adds	r3, r7, r3
 800a0f0:	22f8      	movs	r2, #248	@ 0xf8
 800a0f2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Create BPB in the VBR */
	tbl = fs->win.d8;							/* Clear sector */
 800a0f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0f6:	61fb      	str	r3, [r7, #28]
	mem_set(tbl, 0, SS(fs));
 800a0f8:	2380      	movs	r3, #128	@ 0x80
 800a0fa:	009a      	lsls	r2, r3, #2
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	2100      	movs	r1, #0
 800a100:	0018      	movs	r0, r3
 800a102:	f7fb fa7e 	bl	8005602 <mem_set>
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
 800a106:	49c1      	ldr	r1, [pc, #772]	@ (800a40c <f_mkfs+0x730>)
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	220b      	movs	r2, #11
 800a10c:	0018      	movs	r0, r3
 800a10e:	f7fb fa5b 	bl	80055c8 <mem_cpy>
	i = SS(fs);								/* Sector size */
 800a112:	2380      	movs	r3, #128	@ 0x80
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	647b      	str	r3, [r7, #68]	@ 0x44
	ST_WORD(tbl + BPB_BytsPerSec, i);
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	330b      	adds	r3, #11
 800a11c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a11e:	b2d2      	uxtb	r2, r2
 800a120:	701a      	strb	r2, [r3, #0]
 800a122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a124:	b29b      	uxth	r3, r3
 800a126:	0a1b      	lsrs	r3, r3, #8
 800a128:	b29a      	uxth	r2, r3
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	330c      	adds	r3, #12
 800a12e:	b2d2      	uxtb	r2, r2
 800a130:	701a      	strb	r2, [r3, #0]
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	330d      	adds	r3, #13
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	b2d2      	uxtb	r2, r2
 800a13a:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	330e      	adds	r3, #14
 800a140:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a142:	b2d2      	uxtb	r2, r2
 800a144:	701a      	strb	r2, [r3, #0]
 800a146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a148:	b29b      	uxth	r3, r3
 800a14a:	0a1b      	lsrs	r3, r3, #8
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	330f      	adds	r3, #15
 800a152:	b2d2      	uxtb	r2, r2
 800a154:	701a      	strb	r2, [r3, #0]
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	3310      	adds	r3, #16
 800a15a:	2201      	movs	r2, #1
 800a15c:	701a      	strb	r2, [r3, #0]
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 800a15e:	2333      	movs	r3, #51	@ 0x33
 800a160:	18fb      	adds	r3, r7, r3
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	2b03      	cmp	r3, #3
 800a166:	d101      	bne.n	800a16c <f_mkfs+0x490>
 800a168:	2300      	movs	r3, #0
 800a16a:	e001      	b.n	800a170 <f_mkfs+0x494>
 800a16c:	2380      	movs	r3, #128	@ 0x80
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	647b      	str	r3, [r7, #68]	@ 0x44
	ST_WORD(tbl + BPB_RootEntCnt, i);
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	3311      	adds	r3, #17
 800a176:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a178:	b2d2      	uxtb	r2, r2
 800a17a:	701a      	strb	r2, [r3, #0]
 800a17c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a17e:	b29b      	uxth	r3, r3
 800a180:	0a1b      	lsrs	r3, r3, #8
 800a182:	b29a      	uxth	r2, r3
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	3312      	adds	r3, #18
 800a188:	b2d2      	uxtb	r2, r2
 800a18a:	701a      	strb	r2, [r3, #0]
	if (n_vol < 0x10000) {					/* Number of total sectors */
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	2380      	movs	r3, #128	@ 0x80
 800a190:	025b      	lsls	r3, r3, #9
 800a192:	429a      	cmp	r2, r3
 800a194:	d20d      	bcs.n	800a1b2 <f_mkfs+0x4d6>
		ST_WORD(tbl + BPB_TotSec16, n_vol);
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	3313      	adds	r3, #19
 800a19c:	b2d2      	uxtb	r2, r2
 800a19e:	701a      	strb	r2, [r3, #0]
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	0a1b      	lsrs	r3, r3, #8
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	3314      	adds	r3, #20
 800a1ac:	b2d2      	uxtb	r2, r2
 800a1ae:	701a      	strb	r2, [r3, #0]
 800a1b0:	e018      	b.n	800a1e4 <f_mkfs+0x508>
	} else {
		ST_DWORD(tbl + BPB_TotSec32, n_vol);
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	3320      	adds	r3, #32
 800a1b8:	b2d2      	uxtb	r2, r2
 800a1ba:	701a      	strb	r2, [r3, #0]
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	0a1b      	lsrs	r3, r3, #8
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	3321      	adds	r3, #33	@ 0x21
 800a1c8:	b2d2      	uxtb	r2, r2
 800a1ca:	701a      	strb	r2, [r3, #0]
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	0c1a      	lsrs	r2, r3, #16
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	3322      	adds	r3, #34	@ 0x22
 800a1d4:	b2d2      	uxtb	r2, r2
 800a1d6:	701a      	strb	r2, [r3, #0]
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	0e1a      	lsrs	r2, r3, #24
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	3323      	adds	r3, #35	@ 0x23
 800a1e0:	b2d2      	uxtb	r2, r2
 800a1e2:	701a      	strb	r2, [r3, #0]
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	3315      	adds	r3, #21
 800a1e8:	224d      	movs	r2, #77	@ 0x4d
 800a1ea:	18ba      	adds	r2, r7, r2
 800a1ec:	7812      	ldrb	r2, [r2, #0]
 800a1ee:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	3318      	adds	r3, #24
 800a1f4:	223f      	movs	r2, #63	@ 0x3f
 800a1f6:	701a      	strb	r2, [r3, #0]
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	3319      	adds	r3, #25
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	331a      	adds	r3, #26
 800a204:	22ff      	movs	r2, #255	@ 0xff
 800a206:	701a      	strb	r2, [r3, #0]
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	331b      	adds	r3, #27
 800a20c:	2200      	movs	r2, #0
 800a20e:	701a      	strb	r2, [r3, #0]
	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	331c      	adds	r3, #28
 800a214:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a216:	b2d2      	uxtb	r2, r2
 800a218:	701a      	strb	r2, [r3, #0]
 800a21a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	0a1b      	lsrs	r3, r3, #8
 800a220:	b29a      	uxth	r2, r3
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	331d      	adds	r3, #29
 800a226:	b2d2      	uxtb	r2, r2
 800a228:	701a      	strb	r2, [r3, #0]
 800a22a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a22c:	0c1a      	lsrs	r2, r3, #16
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	331e      	adds	r3, #30
 800a232:	b2d2      	uxtb	r2, r2
 800a234:	701a      	strb	r2, [r3, #0]
 800a236:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a238:	0e1a      	lsrs	r2, r3, #24
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	331f      	adds	r3, #31
 800a23e:	b2d2      	uxtb	r2, r2
 800a240:	701a      	strb	r2, [r3, #0]
	n = GET_FATTIME();						/* Use current time as VSN */
 800a242:	f7fb f8f1 	bl	8005428 <get_fattime>
 800a246:	0003      	movs	r3, r0
 800a248:	61bb      	str	r3, [r7, #24]
	if (fmt == FS_FAT32) {
 800a24a:	2333      	movs	r3, #51	@ 0x33
 800a24c:	18fb      	adds	r3, r7, r3
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	2b03      	cmp	r3, #3
 800a252:	d161      	bne.n	800a318 <f_mkfs+0x63c>
		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
 800a254:	69ba      	ldr	r2, [r7, #24]
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	3343      	adds	r3, #67	@ 0x43
 800a25a:	b2d2      	uxtb	r2, r2
 800a25c:	701a      	strb	r2, [r3, #0]
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	b29b      	uxth	r3, r3
 800a262:	0a1b      	lsrs	r3, r3, #8
 800a264:	b29a      	uxth	r2, r3
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	3344      	adds	r3, #68	@ 0x44
 800a26a:	b2d2      	uxtb	r2, r2
 800a26c:	701a      	strb	r2, [r3, #0]
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	0c1a      	lsrs	r2, r3, #16
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	3345      	adds	r3, #69	@ 0x45
 800a276:	b2d2      	uxtb	r2, r2
 800a278:	701a      	strb	r2, [r3, #0]
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	0e1a      	lsrs	r2, r3, #24
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	3346      	adds	r3, #70	@ 0x46
 800a282:	b2d2      	uxtb	r2, r2
 800a284:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	3324      	adds	r3, #36	@ 0x24
 800a28a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a28c:	b2d2      	uxtb	r2, r2
 800a28e:	701a      	strb	r2, [r3, #0]
 800a290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a292:	b29b      	uxth	r3, r3
 800a294:	0a1b      	lsrs	r3, r3, #8
 800a296:	b29a      	uxth	r2, r3
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	3325      	adds	r3, #37	@ 0x25
 800a29c:	b2d2      	uxtb	r2, r2
 800a29e:	701a      	strb	r2, [r3, #0]
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a2:	0c1a      	lsrs	r2, r3, #16
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	3326      	adds	r3, #38	@ 0x26
 800a2a8:	b2d2      	uxtb	r2, r2
 800a2aa:	701a      	strb	r2, [r3, #0]
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ae:	0e1a      	lsrs	r2, r3, #24
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	3327      	adds	r3, #39	@ 0x27
 800a2b4:	b2d2      	uxtb	r2, r2
 800a2b6:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	332c      	adds	r3, #44	@ 0x2c
 800a2bc:	2202      	movs	r2, #2
 800a2be:	701a      	strb	r2, [r3, #0]
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	332d      	adds	r3, #45	@ 0x2d
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	701a      	strb	r2, [r3, #0]
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	332e      	adds	r3, #46	@ 0x2e
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	701a      	strb	r2, [r3, #0]
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	332f      	adds	r3, #47	@ 0x2f
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	3330      	adds	r3, #48	@ 0x30
 800a2dc:	2201      	movs	r2, #1
 800a2de:	701a      	strb	r2, [r3, #0]
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	3331      	adds	r3, #49	@ 0x31
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	3332      	adds	r3, #50	@ 0x32
 800a2ec:	2206      	movs	r2, #6
 800a2ee:	701a      	strb	r2, [r3, #0]
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	3333      	adds	r3, #51	@ 0x33
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	3340      	adds	r3, #64	@ 0x40
 800a2fc:	2280      	movs	r2, #128	@ 0x80
 800a2fe:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	3342      	adds	r3, #66	@ 0x42
 800a304:	2229      	movs	r2, #41	@ 0x29
 800a306:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	3347      	adds	r3, #71	@ 0x47
 800a30c:	4940      	ldr	r1, [pc, #256]	@ (800a410 <f_mkfs+0x734>)
 800a30e:	2213      	movs	r2, #19
 800a310:	0018      	movs	r0, r3
 800a312:	f7fb f959 	bl	80055c8 <mem_cpy>
 800a316:	e034      	b.n	800a382 <f_mkfs+0x6a6>
	} else {
		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
 800a318:	69ba      	ldr	r2, [r7, #24]
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	3327      	adds	r3, #39	@ 0x27
 800a31e:	b2d2      	uxtb	r2, r2
 800a320:	701a      	strb	r2, [r3, #0]
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	b29b      	uxth	r3, r3
 800a326:	0a1b      	lsrs	r3, r3, #8
 800a328:	b29a      	uxth	r2, r3
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	3328      	adds	r3, #40	@ 0x28
 800a32e:	b2d2      	uxtb	r2, r2
 800a330:	701a      	strb	r2, [r3, #0]
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	0c1a      	lsrs	r2, r3, #16
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	3329      	adds	r3, #41	@ 0x29
 800a33a:	b2d2      	uxtb	r2, r2
 800a33c:	701a      	strb	r2, [r3, #0]
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	0e1a      	lsrs	r2, r3, #24
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	332a      	adds	r3, #42	@ 0x2a
 800a346:	b2d2      	uxtb	r2, r2
 800a348:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	3316      	adds	r3, #22
 800a34e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a350:	b2d2      	uxtb	r2, r2
 800a352:	701a      	strb	r2, [r3, #0]
 800a354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a356:	b29b      	uxth	r3, r3
 800a358:	0a1b      	lsrs	r3, r3, #8
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	3317      	adds	r3, #23
 800a360:	b2d2      	uxtb	r2, r2
 800a362:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	3324      	adds	r3, #36	@ 0x24
 800a368:	2280      	movs	r2, #128	@ 0x80
 800a36a:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	3326      	adds	r3, #38	@ 0x26
 800a370:	2229      	movs	r2, #41	@ 0x29
 800a372:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	332b      	adds	r3, #43	@ 0x2b
 800a378:	4926      	ldr	r1, [pc, #152]	@ (800a414 <f_mkfs+0x738>)
 800a37a:	2213      	movs	r2, #19
 800a37c:	0018      	movs	r0, r3
 800a37e:	f7fb f923 	bl	80055c8 <mem_cpy>
	}
	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	33ff      	adds	r3, #255	@ 0xff
 800a386:	33ff      	adds	r3, #255	@ 0xff
 800a388:	2255      	movs	r2, #85	@ 0x55
 800a38a:	701a      	strb	r2, [r3, #0]
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	4a1e      	ldr	r2, [pc, #120]	@ (800a408 <f_mkfs+0x72c>)
 800a390:	4694      	mov	ip, r2
 800a392:	4463      	add	r3, ip
 800a394:	22aa      	movs	r2, #170	@ 0xaa
 800a396:	701a      	strb	r2, [r3, #0]
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
 800a398:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a39a:	69f9      	ldr	r1, [r7, #28]
 800a39c:	234f      	movs	r3, #79	@ 0x4f
 800a39e:	18fb      	adds	r3, r7, r3
 800a3a0:	7818      	ldrb	r0, [r3, #0]
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	f7fb f8c0 	bl	8005528 <disk_write>
 800a3a8:	1e03      	subs	r3, r0, #0
 800a3aa:	d001      	beq.n	800a3b0 <f_mkfs+0x6d4>
		return FR_DISK_ERR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e166      	b.n	800a67e <f_mkfs+0x9a2>
	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
 800a3b0:	2333      	movs	r3, #51	@ 0x33
 800a3b2:	18fb      	adds	r3, r7, r3
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d108      	bne.n	800a3cc <f_mkfs+0x6f0>
		disk_write(pdrv, tbl, b_vol + 6, 1);
 800a3ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a3bc:	1d9a      	adds	r2, r3, #6
 800a3be:	69f9      	ldr	r1, [r7, #28]
 800a3c0:	234f      	movs	r3, #79	@ 0x4f
 800a3c2:	18fb      	adds	r3, r7, r3
 800a3c4:	7818      	ldrb	r0, [r3, #0]
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	f7fb f8ae 	bl	8005528 <disk_write>

	/* Initialize FAT area */
	wsect = b_fat;
 800a3cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3ce:	64bb      	str	r3, [r7, #72]	@ 0x48
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3d4:	e0ab      	b.n	800a52e <f_mkfs+0x852>
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 800a3d6:	2380      	movs	r3, #128	@ 0x80
 800a3d8:	009a      	lsls	r2, r3, #2
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	2100      	movs	r1, #0
 800a3de:	0018      	movs	r0, r3
 800a3e0:	f7fb f90f 	bl	8005602 <mem_set>
		n = md;								/* Media descriptor byte */
 800a3e4:	234d      	movs	r3, #77	@ 0x4d
 800a3e6:	18fb      	adds	r3, r7, r3
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	61bb      	str	r3, [r7, #24]
		if (fmt != FS_FAT32) {
 800a3ec:	2233      	movs	r2, #51	@ 0x33
 800a3ee:	18bb      	adds	r3, r7, r2
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d02f      	beq.n	800a456 <f_mkfs+0x77a>
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 800a3f6:	18bb      	adds	r3, r7, r2
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d10e      	bne.n	800a41c <f_mkfs+0x740>
 800a3fe:	4b06      	ldr	r3, [pc, #24]	@ (800a418 <f_mkfs+0x73c>)
 800a400:	e00d      	b.n	800a41e <f_mkfs+0x742>
 800a402:	46c0      	nop			@ (mov r8, r8)
 800a404:	00003ec1 	.word	0x00003ec1
 800a408:	000001ff 	.word	0x000001ff
 800a40c:	0800c170 	.word	0x0800c170
 800a410:	0800c17c 	.word	0x0800c17c
 800a414:	0800c190 	.word	0x0800c190
 800a418:	00ffff00 	.word	0x00ffff00
 800a41c:	4b9a      	ldr	r3, [pc, #616]	@ (800a688 <f_mkfs+0x9ac>)
 800a41e:	69ba      	ldr	r2, [r7, #24]
 800a420:	4313      	orrs	r3, r2
 800a422:	61bb      	str	r3, [r7, #24]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	b2da      	uxtb	r2, r3
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	701a      	strb	r2, [r3, #0]
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	0a1b      	lsrs	r3, r3, #8
 800a432:	b29a      	uxth	r2, r3
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	3301      	adds	r3, #1
 800a438:	b2d2      	uxtb	r2, r2
 800a43a:	701a      	strb	r2, [r3, #0]
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	0c1a      	lsrs	r2, r3, #16
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	3302      	adds	r3, #2
 800a444:	b2d2      	uxtb	r2, r2
 800a446:	701a      	strb	r2, [r3, #0]
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	0e1a      	lsrs	r2, r3, #24
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	3303      	adds	r3, #3
 800a450:	b2d2      	uxtb	r2, r2
 800a452:	701a      	strb	r2, [r3, #0]
 800a454:	e03b      	b.n	800a4ce <f_mkfs+0x7f2>
		} else {
			n |= 0xFFFFFF00;
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	4a8b      	ldr	r2, [pc, #556]	@ (800a688 <f_mkfs+0x9ac>)
 800a45a:	4313      	orrs	r3, r2
 800a45c:	61bb      	str	r3, [r7, #24]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	b2da      	uxtb	r2, r3
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	701a      	strb	r2, [r3, #0]
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	b29b      	uxth	r3, r3
 800a46a:	0a1b      	lsrs	r3, r3, #8
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	3301      	adds	r3, #1
 800a472:	b2d2      	uxtb	r2, r2
 800a474:	701a      	strb	r2, [r3, #0]
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	0c1a      	lsrs	r2, r3, #16
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	3302      	adds	r3, #2
 800a47e:	b2d2      	uxtb	r2, r2
 800a480:	701a      	strb	r2, [r3, #0]
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	0e1a      	lsrs	r2, r3, #24
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	3303      	adds	r3, #3
 800a48a:	b2d2      	uxtb	r2, r2
 800a48c:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	3304      	adds	r3, #4
 800a492:	22ff      	movs	r2, #255	@ 0xff
 800a494:	701a      	strb	r2, [r3, #0]
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	3305      	adds	r3, #5
 800a49a:	22ff      	movs	r2, #255	@ 0xff
 800a49c:	701a      	strb	r2, [r3, #0]
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	3306      	adds	r3, #6
 800a4a2:	22ff      	movs	r2, #255	@ 0xff
 800a4a4:	701a      	strb	r2, [r3, #0]
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	3307      	adds	r3, #7
 800a4aa:	22ff      	movs	r2, #255	@ 0xff
 800a4ac:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	3308      	adds	r3, #8
 800a4b2:	22ff      	movs	r2, #255	@ 0xff
 800a4b4:	701a      	strb	r2, [r3, #0]
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	3309      	adds	r3, #9
 800a4ba:	22ff      	movs	r2, #255	@ 0xff
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	330a      	adds	r3, #10
 800a4c2:	22ff      	movs	r2, #255	@ 0xff
 800a4c4:	701a      	strb	r2, [r3, #0]
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	330b      	adds	r3, #11
 800a4ca:	220f      	movs	r2, #15
 800a4cc:	701a      	strb	r2, [r3, #0]
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800a4ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4d0:	1c53      	adds	r3, r2, #1
 800a4d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4d4:	69f9      	ldr	r1, [r7, #28]
 800a4d6:	234f      	movs	r3, #79	@ 0x4f
 800a4d8:	18fb      	adds	r3, r7, r3
 800a4da:	7818      	ldrb	r0, [r3, #0]
 800a4dc:	2301      	movs	r3, #1
 800a4de:	f7fb f823 	bl	8005528 <disk_write>
 800a4e2:	1e03      	subs	r3, r0, #0
 800a4e4:	d001      	beq.n	800a4ea <f_mkfs+0x80e>
			return FR_DISK_ERR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e0c9      	b.n	800a67e <f_mkfs+0x9a2>
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
 800a4ea:	2380      	movs	r3, #128	@ 0x80
 800a4ec:	009a      	lsls	r2, r3, #2
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	0018      	movs	r0, r3
 800a4f4:	f7fb f885 	bl	8005602 <mem_set>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	61bb      	str	r3, [r7, #24]
 800a4fc:	e010      	b.n	800a520 <f_mkfs+0x844>
			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800a4fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a500:	1c53      	adds	r3, r2, #1
 800a502:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a504:	69f9      	ldr	r1, [r7, #28]
 800a506:	234f      	movs	r3, #79	@ 0x4f
 800a508:	18fb      	adds	r3, r7, r3
 800a50a:	7818      	ldrb	r0, [r3, #0]
 800a50c:	2301      	movs	r3, #1
 800a50e:	f7fb f80b 	bl	8005528 <disk_write>
 800a512:	1e03      	subs	r3, r0, #0
 800a514:	d001      	beq.n	800a51a <f_mkfs+0x83e>
				return FR_DISK_ERR;
 800a516:	2301      	movs	r3, #1
 800a518:	e0b1      	b.n	800a67e <f_mkfs+0x9a2>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	3301      	adds	r3, #1
 800a51e:	61bb      	str	r3, [r7, #24]
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a524:	429a      	cmp	r2, r3
 800a526:	d8ea      	bhi.n	800a4fe <f_mkfs+0x822>
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 800a528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a52a:	3301      	adds	r3, #1
 800a52c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a52e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a530:	2b00      	cmp	r3, #0
 800a532:	d100      	bne.n	800a536 <f_mkfs+0x85a>
 800a534:	e74f      	b.n	800a3d6 <f_mkfs+0x6fa>
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
 800a536:	2333      	movs	r3, #51	@ 0x33
 800a538:	18fb      	adds	r3, r7, r3
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d101      	bne.n	800a544 <f_mkfs+0x868>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	e000      	b.n	800a546 <f_mkfs+0x86a>
 800a544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a546:	647b      	str	r3, [r7, #68]	@ 0x44
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800a548:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a54a:	1c53      	adds	r3, r2, #1
 800a54c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a54e:	69f9      	ldr	r1, [r7, #28]
 800a550:	234f      	movs	r3, #79	@ 0x4f
 800a552:	18fb      	adds	r3, r7, r3
 800a554:	7818      	ldrb	r0, [r3, #0]
 800a556:	2301      	movs	r3, #1
 800a558:	f7fa ffe6 	bl	8005528 <disk_write>
 800a55c:	1e03      	subs	r3, r0, #0
 800a55e:	d001      	beq.n	800a564 <f_mkfs+0x888>
			return FR_DISK_ERR;
 800a560:	2301      	movs	r3, #1
 800a562:	e08c      	b.n	800a67e <f_mkfs+0x9a2>
	} while (--i);
 800a564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a566:	3b01      	subs	r3, #1
 800a568:	647b      	str	r3, [r7, #68]	@ 0x44
 800a56a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1eb      	bne.n	800a548 <f_mkfs+0x86c>
		disk_ioctl(pdrv, CTRL_TRIM, eb);
	}
#endif

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
 800a570:	2333      	movs	r3, #51	@ 0x33
 800a572:	18fb      	adds	r3, r7, r3
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	2b03      	cmp	r3, #3
 800a578:	d175      	bne.n	800a666 <f_mkfs+0x98a>
		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	2252      	movs	r2, #82	@ 0x52
 800a57e:	701a      	strb	r2, [r3, #0]
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	3301      	adds	r3, #1
 800a584:	2252      	movs	r2, #82	@ 0x52
 800a586:	701a      	strb	r2, [r3, #0]
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	3302      	adds	r3, #2
 800a58c:	2261      	movs	r2, #97	@ 0x61
 800a58e:	701a      	strb	r2, [r3, #0]
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	3303      	adds	r3, #3
 800a594:	2241      	movs	r2, #65	@ 0x41
 800a596:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	33e5      	adds	r3, #229	@ 0xe5
 800a59c:	33ff      	adds	r3, #255	@ 0xff
 800a59e:	2272      	movs	r2, #114	@ 0x72
 800a5a0:	701a      	strb	r2, [r3, #0]
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	33e6      	adds	r3, #230	@ 0xe6
 800a5a6:	33ff      	adds	r3, #255	@ 0xff
 800a5a8:	2272      	movs	r2, #114	@ 0x72
 800a5aa:	701a      	strb	r2, [r3, #0]
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	33e7      	adds	r3, #231	@ 0xe7
 800a5b0:	33ff      	adds	r3, #255	@ 0xff
 800a5b2:	2241      	movs	r2, #65	@ 0x41
 800a5b4:	701a      	strb	r2, [r3, #0]
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	33e8      	adds	r3, #232	@ 0xe8
 800a5ba:	33ff      	adds	r3, #255	@ 0xff
 800a5bc:	2261      	movs	r2, #97	@ 0x61
 800a5be:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	33e9      	adds	r3, #233	@ 0xe9
 800a5c8:	33ff      	adds	r3, #255	@ 0xff
 800a5ca:	3a01      	subs	r2, #1
 800a5cc:	b2d2      	uxtb	r2, r2
 800a5ce:	701a      	strb	r2, [r3, #0]
 800a5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	0a1b      	lsrs	r3, r3, #8
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	33ea      	adds	r3, #234	@ 0xea
 800a5e0:	33ff      	adds	r3, #255	@ 0xff
 800a5e2:	b2d2      	uxtb	r2, r2
 800a5e4:	701a      	strb	r2, [r3, #0]
 800a5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	0c1a      	lsrs	r2, r3, #16
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	33eb      	adds	r3, #235	@ 0xeb
 800a5f0:	33ff      	adds	r3, #255	@ 0xff
 800a5f2:	b2d2      	uxtb	r2, r2
 800a5f4:	701a      	strb	r2, [r3, #0]
 800a5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	0e1a      	lsrs	r2, r3, #24
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	33ec      	adds	r3, #236	@ 0xec
 800a600:	33ff      	adds	r3, #255	@ 0xff
 800a602:	b2d2      	uxtb	r2, r2
 800a604:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	33ed      	adds	r3, #237	@ 0xed
 800a60a:	33ff      	adds	r3, #255	@ 0xff
 800a60c:	2202      	movs	r2, #2
 800a60e:	701a      	strb	r2, [r3, #0]
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	33ee      	adds	r3, #238	@ 0xee
 800a614:	33ff      	adds	r3, #255	@ 0xff
 800a616:	2200      	movs	r2, #0
 800a618:	701a      	strb	r2, [r3, #0]
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	33ef      	adds	r3, #239	@ 0xef
 800a61e:	33ff      	adds	r3, #255	@ 0xff
 800a620:	2200      	movs	r2, #0
 800a622:	701a      	strb	r2, [r3, #0]
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	33f0      	adds	r3, #240	@ 0xf0
 800a628:	33ff      	adds	r3, #255	@ 0xff
 800a62a:	2200      	movs	r2, #0
 800a62c:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BS_55AA, 0xAA55);
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	33ff      	adds	r3, #255	@ 0xff
 800a632:	33ff      	adds	r3, #255	@ 0xff
 800a634:	2255      	movs	r2, #85	@ 0x55
 800a636:	701a      	strb	r2, [r3, #0]
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	4a14      	ldr	r2, [pc, #80]	@ (800a68c <f_mkfs+0x9b0>)
 800a63c:	4694      	mov	ip, r2
 800a63e:	4463      	add	r3, ip
 800a640:	22aa      	movs	r2, #170	@ 0xaa
 800a642:	701a      	strb	r2, [r3, #0]
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 800a644:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a646:	1c5a      	adds	r2, r3, #1
 800a648:	69f9      	ldr	r1, [r7, #28]
 800a64a:	244f      	movs	r4, #79	@ 0x4f
 800a64c:	193b      	adds	r3, r7, r4
 800a64e:	7818      	ldrb	r0, [r3, #0]
 800a650:	2301      	movs	r3, #1
 800a652:	f7fa ff69 	bl	8005528 <disk_write>
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
 800a656:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a658:	1dda      	adds	r2, r3, #7
 800a65a:	69f9      	ldr	r1, [r7, #28]
 800a65c:	193b      	adds	r3, r7, r4
 800a65e:	7818      	ldrb	r0, [r3, #0]
 800a660:	2301      	movs	r3, #1
 800a662:	f7fa ff61 	bl	8005528 <disk_write>
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
 800a666:	234f      	movs	r3, #79	@ 0x4f
 800a668:	18fb      	adds	r3, r7, r3
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2200      	movs	r2, #0
 800a66e:	2100      	movs	r1, #0
 800a670:	0018      	movs	r0, r3
 800a672:	f7fa ff81 	bl	8005578 <disk_ioctl>
 800a676:	0003      	movs	r3, r0
 800a678:	1e5a      	subs	r2, r3, #1
 800a67a:	4193      	sbcs	r3, r2
 800a67c:	b2db      	uxtb	r3, r3
}
 800a67e:	0018      	movs	r0, r3
 800a680:	46bd      	mov	sp, r7
 800a682:	b018      	add	sp, #96	@ 0x60
 800a684:	bdb0      	pop	{r4, r5, r7, pc}
 800a686:	46c0      	nop			@ (mov r8, r8)
 800a688:	ffffff00 	.word	0xffffff00
 800a68c:	000001ff 	.word	0x000001ff

0800a690 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a690:	b590      	push	{r4, r7, lr}
 800a692:	b087      	sub	sp, #28
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	1dfb      	adds	r3, r7, #7
 800a69c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800a69e:	2417      	movs	r4, #23
 800a6a0:	193b      	adds	r3, r7, r4
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800a6a6:	2016      	movs	r0, #22
 800a6a8:	183b      	adds	r3, r7, r0
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 800a6ae:	4b21      	ldr	r3, [pc, #132]	@ (800a734 <FATFS_LinkDriverEx+0xa4>)
 800a6b0:	7a5b      	ldrb	r3, [r3, #9]
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d836      	bhi.n	800a726 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a6b8:	4b1e      	ldr	r3, [pc, #120]	@ (800a734 <FATFS_LinkDriverEx+0xa4>)
 800a6ba:	7a5b      	ldrb	r3, [r3, #9]
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	001a      	movs	r2, r3
 800a6c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a734 <FATFS_LinkDriverEx+0xa4>)
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a6c6:	4b1b      	ldr	r3, [pc, #108]	@ (800a734 <FATFS_LinkDriverEx+0xa4>)
 800a6c8:	7a5b      	ldrb	r3, [r3, #9]
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	4a19      	ldr	r2, [pc, #100]	@ (800a734 <FATFS_LinkDriverEx+0xa4>)
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	18d3      	adds	r3, r2, r3
 800a6d2:	3304      	adds	r3, #4
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 800a6d8:	4b16      	ldr	r3, [pc, #88]	@ (800a734 <FATFS_LinkDriverEx+0xa4>)
 800a6da:	7a5b      	ldrb	r3, [r3, #9]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	001a      	movs	r2, r3
 800a6e0:	4b14      	ldr	r3, [pc, #80]	@ (800a734 <FATFS_LinkDriverEx+0xa4>)
 800a6e2:	189b      	adds	r3, r3, r2
 800a6e4:	1dfa      	adds	r2, r7, #7
 800a6e6:	7812      	ldrb	r2, [r2, #0]
 800a6e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a6ea:	4b12      	ldr	r3, [pc, #72]	@ (800a734 <FATFS_LinkDriverEx+0xa4>)
 800a6ec:	7a5b      	ldrb	r3, [r3, #9]
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	1c5a      	adds	r2, r3, #1
 800a6f2:	b2d1      	uxtb	r1, r2
 800a6f4:	4a0f      	ldr	r2, [pc, #60]	@ (800a734 <FATFS_LinkDriverEx+0xa4>)
 800a6f6:	7251      	strb	r1, [r2, #9]
 800a6f8:	183a      	adds	r2, r7, r0
 800a6fa:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800a6fc:	183b      	adds	r3, r7, r0
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	3330      	adds	r3, #48	@ 0x30
 800a702:	b2da      	uxtb	r2, r3
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	3301      	adds	r3, #1
 800a70c:	223a      	movs	r2, #58	@ 0x3a
 800a70e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	3302      	adds	r3, #2
 800a714:	222f      	movs	r2, #47	@ 0x2f
 800a716:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	3303      	adds	r3, #3
 800a71c:	2200      	movs	r2, #0
 800a71e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a720:	193b      	adds	r3, r7, r4
 800a722:	2200      	movs	r2, #0
 800a724:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800a726:	2317      	movs	r3, #23
 800a728:	18fb      	adds	r3, r7, r3
 800a72a:	781b      	ldrb	r3, [r3, #0]
}
 800a72c:	0018      	movs	r0, r3
 800a72e:	46bd      	mov	sp, r7
 800a730:	b007      	add	sp, #28
 800a732:	bd90      	pop	{r4, r7, pc}
 800a734:	200006e0 	.word	0x200006e0

0800a738 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	0018      	movs	r0, r3
 800a74a:	f7ff ffa1 	bl	800a690 <FATFS_LinkDriverEx>
 800a74e:	0003      	movs	r3, r0
}
 800a750:	0018      	movs	r0, r3
 800a752:	46bd      	mov	sp, r7
 800a754:	b002      	add	sp, #8
 800a756:	bd80      	pop	{r7, pc}

0800a758 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	0002      	movs	r2, r0
 800a760:	6039      	str	r1, [r7, #0]
 800a762:	1dbb      	adds	r3, r7, #6
 800a764:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a766:	1dbb      	adds	r3, r7, #6
 800a768:	881b      	ldrh	r3, [r3, #0]
 800a76a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a76c:	d805      	bhi.n	800a77a <ff_convert+0x22>
		c = chr;
 800a76e:	230e      	movs	r3, #14
 800a770:	18fb      	adds	r3, r7, r3
 800a772:	1dba      	adds	r2, r7, #6
 800a774:	8812      	ldrh	r2, [r2, #0]
 800a776:	801a      	strh	r2, [r3, #0]
 800a778:	e037      	b.n	800a7ea <ff_convert+0x92>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d010      	beq.n	800a7a2 <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a780:	1dbb      	adds	r3, r7, #6
 800a782:	881b      	ldrh	r3, [r3, #0]
 800a784:	2bff      	cmp	r3, #255	@ 0xff
 800a786:	d807      	bhi.n	800a798 <ff_convert+0x40>
 800a788:	1dbb      	adds	r3, r7, #6
 800a78a:	881b      	ldrh	r3, [r3, #0]
 800a78c:	3b80      	subs	r3, #128	@ 0x80
 800a78e:	001a      	movs	r2, r3
 800a790:	4b19      	ldr	r3, [pc, #100]	@ (800a7f8 <ff_convert+0xa0>)
 800a792:	0052      	lsls	r2, r2, #1
 800a794:	5ad2      	ldrh	r2, [r2, r3]
 800a796:	e000      	b.n	800a79a <ff_convert+0x42>
 800a798:	2200      	movs	r2, #0
 800a79a:	230e      	movs	r3, #14
 800a79c:	18fb      	adds	r3, r7, r3
 800a79e:	801a      	strh	r2, [r3, #0]
 800a7a0:	e023      	b.n	800a7ea <ff_convert+0x92>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800a7a2:	230e      	movs	r3, #14
 800a7a4:	18fb      	adds	r3, r7, r3
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	801a      	strh	r2, [r3, #0]
 800a7aa:	e00e      	b.n	800a7ca <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 800a7ac:	210e      	movs	r1, #14
 800a7ae:	187b      	adds	r3, r7, r1
 800a7b0:	881a      	ldrh	r2, [r3, #0]
 800a7b2:	4b11      	ldr	r3, [pc, #68]	@ (800a7f8 <ff_convert+0xa0>)
 800a7b4:	0052      	lsls	r2, r2, #1
 800a7b6:	5ad3      	ldrh	r3, [r2, r3]
 800a7b8:	1dba      	adds	r2, r7, #6
 800a7ba:	8812      	ldrh	r2, [r2, #0]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d00a      	beq.n	800a7d6 <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 800a7c0:	187b      	adds	r3, r7, r1
 800a7c2:	881a      	ldrh	r2, [r3, #0]
 800a7c4:	187b      	adds	r3, r7, r1
 800a7c6:	3201      	adds	r2, #1
 800a7c8:	801a      	strh	r2, [r3, #0]
 800a7ca:	230e      	movs	r3, #14
 800a7cc:	18fb      	adds	r3, r7, r3
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	2b7f      	cmp	r3, #127	@ 0x7f
 800a7d2:	d9eb      	bls.n	800a7ac <ff_convert+0x54>
 800a7d4:	e000      	b.n	800a7d8 <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 800a7d6:	46c0      	nop			@ (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 800a7d8:	210e      	movs	r1, #14
 800a7da:	187b      	adds	r3, r7, r1
 800a7dc:	881b      	ldrh	r3, [r3, #0]
 800a7de:	3380      	adds	r3, #128	@ 0x80
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	187b      	adds	r3, r7, r1
 800a7e4:	21ff      	movs	r1, #255	@ 0xff
 800a7e6:	400a      	ands	r2, r1
 800a7e8:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 800a7ea:	230e      	movs	r3, #14
 800a7ec:	18fb      	adds	r3, r7, r3
 800a7ee:	881b      	ldrh	r3, [r3, #0]
}
 800a7f0:	0018      	movs	r0, r3
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	b004      	add	sp, #16
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	0800c2b0 	.word	0x0800c2b0

0800a7fc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	0002      	movs	r2, r0
 800a804:	1dbb      	adds	r3, r7, #6
 800a806:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800a808:	2300      	movs	r3, #0
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	e002      	b.n	800a814 <ff_wtoupper+0x18>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	3301      	adds	r3, #1
 800a812:	60fb      	str	r3, [r7, #12]
 800a814:	4b0f      	ldr	r3, [pc, #60]	@ (800a854 <ff_wtoupper+0x58>)
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	0052      	lsls	r2, r2, #1
 800a81a:	5ad3      	ldrh	r3, [r2, r3]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d007      	beq.n	800a830 <ff_wtoupper+0x34>
 800a820:	4b0c      	ldr	r3, [pc, #48]	@ (800a854 <ff_wtoupper+0x58>)
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	0052      	lsls	r2, r2, #1
 800a826:	5ad3      	ldrh	r3, [r2, r3]
 800a828:	1dba      	adds	r2, r7, #6
 800a82a:	8812      	ldrh	r2, [r2, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d1ee      	bne.n	800a80e <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800a830:	4b08      	ldr	r3, [pc, #32]	@ (800a854 <ff_wtoupper+0x58>)
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	0052      	lsls	r2, r2, #1
 800a836:	5ad3      	ldrh	r3, [r2, r3]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d004      	beq.n	800a846 <ff_wtoupper+0x4a>
 800a83c:	4b06      	ldr	r3, [pc, #24]	@ (800a858 <ff_wtoupper+0x5c>)
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	0052      	lsls	r2, r2, #1
 800a842:	5ad3      	ldrh	r3, [r2, r3]
 800a844:	e001      	b.n	800a84a <ff_wtoupper+0x4e>
 800a846:	1dbb      	adds	r3, r7, #6
 800a848:	881b      	ldrh	r3, [r3, #0]
}
 800a84a:	0018      	movs	r0, r3
 800a84c:	46bd      	mov	sp, r7
 800a84e:	b004      	add	sp, #16
 800a850:	bd80      	pop	{r7, pc}
 800a852:	46c0      	nop			@ (mov r8, r8)
 800a854:	0800c3b0 	.word	0x0800c3b0
 800a858:	0800c590 	.word	0x0800c590

0800a85c <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	0018      	movs	r0, r3
 800a868:	f000 f812 	bl	800a890 <malloc>
 800a86c:	0003      	movs	r3, r0
}
 800a86e:	0018      	movs	r0, r3
 800a870:	46bd      	mov	sp, r7
 800a872:	b002      	add	sp, #8
 800a874:	bd80      	pop	{r7, pc}

0800a876 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b082      	sub	sp, #8
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Discard the memory block with POSIX API */
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	0018      	movs	r0, r3
 800a882:	f000 f80f 	bl	800a8a4 <free>
}
 800a886:	46c0      	nop			@ (mov r8, r8)
 800a888:	46bd      	mov	sp, r7
 800a88a:	b002      	add	sp, #8
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <malloc>:
 800a890:	b510      	push	{r4, lr}
 800a892:	4b03      	ldr	r3, [pc, #12]	@ (800a8a0 <malloc+0x10>)
 800a894:	0001      	movs	r1, r0
 800a896:	6818      	ldr	r0, [r3, #0]
 800a898:	f000 f830 	bl	800a8fc <_malloc_r>
 800a89c:	bd10      	pop	{r4, pc}
 800a89e:	46c0      	nop			@ (mov r8, r8)
 800a8a0:	20000018 	.word	0x20000018

0800a8a4 <free>:
 800a8a4:	b510      	push	{r4, lr}
 800a8a6:	4b03      	ldr	r3, [pc, #12]	@ (800a8b4 <free+0x10>)
 800a8a8:	0001      	movs	r1, r0
 800a8aa:	6818      	ldr	r0, [r3, #0]
 800a8ac:	f000 fba2 	bl	800aff4 <_free_r>
 800a8b0:	bd10      	pop	{r4, pc}
 800a8b2:	46c0      	nop			@ (mov r8, r8)
 800a8b4:	20000018 	.word	0x20000018

0800a8b8 <sbrk_aligned>:
 800a8b8:	b570      	push	{r4, r5, r6, lr}
 800a8ba:	4e0f      	ldr	r6, [pc, #60]	@ (800a8f8 <sbrk_aligned+0x40>)
 800a8bc:	000d      	movs	r5, r1
 800a8be:	6831      	ldr	r1, [r6, #0]
 800a8c0:	0004      	movs	r4, r0
 800a8c2:	2900      	cmp	r1, #0
 800a8c4:	d102      	bne.n	800a8cc <sbrk_aligned+0x14>
 800a8c6:	f000 fb41 	bl	800af4c <_sbrk_r>
 800a8ca:	6030      	str	r0, [r6, #0]
 800a8cc:	0029      	movs	r1, r5
 800a8ce:	0020      	movs	r0, r4
 800a8d0:	f000 fb3c 	bl	800af4c <_sbrk_r>
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	d103      	bne.n	800a8e0 <sbrk_aligned+0x28>
 800a8d8:	2501      	movs	r5, #1
 800a8da:	426d      	negs	r5, r5
 800a8dc:	0028      	movs	r0, r5
 800a8de:	bd70      	pop	{r4, r5, r6, pc}
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	1cc5      	adds	r5, r0, #3
 800a8e4:	439d      	bics	r5, r3
 800a8e6:	42a8      	cmp	r0, r5
 800a8e8:	d0f8      	beq.n	800a8dc <sbrk_aligned+0x24>
 800a8ea:	1a29      	subs	r1, r5, r0
 800a8ec:	0020      	movs	r0, r4
 800a8ee:	f000 fb2d 	bl	800af4c <_sbrk_r>
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	d1f2      	bne.n	800a8dc <sbrk_aligned+0x24>
 800a8f6:	e7ef      	b.n	800a8d8 <sbrk_aligned+0x20>
 800a8f8:	200006ec 	.word	0x200006ec

0800a8fc <_malloc_r>:
 800a8fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8fe:	2203      	movs	r2, #3
 800a900:	1ccb      	adds	r3, r1, #3
 800a902:	4393      	bics	r3, r2
 800a904:	3308      	adds	r3, #8
 800a906:	0005      	movs	r5, r0
 800a908:	001f      	movs	r7, r3
 800a90a:	2b0c      	cmp	r3, #12
 800a90c:	d234      	bcs.n	800a978 <_malloc_r+0x7c>
 800a90e:	270c      	movs	r7, #12
 800a910:	42b9      	cmp	r1, r7
 800a912:	d833      	bhi.n	800a97c <_malloc_r+0x80>
 800a914:	0028      	movs	r0, r5
 800a916:	f000 f871 	bl	800a9fc <__malloc_lock>
 800a91a:	4e37      	ldr	r6, [pc, #220]	@ (800a9f8 <_malloc_r+0xfc>)
 800a91c:	6833      	ldr	r3, [r6, #0]
 800a91e:	001c      	movs	r4, r3
 800a920:	2c00      	cmp	r4, #0
 800a922:	d12f      	bne.n	800a984 <_malloc_r+0x88>
 800a924:	0039      	movs	r1, r7
 800a926:	0028      	movs	r0, r5
 800a928:	f7ff ffc6 	bl	800a8b8 <sbrk_aligned>
 800a92c:	0004      	movs	r4, r0
 800a92e:	1c43      	adds	r3, r0, #1
 800a930:	d15f      	bne.n	800a9f2 <_malloc_r+0xf6>
 800a932:	6834      	ldr	r4, [r6, #0]
 800a934:	9400      	str	r4, [sp, #0]
 800a936:	9b00      	ldr	r3, [sp, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d14a      	bne.n	800a9d2 <_malloc_r+0xd6>
 800a93c:	2c00      	cmp	r4, #0
 800a93e:	d052      	beq.n	800a9e6 <_malloc_r+0xea>
 800a940:	6823      	ldr	r3, [r4, #0]
 800a942:	0028      	movs	r0, r5
 800a944:	18e3      	adds	r3, r4, r3
 800a946:	9900      	ldr	r1, [sp, #0]
 800a948:	9301      	str	r3, [sp, #4]
 800a94a:	f000 faff 	bl	800af4c <_sbrk_r>
 800a94e:	9b01      	ldr	r3, [sp, #4]
 800a950:	4283      	cmp	r3, r0
 800a952:	d148      	bne.n	800a9e6 <_malloc_r+0xea>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	0028      	movs	r0, r5
 800a958:	1aff      	subs	r7, r7, r3
 800a95a:	0039      	movs	r1, r7
 800a95c:	f7ff ffac 	bl	800a8b8 <sbrk_aligned>
 800a960:	3001      	adds	r0, #1
 800a962:	d040      	beq.n	800a9e6 <_malloc_r+0xea>
 800a964:	6823      	ldr	r3, [r4, #0]
 800a966:	19db      	adds	r3, r3, r7
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	6833      	ldr	r3, [r6, #0]
 800a96c:	685a      	ldr	r2, [r3, #4]
 800a96e:	2a00      	cmp	r2, #0
 800a970:	d133      	bne.n	800a9da <_malloc_r+0xde>
 800a972:	9b00      	ldr	r3, [sp, #0]
 800a974:	6033      	str	r3, [r6, #0]
 800a976:	e019      	b.n	800a9ac <_malloc_r+0xb0>
 800a978:	2b00      	cmp	r3, #0
 800a97a:	dac9      	bge.n	800a910 <_malloc_r+0x14>
 800a97c:	230c      	movs	r3, #12
 800a97e:	602b      	str	r3, [r5, #0]
 800a980:	2000      	movs	r0, #0
 800a982:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a984:	6821      	ldr	r1, [r4, #0]
 800a986:	1bc9      	subs	r1, r1, r7
 800a988:	d420      	bmi.n	800a9cc <_malloc_r+0xd0>
 800a98a:	290b      	cmp	r1, #11
 800a98c:	d90a      	bls.n	800a9a4 <_malloc_r+0xa8>
 800a98e:	19e2      	adds	r2, r4, r7
 800a990:	6027      	str	r7, [r4, #0]
 800a992:	42a3      	cmp	r3, r4
 800a994:	d104      	bne.n	800a9a0 <_malloc_r+0xa4>
 800a996:	6032      	str	r2, [r6, #0]
 800a998:	6863      	ldr	r3, [r4, #4]
 800a99a:	6011      	str	r1, [r2, #0]
 800a99c:	6053      	str	r3, [r2, #4]
 800a99e:	e005      	b.n	800a9ac <_malloc_r+0xb0>
 800a9a0:	605a      	str	r2, [r3, #4]
 800a9a2:	e7f9      	b.n	800a998 <_malloc_r+0x9c>
 800a9a4:	6862      	ldr	r2, [r4, #4]
 800a9a6:	42a3      	cmp	r3, r4
 800a9a8:	d10e      	bne.n	800a9c8 <_malloc_r+0xcc>
 800a9aa:	6032      	str	r2, [r6, #0]
 800a9ac:	0028      	movs	r0, r5
 800a9ae:	f000 f82d 	bl	800aa0c <__malloc_unlock>
 800a9b2:	0020      	movs	r0, r4
 800a9b4:	2207      	movs	r2, #7
 800a9b6:	300b      	adds	r0, #11
 800a9b8:	1d23      	adds	r3, r4, #4
 800a9ba:	4390      	bics	r0, r2
 800a9bc:	1ac2      	subs	r2, r0, r3
 800a9be:	4298      	cmp	r0, r3
 800a9c0:	d0df      	beq.n	800a982 <_malloc_r+0x86>
 800a9c2:	1a1b      	subs	r3, r3, r0
 800a9c4:	50a3      	str	r3, [r4, r2]
 800a9c6:	e7dc      	b.n	800a982 <_malloc_r+0x86>
 800a9c8:	605a      	str	r2, [r3, #4]
 800a9ca:	e7ef      	b.n	800a9ac <_malloc_r+0xb0>
 800a9cc:	0023      	movs	r3, r4
 800a9ce:	6864      	ldr	r4, [r4, #4]
 800a9d0:	e7a6      	b.n	800a920 <_malloc_r+0x24>
 800a9d2:	9c00      	ldr	r4, [sp, #0]
 800a9d4:	6863      	ldr	r3, [r4, #4]
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	e7ad      	b.n	800a936 <_malloc_r+0x3a>
 800a9da:	001a      	movs	r2, r3
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	42a3      	cmp	r3, r4
 800a9e0:	d1fb      	bne.n	800a9da <_malloc_r+0xde>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	e7da      	b.n	800a99c <_malloc_r+0xa0>
 800a9e6:	230c      	movs	r3, #12
 800a9e8:	0028      	movs	r0, r5
 800a9ea:	602b      	str	r3, [r5, #0]
 800a9ec:	f000 f80e 	bl	800aa0c <__malloc_unlock>
 800a9f0:	e7c6      	b.n	800a980 <_malloc_r+0x84>
 800a9f2:	6007      	str	r7, [r0, #0]
 800a9f4:	e7da      	b.n	800a9ac <_malloc_r+0xb0>
 800a9f6:	46c0      	nop			@ (mov r8, r8)
 800a9f8:	200006f0 	.word	0x200006f0

0800a9fc <__malloc_lock>:
 800a9fc:	b510      	push	{r4, lr}
 800a9fe:	4802      	ldr	r0, [pc, #8]	@ (800aa08 <__malloc_lock+0xc>)
 800aa00:	f000 faf5 	bl	800afee <__retarget_lock_acquire_recursive>
 800aa04:	bd10      	pop	{r4, pc}
 800aa06:	46c0      	nop			@ (mov r8, r8)
 800aa08:	20000834 	.word	0x20000834

0800aa0c <__malloc_unlock>:
 800aa0c:	b510      	push	{r4, lr}
 800aa0e:	4802      	ldr	r0, [pc, #8]	@ (800aa18 <__malloc_unlock+0xc>)
 800aa10:	f000 faee 	bl	800aff0 <__retarget_lock_release_recursive>
 800aa14:	bd10      	pop	{r4, pc}
 800aa16:	46c0      	nop			@ (mov r8, r8)
 800aa18:	20000834 	.word	0x20000834

0800aa1c <std>:
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	b510      	push	{r4, lr}
 800aa20:	0004      	movs	r4, r0
 800aa22:	6003      	str	r3, [r0, #0]
 800aa24:	6043      	str	r3, [r0, #4]
 800aa26:	6083      	str	r3, [r0, #8]
 800aa28:	8181      	strh	r1, [r0, #12]
 800aa2a:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa2c:	81c2      	strh	r2, [r0, #14]
 800aa2e:	6103      	str	r3, [r0, #16]
 800aa30:	6143      	str	r3, [r0, #20]
 800aa32:	6183      	str	r3, [r0, #24]
 800aa34:	0019      	movs	r1, r3
 800aa36:	2208      	movs	r2, #8
 800aa38:	305c      	adds	r0, #92	@ 0x5c
 800aa3a:	f000 fa45 	bl	800aec8 <memset>
 800aa3e:	4b0b      	ldr	r3, [pc, #44]	@ (800aa6c <std+0x50>)
 800aa40:	6224      	str	r4, [r4, #32]
 800aa42:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa44:	4b0a      	ldr	r3, [pc, #40]	@ (800aa70 <std+0x54>)
 800aa46:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aa48:	4b0a      	ldr	r3, [pc, #40]	@ (800aa74 <std+0x58>)
 800aa4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aa4c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa78 <std+0x5c>)
 800aa4e:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa50:	4b0a      	ldr	r3, [pc, #40]	@ (800aa7c <std+0x60>)
 800aa52:	429c      	cmp	r4, r3
 800aa54:	d005      	beq.n	800aa62 <std+0x46>
 800aa56:	4b0a      	ldr	r3, [pc, #40]	@ (800aa80 <std+0x64>)
 800aa58:	429c      	cmp	r4, r3
 800aa5a:	d002      	beq.n	800aa62 <std+0x46>
 800aa5c:	4b09      	ldr	r3, [pc, #36]	@ (800aa84 <std+0x68>)
 800aa5e:	429c      	cmp	r4, r3
 800aa60:	d103      	bne.n	800aa6a <std+0x4e>
 800aa62:	0020      	movs	r0, r4
 800aa64:	3058      	adds	r0, #88	@ 0x58
 800aa66:	f000 fac1 	bl	800afec <__retarget_lock_init_recursive>
 800aa6a:	bd10      	pop	{r4, pc}
 800aa6c:	0800acf1 	.word	0x0800acf1
 800aa70:	0800ad19 	.word	0x0800ad19
 800aa74:	0800ad51 	.word	0x0800ad51
 800aa78:	0800ad7d 	.word	0x0800ad7d
 800aa7c:	200006f4 	.word	0x200006f4
 800aa80:	2000075c 	.word	0x2000075c
 800aa84:	200007c4 	.word	0x200007c4

0800aa88 <stdio_exit_handler>:
 800aa88:	b510      	push	{r4, lr}
 800aa8a:	4a03      	ldr	r2, [pc, #12]	@ (800aa98 <stdio_exit_handler+0x10>)
 800aa8c:	4903      	ldr	r1, [pc, #12]	@ (800aa9c <stdio_exit_handler+0x14>)
 800aa8e:	4804      	ldr	r0, [pc, #16]	@ (800aaa0 <stdio_exit_handler+0x18>)
 800aa90:	f000 f86c 	bl	800ab6c <_fwalk_sglue>
 800aa94:	bd10      	pop	{r4, pc}
 800aa96:	46c0      	nop			@ (mov r8, r8)
 800aa98:	2000000c 	.word	0x2000000c
 800aa9c:	0800b9d1 	.word	0x0800b9d1
 800aaa0:	2000001c 	.word	0x2000001c

0800aaa4 <cleanup_stdio>:
 800aaa4:	6841      	ldr	r1, [r0, #4]
 800aaa6:	4b0b      	ldr	r3, [pc, #44]	@ (800aad4 <cleanup_stdio+0x30>)
 800aaa8:	b510      	push	{r4, lr}
 800aaaa:	0004      	movs	r4, r0
 800aaac:	4299      	cmp	r1, r3
 800aaae:	d001      	beq.n	800aab4 <cleanup_stdio+0x10>
 800aab0:	f000 ff8e 	bl	800b9d0 <_fflush_r>
 800aab4:	68a1      	ldr	r1, [r4, #8]
 800aab6:	4b08      	ldr	r3, [pc, #32]	@ (800aad8 <cleanup_stdio+0x34>)
 800aab8:	4299      	cmp	r1, r3
 800aaba:	d002      	beq.n	800aac2 <cleanup_stdio+0x1e>
 800aabc:	0020      	movs	r0, r4
 800aabe:	f000 ff87 	bl	800b9d0 <_fflush_r>
 800aac2:	68e1      	ldr	r1, [r4, #12]
 800aac4:	4b05      	ldr	r3, [pc, #20]	@ (800aadc <cleanup_stdio+0x38>)
 800aac6:	4299      	cmp	r1, r3
 800aac8:	d002      	beq.n	800aad0 <cleanup_stdio+0x2c>
 800aaca:	0020      	movs	r0, r4
 800aacc:	f000 ff80 	bl	800b9d0 <_fflush_r>
 800aad0:	bd10      	pop	{r4, pc}
 800aad2:	46c0      	nop			@ (mov r8, r8)
 800aad4:	200006f4 	.word	0x200006f4
 800aad8:	2000075c 	.word	0x2000075c
 800aadc:	200007c4 	.word	0x200007c4

0800aae0 <global_stdio_init.part.0>:
 800aae0:	b510      	push	{r4, lr}
 800aae2:	4b09      	ldr	r3, [pc, #36]	@ (800ab08 <global_stdio_init.part.0+0x28>)
 800aae4:	4a09      	ldr	r2, [pc, #36]	@ (800ab0c <global_stdio_init.part.0+0x2c>)
 800aae6:	2104      	movs	r1, #4
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	4809      	ldr	r0, [pc, #36]	@ (800ab10 <global_stdio_init.part.0+0x30>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	f7ff ff95 	bl	800aa1c <std>
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	2109      	movs	r1, #9
 800aaf6:	4807      	ldr	r0, [pc, #28]	@ (800ab14 <global_stdio_init.part.0+0x34>)
 800aaf8:	f7ff ff90 	bl	800aa1c <std>
 800aafc:	2202      	movs	r2, #2
 800aafe:	2112      	movs	r1, #18
 800ab00:	4805      	ldr	r0, [pc, #20]	@ (800ab18 <global_stdio_init.part.0+0x38>)
 800ab02:	f7ff ff8b 	bl	800aa1c <std>
 800ab06:	bd10      	pop	{r4, pc}
 800ab08:	2000082c 	.word	0x2000082c
 800ab0c:	0800aa89 	.word	0x0800aa89
 800ab10:	200006f4 	.word	0x200006f4
 800ab14:	2000075c 	.word	0x2000075c
 800ab18:	200007c4 	.word	0x200007c4

0800ab1c <__sfp_lock_acquire>:
 800ab1c:	b510      	push	{r4, lr}
 800ab1e:	4802      	ldr	r0, [pc, #8]	@ (800ab28 <__sfp_lock_acquire+0xc>)
 800ab20:	f000 fa65 	bl	800afee <__retarget_lock_acquire_recursive>
 800ab24:	bd10      	pop	{r4, pc}
 800ab26:	46c0      	nop			@ (mov r8, r8)
 800ab28:	20000835 	.word	0x20000835

0800ab2c <__sfp_lock_release>:
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	4802      	ldr	r0, [pc, #8]	@ (800ab38 <__sfp_lock_release+0xc>)
 800ab30:	f000 fa5e 	bl	800aff0 <__retarget_lock_release_recursive>
 800ab34:	bd10      	pop	{r4, pc}
 800ab36:	46c0      	nop			@ (mov r8, r8)
 800ab38:	20000835 	.word	0x20000835

0800ab3c <__sinit>:
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	0004      	movs	r4, r0
 800ab40:	f7ff ffec 	bl	800ab1c <__sfp_lock_acquire>
 800ab44:	6a23      	ldr	r3, [r4, #32]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d002      	beq.n	800ab50 <__sinit+0x14>
 800ab4a:	f7ff ffef 	bl	800ab2c <__sfp_lock_release>
 800ab4e:	bd10      	pop	{r4, pc}
 800ab50:	4b04      	ldr	r3, [pc, #16]	@ (800ab64 <__sinit+0x28>)
 800ab52:	6223      	str	r3, [r4, #32]
 800ab54:	4b04      	ldr	r3, [pc, #16]	@ (800ab68 <__sinit+0x2c>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1f6      	bne.n	800ab4a <__sinit+0xe>
 800ab5c:	f7ff ffc0 	bl	800aae0 <global_stdio_init.part.0>
 800ab60:	e7f3      	b.n	800ab4a <__sinit+0xe>
 800ab62:	46c0      	nop			@ (mov r8, r8)
 800ab64:	0800aaa5 	.word	0x0800aaa5
 800ab68:	2000082c 	.word	0x2000082c

0800ab6c <_fwalk_sglue>:
 800ab6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab6e:	0014      	movs	r4, r2
 800ab70:	2600      	movs	r6, #0
 800ab72:	9000      	str	r0, [sp, #0]
 800ab74:	9101      	str	r1, [sp, #4]
 800ab76:	68a5      	ldr	r5, [r4, #8]
 800ab78:	6867      	ldr	r7, [r4, #4]
 800ab7a:	3f01      	subs	r7, #1
 800ab7c:	d504      	bpl.n	800ab88 <_fwalk_sglue+0x1c>
 800ab7e:	6824      	ldr	r4, [r4, #0]
 800ab80:	2c00      	cmp	r4, #0
 800ab82:	d1f8      	bne.n	800ab76 <_fwalk_sglue+0xa>
 800ab84:	0030      	movs	r0, r6
 800ab86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab88:	89ab      	ldrh	r3, [r5, #12]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d908      	bls.n	800aba0 <_fwalk_sglue+0x34>
 800ab8e:	220e      	movs	r2, #14
 800ab90:	5eab      	ldrsh	r3, [r5, r2]
 800ab92:	3301      	adds	r3, #1
 800ab94:	d004      	beq.n	800aba0 <_fwalk_sglue+0x34>
 800ab96:	0029      	movs	r1, r5
 800ab98:	9800      	ldr	r0, [sp, #0]
 800ab9a:	9b01      	ldr	r3, [sp, #4]
 800ab9c:	4798      	blx	r3
 800ab9e:	4306      	orrs	r6, r0
 800aba0:	3568      	adds	r5, #104	@ 0x68
 800aba2:	e7ea      	b.n	800ab7a <_fwalk_sglue+0xe>

0800aba4 <iprintf>:
 800aba4:	b40f      	push	{r0, r1, r2, r3}
 800aba6:	b507      	push	{r0, r1, r2, lr}
 800aba8:	4905      	ldr	r1, [pc, #20]	@ (800abc0 <iprintf+0x1c>)
 800abaa:	ab04      	add	r3, sp, #16
 800abac:	6808      	ldr	r0, [r1, #0]
 800abae:	cb04      	ldmia	r3!, {r2}
 800abb0:	6881      	ldr	r1, [r0, #8]
 800abb2:	9301      	str	r3, [sp, #4]
 800abb4:	f000 fbee 	bl	800b394 <_vfiprintf_r>
 800abb8:	b003      	add	sp, #12
 800abba:	bc08      	pop	{r3}
 800abbc:	b004      	add	sp, #16
 800abbe:	4718      	bx	r3
 800abc0:	20000018 	.word	0x20000018

0800abc4 <_puts_r>:
 800abc4:	6a03      	ldr	r3, [r0, #32]
 800abc6:	b570      	push	{r4, r5, r6, lr}
 800abc8:	0005      	movs	r5, r0
 800abca:	000e      	movs	r6, r1
 800abcc:	6884      	ldr	r4, [r0, #8]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <_puts_r+0x12>
 800abd2:	f7ff ffb3 	bl	800ab3c <__sinit>
 800abd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abd8:	07db      	lsls	r3, r3, #31
 800abda:	d405      	bmi.n	800abe8 <_puts_r+0x24>
 800abdc:	89a3      	ldrh	r3, [r4, #12]
 800abde:	059b      	lsls	r3, r3, #22
 800abe0:	d402      	bmi.n	800abe8 <_puts_r+0x24>
 800abe2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abe4:	f000 fa03 	bl	800afee <__retarget_lock_acquire_recursive>
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	071b      	lsls	r3, r3, #28
 800abec:	d502      	bpl.n	800abf4 <_puts_r+0x30>
 800abee:	6923      	ldr	r3, [r4, #16]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d11f      	bne.n	800ac34 <_puts_r+0x70>
 800abf4:	0021      	movs	r1, r4
 800abf6:	0028      	movs	r0, r5
 800abf8:	f000 f908 	bl	800ae0c <__swsetup_r>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d019      	beq.n	800ac34 <_puts_r+0x70>
 800ac00:	2501      	movs	r5, #1
 800ac02:	426d      	negs	r5, r5
 800ac04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac06:	07db      	lsls	r3, r3, #31
 800ac08:	d405      	bmi.n	800ac16 <_puts_r+0x52>
 800ac0a:	89a3      	ldrh	r3, [r4, #12]
 800ac0c:	059b      	lsls	r3, r3, #22
 800ac0e:	d402      	bmi.n	800ac16 <_puts_r+0x52>
 800ac10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac12:	f000 f9ed 	bl	800aff0 <__retarget_lock_release_recursive>
 800ac16:	0028      	movs	r0, r5
 800ac18:	bd70      	pop	{r4, r5, r6, pc}
 800ac1a:	3601      	adds	r6, #1
 800ac1c:	60a3      	str	r3, [r4, #8]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	da04      	bge.n	800ac2c <_puts_r+0x68>
 800ac22:	69a2      	ldr	r2, [r4, #24]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	dc16      	bgt.n	800ac56 <_puts_r+0x92>
 800ac28:	290a      	cmp	r1, #10
 800ac2a:	d014      	beq.n	800ac56 <_puts_r+0x92>
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	1c5a      	adds	r2, r3, #1
 800ac30:	6022      	str	r2, [r4, #0]
 800ac32:	7019      	strb	r1, [r3, #0]
 800ac34:	68a3      	ldr	r3, [r4, #8]
 800ac36:	7831      	ldrb	r1, [r6, #0]
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	2900      	cmp	r1, #0
 800ac3c:	d1ed      	bne.n	800ac1a <_puts_r+0x56>
 800ac3e:	60a3      	str	r3, [r4, #8]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	da0f      	bge.n	800ac64 <_puts_r+0xa0>
 800ac44:	0022      	movs	r2, r4
 800ac46:	0028      	movs	r0, r5
 800ac48:	310a      	adds	r1, #10
 800ac4a:	f000 f89d 	bl	800ad88 <__swbuf_r>
 800ac4e:	3001      	adds	r0, #1
 800ac50:	d0d6      	beq.n	800ac00 <_puts_r+0x3c>
 800ac52:	250a      	movs	r5, #10
 800ac54:	e7d6      	b.n	800ac04 <_puts_r+0x40>
 800ac56:	0022      	movs	r2, r4
 800ac58:	0028      	movs	r0, r5
 800ac5a:	f000 f895 	bl	800ad88 <__swbuf_r>
 800ac5e:	3001      	adds	r0, #1
 800ac60:	d1e8      	bne.n	800ac34 <_puts_r+0x70>
 800ac62:	e7cd      	b.n	800ac00 <_puts_r+0x3c>
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	1c5a      	adds	r2, r3, #1
 800ac68:	6022      	str	r2, [r4, #0]
 800ac6a:	220a      	movs	r2, #10
 800ac6c:	701a      	strb	r2, [r3, #0]
 800ac6e:	e7f0      	b.n	800ac52 <_puts_r+0x8e>

0800ac70 <puts>:
 800ac70:	b510      	push	{r4, lr}
 800ac72:	4b03      	ldr	r3, [pc, #12]	@ (800ac80 <puts+0x10>)
 800ac74:	0001      	movs	r1, r0
 800ac76:	6818      	ldr	r0, [r3, #0]
 800ac78:	f7ff ffa4 	bl	800abc4 <_puts_r>
 800ac7c:	bd10      	pop	{r4, pc}
 800ac7e:	46c0      	nop			@ (mov r8, r8)
 800ac80:	20000018 	.word	0x20000018

0800ac84 <sniprintf>:
 800ac84:	b40c      	push	{r2, r3}
 800ac86:	b530      	push	{r4, r5, lr}
 800ac88:	4b18      	ldr	r3, [pc, #96]	@ (800acec <sniprintf+0x68>)
 800ac8a:	000c      	movs	r4, r1
 800ac8c:	681d      	ldr	r5, [r3, #0]
 800ac8e:	b09d      	sub	sp, #116	@ 0x74
 800ac90:	2900      	cmp	r1, #0
 800ac92:	da08      	bge.n	800aca6 <sniprintf+0x22>
 800ac94:	238b      	movs	r3, #139	@ 0x8b
 800ac96:	2001      	movs	r0, #1
 800ac98:	602b      	str	r3, [r5, #0]
 800ac9a:	4240      	negs	r0, r0
 800ac9c:	b01d      	add	sp, #116	@ 0x74
 800ac9e:	bc30      	pop	{r4, r5}
 800aca0:	bc08      	pop	{r3}
 800aca2:	b002      	add	sp, #8
 800aca4:	4718      	bx	r3
 800aca6:	2382      	movs	r3, #130	@ 0x82
 800aca8:	466a      	mov	r2, sp
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	8293      	strh	r3, [r2, #20]
 800acae:	2300      	movs	r3, #0
 800acb0:	9002      	str	r0, [sp, #8]
 800acb2:	931b      	str	r3, [sp, #108]	@ 0x6c
 800acb4:	9006      	str	r0, [sp, #24]
 800acb6:	4299      	cmp	r1, r3
 800acb8:	d000      	beq.n	800acbc <sniprintf+0x38>
 800acba:	1e4b      	subs	r3, r1, #1
 800acbc:	9304      	str	r3, [sp, #16]
 800acbe:	9307      	str	r3, [sp, #28]
 800acc0:	2301      	movs	r3, #1
 800acc2:	466a      	mov	r2, sp
 800acc4:	425b      	negs	r3, r3
 800acc6:	82d3      	strh	r3, [r2, #22]
 800acc8:	0028      	movs	r0, r5
 800acca:	ab21      	add	r3, sp, #132	@ 0x84
 800accc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800acce:	a902      	add	r1, sp, #8
 800acd0:	9301      	str	r3, [sp, #4]
 800acd2:	f000 fa39 	bl	800b148 <_svfiprintf_r>
 800acd6:	1c43      	adds	r3, r0, #1
 800acd8:	da01      	bge.n	800acde <sniprintf+0x5a>
 800acda:	238b      	movs	r3, #139	@ 0x8b
 800acdc:	602b      	str	r3, [r5, #0]
 800acde:	2c00      	cmp	r4, #0
 800ace0:	d0dc      	beq.n	800ac9c <sniprintf+0x18>
 800ace2:	2200      	movs	r2, #0
 800ace4:	9b02      	ldr	r3, [sp, #8]
 800ace6:	701a      	strb	r2, [r3, #0]
 800ace8:	e7d8      	b.n	800ac9c <sniprintf+0x18>
 800acea:	46c0      	nop			@ (mov r8, r8)
 800acec:	20000018 	.word	0x20000018

0800acf0 <__sread>:
 800acf0:	b570      	push	{r4, r5, r6, lr}
 800acf2:	000c      	movs	r4, r1
 800acf4:	250e      	movs	r5, #14
 800acf6:	5f49      	ldrsh	r1, [r1, r5]
 800acf8:	f000 f914 	bl	800af24 <_read_r>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	db03      	blt.n	800ad08 <__sread+0x18>
 800ad00:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ad02:	181b      	adds	r3, r3, r0
 800ad04:	6563      	str	r3, [r4, #84]	@ 0x54
 800ad06:	bd70      	pop	{r4, r5, r6, pc}
 800ad08:	89a3      	ldrh	r3, [r4, #12]
 800ad0a:	4a02      	ldr	r2, [pc, #8]	@ (800ad14 <__sread+0x24>)
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	81a3      	strh	r3, [r4, #12]
 800ad10:	e7f9      	b.n	800ad06 <__sread+0x16>
 800ad12:	46c0      	nop			@ (mov r8, r8)
 800ad14:	ffffefff 	.word	0xffffefff

0800ad18 <__swrite>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	001f      	movs	r7, r3
 800ad1c:	898b      	ldrh	r3, [r1, #12]
 800ad1e:	0005      	movs	r5, r0
 800ad20:	000c      	movs	r4, r1
 800ad22:	0016      	movs	r6, r2
 800ad24:	05db      	lsls	r3, r3, #23
 800ad26:	d505      	bpl.n	800ad34 <__swrite+0x1c>
 800ad28:	230e      	movs	r3, #14
 800ad2a:	5ec9      	ldrsh	r1, [r1, r3]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2302      	movs	r3, #2
 800ad30:	f000 f8e4 	bl	800aefc <_lseek_r>
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	4a05      	ldr	r2, [pc, #20]	@ (800ad4c <__swrite+0x34>)
 800ad38:	0028      	movs	r0, r5
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	81a3      	strh	r3, [r4, #12]
 800ad3e:	0032      	movs	r2, r6
 800ad40:	230e      	movs	r3, #14
 800ad42:	5ee1      	ldrsh	r1, [r4, r3]
 800ad44:	003b      	movs	r3, r7
 800ad46:	f000 f913 	bl	800af70 <_write_r>
 800ad4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad4c:	ffffefff 	.word	0xffffefff

0800ad50 <__sseek>:
 800ad50:	b570      	push	{r4, r5, r6, lr}
 800ad52:	000c      	movs	r4, r1
 800ad54:	250e      	movs	r5, #14
 800ad56:	5f49      	ldrsh	r1, [r1, r5]
 800ad58:	f000 f8d0 	bl	800aefc <_lseek_r>
 800ad5c:	89a3      	ldrh	r3, [r4, #12]
 800ad5e:	1c42      	adds	r2, r0, #1
 800ad60:	d103      	bne.n	800ad6a <__sseek+0x1a>
 800ad62:	4a05      	ldr	r2, [pc, #20]	@ (800ad78 <__sseek+0x28>)
 800ad64:	4013      	ands	r3, r2
 800ad66:	81a3      	strh	r3, [r4, #12]
 800ad68:	bd70      	pop	{r4, r5, r6, pc}
 800ad6a:	2280      	movs	r2, #128	@ 0x80
 800ad6c:	0152      	lsls	r2, r2, #5
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	81a3      	strh	r3, [r4, #12]
 800ad72:	6560      	str	r0, [r4, #84]	@ 0x54
 800ad74:	e7f8      	b.n	800ad68 <__sseek+0x18>
 800ad76:	46c0      	nop			@ (mov r8, r8)
 800ad78:	ffffefff 	.word	0xffffefff

0800ad7c <__sclose>:
 800ad7c:	b510      	push	{r4, lr}
 800ad7e:	230e      	movs	r3, #14
 800ad80:	5ec9      	ldrsh	r1, [r1, r3]
 800ad82:	f000 f8a9 	bl	800aed8 <_close_r>
 800ad86:	bd10      	pop	{r4, pc}

0800ad88 <__swbuf_r>:
 800ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8a:	0006      	movs	r6, r0
 800ad8c:	000d      	movs	r5, r1
 800ad8e:	0014      	movs	r4, r2
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d004      	beq.n	800ad9e <__swbuf_r+0x16>
 800ad94:	6a03      	ldr	r3, [r0, #32]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d101      	bne.n	800ad9e <__swbuf_r+0x16>
 800ad9a:	f7ff fecf 	bl	800ab3c <__sinit>
 800ad9e:	69a3      	ldr	r3, [r4, #24]
 800ada0:	60a3      	str	r3, [r4, #8]
 800ada2:	89a3      	ldrh	r3, [r4, #12]
 800ada4:	071b      	lsls	r3, r3, #28
 800ada6:	d502      	bpl.n	800adae <__swbuf_r+0x26>
 800ada8:	6923      	ldr	r3, [r4, #16]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d109      	bne.n	800adc2 <__swbuf_r+0x3a>
 800adae:	0021      	movs	r1, r4
 800adb0:	0030      	movs	r0, r6
 800adb2:	f000 f82b 	bl	800ae0c <__swsetup_r>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d003      	beq.n	800adc2 <__swbuf_r+0x3a>
 800adba:	2501      	movs	r5, #1
 800adbc:	426d      	negs	r5, r5
 800adbe:	0028      	movs	r0, r5
 800adc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adc2:	6923      	ldr	r3, [r4, #16]
 800adc4:	6820      	ldr	r0, [r4, #0]
 800adc6:	b2ef      	uxtb	r7, r5
 800adc8:	1ac0      	subs	r0, r0, r3
 800adca:	6963      	ldr	r3, [r4, #20]
 800adcc:	b2ed      	uxtb	r5, r5
 800adce:	4283      	cmp	r3, r0
 800add0:	dc05      	bgt.n	800adde <__swbuf_r+0x56>
 800add2:	0021      	movs	r1, r4
 800add4:	0030      	movs	r0, r6
 800add6:	f000 fdfb 	bl	800b9d0 <_fflush_r>
 800adda:	2800      	cmp	r0, #0
 800addc:	d1ed      	bne.n	800adba <__swbuf_r+0x32>
 800adde:	68a3      	ldr	r3, [r4, #8]
 800ade0:	3001      	adds	r0, #1
 800ade2:	3b01      	subs	r3, #1
 800ade4:	60a3      	str	r3, [r4, #8]
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	1c5a      	adds	r2, r3, #1
 800adea:	6022      	str	r2, [r4, #0]
 800adec:	701f      	strb	r7, [r3, #0]
 800adee:	6963      	ldr	r3, [r4, #20]
 800adf0:	4283      	cmp	r3, r0
 800adf2:	d004      	beq.n	800adfe <__swbuf_r+0x76>
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	07db      	lsls	r3, r3, #31
 800adf8:	d5e1      	bpl.n	800adbe <__swbuf_r+0x36>
 800adfa:	2d0a      	cmp	r5, #10
 800adfc:	d1df      	bne.n	800adbe <__swbuf_r+0x36>
 800adfe:	0021      	movs	r1, r4
 800ae00:	0030      	movs	r0, r6
 800ae02:	f000 fde5 	bl	800b9d0 <_fflush_r>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d0d9      	beq.n	800adbe <__swbuf_r+0x36>
 800ae0a:	e7d6      	b.n	800adba <__swbuf_r+0x32>

0800ae0c <__swsetup_r>:
 800ae0c:	4b2d      	ldr	r3, [pc, #180]	@ (800aec4 <__swsetup_r+0xb8>)
 800ae0e:	b570      	push	{r4, r5, r6, lr}
 800ae10:	0005      	movs	r5, r0
 800ae12:	6818      	ldr	r0, [r3, #0]
 800ae14:	000c      	movs	r4, r1
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d004      	beq.n	800ae24 <__swsetup_r+0x18>
 800ae1a:	6a03      	ldr	r3, [r0, #32]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d101      	bne.n	800ae24 <__swsetup_r+0x18>
 800ae20:	f7ff fe8c 	bl	800ab3c <__sinit>
 800ae24:	220c      	movs	r2, #12
 800ae26:	5ea3      	ldrsh	r3, [r4, r2]
 800ae28:	071a      	lsls	r2, r3, #28
 800ae2a:	d423      	bmi.n	800ae74 <__swsetup_r+0x68>
 800ae2c:	06da      	lsls	r2, r3, #27
 800ae2e:	d407      	bmi.n	800ae40 <__swsetup_r+0x34>
 800ae30:	2209      	movs	r2, #9
 800ae32:	602a      	str	r2, [r5, #0]
 800ae34:	2240      	movs	r2, #64	@ 0x40
 800ae36:	2001      	movs	r0, #1
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	81a3      	strh	r3, [r4, #12]
 800ae3c:	4240      	negs	r0, r0
 800ae3e:	e03a      	b.n	800aeb6 <__swsetup_r+0xaa>
 800ae40:	075b      	lsls	r3, r3, #29
 800ae42:	d513      	bpl.n	800ae6c <__swsetup_r+0x60>
 800ae44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae46:	2900      	cmp	r1, #0
 800ae48:	d008      	beq.n	800ae5c <__swsetup_r+0x50>
 800ae4a:	0023      	movs	r3, r4
 800ae4c:	3344      	adds	r3, #68	@ 0x44
 800ae4e:	4299      	cmp	r1, r3
 800ae50:	d002      	beq.n	800ae58 <__swsetup_r+0x4c>
 800ae52:	0028      	movs	r0, r5
 800ae54:	f000 f8ce 	bl	800aff4 <_free_r>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae5c:	2224      	movs	r2, #36	@ 0x24
 800ae5e:	89a3      	ldrh	r3, [r4, #12]
 800ae60:	4393      	bics	r3, r2
 800ae62:	81a3      	strh	r3, [r4, #12]
 800ae64:	2300      	movs	r3, #0
 800ae66:	6063      	str	r3, [r4, #4]
 800ae68:	6923      	ldr	r3, [r4, #16]
 800ae6a:	6023      	str	r3, [r4, #0]
 800ae6c:	2308      	movs	r3, #8
 800ae6e:	89a2      	ldrh	r2, [r4, #12]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	81a3      	strh	r3, [r4, #12]
 800ae74:	6923      	ldr	r3, [r4, #16]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10b      	bne.n	800ae92 <__swsetup_r+0x86>
 800ae7a:	21a0      	movs	r1, #160	@ 0xa0
 800ae7c:	2280      	movs	r2, #128	@ 0x80
 800ae7e:	89a3      	ldrh	r3, [r4, #12]
 800ae80:	0089      	lsls	r1, r1, #2
 800ae82:	0092      	lsls	r2, r2, #2
 800ae84:	400b      	ands	r3, r1
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d003      	beq.n	800ae92 <__swsetup_r+0x86>
 800ae8a:	0021      	movs	r1, r4
 800ae8c:	0028      	movs	r0, r5
 800ae8e:	f000 fdf5 	bl	800ba7c <__smakebuf_r>
 800ae92:	220c      	movs	r2, #12
 800ae94:	5ea3      	ldrsh	r3, [r4, r2]
 800ae96:	2101      	movs	r1, #1
 800ae98:	001a      	movs	r2, r3
 800ae9a:	400a      	ands	r2, r1
 800ae9c:	420b      	tst	r3, r1
 800ae9e:	d00b      	beq.n	800aeb8 <__swsetup_r+0xac>
 800aea0:	2200      	movs	r2, #0
 800aea2:	60a2      	str	r2, [r4, #8]
 800aea4:	6962      	ldr	r2, [r4, #20]
 800aea6:	4252      	negs	r2, r2
 800aea8:	61a2      	str	r2, [r4, #24]
 800aeaa:	2000      	movs	r0, #0
 800aeac:	6922      	ldr	r2, [r4, #16]
 800aeae:	4282      	cmp	r2, r0
 800aeb0:	d101      	bne.n	800aeb6 <__swsetup_r+0xaa>
 800aeb2:	061a      	lsls	r2, r3, #24
 800aeb4:	d4be      	bmi.n	800ae34 <__swsetup_r+0x28>
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}
 800aeb8:	0799      	lsls	r1, r3, #30
 800aeba:	d400      	bmi.n	800aebe <__swsetup_r+0xb2>
 800aebc:	6962      	ldr	r2, [r4, #20]
 800aebe:	60a2      	str	r2, [r4, #8]
 800aec0:	e7f3      	b.n	800aeaa <__swsetup_r+0x9e>
 800aec2:	46c0      	nop			@ (mov r8, r8)
 800aec4:	20000018 	.word	0x20000018

0800aec8 <memset>:
 800aec8:	0003      	movs	r3, r0
 800aeca:	1882      	adds	r2, r0, r2
 800aecc:	4293      	cmp	r3, r2
 800aece:	d100      	bne.n	800aed2 <memset+0xa>
 800aed0:	4770      	bx	lr
 800aed2:	7019      	strb	r1, [r3, #0]
 800aed4:	3301      	adds	r3, #1
 800aed6:	e7f9      	b.n	800aecc <memset+0x4>

0800aed8 <_close_r>:
 800aed8:	2300      	movs	r3, #0
 800aeda:	b570      	push	{r4, r5, r6, lr}
 800aedc:	4d06      	ldr	r5, [pc, #24]	@ (800aef8 <_close_r+0x20>)
 800aede:	0004      	movs	r4, r0
 800aee0:	0008      	movs	r0, r1
 800aee2:	602b      	str	r3, [r5, #0]
 800aee4:	f7f6 fe9f 	bl	8001c26 <_close>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d103      	bne.n	800aef4 <_close_r+0x1c>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d000      	beq.n	800aef4 <_close_r+0x1c>
 800aef2:	6023      	str	r3, [r4, #0]
 800aef4:	bd70      	pop	{r4, r5, r6, pc}
 800aef6:	46c0      	nop			@ (mov r8, r8)
 800aef8:	20000830 	.word	0x20000830

0800aefc <_lseek_r>:
 800aefc:	b570      	push	{r4, r5, r6, lr}
 800aefe:	0004      	movs	r4, r0
 800af00:	0008      	movs	r0, r1
 800af02:	0011      	movs	r1, r2
 800af04:	001a      	movs	r2, r3
 800af06:	2300      	movs	r3, #0
 800af08:	4d05      	ldr	r5, [pc, #20]	@ (800af20 <_lseek_r+0x24>)
 800af0a:	602b      	str	r3, [r5, #0]
 800af0c:	f7f6 feac 	bl	8001c68 <_lseek>
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d103      	bne.n	800af1c <_lseek_r+0x20>
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d000      	beq.n	800af1c <_lseek_r+0x20>
 800af1a:	6023      	str	r3, [r4, #0]
 800af1c:	bd70      	pop	{r4, r5, r6, pc}
 800af1e:	46c0      	nop			@ (mov r8, r8)
 800af20:	20000830 	.word	0x20000830

0800af24 <_read_r>:
 800af24:	b570      	push	{r4, r5, r6, lr}
 800af26:	0004      	movs	r4, r0
 800af28:	0008      	movs	r0, r1
 800af2a:	0011      	movs	r1, r2
 800af2c:	001a      	movs	r2, r3
 800af2e:	2300      	movs	r3, #0
 800af30:	4d05      	ldr	r5, [pc, #20]	@ (800af48 <_read_r+0x24>)
 800af32:	602b      	str	r3, [r5, #0]
 800af34:	f7f6 fe5a 	bl	8001bec <_read>
 800af38:	1c43      	adds	r3, r0, #1
 800af3a:	d103      	bne.n	800af44 <_read_r+0x20>
 800af3c:	682b      	ldr	r3, [r5, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d000      	beq.n	800af44 <_read_r+0x20>
 800af42:	6023      	str	r3, [r4, #0]
 800af44:	bd70      	pop	{r4, r5, r6, pc}
 800af46:	46c0      	nop			@ (mov r8, r8)
 800af48:	20000830 	.word	0x20000830

0800af4c <_sbrk_r>:
 800af4c:	2300      	movs	r3, #0
 800af4e:	b570      	push	{r4, r5, r6, lr}
 800af50:	4d06      	ldr	r5, [pc, #24]	@ (800af6c <_sbrk_r+0x20>)
 800af52:	0004      	movs	r4, r0
 800af54:	0008      	movs	r0, r1
 800af56:	602b      	str	r3, [r5, #0]
 800af58:	f7f6 fe92 	bl	8001c80 <_sbrk>
 800af5c:	1c43      	adds	r3, r0, #1
 800af5e:	d103      	bne.n	800af68 <_sbrk_r+0x1c>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d000      	beq.n	800af68 <_sbrk_r+0x1c>
 800af66:	6023      	str	r3, [r4, #0]
 800af68:	bd70      	pop	{r4, r5, r6, pc}
 800af6a:	46c0      	nop			@ (mov r8, r8)
 800af6c:	20000830 	.word	0x20000830

0800af70 <_write_r>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	0004      	movs	r4, r0
 800af74:	0008      	movs	r0, r1
 800af76:	0011      	movs	r1, r2
 800af78:	001a      	movs	r2, r3
 800af7a:	2300      	movs	r3, #0
 800af7c:	4d05      	ldr	r5, [pc, #20]	@ (800af94 <_write_r+0x24>)
 800af7e:	602b      	str	r3, [r5, #0]
 800af80:	f7f5 fa0a 	bl	8000398 <_write>
 800af84:	1c43      	adds	r3, r0, #1
 800af86:	d103      	bne.n	800af90 <_write_r+0x20>
 800af88:	682b      	ldr	r3, [r5, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d000      	beq.n	800af90 <_write_r+0x20>
 800af8e:	6023      	str	r3, [r4, #0]
 800af90:	bd70      	pop	{r4, r5, r6, pc}
 800af92:	46c0      	nop			@ (mov r8, r8)
 800af94:	20000830 	.word	0x20000830

0800af98 <__errno>:
 800af98:	4b01      	ldr	r3, [pc, #4]	@ (800afa0 <__errno+0x8>)
 800af9a:	6818      	ldr	r0, [r3, #0]
 800af9c:	4770      	bx	lr
 800af9e:	46c0      	nop			@ (mov r8, r8)
 800afa0:	20000018 	.word	0x20000018

0800afa4 <__libc_init_array>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	2600      	movs	r6, #0
 800afa8:	4c0c      	ldr	r4, [pc, #48]	@ (800afdc <__libc_init_array+0x38>)
 800afaa:	4d0d      	ldr	r5, [pc, #52]	@ (800afe0 <__libc_init_array+0x3c>)
 800afac:	1b64      	subs	r4, r4, r5
 800afae:	10a4      	asrs	r4, r4, #2
 800afb0:	42a6      	cmp	r6, r4
 800afb2:	d109      	bne.n	800afc8 <__libc_init_array+0x24>
 800afb4:	2600      	movs	r6, #0
 800afb6:	f000 fe25 	bl	800bc04 <_init>
 800afba:	4c0a      	ldr	r4, [pc, #40]	@ (800afe4 <__libc_init_array+0x40>)
 800afbc:	4d0a      	ldr	r5, [pc, #40]	@ (800afe8 <__libc_init_array+0x44>)
 800afbe:	1b64      	subs	r4, r4, r5
 800afc0:	10a4      	asrs	r4, r4, #2
 800afc2:	42a6      	cmp	r6, r4
 800afc4:	d105      	bne.n	800afd2 <__libc_init_array+0x2e>
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
 800afc8:	00b3      	lsls	r3, r6, #2
 800afca:	58eb      	ldr	r3, [r5, r3]
 800afcc:	4798      	blx	r3
 800afce:	3601      	adds	r6, #1
 800afd0:	e7ee      	b.n	800afb0 <__libc_init_array+0xc>
 800afd2:	00b3      	lsls	r3, r6, #2
 800afd4:	58eb      	ldr	r3, [r5, r3]
 800afd6:	4798      	blx	r3
 800afd8:	3601      	adds	r6, #1
 800afda:	e7f2      	b.n	800afc2 <__libc_init_array+0x1e>
 800afdc:	0800c7a4 	.word	0x0800c7a4
 800afe0:	0800c7a4 	.word	0x0800c7a4
 800afe4:	0800c7a8 	.word	0x0800c7a8
 800afe8:	0800c7a4 	.word	0x0800c7a4

0800afec <__retarget_lock_init_recursive>:
 800afec:	4770      	bx	lr

0800afee <__retarget_lock_acquire_recursive>:
 800afee:	4770      	bx	lr

0800aff0 <__retarget_lock_release_recursive>:
 800aff0:	4770      	bx	lr
	...

0800aff4 <_free_r>:
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	0005      	movs	r5, r0
 800aff8:	1e0c      	subs	r4, r1, #0
 800affa:	d010      	beq.n	800b01e <_free_r+0x2a>
 800affc:	3c04      	subs	r4, #4
 800affe:	6823      	ldr	r3, [r4, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	da00      	bge.n	800b006 <_free_r+0x12>
 800b004:	18e4      	adds	r4, r4, r3
 800b006:	0028      	movs	r0, r5
 800b008:	f7ff fcf8 	bl	800a9fc <__malloc_lock>
 800b00c:	4a1d      	ldr	r2, [pc, #116]	@ (800b084 <_free_r+0x90>)
 800b00e:	6813      	ldr	r3, [r2, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d105      	bne.n	800b020 <_free_r+0x2c>
 800b014:	6063      	str	r3, [r4, #4]
 800b016:	6014      	str	r4, [r2, #0]
 800b018:	0028      	movs	r0, r5
 800b01a:	f7ff fcf7 	bl	800aa0c <__malloc_unlock>
 800b01e:	bd70      	pop	{r4, r5, r6, pc}
 800b020:	42a3      	cmp	r3, r4
 800b022:	d908      	bls.n	800b036 <_free_r+0x42>
 800b024:	6820      	ldr	r0, [r4, #0]
 800b026:	1821      	adds	r1, r4, r0
 800b028:	428b      	cmp	r3, r1
 800b02a:	d1f3      	bne.n	800b014 <_free_r+0x20>
 800b02c:	6819      	ldr	r1, [r3, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	1809      	adds	r1, r1, r0
 800b032:	6021      	str	r1, [r4, #0]
 800b034:	e7ee      	b.n	800b014 <_free_r+0x20>
 800b036:	001a      	movs	r2, r3
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d001      	beq.n	800b042 <_free_r+0x4e>
 800b03e:	42a3      	cmp	r3, r4
 800b040:	d9f9      	bls.n	800b036 <_free_r+0x42>
 800b042:	6811      	ldr	r1, [r2, #0]
 800b044:	1850      	adds	r0, r2, r1
 800b046:	42a0      	cmp	r0, r4
 800b048:	d10b      	bne.n	800b062 <_free_r+0x6e>
 800b04a:	6820      	ldr	r0, [r4, #0]
 800b04c:	1809      	adds	r1, r1, r0
 800b04e:	1850      	adds	r0, r2, r1
 800b050:	6011      	str	r1, [r2, #0]
 800b052:	4283      	cmp	r3, r0
 800b054:	d1e0      	bne.n	800b018 <_free_r+0x24>
 800b056:	6818      	ldr	r0, [r3, #0]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	1841      	adds	r1, r0, r1
 800b05c:	6011      	str	r1, [r2, #0]
 800b05e:	6053      	str	r3, [r2, #4]
 800b060:	e7da      	b.n	800b018 <_free_r+0x24>
 800b062:	42a0      	cmp	r0, r4
 800b064:	d902      	bls.n	800b06c <_free_r+0x78>
 800b066:	230c      	movs	r3, #12
 800b068:	602b      	str	r3, [r5, #0]
 800b06a:	e7d5      	b.n	800b018 <_free_r+0x24>
 800b06c:	6820      	ldr	r0, [r4, #0]
 800b06e:	1821      	adds	r1, r4, r0
 800b070:	428b      	cmp	r3, r1
 800b072:	d103      	bne.n	800b07c <_free_r+0x88>
 800b074:	6819      	ldr	r1, [r3, #0]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	1809      	adds	r1, r1, r0
 800b07a:	6021      	str	r1, [r4, #0]
 800b07c:	6063      	str	r3, [r4, #4]
 800b07e:	6054      	str	r4, [r2, #4]
 800b080:	e7ca      	b.n	800b018 <_free_r+0x24>
 800b082:	46c0      	nop			@ (mov r8, r8)
 800b084:	200006f0 	.word	0x200006f0

0800b088 <__ssputs_r>:
 800b088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b08a:	688e      	ldr	r6, [r1, #8]
 800b08c:	b085      	sub	sp, #20
 800b08e:	001f      	movs	r7, r3
 800b090:	000c      	movs	r4, r1
 800b092:	680b      	ldr	r3, [r1, #0]
 800b094:	9002      	str	r0, [sp, #8]
 800b096:	9203      	str	r2, [sp, #12]
 800b098:	42be      	cmp	r6, r7
 800b09a:	d830      	bhi.n	800b0fe <__ssputs_r+0x76>
 800b09c:	210c      	movs	r1, #12
 800b09e:	5e62      	ldrsh	r2, [r4, r1]
 800b0a0:	2190      	movs	r1, #144	@ 0x90
 800b0a2:	00c9      	lsls	r1, r1, #3
 800b0a4:	420a      	tst	r2, r1
 800b0a6:	d028      	beq.n	800b0fa <__ssputs_r+0x72>
 800b0a8:	2003      	movs	r0, #3
 800b0aa:	6921      	ldr	r1, [r4, #16]
 800b0ac:	1a5b      	subs	r3, r3, r1
 800b0ae:	9301      	str	r3, [sp, #4]
 800b0b0:	6963      	ldr	r3, [r4, #20]
 800b0b2:	4343      	muls	r3, r0
 800b0b4:	9801      	ldr	r0, [sp, #4]
 800b0b6:	0fdd      	lsrs	r5, r3, #31
 800b0b8:	18ed      	adds	r5, r5, r3
 800b0ba:	1c7b      	adds	r3, r7, #1
 800b0bc:	181b      	adds	r3, r3, r0
 800b0be:	106d      	asrs	r5, r5, #1
 800b0c0:	42ab      	cmp	r3, r5
 800b0c2:	d900      	bls.n	800b0c6 <__ssputs_r+0x3e>
 800b0c4:	001d      	movs	r5, r3
 800b0c6:	0552      	lsls	r2, r2, #21
 800b0c8:	d528      	bpl.n	800b11c <__ssputs_r+0x94>
 800b0ca:	0029      	movs	r1, r5
 800b0cc:	9802      	ldr	r0, [sp, #8]
 800b0ce:	f7ff fc15 	bl	800a8fc <_malloc_r>
 800b0d2:	1e06      	subs	r6, r0, #0
 800b0d4:	d02c      	beq.n	800b130 <__ssputs_r+0xa8>
 800b0d6:	9a01      	ldr	r2, [sp, #4]
 800b0d8:	6921      	ldr	r1, [r4, #16]
 800b0da:	f000 fd52 	bl	800bb82 <memcpy>
 800b0de:	89a2      	ldrh	r2, [r4, #12]
 800b0e0:	4b18      	ldr	r3, [pc, #96]	@ (800b144 <__ssputs_r+0xbc>)
 800b0e2:	401a      	ands	r2, r3
 800b0e4:	2380      	movs	r3, #128	@ 0x80
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	81a3      	strh	r3, [r4, #12]
 800b0ea:	9b01      	ldr	r3, [sp, #4]
 800b0ec:	6126      	str	r6, [r4, #16]
 800b0ee:	18f6      	adds	r6, r6, r3
 800b0f0:	6026      	str	r6, [r4, #0]
 800b0f2:	003e      	movs	r6, r7
 800b0f4:	6165      	str	r5, [r4, #20]
 800b0f6:	1aed      	subs	r5, r5, r3
 800b0f8:	60a5      	str	r5, [r4, #8]
 800b0fa:	42be      	cmp	r6, r7
 800b0fc:	d900      	bls.n	800b100 <__ssputs_r+0x78>
 800b0fe:	003e      	movs	r6, r7
 800b100:	0032      	movs	r2, r6
 800b102:	9903      	ldr	r1, [sp, #12]
 800b104:	6820      	ldr	r0, [r4, #0]
 800b106:	f000 fcfa 	bl	800bafe <memmove>
 800b10a:	2000      	movs	r0, #0
 800b10c:	68a3      	ldr	r3, [r4, #8]
 800b10e:	1b9b      	subs	r3, r3, r6
 800b110:	60a3      	str	r3, [r4, #8]
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	199b      	adds	r3, r3, r6
 800b116:	6023      	str	r3, [r4, #0]
 800b118:	b005      	add	sp, #20
 800b11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b11c:	002a      	movs	r2, r5
 800b11e:	9802      	ldr	r0, [sp, #8]
 800b120:	f000 fd38 	bl	800bb94 <_realloc_r>
 800b124:	1e06      	subs	r6, r0, #0
 800b126:	d1e0      	bne.n	800b0ea <__ssputs_r+0x62>
 800b128:	6921      	ldr	r1, [r4, #16]
 800b12a:	9802      	ldr	r0, [sp, #8]
 800b12c:	f7ff ff62 	bl	800aff4 <_free_r>
 800b130:	230c      	movs	r3, #12
 800b132:	2001      	movs	r0, #1
 800b134:	9a02      	ldr	r2, [sp, #8]
 800b136:	4240      	negs	r0, r0
 800b138:	6013      	str	r3, [r2, #0]
 800b13a:	89a2      	ldrh	r2, [r4, #12]
 800b13c:	3334      	adds	r3, #52	@ 0x34
 800b13e:	4313      	orrs	r3, r2
 800b140:	81a3      	strh	r3, [r4, #12]
 800b142:	e7e9      	b.n	800b118 <__ssputs_r+0x90>
 800b144:	fffffb7f 	.word	0xfffffb7f

0800b148 <_svfiprintf_r>:
 800b148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b14a:	b0a1      	sub	sp, #132	@ 0x84
 800b14c:	9003      	str	r0, [sp, #12]
 800b14e:	001d      	movs	r5, r3
 800b150:	898b      	ldrh	r3, [r1, #12]
 800b152:	000f      	movs	r7, r1
 800b154:	0016      	movs	r6, r2
 800b156:	061b      	lsls	r3, r3, #24
 800b158:	d511      	bpl.n	800b17e <_svfiprintf_r+0x36>
 800b15a:	690b      	ldr	r3, [r1, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10e      	bne.n	800b17e <_svfiprintf_r+0x36>
 800b160:	2140      	movs	r1, #64	@ 0x40
 800b162:	f7ff fbcb 	bl	800a8fc <_malloc_r>
 800b166:	6038      	str	r0, [r7, #0]
 800b168:	6138      	str	r0, [r7, #16]
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d105      	bne.n	800b17a <_svfiprintf_r+0x32>
 800b16e:	230c      	movs	r3, #12
 800b170:	9a03      	ldr	r2, [sp, #12]
 800b172:	6013      	str	r3, [r2, #0]
 800b174:	2001      	movs	r0, #1
 800b176:	4240      	negs	r0, r0
 800b178:	e0cf      	b.n	800b31a <_svfiprintf_r+0x1d2>
 800b17a:	2340      	movs	r3, #64	@ 0x40
 800b17c:	617b      	str	r3, [r7, #20]
 800b17e:	2300      	movs	r3, #0
 800b180:	ac08      	add	r4, sp, #32
 800b182:	6163      	str	r3, [r4, #20]
 800b184:	3320      	adds	r3, #32
 800b186:	7663      	strb	r3, [r4, #25]
 800b188:	3310      	adds	r3, #16
 800b18a:	76a3      	strb	r3, [r4, #26]
 800b18c:	9507      	str	r5, [sp, #28]
 800b18e:	0035      	movs	r5, r6
 800b190:	782b      	ldrb	r3, [r5, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d001      	beq.n	800b19a <_svfiprintf_r+0x52>
 800b196:	2b25      	cmp	r3, #37	@ 0x25
 800b198:	d148      	bne.n	800b22c <_svfiprintf_r+0xe4>
 800b19a:	1bab      	subs	r3, r5, r6
 800b19c:	9305      	str	r3, [sp, #20]
 800b19e:	42b5      	cmp	r5, r6
 800b1a0:	d00b      	beq.n	800b1ba <_svfiprintf_r+0x72>
 800b1a2:	0032      	movs	r2, r6
 800b1a4:	0039      	movs	r1, r7
 800b1a6:	9803      	ldr	r0, [sp, #12]
 800b1a8:	f7ff ff6e 	bl	800b088 <__ssputs_r>
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	d100      	bne.n	800b1b2 <_svfiprintf_r+0x6a>
 800b1b0:	e0ae      	b.n	800b310 <_svfiprintf_r+0x1c8>
 800b1b2:	6963      	ldr	r3, [r4, #20]
 800b1b4:	9a05      	ldr	r2, [sp, #20]
 800b1b6:	189b      	adds	r3, r3, r2
 800b1b8:	6163      	str	r3, [r4, #20]
 800b1ba:	782b      	ldrb	r3, [r5, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d100      	bne.n	800b1c2 <_svfiprintf_r+0x7a>
 800b1c0:	e0a6      	b.n	800b310 <_svfiprintf_r+0x1c8>
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4252      	negs	r2, r2
 800b1c8:	6062      	str	r2, [r4, #4]
 800b1ca:	a904      	add	r1, sp, #16
 800b1cc:	3254      	adds	r2, #84	@ 0x54
 800b1ce:	1852      	adds	r2, r2, r1
 800b1d0:	1c6e      	adds	r6, r5, #1
 800b1d2:	6023      	str	r3, [r4, #0]
 800b1d4:	60e3      	str	r3, [r4, #12]
 800b1d6:	60a3      	str	r3, [r4, #8]
 800b1d8:	7013      	strb	r3, [r2, #0]
 800b1da:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b1dc:	4b54      	ldr	r3, [pc, #336]	@ (800b330 <_svfiprintf_r+0x1e8>)
 800b1de:	2205      	movs	r2, #5
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	7831      	ldrb	r1, [r6, #0]
 800b1e4:	9305      	str	r3, [sp, #20]
 800b1e6:	f000 fcc1 	bl	800bb6c <memchr>
 800b1ea:	1c75      	adds	r5, r6, #1
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d11f      	bne.n	800b230 <_svfiprintf_r+0xe8>
 800b1f0:	6822      	ldr	r2, [r4, #0]
 800b1f2:	06d3      	lsls	r3, r2, #27
 800b1f4:	d504      	bpl.n	800b200 <_svfiprintf_r+0xb8>
 800b1f6:	2353      	movs	r3, #83	@ 0x53
 800b1f8:	a904      	add	r1, sp, #16
 800b1fa:	185b      	adds	r3, r3, r1
 800b1fc:	2120      	movs	r1, #32
 800b1fe:	7019      	strb	r1, [r3, #0]
 800b200:	0713      	lsls	r3, r2, #28
 800b202:	d504      	bpl.n	800b20e <_svfiprintf_r+0xc6>
 800b204:	2353      	movs	r3, #83	@ 0x53
 800b206:	a904      	add	r1, sp, #16
 800b208:	185b      	adds	r3, r3, r1
 800b20a:	212b      	movs	r1, #43	@ 0x2b
 800b20c:	7019      	strb	r1, [r3, #0]
 800b20e:	7833      	ldrb	r3, [r6, #0]
 800b210:	2b2a      	cmp	r3, #42	@ 0x2a
 800b212:	d016      	beq.n	800b242 <_svfiprintf_r+0xfa>
 800b214:	0035      	movs	r5, r6
 800b216:	2100      	movs	r1, #0
 800b218:	200a      	movs	r0, #10
 800b21a:	68e3      	ldr	r3, [r4, #12]
 800b21c:	782a      	ldrb	r2, [r5, #0]
 800b21e:	1c6e      	adds	r6, r5, #1
 800b220:	3a30      	subs	r2, #48	@ 0x30
 800b222:	2a09      	cmp	r2, #9
 800b224:	d950      	bls.n	800b2c8 <_svfiprintf_r+0x180>
 800b226:	2900      	cmp	r1, #0
 800b228:	d111      	bne.n	800b24e <_svfiprintf_r+0x106>
 800b22a:	e017      	b.n	800b25c <_svfiprintf_r+0x114>
 800b22c:	3501      	adds	r5, #1
 800b22e:	e7af      	b.n	800b190 <_svfiprintf_r+0x48>
 800b230:	9b05      	ldr	r3, [sp, #20]
 800b232:	6822      	ldr	r2, [r4, #0]
 800b234:	1ac0      	subs	r0, r0, r3
 800b236:	2301      	movs	r3, #1
 800b238:	4083      	lsls	r3, r0
 800b23a:	4313      	orrs	r3, r2
 800b23c:	002e      	movs	r6, r5
 800b23e:	6023      	str	r3, [r4, #0]
 800b240:	e7cc      	b.n	800b1dc <_svfiprintf_r+0x94>
 800b242:	9b07      	ldr	r3, [sp, #28]
 800b244:	1d19      	adds	r1, r3, #4
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	9107      	str	r1, [sp, #28]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	db01      	blt.n	800b252 <_svfiprintf_r+0x10a>
 800b24e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b250:	e004      	b.n	800b25c <_svfiprintf_r+0x114>
 800b252:	425b      	negs	r3, r3
 800b254:	60e3      	str	r3, [r4, #12]
 800b256:	2302      	movs	r3, #2
 800b258:	4313      	orrs	r3, r2
 800b25a:	6023      	str	r3, [r4, #0]
 800b25c:	782b      	ldrb	r3, [r5, #0]
 800b25e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b260:	d10c      	bne.n	800b27c <_svfiprintf_r+0x134>
 800b262:	786b      	ldrb	r3, [r5, #1]
 800b264:	2b2a      	cmp	r3, #42	@ 0x2a
 800b266:	d134      	bne.n	800b2d2 <_svfiprintf_r+0x18a>
 800b268:	9b07      	ldr	r3, [sp, #28]
 800b26a:	3502      	adds	r5, #2
 800b26c:	1d1a      	adds	r2, r3, #4
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	9207      	str	r2, [sp, #28]
 800b272:	2b00      	cmp	r3, #0
 800b274:	da01      	bge.n	800b27a <_svfiprintf_r+0x132>
 800b276:	2301      	movs	r3, #1
 800b278:	425b      	negs	r3, r3
 800b27a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b27c:	4e2d      	ldr	r6, [pc, #180]	@ (800b334 <_svfiprintf_r+0x1ec>)
 800b27e:	2203      	movs	r2, #3
 800b280:	0030      	movs	r0, r6
 800b282:	7829      	ldrb	r1, [r5, #0]
 800b284:	f000 fc72 	bl	800bb6c <memchr>
 800b288:	2800      	cmp	r0, #0
 800b28a:	d006      	beq.n	800b29a <_svfiprintf_r+0x152>
 800b28c:	2340      	movs	r3, #64	@ 0x40
 800b28e:	1b80      	subs	r0, r0, r6
 800b290:	4083      	lsls	r3, r0
 800b292:	6822      	ldr	r2, [r4, #0]
 800b294:	3501      	adds	r5, #1
 800b296:	4313      	orrs	r3, r2
 800b298:	6023      	str	r3, [r4, #0]
 800b29a:	7829      	ldrb	r1, [r5, #0]
 800b29c:	2206      	movs	r2, #6
 800b29e:	4826      	ldr	r0, [pc, #152]	@ (800b338 <_svfiprintf_r+0x1f0>)
 800b2a0:	1c6e      	adds	r6, r5, #1
 800b2a2:	7621      	strb	r1, [r4, #24]
 800b2a4:	f000 fc62 	bl	800bb6c <memchr>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d038      	beq.n	800b31e <_svfiprintf_r+0x1d6>
 800b2ac:	4b23      	ldr	r3, [pc, #140]	@ (800b33c <_svfiprintf_r+0x1f4>)
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d122      	bne.n	800b2f8 <_svfiprintf_r+0x1b0>
 800b2b2:	2207      	movs	r2, #7
 800b2b4:	9b07      	ldr	r3, [sp, #28]
 800b2b6:	3307      	adds	r3, #7
 800b2b8:	4393      	bics	r3, r2
 800b2ba:	3308      	adds	r3, #8
 800b2bc:	9307      	str	r3, [sp, #28]
 800b2be:	6963      	ldr	r3, [r4, #20]
 800b2c0:	9a04      	ldr	r2, [sp, #16]
 800b2c2:	189b      	adds	r3, r3, r2
 800b2c4:	6163      	str	r3, [r4, #20]
 800b2c6:	e762      	b.n	800b18e <_svfiprintf_r+0x46>
 800b2c8:	4343      	muls	r3, r0
 800b2ca:	0035      	movs	r5, r6
 800b2cc:	2101      	movs	r1, #1
 800b2ce:	189b      	adds	r3, r3, r2
 800b2d0:	e7a4      	b.n	800b21c <_svfiprintf_r+0xd4>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	200a      	movs	r0, #10
 800b2d6:	0019      	movs	r1, r3
 800b2d8:	3501      	adds	r5, #1
 800b2da:	6063      	str	r3, [r4, #4]
 800b2dc:	782a      	ldrb	r2, [r5, #0]
 800b2de:	1c6e      	adds	r6, r5, #1
 800b2e0:	3a30      	subs	r2, #48	@ 0x30
 800b2e2:	2a09      	cmp	r2, #9
 800b2e4:	d903      	bls.n	800b2ee <_svfiprintf_r+0x1a6>
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d0c8      	beq.n	800b27c <_svfiprintf_r+0x134>
 800b2ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2ec:	e7c6      	b.n	800b27c <_svfiprintf_r+0x134>
 800b2ee:	4341      	muls	r1, r0
 800b2f0:	0035      	movs	r5, r6
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	1889      	adds	r1, r1, r2
 800b2f6:	e7f1      	b.n	800b2dc <_svfiprintf_r+0x194>
 800b2f8:	aa07      	add	r2, sp, #28
 800b2fa:	9200      	str	r2, [sp, #0]
 800b2fc:	0021      	movs	r1, r4
 800b2fe:	003a      	movs	r2, r7
 800b300:	4b0f      	ldr	r3, [pc, #60]	@ (800b340 <_svfiprintf_r+0x1f8>)
 800b302:	9803      	ldr	r0, [sp, #12]
 800b304:	e000      	b.n	800b308 <_svfiprintf_r+0x1c0>
 800b306:	bf00      	nop
 800b308:	9004      	str	r0, [sp, #16]
 800b30a:	9b04      	ldr	r3, [sp, #16]
 800b30c:	3301      	adds	r3, #1
 800b30e:	d1d6      	bne.n	800b2be <_svfiprintf_r+0x176>
 800b310:	89bb      	ldrh	r3, [r7, #12]
 800b312:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b314:	065b      	lsls	r3, r3, #25
 800b316:	d500      	bpl.n	800b31a <_svfiprintf_r+0x1d2>
 800b318:	e72c      	b.n	800b174 <_svfiprintf_r+0x2c>
 800b31a:	b021      	add	sp, #132	@ 0x84
 800b31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b31e:	aa07      	add	r2, sp, #28
 800b320:	9200      	str	r2, [sp, #0]
 800b322:	0021      	movs	r1, r4
 800b324:	003a      	movs	r2, r7
 800b326:	4b06      	ldr	r3, [pc, #24]	@ (800b340 <_svfiprintf_r+0x1f8>)
 800b328:	9803      	ldr	r0, [sp, #12]
 800b32a:	f000 f9bf 	bl	800b6ac <_printf_i>
 800b32e:	e7eb      	b.n	800b308 <_svfiprintf_r+0x1c0>
 800b330:	0800c770 	.word	0x0800c770
 800b334:	0800c776 	.word	0x0800c776
 800b338:	0800c77a 	.word	0x0800c77a
 800b33c:	00000000 	.word	0x00000000
 800b340:	0800b089 	.word	0x0800b089

0800b344 <__sfputc_r>:
 800b344:	6893      	ldr	r3, [r2, #8]
 800b346:	b510      	push	{r4, lr}
 800b348:	3b01      	subs	r3, #1
 800b34a:	6093      	str	r3, [r2, #8]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	da04      	bge.n	800b35a <__sfputc_r+0x16>
 800b350:	6994      	ldr	r4, [r2, #24]
 800b352:	42a3      	cmp	r3, r4
 800b354:	db07      	blt.n	800b366 <__sfputc_r+0x22>
 800b356:	290a      	cmp	r1, #10
 800b358:	d005      	beq.n	800b366 <__sfputc_r+0x22>
 800b35a:	6813      	ldr	r3, [r2, #0]
 800b35c:	1c58      	adds	r0, r3, #1
 800b35e:	6010      	str	r0, [r2, #0]
 800b360:	7019      	strb	r1, [r3, #0]
 800b362:	0008      	movs	r0, r1
 800b364:	bd10      	pop	{r4, pc}
 800b366:	f7ff fd0f 	bl	800ad88 <__swbuf_r>
 800b36a:	0001      	movs	r1, r0
 800b36c:	e7f9      	b.n	800b362 <__sfputc_r+0x1e>

0800b36e <__sfputs_r>:
 800b36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b370:	0006      	movs	r6, r0
 800b372:	000f      	movs	r7, r1
 800b374:	0014      	movs	r4, r2
 800b376:	18d5      	adds	r5, r2, r3
 800b378:	42ac      	cmp	r4, r5
 800b37a:	d101      	bne.n	800b380 <__sfputs_r+0x12>
 800b37c:	2000      	movs	r0, #0
 800b37e:	e007      	b.n	800b390 <__sfputs_r+0x22>
 800b380:	7821      	ldrb	r1, [r4, #0]
 800b382:	003a      	movs	r2, r7
 800b384:	0030      	movs	r0, r6
 800b386:	f7ff ffdd 	bl	800b344 <__sfputc_r>
 800b38a:	3401      	adds	r4, #1
 800b38c:	1c43      	adds	r3, r0, #1
 800b38e:	d1f3      	bne.n	800b378 <__sfputs_r+0xa>
 800b390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b394 <_vfiprintf_r>:
 800b394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b396:	b0a1      	sub	sp, #132	@ 0x84
 800b398:	000f      	movs	r7, r1
 800b39a:	0015      	movs	r5, r2
 800b39c:	001e      	movs	r6, r3
 800b39e:	9003      	str	r0, [sp, #12]
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	d004      	beq.n	800b3ae <_vfiprintf_r+0x1a>
 800b3a4:	6a03      	ldr	r3, [r0, #32]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d101      	bne.n	800b3ae <_vfiprintf_r+0x1a>
 800b3aa:	f7ff fbc7 	bl	800ab3c <__sinit>
 800b3ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b3b0:	07db      	lsls	r3, r3, #31
 800b3b2:	d405      	bmi.n	800b3c0 <_vfiprintf_r+0x2c>
 800b3b4:	89bb      	ldrh	r3, [r7, #12]
 800b3b6:	059b      	lsls	r3, r3, #22
 800b3b8:	d402      	bmi.n	800b3c0 <_vfiprintf_r+0x2c>
 800b3ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b3bc:	f7ff fe17 	bl	800afee <__retarget_lock_acquire_recursive>
 800b3c0:	89bb      	ldrh	r3, [r7, #12]
 800b3c2:	071b      	lsls	r3, r3, #28
 800b3c4:	d502      	bpl.n	800b3cc <_vfiprintf_r+0x38>
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d113      	bne.n	800b3f4 <_vfiprintf_r+0x60>
 800b3cc:	0039      	movs	r1, r7
 800b3ce:	9803      	ldr	r0, [sp, #12]
 800b3d0:	f7ff fd1c 	bl	800ae0c <__swsetup_r>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d00d      	beq.n	800b3f4 <_vfiprintf_r+0x60>
 800b3d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b3da:	07db      	lsls	r3, r3, #31
 800b3dc:	d503      	bpl.n	800b3e6 <_vfiprintf_r+0x52>
 800b3de:	2001      	movs	r0, #1
 800b3e0:	4240      	negs	r0, r0
 800b3e2:	b021      	add	sp, #132	@ 0x84
 800b3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3e6:	89bb      	ldrh	r3, [r7, #12]
 800b3e8:	059b      	lsls	r3, r3, #22
 800b3ea:	d4f8      	bmi.n	800b3de <_vfiprintf_r+0x4a>
 800b3ec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b3ee:	f7ff fdff 	bl	800aff0 <__retarget_lock_release_recursive>
 800b3f2:	e7f4      	b.n	800b3de <_vfiprintf_r+0x4a>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	ac08      	add	r4, sp, #32
 800b3f8:	6163      	str	r3, [r4, #20]
 800b3fa:	3320      	adds	r3, #32
 800b3fc:	7663      	strb	r3, [r4, #25]
 800b3fe:	3310      	adds	r3, #16
 800b400:	76a3      	strb	r3, [r4, #26]
 800b402:	9607      	str	r6, [sp, #28]
 800b404:	002e      	movs	r6, r5
 800b406:	7833      	ldrb	r3, [r6, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d001      	beq.n	800b410 <_vfiprintf_r+0x7c>
 800b40c:	2b25      	cmp	r3, #37	@ 0x25
 800b40e:	d148      	bne.n	800b4a2 <_vfiprintf_r+0x10e>
 800b410:	1b73      	subs	r3, r6, r5
 800b412:	9305      	str	r3, [sp, #20]
 800b414:	42ae      	cmp	r6, r5
 800b416:	d00b      	beq.n	800b430 <_vfiprintf_r+0x9c>
 800b418:	002a      	movs	r2, r5
 800b41a:	0039      	movs	r1, r7
 800b41c:	9803      	ldr	r0, [sp, #12]
 800b41e:	f7ff ffa6 	bl	800b36e <__sfputs_r>
 800b422:	3001      	adds	r0, #1
 800b424:	d100      	bne.n	800b428 <_vfiprintf_r+0x94>
 800b426:	e0ae      	b.n	800b586 <_vfiprintf_r+0x1f2>
 800b428:	6963      	ldr	r3, [r4, #20]
 800b42a:	9a05      	ldr	r2, [sp, #20]
 800b42c:	189b      	adds	r3, r3, r2
 800b42e:	6163      	str	r3, [r4, #20]
 800b430:	7833      	ldrb	r3, [r6, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d100      	bne.n	800b438 <_vfiprintf_r+0xa4>
 800b436:	e0a6      	b.n	800b586 <_vfiprintf_r+0x1f2>
 800b438:	2201      	movs	r2, #1
 800b43a:	2300      	movs	r3, #0
 800b43c:	4252      	negs	r2, r2
 800b43e:	6062      	str	r2, [r4, #4]
 800b440:	a904      	add	r1, sp, #16
 800b442:	3254      	adds	r2, #84	@ 0x54
 800b444:	1852      	adds	r2, r2, r1
 800b446:	1c75      	adds	r5, r6, #1
 800b448:	6023      	str	r3, [r4, #0]
 800b44a:	60e3      	str	r3, [r4, #12]
 800b44c:	60a3      	str	r3, [r4, #8]
 800b44e:	7013      	strb	r3, [r2, #0]
 800b450:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b452:	4b59      	ldr	r3, [pc, #356]	@ (800b5b8 <_vfiprintf_r+0x224>)
 800b454:	2205      	movs	r2, #5
 800b456:	0018      	movs	r0, r3
 800b458:	7829      	ldrb	r1, [r5, #0]
 800b45a:	9305      	str	r3, [sp, #20]
 800b45c:	f000 fb86 	bl	800bb6c <memchr>
 800b460:	1c6e      	adds	r6, r5, #1
 800b462:	2800      	cmp	r0, #0
 800b464:	d11f      	bne.n	800b4a6 <_vfiprintf_r+0x112>
 800b466:	6822      	ldr	r2, [r4, #0]
 800b468:	06d3      	lsls	r3, r2, #27
 800b46a:	d504      	bpl.n	800b476 <_vfiprintf_r+0xe2>
 800b46c:	2353      	movs	r3, #83	@ 0x53
 800b46e:	a904      	add	r1, sp, #16
 800b470:	185b      	adds	r3, r3, r1
 800b472:	2120      	movs	r1, #32
 800b474:	7019      	strb	r1, [r3, #0]
 800b476:	0713      	lsls	r3, r2, #28
 800b478:	d504      	bpl.n	800b484 <_vfiprintf_r+0xf0>
 800b47a:	2353      	movs	r3, #83	@ 0x53
 800b47c:	a904      	add	r1, sp, #16
 800b47e:	185b      	adds	r3, r3, r1
 800b480:	212b      	movs	r1, #43	@ 0x2b
 800b482:	7019      	strb	r1, [r3, #0]
 800b484:	782b      	ldrb	r3, [r5, #0]
 800b486:	2b2a      	cmp	r3, #42	@ 0x2a
 800b488:	d016      	beq.n	800b4b8 <_vfiprintf_r+0x124>
 800b48a:	002e      	movs	r6, r5
 800b48c:	2100      	movs	r1, #0
 800b48e:	200a      	movs	r0, #10
 800b490:	68e3      	ldr	r3, [r4, #12]
 800b492:	7832      	ldrb	r2, [r6, #0]
 800b494:	1c75      	adds	r5, r6, #1
 800b496:	3a30      	subs	r2, #48	@ 0x30
 800b498:	2a09      	cmp	r2, #9
 800b49a:	d950      	bls.n	800b53e <_vfiprintf_r+0x1aa>
 800b49c:	2900      	cmp	r1, #0
 800b49e:	d111      	bne.n	800b4c4 <_vfiprintf_r+0x130>
 800b4a0:	e017      	b.n	800b4d2 <_vfiprintf_r+0x13e>
 800b4a2:	3601      	adds	r6, #1
 800b4a4:	e7af      	b.n	800b406 <_vfiprintf_r+0x72>
 800b4a6:	9b05      	ldr	r3, [sp, #20]
 800b4a8:	6822      	ldr	r2, [r4, #0]
 800b4aa:	1ac0      	subs	r0, r0, r3
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	4083      	lsls	r3, r0
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	0035      	movs	r5, r6
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	e7cc      	b.n	800b452 <_vfiprintf_r+0xbe>
 800b4b8:	9b07      	ldr	r3, [sp, #28]
 800b4ba:	1d19      	adds	r1, r3, #4
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	9107      	str	r1, [sp, #28]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	db01      	blt.n	800b4c8 <_vfiprintf_r+0x134>
 800b4c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4c6:	e004      	b.n	800b4d2 <_vfiprintf_r+0x13e>
 800b4c8:	425b      	negs	r3, r3
 800b4ca:	60e3      	str	r3, [r4, #12]
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	7833      	ldrb	r3, [r6, #0]
 800b4d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4d6:	d10c      	bne.n	800b4f2 <_vfiprintf_r+0x15e>
 800b4d8:	7873      	ldrb	r3, [r6, #1]
 800b4da:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4dc:	d134      	bne.n	800b548 <_vfiprintf_r+0x1b4>
 800b4de:	9b07      	ldr	r3, [sp, #28]
 800b4e0:	3602      	adds	r6, #2
 800b4e2:	1d1a      	adds	r2, r3, #4
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	9207      	str	r2, [sp, #28]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	da01      	bge.n	800b4f0 <_vfiprintf_r+0x15c>
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	425b      	negs	r3, r3
 800b4f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4f2:	4d32      	ldr	r5, [pc, #200]	@ (800b5bc <_vfiprintf_r+0x228>)
 800b4f4:	2203      	movs	r2, #3
 800b4f6:	0028      	movs	r0, r5
 800b4f8:	7831      	ldrb	r1, [r6, #0]
 800b4fa:	f000 fb37 	bl	800bb6c <memchr>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d006      	beq.n	800b510 <_vfiprintf_r+0x17c>
 800b502:	2340      	movs	r3, #64	@ 0x40
 800b504:	1b40      	subs	r0, r0, r5
 800b506:	4083      	lsls	r3, r0
 800b508:	6822      	ldr	r2, [r4, #0]
 800b50a:	3601      	adds	r6, #1
 800b50c:	4313      	orrs	r3, r2
 800b50e:	6023      	str	r3, [r4, #0]
 800b510:	7831      	ldrb	r1, [r6, #0]
 800b512:	2206      	movs	r2, #6
 800b514:	482a      	ldr	r0, [pc, #168]	@ (800b5c0 <_vfiprintf_r+0x22c>)
 800b516:	1c75      	adds	r5, r6, #1
 800b518:	7621      	strb	r1, [r4, #24]
 800b51a:	f000 fb27 	bl	800bb6c <memchr>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d040      	beq.n	800b5a4 <_vfiprintf_r+0x210>
 800b522:	4b28      	ldr	r3, [pc, #160]	@ (800b5c4 <_vfiprintf_r+0x230>)
 800b524:	2b00      	cmp	r3, #0
 800b526:	d122      	bne.n	800b56e <_vfiprintf_r+0x1da>
 800b528:	2207      	movs	r2, #7
 800b52a:	9b07      	ldr	r3, [sp, #28]
 800b52c:	3307      	adds	r3, #7
 800b52e:	4393      	bics	r3, r2
 800b530:	3308      	adds	r3, #8
 800b532:	9307      	str	r3, [sp, #28]
 800b534:	6963      	ldr	r3, [r4, #20]
 800b536:	9a04      	ldr	r2, [sp, #16]
 800b538:	189b      	adds	r3, r3, r2
 800b53a:	6163      	str	r3, [r4, #20]
 800b53c:	e762      	b.n	800b404 <_vfiprintf_r+0x70>
 800b53e:	4343      	muls	r3, r0
 800b540:	002e      	movs	r6, r5
 800b542:	2101      	movs	r1, #1
 800b544:	189b      	adds	r3, r3, r2
 800b546:	e7a4      	b.n	800b492 <_vfiprintf_r+0xfe>
 800b548:	2300      	movs	r3, #0
 800b54a:	200a      	movs	r0, #10
 800b54c:	0019      	movs	r1, r3
 800b54e:	3601      	adds	r6, #1
 800b550:	6063      	str	r3, [r4, #4]
 800b552:	7832      	ldrb	r2, [r6, #0]
 800b554:	1c75      	adds	r5, r6, #1
 800b556:	3a30      	subs	r2, #48	@ 0x30
 800b558:	2a09      	cmp	r2, #9
 800b55a:	d903      	bls.n	800b564 <_vfiprintf_r+0x1d0>
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d0c8      	beq.n	800b4f2 <_vfiprintf_r+0x15e>
 800b560:	9109      	str	r1, [sp, #36]	@ 0x24
 800b562:	e7c6      	b.n	800b4f2 <_vfiprintf_r+0x15e>
 800b564:	4341      	muls	r1, r0
 800b566:	002e      	movs	r6, r5
 800b568:	2301      	movs	r3, #1
 800b56a:	1889      	adds	r1, r1, r2
 800b56c:	e7f1      	b.n	800b552 <_vfiprintf_r+0x1be>
 800b56e:	aa07      	add	r2, sp, #28
 800b570:	9200      	str	r2, [sp, #0]
 800b572:	0021      	movs	r1, r4
 800b574:	003a      	movs	r2, r7
 800b576:	4b14      	ldr	r3, [pc, #80]	@ (800b5c8 <_vfiprintf_r+0x234>)
 800b578:	9803      	ldr	r0, [sp, #12]
 800b57a:	e000      	b.n	800b57e <_vfiprintf_r+0x1ea>
 800b57c:	bf00      	nop
 800b57e:	9004      	str	r0, [sp, #16]
 800b580:	9b04      	ldr	r3, [sp, #16]
 800b582:	3301      	adds	r3, #1
 800b584:	d1d6      	bne.n	800b534 <_vfiprintf_r+0x1a0>
 800b586:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b588:	07db      	lsls	r3, r3, #31
 800b58a:	d405      	bmi.n	800b598 <_vfiprintf_r+0x204>
 800b58c:	89bb      	ldrh	r3, [r7, #12]
 800b58e:	059b      	lsls	r3, r3, #22
 800b590:	d402      	bmi.n	800b598 <_vfiprintf_r+0x204>
 800b592:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b594:	f7ff fd2c 	bl	800aff0 <__retarget_lock_release_recursive>
 800b598:	89bb      	ldrh	r3, [r7, #12]
 800b59a:	065b      	lsls	r3, r3, #25
 800b59c:	d500      	bpl.n	800b5a0 <_vfiprintf_r+0x20c>
 800b59e:	e71e      	b.n	800b3de <_vfiprintf_r+0x4a>
 800b5a0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b5a2:	e71e      	b.n	800b3e2 <_vfiprintf_r+0x4e>
 800b5a4:	aa07      	add	r2, sp, #28
 800b5a6:	9200      	str	r2, [sp, #0]
 800b5a8:	0021      	movs	r1, r4
 800b5aa:	003a      	movs	r2, r7
 800b5ac:	4b06      	ldr	r3, [pc, #24]	@ (800b5c8 <_vfiprintf_r+0x234>)
 800b5ae:	9803      	ldr	r0, [sp, #12]
 800b5b0:	f000 f87c 	bl	800b6ac <_printf_i>
 800b5b4:	e7e3      	b.n	800b57e <_vfiprintf_r+0x1ea>
 800b5b6:	46c0      	nop			@ (mov r8, r8)
 800b5b8:	0800c770 	.word	0x0800c770
 800b5bc:	0800c776 	.word	0x0800c776
 800b5c0:	0800c77a 	.word	0x0800c77a
 800b5c4:	00000000 	.word	0x00000000
 800b5c8:	0800b36f 	.word	0x0800b36f

0800b5cc <_printf_common>:
 800b5cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5ce:	0016      	movs	r6, r2
 800b5d0:	9301      	str	r3, [sp, #4]
 800b5d2:	688a      	ldr	r2, [r1, #8]
 800b5d4:	690b      	ldr	r3, [r1, #16]
 800b5d6:	000c      	movs	r4, r1
 800b5d8:	9000      	str	r0, [sp, #0]
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	da00      	bge.n	800b5e0 <_printf_common+0x14>
 800b5de:	0013      	movs	r3, r2
 800b5e0:	0022      	movs	r2, r4
 800b5e2:	6033      	str	r3, [r6, #0]
 800b5e4:	3243      	adds	r2, #67	@ 0x43
 800b5e6:	7812      	ldrb	r2, [r2, #0]
 800b5e8:	2a00      	cmp	r2, #0
 800b5ea:	d001      	beq.n	800b5f0 <_printf_common+0x24>
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	6033      	str	r3, [r6, #0]
 800b5f0:	6823      	ldr	r3, [r4, #0]
 800b5f2:	069b      	lsls	r3, r3, #26
 800b5f4:	d502      	bpl.n	800b5fc <_printf_common+0x30>
 800b5f6:	6833      	ldr	r3, [r6, #0]
 800b5f8:	3302      	adds	r3, #2
 800b5fa:	6033      	str	r3, [r6, #0]
 800b5fc:	6822      	ldr	r2, [r4, #0]
 800b5fe:	2306      	movs	r3, #6
 800b600:	0015      	movs	r5, r2
 800b602:	401d      	ands	r5, r3
 800b604:	421a      	tst	r2, r3
 800b606:	d027      	beq.n	800b658 <_printf_common+0x8c>
 800b608:	0023      	movs	r3, r4
 800b60a:	3343      	adds	r3, #67	@ 0x43
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	1e5a      	subs	r2, r3, #1
 800b610:	4193      	sbcs	r3, r2
 800b612:	6822      	ldr	r2, [r4, #0]
 800b614:	0692      	lsls	r2, r2, #26
 800b616:	d430      	bmi.n	800b67a <_printf_common+0xae>
 800b618:	0022      	movs	r2, r4
 800b61a:	9901      	ldr	r1, [sp, #4]
 800b61c:	9800      	ldr	r0, [sp, #0]
 800b61e:	9d08      	ldr	r5, [sp, #32]
 800b620:	3243      	adds	r2, #67	@ 0x43
 800b622:	47a8      	blx	r5
 800b624:	3001      	adds	r0, #1
 800b626:	d025      	beq.n	800b674 <_printf_common+0xa8>
 800b628:	2206      	movs	r2, #6
 800b62a:	6823      	ldr	r3, [r4, #0]
 800b62c:	2500      	movs	r5, #0
 800b62e:	4013      	ands	r3, r2
 800b630:	2b04      	cmp	r3, #4
 800b632:	d105      	bne.n	800b640 <_printf_common+0x74>
 800b634:	6833      	ldr	r3, [r6, #0]
 800b636:	68e5      	ldr	r5, [r4, #12]
 800b638:	1aed      	subs	r5, r5, r3
 800b63a:	43eb      	mvns	r3, r5
 800b63c:	17db      	asrs	r3, r3, #31
 800b63e:	401d      	ands	r5, r3
 800b640:	68a3      	ldr	r3, [r4, #8]
 800b642:	6922      	ldr	r2, [r4, #16]
 800b644:	4293      	cmp	r3, r2
 800b646:	dd01      	ble.n	800b64c <_printf_common+0x80>
 800b648:	1a9b      	subs	r3, r3, r2
 800b64a:	18ed      	adds	r5, r5, r3
 800b64c:	2600      	movs	r6, #0
 800b64e:	42b5      	cmp	r5, r6
 800b650:	d120      	bne.n	800b694 <_printf_common+0xc8>
 800b652:	2000      	movs	r0, #0
 800b654:	e010      	b.n	800b678 <_printf_common+0xac>
 800b656:	3501      	adds	r5, #1
 800b658:	68e3      	ldr	r3, [r4, #12]
 800b65a:	6832      	ldr	r2, [r6, #0]
 800b65c:	1a9b      	subs	r3, r3, r2
 800b65e:	42ab      	cmp	r3, r5
 800b660:	ddd2      	ble.n	800b608 <_printf_common+0x3c>
 800b662:	0022      	movs	r2, r4
 800b664:	2301      	movs	r3, #1
 800b666:	9901      	ldr	r1, [sp, #4]
 800b668:	9800      	ldr	r0, [sp, #0]
 800b66a:	9f08      	ldr	r7, [sp, #32]
 800b66c:	3219      	adds	r2, #25
 800b66e:	47b8      	blx	r7
 800b670:	3001      	adds	r0, #1
 800b672:	d1f0      	bne.n	800b656 <_printf_common+0x8a>
 800b674:	2001      	movs	r0, #1
 800b676:	4240      	negs	r0, r0
 800b678:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b67a:	2030      	movs	r0, #48	@ 0x30
 800b67c:	18e1      	adds	r1, r4, r3
 800b67e:	3143      	adds	r1, #67	@ 0x43
 800b680:	7008      	strb	r0, [r1, #0]
 800b682:	0021      	movs	r1, r4
 800b684:	1c5a      	adds	r2, r3, #1
 800b686:	3145      	adds	r1, #69	@ 0x45
 800b688:	7809      	ldrb	r1, [r1, #0]
 800b68a:	18a2      	adds	r2, r4, r2
 800b68c:	3243      	adds	r2, #67	@ 0x43
 800b68e:	3302      	adds	r3, #2
 800b690:	7011      	strb	r1, [r2, #0]
 800b692:	e7c1      	b.n	800b618 <_printf_common+0x4c>
 800b694:	0022      	movs	r2, r4
 800b696:	2301      	movs	r3, #1
 800b698:	9901      	ldr	r1, [sp, #4]
 800b69a:	9800      	ldr	r0, [sp, #0]
 800b69c:	9f08      	ldr	r7, [sp, #32]
 800b69e:	321a      	adds	r2, #26
 800b6a0:	47b8      	blx	r7
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	d0e6      	beq.n	800b674 <_printf_common+0xa8>
 800b6a6:	3601      	adds	r6, #1
 800b6a8:	e7d1      	b.n	800b64e <_printf_common+0x82>
	...

0800b6ac <_printf_i>:
 800b6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6ae:	b08b      	sub	sp, #44	@ 0x2c
 800b6b0:	9206      	str	r2, [sp, #24]
 800b6b2:	000a      	movs	r2, r1
 800b6b4:	3243      	adds	r2, #67	@ 0x43
 800b6b6:	9307      	str	r3, [sp, #28]
 800b6b8:	9005      	str	r0, [sp, #20]
 800b6ba:	9203      	str	r2, [sp, #12]
 800b6bc:	7e0a      	ldrb	r2, [r1, #24]
 800b6be:	000c      	movs	r4, r1
 800b6c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b6c2:	2a78      	cmp	r2, #120	@ 0x78
 800b6c4:	d809      	bhi.n	800b6da <_printf_i+0x2e>
 800b6c6:	2a62      	cmp	r2, #98	@ 0x62
 800b6c8:	d80b      	bhi.n	800b6e2 <_printf_i+0x36>
 800b6ca:	2a00      	cmp	r2, #0
 800b6cc:	d100      	bne.n	800b6d0 <_printf_i+0x24>
 800b6ce:	e0ba      	b.n	800b846 <_printf_i+0x19a>
 800b6d0:	497a      	ldr	r1, [pc, #488]	@ (800b8bc <_printf_i+0x210>)
 800b6d2:	9104      	str	r1, [sp, #16]
 800b6d4:	2a58      	cmp	r2, #88	@ 0x58
 800b6d6:	d100      	bne.n	800b6da <_printf_i+0x2e>
 800b6d8:	e08e      	b.n	800b7f8 <_printf_i+0x14c>
 800b6da:	0025      	movs	r5, r4
 800b6dc:	3542      	adds	r5, #66	@ 0x42
 800b6de:	702a      	strb	r2, [r5, #0]
 800b6e0:	e022      	b.n	800b728 <_printf_i+0x7c>
 800b6e2:	0010      	movs	r0, r2
 800b6e4:	3863      	subs	r0, #99	@ 0x63
 800b6e6:	2815      	cmp	r0, #21
 800b6e8:	d8f7      	bhi.n	800b6da <_printf_i+0x2e>
 800b6ea:	f7f4 fd1f 	bl	800012c <__gnu_thumb1_case_shi>
 800b6ee:	0016      	.short	0x0016
 800b6f0:	fff6001f 	.word	0xfff6001f
 800b6f4:	fff6fff6 	.word	0xfff6fff6
 800b6f8:	001ffff6 	.word	0x001ffff6
 800b6fc:	fff6fff6 	.word	0xfff6fff6
 800b700:	fff6fff6 	.word	0xfff6fff6
 800b704:	0036009f 	.word	0x0036009f
 800b708:	fff6007e 	.word	0xfff6007e
 800b70c:	00b0fff6 	.word	0x00b0fff6
 800b710:	0036fff6 	.word	0x0036fff6
 800b714:	fff6fff6 	.word	0xfff6fff6
 800b718:	0082      	.short	0x0082
 800b71a:	0025      	movs	r5, r4
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	3542      	adds	r5, #66	@ 0x42
 800b720:	1d11      	adds	r1, r2, #4
 800b722:	6019      	str	r1, [r3, #0]
 800b724:	6813      	ldr	r3, [r2, #0]
 800b726:	702b      	strb	r3, [r5, #0]
 800b728:	2301      	movs	r3, #1
 800b72a:	e09e      	b.n	800b86a <_printf_i+0x1be>
 800b72c:	6818      	ldr	r0, [r3, #0]
 800b72e:	6809      	ldr	r1, [r1, #0]
 800b730:	1d02      	adds	r2, r0, #4
 800b732:	060d      	lsls	r5, r1, #24
 800b734:	d50b      	bpl.n	800b74e <_printf_i+0xa2>
 800b736:	6806      	ldr	r6, [r0, #0]
 800b738:	601a      	str	r2, [r3, #0]
 800b73a:	2e00      	cmp	r6, #0
 800b73c:	da03      	bge.n	800b746 <_printf_i+0x9a>
 800b73e:	232d      	movs	r3, #45	@ 0x2d
 800b740:	9a03      	ldr	r2, [sp, #12]
 800b742:	4276      	negs	r6, r6
 800b744:	7013      	strb	r3, [r2, #0]
 800b746:	4b5d      	ldr	r3, [pc, #372]	@ (800b8bc <_printf_i+0x210>)
 800b748:	270a      	movs	r7, #10
 800b74a:	9304      	str	r3, [sp, #16]
 800b74c:	e018      	b.n	800b780 <_printf_i+0xd4>
 800b74e:	6806      	ldr	r6, [r0, #0]
 800b750:	601a      	str	r2, [r3, #0]
 800b752:	0649      	lsls	r1, r1, #25
 800b754:	d5f1      	bpl.n	800b73a <_printf_i+0x8e>
 800b756:	b236      	sxth	r6, r6
 800b758:	e7ef      	b.n	800b73a <_printf_i+0x8e>
 800b75a:	6808      	ldr	r0, [r1, #0]
 800b75c:	6819      	ldr	r1, [r3, #0]
 800b75e:	c940      	ldmia	r1!, {r6}
 800b760:	0605      	lsls	r5, r0, #24
 800b762:	d402      	bmi.n	800b76a <_printf_i+0xbe>
 800b764:	0640      	lsls	r0, r0, #25
 800b766:	d500      	bpl.n	800b76a <_printf_i+0xbe>
 800b768:	b2b6      	uxth	r6, r6
 800b76a:	6019      	str	r1, [r3, #0]
 800b76c:	4b53      	ldr	r3, [pc, #332]	@ (800b8bc <_printf_i+0x210>)
 800b76e:	270a      	movs	r7, #10
 800b770:	9304      	str	r3, [sp, #16]
 800b772:	2a6f      	cmp	r2, #111	@ 0x6f
 800b774:	d100      	bne.n	800b778 <_printf_i+0xcc>
 800b776:	3f02      	subs	r7, #2
 800b778:	0023      	movs	r3, r4
 800b77a:	2200      	movs	r2, #0
 800b77c:	3343      	adds	r3, #67	@ 0x43
 800b77e:	701a      	strb	r2, [r3, #0]
 800b780:	6863      	ldr	r3, [r4, #4]
 800b782:	60a3      	str	r3, [r4, #8]
 800b784:	2b00      	cmp	r3, #0
 800b786:	db06      	blt.n	800b796 <_printf_i+0xea>
 800b788:	2104      	movs	r1, #4
 800b78a:	6822      	ldr	r2, [r4, #0]
 800b78c:	9d03      	ldr	r5, [sp, #12]
 800b78e:	438a      	bics	r2, r1
 800b790:	6022      	str	r2, [r4, #0]
 800b792:	4333      	orrs	r3, r6
 800b794:	d00c      	beq.n	800b7b0 <_printf_i+0x104>
 800b796:	9d03      	ldr	r5, [sp, #12]
 800b798:	0030      	movs	r0, r6
 800b79a:	0039      	movs	r1, r7
 800b79c:	f7f4 fd56 	bl	800024c <__aeabi_uidivmod>
 800b7a0:	9b04      	ldr	r3, [sp, #16]
 800b7a2:	3d01      	subs	r5, #1
 800b7a4:	5c5b      	ldrb	r3, [r3, r1]
 800b7a6:	702b      	strb	r3, [r5, #0]
 800b7a8:	0033      	movs	r3, r6
 800b7aa:	0006      	movs	r6, r0
 800b7ac:	429f      	cmp	r7, r3
 800b7ae:	d9f3      	bls.n	800b798 <_printf_i+0xec>
 800b7b0:	2f08      	cmp	r7, #8
 800b7b2:	d109      	bne.n	800b7c8 <_printf_i+0x11c>
 800b7b4:	6823      	ldr	r3, [r4, #0]
 800b7b6:	07db      	lsls	r3, r3, #31
 800b7b8:	d506      	bpl.n	800b7c8 <_printf_i+0x11c>
 800b7ba:	6862      	ldr	r2, [r4, #4]
 800b7bc:	6923      	ldr	r3, [r4, #16]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	dc02      	bgt.n	800b7c8 <_printf_i+0x11c>
 800b7c2:	2330      	movs	r3, #48	@ 0x30
 800b7c4:	3d01      	subs	r5, #1
 800b7c6:	702b      	strb	r3, [r5, #0]
 800b7c8:	9b03      	ldr	r3, [sp, #12]
 800b7ca:	1b5b      	subs	r3, r3, r5
 800b7cc:	6123      	str	r3, [r4, #16]
 800b7ce:	9b07      	ldr	r3, [sp, #28]
 800b7d0:	0021      	movs	r1, r4
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	9805      	ldr	r0, [sp, #20]
 800b7d6:	9b06      	ldr	r3, [sp, #24]
 800b7d8:	aa09      	add	r2, sp, #36	@ 0x24
 800b7da:	f7ff fef7 	bl	800b5cc <_printf_common>
 800b7de:	3001      	adds	r0, #1
 800b7e0:	d148      	bne.n	800b874 <_printf_i+0x1c8>
 800b7e2:	2001      	movs	r0, #1
 800b7e4:	4240      	negs	r0, r0
 800b7e6:	b00b      	add	sp, #44	@ 0x2c
 800b7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	6809      	ldr	r1, [r1, #0]
 800b7ee:	430a      	orrs	r2, r1
 800b7f0:	6022      	str	r2, [r4, #0]
 800b7f2:	2278      	movs	r2, #120	@ 0x78
 800b7f4:	4932      	ldr	r1, [pc, #200]	@ (800b8c0 <_printf_i+0x214>)
 800b7f6:	9104      	str	r1, [sp, #16]
 800b7f8:	0021      	movs	r1, r4
 800b7fa:	3145      	adds	r1, #69	@ 0x45
 800b7fc:	700a      	strb	r2, [r1, #0]
 800b7fe:	6819      	ldr	r1, [r3, #0]
 800b800:	6822      	ldr	r2, [r4, #0]
 800b802:	c940      	ldmia	r1!, {r6}
 800b804:	0610      	lsls	r0, r2, #24
 800b806:	d402      	bmi.n	800b80e <_printf_i+0x162>
 800b808:	0650      	lsls	r0, r2, #25
 800b80a:	d500      	bpl.n	800b80e <_printf_i+0x162>
 800b80c:	b2b6      	uxth	r6, r6
 800b80e:	6019      	str	r1, [r3, #0]
 800b810:	07d3      	lsls	r3, r2, #31
 800b812:	d502      	bpl.n	800b81a <_printf_i+0x16e>
 800b814:	2320      	movs	r3, #32
 800b816:	4313      	orrs	r3, r2
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	2e00      	cmp	r6, #0
 800b81c:	d001      	beq.n	800b822 <_printf_i+0x176>
 800b81e:	2710      	movs	r7, #16
 800b820:	e7aa      	b.n	800b778 <_printf_i+0xcc>
 800b822:	2220      	movs	r2, #32
 800b824:	6823      	ldr	r3, [r4, #0]
 800b826:	4393      	bics	r3, r2
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	e7f8      	b.n	800b81e <_printf_i+0x172>
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	680d      	ldr	r5, [r1, #0]
 800b830:	1d10      	adds	r0, r2, #4
 800b832:	6949      	ldr	r1, [r1, #20]
 800b834:	6018      	str	r0, [r3, #0]
 800b836:	6813      	ldr	r3, [r2, #0]
 800b838:	062e      	lsls	r6, r5, #24
 800b83a:	d501      	bpl.n	800b840 <_printf_i+0x194>
 800b83c:	6019      	str	r1, [r3, #0]
 800b83e:	e002      	b.n	800b846 <_printf_i+0x19a>
 800b840:	066d      	lsls	r5, r5, #25
 800b842:	d5fb      	bpl.n	800b83c <_printf_i+0x190>
 800b844:	8019      	strh	r1, [r3, #0]
 800b846:	2300      	movs	r3, #0
 800b848:	9d03      	ldr	r5, [sp, #12]
 800b84a:	6123      	str	r3, [r4, #16]
 800b84c:	e7bf      	b.n	800b7ce <_printf_i+0x122>
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	1d11      	adds	r1, r2, #4
 800b852:	6019      	str	r1, [r3, #0]
 800b854:	6815      	ldr	r5, [r2, #0]
 800b856:	2100      	movs	r1, #0
 800b858:	0028      	movs	r0, r5
 800b85a:	6862      	ldr	r2, [r4, #4]
 800b85c:	f000 f986 	bl	800bb6c <memchr>
 800b860:	2800      	cmp	r0, #0
 800b862:	d001      	beq.n	800b868 <_printf_i+0x1bc>
 800b864:	1b40      	subs	r0, r0, r5
 800b866:	6060      	str	r0, [r4, #4]
 800b868:	6863      	ldr	r3, [r4, #4]
 800b86a:	6123      	str	r3, [r4, #16]
 800b86c:	2300      	movs	r3, #0
 800b86e:	9a03      	ldr	r2, [sp, #12]
 800b870:	7013      	strb	r3, [r2, #0]
 800b872:	e7ac      	b.n	800b7ce <_printf_i+0x122>
 800b874:	002a      	movs	r2, r5
 800b876:	6923      	ldr	r3, [r4, #16]
 800b878:	9906      	ldr	r1, [sp, #24]
 800b87a:	9805      	ldr	r0, [sp, #20]
 800b87c:	9d07      	ldr	r5, [sp, #28]
 800b87e:	47a8      	blx	r5
 800b880:	3001      	adds	r0, #1
 800b882:	d0ae      	beq.n	800b7e2 <_printf_i+0x136>
 800b884:	6823      	ldr	r3, [r4, #0]
 800b886:	079b      	lsls	r3, r3, #30
 800b888:	d415      	bmi.n	800b8b6 <_printf_i+0x20a>
 800b88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b88c:	68e0      	ldr	r0, [r4, #12]
 800b88e:	4298      	cmp	r0, r3
 800b890:	daa9      	bge.n	800b7e6 <_printf_i+0x13a>
 800b892:	0018      	movs	r0, r3
 800b894:	e7a7      	b.n	800b7e6 <_printf_i+0x13a>
 800b896:	0022      	movs	r2, r4
 800b898:	2301      	movs	r3, #1
 800b89a:	9906      	ldr	r1, [sp, #24]
 800b89c:	9805      	ldr	r0, [sp, #20]
 800b89e:	9e07      	ldr	r6, [sp, #28]
 800b8a0:	3219      	adds	r2, #25
 800b8a2:	47b0      	blx	r6
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	d09c      	beq.n	800b7e2 <_printf_i+0x136>
 800b8a8:	3501      	adds	r5, #1
 800b8aa:	68e3      	ldr	r3, [r4, #12]
 800b8ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8ae:	1a9b      	subs	r3, r3, r2
 800b8b0:	42ab      	cmp	r3, r5
 800b8b2:	dcf0      	bgt.n	800b896 <_printf_i+0x1ea>
 800b8b4:	e7e9      	b.n	800b88a <_printf_i+0x1de>
 800b8b6:	2500      	movs	r5, #0
 800b8b8:	e7f7      	b.n	800b8aa <_printf_i+0x1fe>
 800b8ba:	46c0      	nop			@ (mov r8, r8)
 800b8bc:	0800c781 	.word	0x0800c781
 800b8c0:	0800c792 	.word	0x0800c792

0800b8c4 <__sflush_r>:
 800b8c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8c6:	220c      	movs	r2, #12
 800b8c8:	5e8b      	ldrsh	r3, [r1, r2]
 800b8ca:	0005      	movs	r5, r0
 800b8cc:	000c      	movs	r4, r1
 800b8ce:	071a      	lsls	r2, r3, #28
 800b8d0:	d456      	bmi.n	800b980 <__sflush_r+0xbc>
 800b8d2:	684a      	ldr	r2, [r1, #4]
 800b8d4:	2a00      	cmp	r2, #0
 800b8d6:	dc02      	bgt.n	800b8de <__sflush_r+0x1a>
 800b8d8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800b8da:	2a00      	cmp	r2, #0
 800b8dc:	dd4e      	ble.n	800b97c <__sflush_r+0xb8>
 800b8de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b8e0:	2f00      	cmp	r7, #0
 800b8e2:	d04b      	beq.n	800b97c <__sflush_r+0xb8>
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2080      	movs	r0, #128	@ 0x80
 800b8e8:	682e      	ldr	r6, [r5, #0]
 800b8ea:	602a      	str	r2, [r5, #0]
 800b8ec:	001a      	movs	r2, r3
 800b8ee:	0140      	lsls	r0, r0, #5
 800b8f0:	6a21      	ldr	r1, [r4, #32]
 800b8f2:	4002      	ands	r2, r0
 800b8f4:	4203      	tst	r3, r0
 800b8f6:	d033      	beq.n	800b960 <__sflush_r+0x9c>
 800b8f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b8fa:	89a3      	ldrh	r3, [r4, #12]
 800b8fc:	075b      	lsls	r3, r3, #29
 800b8fe:	d506      	bpl.n	800b90e <__sflush_r+0x4a>
 800b900:	6863      	ldr	r3, [r4, #4]
 800b902:	1ad2      	subs	r2, r2, r3
 800b904:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b906:	2b00      	cmp	r3, #0
 800b908:	d001      	beq.n	800b90e <__sflush_r+0x4a>
 800b90a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b90c:	1ad2      	subs	r2, r2, r3
 800b90e:	2300      	movs	r3, #0
 800b910:	0028      	movs	r0, r5
 800b912:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b914:	6a21      	ldr	r1, [r4, #32]
 800b916:	47b8      	blx	r7
 800b918:	89a2      	ldrh	r2, [r4, #12]
 800b91a:	1c43      	adds	r3, r0, #1
 800b91c:	d106      	bne.n	800b92c <__sflush_r+0x68>
 800b91e:	6829      	ldr	r1, [r5, #0]
 800b920:	291d      	cmp	r1, #29
 800b922:	d846      	bhi.n	800b9b2 <__sflush_r+0xee>
 800b924:	4b29      	ldr	r3, [pc, #164]	@ (800b9cc <__sflush_r+0x108>)
 800b926:	40cb      	lsrs	r3, r1
 800b928:	07db      	lsls	r3, r3, #31
 800b92a:	d542      	bpl.n	800b9b2 <__sflush_r+0xee>
 800b92c:	2300      	movs	r3, #0
 800b92e:	6063      	str	r3, [r4, #4]
 800b930:	6923      	ldr	r3, [r4, #16]
 800b932:	6023      	str	r3, [r4, #0]
 800b934:	04d2      	lsls	r2, r2, #19
 800b936:	d505      	bpl.n	800b944 <__sflush_r+0x80>
 800b938:	1c43      	adds	r3, r0, #1
 800b93a:	d102      	bne.n	800b942 <__sflush_r+0x7e>
 800b93c:	682b      	ldr	r3, [r5, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d100      	bne.n	800b944 <__sflush_r+0x80>
 800b942:	6560      	str	r0, [r4, #84]	@ 0x54
 800b944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b946:	602e      	str	r6, [r5, #0]
 800b948:	2900      	cmp	r1, #0
 800b94a:	d017      	beq.n	800b97c <__sflush_r+0xb8>
 800b94c:	0023      	movs	r3, r4
 800b94e:	3344      	adds	r3, #68	@ 0x44
 800b950:	4299      	cmp	r1, r3
 800b952:	d002      	beq.n	800b95a <__sflush_r+0x96>
 800b954:	0028      	movs	r0, r5
 800b956:	f7ff fb4d 	bl	800aff4 <_free_r>
 800b95a:	2300      	movs	r3, #0
 800b95c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b95e:	e00d      	b.n	800b97c <__sflush_r+0xb8>
 800b960:	2301      	movs	r3, #1
 800b962:	0028      	movs	r0, r5
 800b964:	47b8      	blx	r7
 800b966:	0002      	movs	r2, r0
 800b968:	1c43      	adds	r3, r0, #1
 800b96a:	d1c6      	bne.n	800b8fa <__sflush_r+0x36>
 800b96c:	682b      	ldr	r3, [r5, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d0c3      	beq.n	800b8fa <__sflush_r+0x36>
 800b972:	2b1d      	cmp	r3, #29
 800b974:	d001      	beq.n	800b97a <__sflush_r+0xb6>
 800b976:	2b16      	cmp	r3, #22
 800b978:	d11a      	bne.n	800b9b0 <__sflush_r+0xec>
 800b97a:	602e      	str	r6, [r5, #0]
 800b97c:	2000      	movs	r0, #0
 800b97e:	e01e      	b.n	800b9be <__sflush_r+0xfa>
 800b980:	690e      	ldr	r6, [r1, #16]
 800b982:	2e00      	cmp	r6, #0
 800b984:	d0fa      	beq.n	800b97c <__sflush_r+0xb8>
 800b986:	680f      	ldr	r7, [r1, #0]
 800b988:	600e      	str	r6, [r1, #0]
 800b98a:	1bba      	subs	r2, r7, r6
 800b98c:	9201      	str	r2, [sp, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	079b      	lsls	r3, r3, #30
 800b992:	d100      	bne.n	800b996 <__sflush_r+0xd2>
 800b994:	694a      	ldr	r2, [r1, #20]
 800b996:	60a2      	str	r2, [r4, #8]
 800b998:	9b01      	ldr	r3, [sp, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	ddee      	ble.n	800b97c <__sflush_r+0xb8>
 800b99e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b9a0:	0032      	movs	r2, r6
 800b9a2:	001f      	movs	r7, r3
 800b9a4:	0028      	movs	r0, r5
 800b9a6:	9b01      	ldr	r3, [sp, #4]
 800b9a8:	6a21      	ldr	r1, [r4, #32]
 800b9aa:	47b8      	blx	r7
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	dc07      	bgt.n	800b9c0 <__sflush_r+0xfc>
 800b9b0:	89a2      	ldrh	r2, [r4, #12]
 800b9b2:	2340      	movs	r3, #64	@ 0x40
 800b9b4:	2001      	movs	r0, #1
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	b21b      	sxth	r3, r3
 800b9ba:	81a3      	strh	r3, [r4, #12]
 800b9bc:	4240      	negs	r0, r0
 800b9be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b9c0:	9b01      	ldr	r3, [sp, #4]
 800b9c2:	1836      	adds	r6, r6, r0
 800b9c4:	1a1b      	subs	r3, r3, r0
 800b9c6:	9301      	str	r3, [sp, #4]
 800b9c8:	e7e6      	b.n	800b998 <__sflush_r+0xd4>
 800b9ca:	46c0      	nop			@ (mov r8, r8)
 800b9cc:	20400001 	.word	0x20400001

0800b9d0 <_fflush_r>:
 800b9d0:	690b      	ldr	r3, [r1, #16]
 800b9d2:	b570      	push	{r4, r5, r6, lr}
 800b9d4:	0005      	movs	r5, r0
 800b9d6:	000c      	movs	r4, r1
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d102      	bne.n	800b9e2 <_fflush_r+0x12>
 800b9dc:	2500      	movs	r5, #0
 800b9de:	0028      	movs	r0, r5
 800b9e0:	bd70      	pop	{r4, r5, r6, pc}
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d004      	beq.n	800b9f0 <_fflush_r+0x20>
 800b9e6:	6a03      	ldr	r3, [r0, #32]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <_fflush_r+0x20>
 800b9ec:	f7ff f8a6 	bl	800ab3c <__sinit>
 800b9f0:	220c      	movs	r2, #12
 800b9f2:	5ea3      	ldrsh	r3, [r4, r2]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d0f1      	beq.n	800b9dc <_fflush_r+0xc>
 800b9f8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9fa:	07d2      	lsls	r2, r2, #31
 800b9fc:	d404      	bmi.n	800ba08 <_fflush_r+0x38>
 800b9fe:	059b      	lsls	r3, r3, #22
 800ba00:	d402      	bmi.n	800ba08 <_fflush_r+0x38>
 800ba02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba04:	f7ff faf3 	bl	800afee <__retarget_lock_acquire_recursive>
 800ba08:	0028      	movs	r0, r5
 800ba0a:	0021      	movs	r1, r4
 800ba0c:	f7ff ff5a 	bl	800b8c4 <__sflush_r>
 800ba10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba12:	0005      	movs	r5, r0
 800ba14:	07db      	lsls	r3, r3, #31
 800ba16:	d4e2      	bmi.n	800b9de <_fflush_r+0xe>
 800ba18:	89a3      	ldrh	r3, [r4, #12]
 800ba1a:	059b      	lsls	r3, r3, #22
 800ba1c:	d4df      	bmi.n	800b9de <_fflush_r+0xe>
 800ba1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba20:	f7ff fae6 	bl	800aff0 <__retarget_lock_release_recursive>
 800ba24:	e7db      	b.n	800b9de <_fflush_r+0xe>
	...

0800ba28 <__swhatbuf_r>:
 800ba28:	b570      	push	{r4, r5, r6, lr}
 800ba2a:	000e      	movs	r6, r1
 800ba2c:	001d      	movs	r5, r3
 800ba2e:	230e      	movs	r3, #14
 800ba30:	5ec9      	ldrsh	r1, [r1, r3]
 800ba32:	0014      	movs	r4, r2
 800ba34:	b096      	sub	sp, #88	@ 0x58
 800ba36:	2900      	cmp	r1, #0
 800ba38:	da0c      	bge.n	800ba54 <__swhatbuf_r+0x2c>
 800ba3a:	89b2      	ldrh	r2, [r6, #12]
 800ba3c:	2380      	movs	r3, #128	@ 0x80
 800ba3e:	0011      	movs	r1, r2
 800ba40:	4019      	ands	r1, r3
 800ba42:	421a      	tst	r2, r3
 800ba44:	d114      	bne.n	800ba70 <__swhatbuf_r+0x48>
 800ba46:	2380      	movs	r3, #128	@ 0x80
 800ba48:	00db      	lsls	r3, r3, #3
 800ba4a:	2000      	movs	r0, #0
 800ba4c:	6029      	str	r1, [r5, #0]
 800ba4e:	6023      	str	r3, [r4, #0]
 800ba50:	b016      	add	sp, #88	@ 0x58
 800ba52:	bd70      	pop	{r4, r5, r6, pc}
 800ba54:	466a      	mov	r2, sp
 800ba56:	f000 f865 	bl	800bb24 <_fstat_r>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	dbed      	blt.n	800ba3a <__swhatbuf_r+0x12>
 800ba5e:	23f0      	movs	r3, #240	@ 0xf0
 800ba60:	9901      	ldr	r1, [sp, #4]
 800ba62:	021b      	lsls	r3, r3, #8
 800ba64:	4019      	ands	r1, r3
 800ba66:	4b04      	ldr	r3, [pc, #16]	@ (800ba78 <__swhatbuf_r+0x50>)
 800ba68:	18c9      	adds	r1, r1, r3
 800ba6a:	424b      	negs	r3, r1
 800ba6c:	4159      	adcs	r1, r3
 800ba6e:	e7ea      	b.n	800ba46 <__swhatbuf_r+0x1e>
 800ba70:	2100      	movs	r1, #0
 800ba72:	2340      	movs	r3, #64	@ 0x40
 800ba74:	e7e9      	b.n	800ba4a <__swhatbuf_r+0x22>
 800ba76:	46c0      	nop			@ (mov r8, r8)
 800ba78:	ffffe000 	.word	0xffffe000

0800ba7c <__smakebuf_r>:
 800ba7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba7e:	2602      	movs	r6, #2
 800ba80:	898b      	ldrh	r3, [r1, #12]
 800ba82:	0005      	movs	r5, r0
 800ba84:	000c      	movs	r4, r1
 800ba86:	b085      	sub	sp, #20
 800ba88:	4233      	tst	r3, r6
 800ba8a:	d007      	beq.n	800ba9c <__smakebuf_r+0x20>
 800ba8c:	0023      	movs	r3, r4
 800ba8e:	3347      	adds	r3, #71	@ 0x47
 800ba90:	6023      	str	r3, [r4, #0]
 800ba92:	6123      	str	r3, [r4, #16]
 800ba94:	2301      	movs	r3, #1
 800ba96:	6163      	str	r3, [r4, #20]
 800ba98:	b005      	add	sp, #20
 800ba9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba9c:	ab03      	add	r3, sp, #12
 800ba9e:	aa02      	add	r2, sp, #8
 800baa0:	f7ff ffc2 	bl	800ba28 <__swhatbuf_r>
 800baa4:	9f02      	ldr	r7, [sp, #8]
 800baa6:	9001      	str	r0, [sp, #4]
 800baa8:	0039      	movs	r1, r7
 800baaa:	0028      	movs	r0, r5
 800baac:	f7fe ff26 	bl	800a8fc <_malloc_r>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d108      	bne.n	800bac6 <__smakebuf_r+0x4a>
 800bab4:	220c      	movs	r2, #12
 800bab6:	5ea3      	ldrsh	r3, [r4, r2]
 800bab8:	059a      	lsls	r2, r3, #22
 800baba:	d4ed      	bmi.n	800ba98 <__smakebuf_r+0x1c>
 800babc:	2203      	movs	r2, #3
 800babe:	4393      	bics	r3, r2
 800bac0:	431e      	orrs	r6, r3
 800bac2:	81a6      	strh	r6, [r4, #12]
 800bac4:	e7e2      	b.n	800ba8c <__smakebuf_r+0x10>
 800bac6:	2380      	movs	r3, #128	@ 0x80
 800bac8:	89a2      	ldrh	r2, [r4, #12]
 800baca:	6020      	str	r0, [r4, #0]
 800bacc:	4313      	orrs	r3, r2
 800bace:	81a3      	strh	r3, [r4, #12]
 800bad0:	9b03      	ldr	r3, [sp, #12]
 800bad2:	6120      	str	r0, [r4, #16]
 800bad4:	6167      	str	r7, [r4, #20]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00c      	beq.n	800baf4 <__smakebuf_r+0x78>
 800bada:	0028      	movs	r0, r5
 800badc:	230e      	movs	r3, #14
 800bade:	5ee1      	ldrsh	r1, [r4, r3]
 800bae0:	f000 f832 	bl	800bb48 <_isatty_r>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d005      	beq.n	800baf4 <__smakebuf_r+0x78>
 800bae8:	2303      	movs	r3, #3
 800baea:	89a2      	ldrh	r2, [r4, #12]
 800baec:	439a      	bics	r2, r3
 800baee:	3b02      	subs	r3, #2
 800baf0:	4313      	orrs	r3, r2
 800baf2:	81a3      	strh	r3, [r4, #12]
 800baf4:	89a3      	ldrh	r3, [r4, #12]
 800baf6:	9a01      	ldr	r2, [sp, #4]
 800baf8:	4313      	orrs	r3, r2
 800bafa:	81a3      	strh	r3, [r4, #12]
 800bafc:	e7cc      	b.n	800ba98 <__smakebuf_r+0x1c>

0800bafe <memmove>:
 800bafe:	b510      	push	{r4, lr}
 800bb00:	4288      	cmp	r0, r1
 800bb02:	d902      	bls.n	800bb0a <memmove+0xc>
 800bb04:	188b      	adds	r3, r1, r2
 800bb06:	4298      	cmp	r0, r3
 800bb08:	d308      	bcc.n	800bb1c <memmove+0x1e>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d007      	beq.n	800bb20 <memmove+0x22>
 800bb10:	5ccc      	ldrb	r4, [r1, r3]
 800bb12:	54c4      	strb	r4, [r0, r3]
 800bb14:	3301      	adds	r3, #1
 800bb16:	e7f9      	b.n	800bb0c <memmove+0xe>
 800bb18:	5c8b      	ldrb	r3, [r1, r2]
 800bb1a:	5483      	strb	r3, [r0, r2]
 800bb1c:	3a01      	subs	r2, #1
 800bb1e:	d2fb      	bcs.n	800bb18 <memmove+0x1a>
 800bb20:	bd10      	pop	{r4, pc}
	...

0800bb24 <_fstat_r>:
 800bb24:	2300      	movs	r3, #0
 800bb26:	b570      	push	{r4, r5, r6, lr}
 800bb28:	4d06      	ldr	r5, [pc, #24]	@ (800bb44 <_fstat_r+0x20>)
 800bb2a:	0004      	movs	r4, r0
 800bb2c:	0008      	movs	r0, r1
 800bb2e:	0011      	movs	r1, r2
 800bb30:	602b      	str	r3, [r5, #0]
 800bb32:	f7f6 f882 	bl	8001c3a <_fstat>
 800bb36:	1c43      	adds	r3, r0, #1
 800bb38:	d103      	bne.n	800bb42 <_fstat_r+0x1e>
 800bb3a:	682b      	ldr	r3, [r5, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d000      	beq.n	800bb42 <_fstat_r+0x1e>
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	bd70      	pop	{r4, r5, r6, pc}
 800bb44:	20000830 	.word	0x20000830

0800bb48 <_isatty_r>:
 800bb48:	2300      	movs	r3, #0
 800bb4a:	b570      	push	{r4, r5, r6, lr}
 800bb4c:	4d06      	ldr	r5, [pc, #24]	@ (800bb68 <_isatty_r+0x20>)
 800bb4e:	0004      	movs	r4, r0
 800bb50:	0008      	movs	r0, r1
 800bb52:	602b      	str	r3, [r5, #0]
 800bb54:	f7f6 f87f 	bl	8001c56 <_isatty>
 800bb58:	1c43      	adds	r3, r0, #1
 800bb5a:	d103      	bne.n	800bb64 <_isatty_r+0x1c>
 800bb5c:	682b      	ldr	r3, [r5, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d000      	beq.n	800bb64 <_isatty_r+0x1c>
 800bb62:	6023      	str	r3, [r4, #0]
 800bb64:	bd70      	pop	{r4, r5, r6, pc}
 800bb66:	46c0      	nop			@ (mov r8, r8)
 800bb68:	20000830 	.word	0x20000830

0800bb6c <memchr>:
 800bb6c:	b2c9      	uxtb	r1, r1
 800bb6e:	1882      	adds	r2, r0, r2
 800bb70:	4290      	cmp	r0, r2
 800bb72:	d101      	bne.n	800bb78 <memchr+0xc>
 800bb74:	2000      	movs	r0, #0
 800bb76:	4770      	bx	lr
 800bb78:	7803      	ldrb	r3, [r0, #0]
 800bb7a:	428b      	cmp	r3, r1
 800bb7c:	d0fb      	beq.n	800bb76 <memchr+0xa>
 800bb7e:	3001      	adds	r0, #1
 800bb80:	e7f6      	b.n	800bb70 <memchr+0x4>

0800bb82 <memcpy>:
 800bb82:	2300      	movs	r3, #0
 800bb84:	b510      	push	{r4, lr}
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d100      	bne.n	800bb8c <memcpy+0xa>
 800bb8a:	bd10      	pop	{r4, pc}
 800bb8c:	5ccc      	ldrb	r4, [r1, r3]
 800bb8e:	54c4      	strb	r4, [r0, r3]
 800bb90:	3301      	adds	r3, #1
 800bb92:	e7f8      	b.n	800bb86 <memcpy+0x4>

0800bb94 <_realloc_r>:
 800bb94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb96:	0006      	movs	r6, r0
 800bb98:	000c      	movs	r4, r1
 800bb9a:	0015      	movs	r5, r2
 800bb9c:	2900      	cmp	r1, #0
 800bb9e:	d105      	bne.n	800bbac <_realloc_r+0x18>
 800bba0:	0011      	movs	r1, r2
 800bba2:	f7fe feab 	bl	800a8fc <_malloc_r>
 800bba6:	0004      	movs	r4, r0
 800bba8:	0020      	movs	r0, r4
 800bbaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bbac:	2a00      	cmp	r2, #0
 800bbae:	d103      	bne.n	800bbb8 <_realloc_r+0x24>
 800bbb0:	f7ff fa20 	bl	800aff4 <_free_r>
 800bbb4:	002c      	movs	r4, r5
 800bbb6:	e7f7      	b.n	800bba8 <_realloc_r+0x14>
 800bbb8:	f000 f81c 	bl	800bbf4 <_malloc_usable_size_r>
 800bbbc:	0007      	movs	r7, r0
 800bbbe:	4285      	cmp	r5, r0
 800bbc0:	d802      	bhi.n	800bbc8 <_realloc_r+0x34>
 800bbc2:	0843      	lsrs	r3, r0, #1
 800bbc4:	42ab      	cmp	r3, r5
 800bbc6:	d3ef      	bcc.n	800bba8 <_realloc_r+0x14>
 800bbc8:	0029      	movs	r1, r5
 800bbca:	0030      	movs	r0, r6
 800bbcc:	f7fe fe96 	bl	800a8fc <_malloc_r>
 800bbd0:	9001      	str	r0, [sp, #4]
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d101      	bne.n	800bbda <_realloc_r+0x46>
 800bbd6:	9c01      	ldr	r4, [sp, #4]
 800bbd8:	e7e6      	b.n	800bba8 <_realloc_r+0x14>
 800bbda:	002a      	movs	r2, r5
 800bbdc:	42bd      	cmp	r5, r7
 800bbde:	d900      	bls.n	800bbe2 <_realloc_r+0x4e>
 800bbe0:	003a      	movs	r2, r7
 800bbe2:	0021      	movs	r1, r4
 800bbe4:	9801      	ldr	r0, [sp, #4]
 800bbe6:	f7ff ffcc 	bl	800bb82 <memcpy>
 800bbea:	0021      	movs	r1, r4
 800bbec:	0030      	movs	r0, r6
 800bbee:	f7ff fa01 	bl	800aff4 <_free_r>
 800bbf2:	e7f0      	b.n	800bbd6 <_realloc_r+0x42>

0800bbf4 <_malloc_usable_size_r>:
 800bbf4:	1f0b      	subs	r3, r1, #4
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	1f18      	subs	r0, r3, #4
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	da01      	bge.n	800bc02 <_malloc_usable_size_r+0xe>
 800bbfe:	580b      	ldr	r3, [r1, r0]
 800bc00:	18c0      	adds	r0, r0, r3
 800bc02:	4770      	bx	lr

0800bc04 <_init>:
 800bc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc06:	46c0      	nop			@ (mov r8, r8)
 800bc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc0a:	bc08      	pop	{r3}
 800bc0c:	469e      	mov	lr, r3
 800bc0e:	4770      	bx	lr

0800bc10 <_fini>:
 800bc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc12:	46c0      	nop			@ (mov r8, r8)
 800bc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc16:	bc08      	pop	{r3}
 800bc18:	469e      	mov	lr, r3
 800bc1a:	4770      	bx	lr
